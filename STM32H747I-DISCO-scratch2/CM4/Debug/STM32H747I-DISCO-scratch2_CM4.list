
STM32H747I-DISCO-scratch2_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d344  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0810d5dc  0810d5dc  0000e5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810d614  0810d614  0000e614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810d61c  0810d61c  0000e61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810d620  0810d620  0000e620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  10000000  0810d624  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDescripSection 00000060  10000010  0810d634  0000f010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDescripSection 00000060  10000070  0810d694  0000f070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dec  100000d0  0810d6f4  0000f0d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  10000ebc  0810d6f4  0000febc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f0d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003386a  00000000  00000000  0000f100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000050fb  00000000  00000000  0004296a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a50  00000000  00000000  00047a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002111  00000000  00000000  0004a4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004ae73  00000000  00000000  0004c5c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00035cc9  00000000  00000000  0009743c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001e0c81  00000000  00000000  000cd105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  002add86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bb38  00000000  00000000  002addcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  002b9904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	100000d0 	.word	0x100000d0
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810d5c4 	.word	0x0810d5c4

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	100000d4 	.word	0x100000d4
 81002d4:	0810d5c4 	.word	0x0810d5c4

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295
 81002ec:	f000 b988 	b.w	8100600 <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	468e      	mov	lr, r1
 8100310:	4604      	mov	r4, r0
 8100312:	4688      	mov	r8, r1
 8100314:	2b00      	cmp	r3, #0
 8100316:	d14a      	bne.n	81003ae <__udivmoddi4+0xa6>
 8100318:	428a      	cmp	r2, r1
 810031a:	4617      	mov	r7, r2
 810031c:	d962      	bls.n	81003e4 <__udivmoddi4+0xdc>
 810031e:	fab2 f682 	clz	r6, r2
 8100322:	b14e      	cbz	r6, 8100338 <__udivmoddi4+0x30>
 8100324:	f1c6 0320 	rsb	r3, r6, #32
 8100328:	fa01 f806 	lsl.w	r8, r1, r6
 810032c:	fa20 f303 	lsr.w	r3, r0, r3
 8100330:	40b7      	lsls	r7, r6
 8100332:	ea43 0808 	orr.w	r8, r3, r8
 8100336:	40b4      	lsls	r4, r6
 8100338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 810033c:	fa1f fc87 	uxth.w	ip, r7
 8100340:	fbb8 f1fe 	udiv	r1, r8, lr
 8100344:	0c23      	lsrs	r3, r4, #16
 8100346:	fb0e 8811 	mls	r8, lr, r1, r8
 810034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 810034e:	fb01 f20c 	mul.w	r2, r1, ip
 8100352:	429a      	cmp	r2, r3
 8100354:	d909      	bls.n	810036a <__udivmoddi4+0x62>
 8100356:	18fb      	adds	r3, r7, r3
 8100358:	f101 30ff 	add.w	r0, r1, #4294967295
 810035c:	f080 80ea 	bcs.w	8100534 <__udivmoddi4+0x22c>
 8100360:	429a      	cmp	r2, r3
 8100362:	f240 80e7 	bls.w	8100534 <__udivmoddi4+0x22c>
 8100366:	3902      	subs	r1, #2
 8100368:	443b      	add	r3, r7
 810036a:	1a9a      	subs	r2, r3, r2
 810036c:	b2a3      	uxth	r3, r4
 810036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8100372:	fb0e 2210 	mls	r2, lr, r0, r2
 8100376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810037a:	fb00 fc0c 	mul.w	ip, r0, ip
 810037e:	459c      	cmp	ip, r3
 8100380:	d909      	bls.n	8100396 <__udivmoddi4+0x8e>
 8100382:	18fb      	adds	r3, r7, r3
 8100384:	f100 32ff 	add.w	r2, r0, #4294967295
 8100388:	f080 80d6 	bcs.w	8100538 <__udivmoddi4+0x230>
 810038c:	459c      	cmp	ip, r3
 810038e:	f240 80d3 	bls.w	8100538 <__udivmoddi4+0x230>
 8100392:	443b      	add	r3, r7
 8100394:	3802      	subs	r0, #2
 8100396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 810039a:	eba3 030c 	sub.w	r3, r3, ip
 810039e:	2100      	movs	r1, #0
 81003a0:	b11d      	cbz	r5, 81003aa <__udivmoddi4+0xa2>
 81003a2:	40f3      	lsrs	r3, r6
 81003a4:	2200      	movs	r2, #0
 81003a6:	e9c5 3200 	strd	r3, r2, [r5]
 81003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003ae:	428b      	cmp	r3, r1
 81003b0:	d905      	bls.n	81003be <__udivmoddi4+0xb6>
 81003b2:	b10d      	cbz	r5, 81003b8 <__udivmoddi4+0xb0>
 81003b4:	e9c5 0100 	strd	r0, r1, [r5]
 81003b8:	2100      	movs	r1, #0
 81003ba:	4608      	mov	r0, r1
 81003bc:	e7f5      	b.n	81003aa <__udivmoddi4+0xa2>
 81003be:	fab3 f183 	clz	r1, r3
 81003c2:	2900      	cmp	r1, #0
 81003c4:	d146      	bne.n	8100454 <__udivmoddi4+0x14c>
 81003c6:	4573      	cmp	r3, lr
 81003c8:	d302      	bcc.n	81003d0 <__udivmoddi4+0xc8>
 81003ca:	4282      	cmp	r2, r0
 81003cc:	f200 8105 	bhi.w	81005da <__udivmoddi4+0x2d2>
 81003d0:	1a84      	subs	r4, r0, r2
 81003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 81003d6:	2001      	movs	r0, #1
 81003d8:	4690      	mov	r8, r2
 81003da:	2d00      	cmp	r5, #0
 81003dc:	d0e5      	beq.n	81003aa <__udivmoddi4+0xa2>
 81003de:	e9c5 4800 	strd	r4, r8, [r5]
 81003e2:	e7e2      	b.n	81003aa <__udivmoddi4+0xa2>
 81003e4:	2a00      	cmp	r2, #0
 81003e6:	f000 8090 	beq.w	810050a <__udivmoddi4+0x202>
 81003ea:	fab2 f682 	clz	r6, r2
 81003ee:	2e00      	cmp	r6, #0
 81003f0:	f040 80a4 	bne.w	810053c <__udivmoddi4+0x234>
 81003f4:	1a8a      	subs	r2, r1, r2
 81003f6:	0c03      	lsrs	r3, r0, #16
 81003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 81003fc:	b280      	uxth	r0, r0
 81003fe:	b2bc      	uxth	r4, r7
 8100400:	2101      	movs	r1, #1
 8100402:	fbb2 fcfe 	udiv	ip, r2, lr
 8100406:	fb0e 221c 	mls	r2, lr, ip, r2
 810040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810040e:	fb04 f20c 	mul.w	r2, r4, ip
 8100412:	429a      	cmp	r2, r3
 8100414:	d907      	bls.n	8100426 <__udivmoddi4+0x11e>
 8100416:	18fb      	adds	r3, r7, r3
 8100418:	f10c 38ff 	add.w	r8, ip, #4294967295
 810041c:	d202      	bcs.n	8100424 <__udivmoddi4+0x11c>
 810041e:	429a      	cmp	r2, r3
 8100420:	f200 80e0 	bhi.w	81005e4 <__udivmoddi4+0x2dc>
 8100424:	46c4      	mov	ip, r8
 8100426:	1a9b      	subs	r3, r3, r2
 8100428:	fbb3 f2fe 	udiv	r2, r3, lr
 810042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8100430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8100434:	fb02 f404 	mul.w	r4, r2, r4
 8100438:	429c      	cmp	r4, r3
 810043a:	d907      	bls.n	810044c <__udivmoddi4+0x144>
 810043c:	18fb      	adds	r3, r7, r3
 810043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8100442:	d202      	bcs.n	810044a <__udivmoddi4+0x142>
 8100444:	429c      	cmp	r4, r3
 8100446:	f200 80ca 	bhi.w	81005de <__udivmoddi4+0x2d6>
 810044a:	4602      	mov	r2, r0
 810044c:	1b1b      	subs	r3, r3, r4
 810044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8100452:	e7a5      	b.n	81003a0 <__udivmoddi4+0x98>
 8100454:	f1c1 0620 	rsb	r6, r1, #32
 8100458:	408b      	lsls	r3, r1
 810045a:	fa22 f706 	lsr.w	r7, r2, r6
 810045e:	431f      	orrs	r7, r3
 8100460:	fa0e f401 	lsl.w	r4, lr, r1
 8100464:	fa20 f306 	lsr.w	r3, r0, r6
 8100468:	fa2e fe06 	lsr.w	lr, lr, r6
 810046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8100470:	4323      	orrs	r3, r4
 8100472:	fa00 f801 	lsl.w	r8, r0, r1
 8100476:	fa1f fc87 	uxth.w	ip, r7
 810047a:	fbbe f0f9 	udiv	r0, lr, r9
 810047e:	0c1c      	lsrs	r4, r3, #16
 8100480:	fb09 ee10 	mls	lr, r9, r0, lr
 8100484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8100488:	fb00 fe0c 	mul.w	lr, r0, ip
 810048c:	45a6      	cmp	lr, r4
 810048e:	fa02 f201 	lsl.w	r2, r2, r1
 8100492:	d909      	bls.n	81004a8 <__udivmoddi4+0x1a0>
 8100494:	193c      	adds	r4, r7, r4
 8100496:	f100 3aff 	add.w	sl, r0, #4294967295
 810049a:	f080 809c 	bcs.w	81005d6 <__udivmoddi4+0x2ce>
 810049e:	45a6      	cmp	lr, r4
 81004a0:	f240 8099 	bls.w	81005d6 <__udivmoddi4+0x2ce>
 81004a4:	3802      	subs	r0, #2
 81004a6:	443c      	add	r4, r7
 81004a8:	eba4 040e 	sub.w	r4, r4, lr
 81004ac:	fa1f fe83 	uxth.w	lr, r3
 81004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 81004b4:	fb09 4413 	mls	r4, r9, r3, r4
 81004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 81004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 81004c0:	45a4      	cmp	ip, r4
 81004c2:	d908      	bls.n	81004d6 <__udivmoddi4+0x1ce>
 81004c4:	193c      	adds	r4, r7, r4
 81004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 81004ca:	f080 8082 	bcs.w	81005d2 <__udivmoddi4+0x2ca>
 81004ce:	45a4      	cmp	ip, r4
 81004d0:	d97f      	bls.n	81005d2 <__udivmoddi4+0x2ca>
 81004d2:	3b02      	subs	r3, #2
 81004d4:	443c      	add	r4, r7
 81004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 81004da:	eba4 040c 	sub.w	r4, r4, ip
 81004de:	fba0 ec02 	umull	lr, ip, r0, r2
 81004e2:	4564      	cmp	r4, ip
 81004e4:	4673      	mov	r3, lr
 81004e6:	46e1      	mov	r9, ip
 81004e8:	d362      	bcc.n	81005b0 <__udivmoddi4+0x2a8>
 81004ea:	d05f      	beq.n	81005ac <__udivmoddi4+0x2a4>
 81004ec:	b15d      	cbz	r5, 8100506 <__udivmoddi4+0x1fe>
 81004ee:	ebb8 0203 	subs.w	r2, r8, r3
 81004f2:	eb64 0409 	sbc.w	r4, r4, r9
 81004f6:	fa04 f606 	lsl.w	r6, r4, r6
 81004fa:	fa22 f301 	lsr.w	r3, r2, r1
 81004fe:	431e      	orrs	r6, r3
 8100500:	40cc      	lsrs	r4, r1
 8100502:	e9c5 6400 	strd	r6, r4, [r5]
 8100506:	2100      	movs	r1, #0
 8100508:	e74f      	b.n	81003aa <__udivmoddi4+0xa2>
 810050a:	fbb1 fcf2 	udiv	ip, r1, r2
 810050e:	0c01      	lsrs	r1, r0, #16
 8100510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8100514:	b280      	uxth	r0, r0
 8100516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 810051a:	463b      	mov	r3, r7
 810051c:	4638      	mov	r0, r7
 810051e:	463c      	mov	r4, r7
 8100520:	46b8      	mov	r8, r7
 8100522:	46be      	mov	lr, r7
 8100524:	2620      	movs	r6, #32
 8100526:	fbb1 f1f7 	udiv	r1, r1, r7
 810052a:	eba2 0208 	sub.w	r2, r2, r8
 810052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8100532:	e766      	b.n	8100402 <__udivmoddi4+0xfa>
 8100534:	4601      	mov	r1, r0
 8100536:	e718      	b.n	810036a <__udivmoddi4+0x62>
 8100538:	4610      	mov	r0, r2
 810053a:	e72c      	b.n	8100396 <__udivmoddi4+0x8e>
 810053c:	f1c6 0220 	rsb	r2, r6, #32
 8100540:	fa2e f302 	lsr.w	r3, lr, r2
 8100544:	40b7      	lsls	r7, r6
 8100546:	40b1      	lsls	r1, r6
 8100548:	fa20 f202 	lsr.w	r2, r0, r2
 810054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8100550:	430a      	orrs	r2, r1
 8100552:	fbb3 f8fe 	udiv	r8, r3, lr
 8100556:	b2bc      	uxth	r4, r7
 8100558:	fb0e 3318 	mls	r3, lr, r8, r3
 810055c:	0c11      	lsrs	r1, r2, #16
 810055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8100562:	fb08 f904 	mul.w	r9, r8, r4
 8100566:	40b0      	lsls	r0, r6
 8100568:	4589      	cmp	r9, r1
 810056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 810056e:	b280      	uxth	r0, r0
 8100570:	d93e      	bls.n	81005f0 <__udivmoddi4+0x2e8>
 8100572:	1879      	adds	r1, r7, r1
 8100574:	f108 3cff 	add.w	ip, r8, #4294967295
 8100578:	d201      	bcs.n	810057e <__udivmoddi4+0x276>
 810057a:	4589      	cmp	r9, r1
 810057c:	d81f      	bhi.n	81005be <__udivmoddi4+0x2b6>
 810057e:	eba1 0109 	sub.w	r1, r1, r9
 8100582:	fbb1 f9fe 	udiv	r9, r1, lr
 8100586:	fb09 f804 	mul.w	r8, r9, r4
 810058a:	fb0e 1119 	mls	r1, lr, r9, r1
 810058e:	b292      	uxth	r2, r2
 8100590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8100594:	4542      	cmp	r2, r8
 8100596:	d229      	bcs.n	81005ec <__udivmoddi4+0x2e4>
 8100598:	18ba      	adds	r2, r7, r2
 810059a:	f109 31ff 	add.w	r1, r9, #4294967295
 810059e:	d2c4      	bcs.n	810052a <__udivmoddi4+0x222>
 81005a0:	4542      	cmp	r2, r8
 81005a2:	d2c2      	bcs.n	810052a <__udivmoddi4+0x222>
 81005a4:	f1a9 0102 	sub.w	r1, r9, #2
 81005a8:	443a      	add	r2, r7
 81005aa:	e7be      	b.n	810052a <__udivmoddi4+0x222>
 81005ac:	45f0      	cmp	r8, lr
 81005ae:	d29d      	bcs.n	81004ec <__udivmoddi4+0x1e4>
 81005b0:	ebbe 0302 	subs.w	r3, lr, r2
 81005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 81005b8:	3801      	subs	r0, #1
 81005ba:	46e1      	mov	r9, ip
 81005bc:	e796      	b.n	81004ec <__udivmoddi4+0x1e4>
 81005be:	eba7 0909 	sub.w	r9, r7, r9
 81005c2:	4449      	add	r1, r9
 81005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 81005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 81005cc:	fb09 f804 	mul.w	r8, r9, r4
 81005d0:	e7db      	b.n	810058a <__udivmoddi4+0x282>
 81005d2:	4673      	mov	r3, lr
 81005d4:	e77f      	b.n	81004d6 <__udivmoddi4+0x1ce>
 81005d6:	4650      	mov	r0, sl
 81005d8:	e766      	b.n	81004a8 <__udivmoddi4+0x1a0>
 81005da:	4608      	mov	r0, r1
 81005dc:	e6fd      	b.n	81003da <__udivmoddi4+0xd2>
 81005de:	443b      	add	r3, r7
 81005e0:	3a02      	subs	r2, #2
 81005e2:	e733      	b.n	810044c <__udivmoddi4+0x144>
 81005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 81005e8:	443b      	add	r3, r7
 81005ea:	e71c      	b.n	8100426 <__udivmoddi4+0x11e>
 81005ec:	4649      	mov	r1, r9
 81005ee:	e79c      	b.n	810052a <__udivmoddi4+0x222>
 81005f0:	eba1 0109 	sub.w	r1, r1, r9
 81005f4:	46c4      	mov	ip, r8
 81005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 81005fa:	fb09 f804 	mul.w	r8, r9, r4
 81005fe:	e7c4      	b.n	810058a <__udivmoddi4+0x282>

08100600 <__aeabi_idiv0>:
 8100600:	4770      	bx	lr
 8100602:	bf00      	nop

08100604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100604:	b480      	push	{r7}
 8100606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100608:	4b09      	ldr	r3, [pc, #36]	@ (8100630 <SystemInit+0x2c>)
 810060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810060e:	4a08      	ldr	r2, [pc, #32]	@ (8100630 <SystemInit+0x2c>)
 8100610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8100614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100618:	4b05      	ldr	r3, [pc, #20]	@ (8100630 <SystemInit+0x2c>)
 810061a:	691b      	ldr	r3, [r3, #16]
 810061c:	4a04      	ldr	r2, [pc, #16]	@ (8100630 <SystemInit+0x2c>)
 810061e:	f043 0310 	orr.w	r3, r3, #16
 8100622:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100624:	bf00      	nop
 8100626:	46bd      	mov	sp, r7
 8100628:	f85d 7b04 	ldr.w	r7, [sp], #4
 810062c:	4770      	bx	lr
 810062e:	bf00      	nop
 8100630:	e000ed00 	.word	0xe000ed00

08100634 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8100634:	b480      	push	{r7}
 8100636:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8100638:	4b09      	ldr	r3, [pc, #36]	@ (8100660 <ExitRun0Mode+0x2c>)
 810063a:	68db      	ldr	r3, [r3, #12]
 810063c:	4a08      	ldr	r2, [pc, #32]	@ (8100660 <ExitRun0Mode+0x2c>)
 810063e:	f023 0302 	bic.w	r3, r3, #2
 8100642:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8100644:	bf00      	nop
 8100646:	4b06      	ldr	r3, [pc, #24]	@ (8100660 <ExitRun0Mode+0x2c>)
 8100648:	685b      	ldr	r3, [r3, #4]
 810064a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810064e:	2b00      	cmp	r3, #0
 8100650:	d0f9      	beq.n	8100646 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8100652:	bf00      	nop
 8100654:	bf00      	nop
 8100656:	46bd      	mov	sp, r7
 8100658:	f85d 7b04 	ldr.w	r7, [sp], #4
 810065c:	4770      	bx	lr
 810065e:	bf00      	nop
 8100660:	58024800 	.word	0x58024800

08100664 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100664:	b580      	push	{r7, lr}
 8100666:	b082      	sub	sp, #8
 8100668:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810066a:	4b2e      	ldr	r3, [pc, #184]	@ (8100724 <main+0xc0>)
 810066c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100670:	4a2c      	ldr	r2, [pc, #176]	@ (8100724 <main+0xc0>)
 8100672:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100676:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810067a:	4b2a      	ldr	r3, [pc, #168]	@ (8100724 <main+0xc0>)
 810067c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100684:	607b      	str	r3, [r7, #4]
 8100686:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100688:	2001      	movs	r0, #1
 810068a:	f004 fd2d 	bl	81050e8 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810068e:	f004 fee7 	bl	8105460 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100692:	2201      	movs	r2, #1
 8100694:	2102      	movs	r1, #2
 8100696:	2000      	movs	r0, #0
 8100698:	f004 fe68 	bl	810536c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810069c:	4b22      	ldr	r3, [pc, #136]	@ (8100728 <main+0xc4>)
 810069e:	681b      	ldr	r3, [r3, #0]
 81006a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81006a4:	2b70      	cmp	r3, #112	@ 0x70
 81006a6:	d108      	bne.n	81006ba <main+0x56>
 81006a8:	4b20      	ldr	r3, [pc, #128]	@ (810072c <main+0xc8>)
 81006aa:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81006ae:	4a1f      	ldr	r2, [pc, #124]	@ (810072c <main+0xc8>)
 81006b0:	f043 0301 	orr.w	r3, r3, #1
 81006b4:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81006b8:	e007      	b.n	81006ca <main+0x66>
 81006ba:	4b1c      	ldr	r3, [pc, #112]	@ (810072c <main+0xc8>)
 81006bc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81006c0:	4a1a      	ldr	r2, [pc, #104]	@ (810072c <main+0xc8>)
 81006c2:	f043 0301 	orr.w	r3, r3, #1
 81006c6:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81006ca:	f002 fa23 	bl	8102b14 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81006ce:	f000 fe89 	bl	81013e4 <MX_GPIO_Init>
  MX_ADC1_Init();
 81006d2:	f000 f82d 	bl	8100730 <MX_ADC1_Init>
  MX_ADC3_Init();
 81006d6:	f000 f8a7 	bl	8100828 <MX_ADC3_Init>
  MX_DFSDM1_Init();
 81006da:	f000 f90b 	bl	81008f4 <MX_DFSDM1_Init>
  MX_ETH_Init();
 81006de:	f000 f9a7 	bl	8100a30 <MX_ETH_Init>
  MX_FMC_Init();
 81006e2:	f000 fe31 	bl	8101348 <MX_FMC_Init>
  MX_HDMI_CEC_Init();
 81006e6:	f000 f9ef 	bl	8100ac8 <MX_HDMI_CEC_Init>
  MX_QUADSPI_Init();
 81006ea:	f000 fa21 	bl	8100b30 <MX_QUADSPI_Init>
  MX_RTC_Init();
 81006ee:	f000 fa47 	bl	8100b80 <MX_RTC_Init>
  MX_SAI1_Init();
 81006f2:	f000 fa93 	bl	8100c1c <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 81006f6:	f000 fb33 	bl	8100d60 <MX_SDMMC1_SD_Init>
  MX_SPDIFRX1_Init();
 81006fa:	f000 fb55 	bl	8100da8 <MX_SPDIFRX1_Init>
  MX_SPI2_Init();
 81006fe:	f000 fb8b 	bl	8100e18 <MX_SPI2_Init>
  MX_SPI5_Init();
 8100702:	f000 fbdd 	bl	8100ec0 <MX_SPI5_Init>
  MX_TIM8_Init();
 8100706:	f000 fc2f 	bl	8100f68 <MX_TIM8_Init>
  MX_TIM13_Init();
 810070a:	f000 fcbd 	bl	8101088 <MX_TIM13_Init>
  MX_UART8_Init();
 810070e:	f000 fd03 	bl	8101118 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8100712:	f000 fd4d 	bl	81011b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8100716:	f000 fd97 	bl	8101248 <MX_USART2_UART_Init>
  MX_USB_OTG_HS_PCD_Init();
 810071a:	f000 fde3 	bl	81012e4 <MX_USB_OTG_HS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 810071e:	bf00      	nop
 8100720:	e7fd      	b.n	810071e <main+0xba>
 8100722:	bf00      	nop
 8100724:	58024400 	.word	0x58024400
 8100728:	e000ed00 	.word	0xe000ed00
 810072c:	58026400 	.word	0x58026400

08100730 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8100730:	b580      	push	{r7, lr}
 8100732:	b08a      	sub	sp, #40	@ 0x28
 8100734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8100736:	f107 031c 	add.w	r3, r7, #28
 810073a:	2200      	movs	r2, #0
 810073c:	601a      	str	r2, [r3, #0]
 810073e:	605a      	str	r2, [r3, #4]
 8100740:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8100742:	463b      	mov	r3, r7
 8100744:	2200      	movs	r2, #0
 8100746:	601a      	str	r2, [r3, #0]
 8100748:	605a      	str	r2, [r3, #4]
 810074a:	609a      	str	r2, [r3, #8]
 810074c:	60da      	str	r2, [r3, #12]
 810074e:	611a      	str	r2, [r3, #16]
 8100750:	615a      	str	r2, [r3, #20]
 8100752:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8100754:	4b31      	ldr	r3, [pc, #196]	@ (810081c <MX_ADC1_Init+0xec>)
 8100756:	4a32      	ldr	r2, [pc, #200]	@ (8100820 <MX_ADC1_Init+0xf0>)
 8100758:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 810075a:	4b30      	ldr	r3, [pc, #192]	@ (810081c <MX_ADC1_Init+0xec>)
 810075c:	2200      	movs	r2, #0
 810075e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8100760:	4b2e      	ldr	r3, [pc, #184]	@ (810081c <MX_ADC1_Init+0xec>)
 8100762:	2200      	movs	r2, #0
 8100764:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8100766:	4b2d      	ldr	r3, [pc, #180]	@ (810081c <MX_ADC1_Init+0xec>)
 8100768:	2200      	movs	r2, #0
 810076a:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 810076c:	4b2b      	ldr	r3, [pc, #172]	@ (810081c <MX_ADC1_Init+0xec>)
 810076e:	2204      	movs	r2, #4
 8100770:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8100772:	4b2a      	ldr	r3, [pc, #168]	@ (810081c <MX_ADC1_Init+0xec>)
 8100774:	2200      	movs	r2, #0
 8100776:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8100778:	4b28      	ldr	r3, [pc, #160]	@ (810081c <MX_ADC1_Init+0xec>)
 810077a:	2200      	movs	r2, #0
 810077c:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 810077e:	4b27      	ldr	r3, [pc, #156]	@ (810081c <MX_ADC1_Init+0xec>)
 8100780:	2201      	movs	r2, #1
 8100782:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8100784:	4b25      	ldr	r3, [pc, #148]	@ (810081c <MX_ADC1_Init+0xec>)
 8100786:	2200      	movs	r2, #0
 8100788:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 810078a:	4b24      	ldr	r3, [pc, #144]	@ (810081c <MX_ADC1_Init+0xec>)
 810078c:	2200      	movs	r2, #0
 810078e:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8100790:	4b22      	ldr	r3, [pc, #136]	@ (810081c <MX_ADC1_Init+0xec>)
 8100792:	2200      	movs	r2, #0
 8100794:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8100796:	4b21      	ldr	r3, [pc, #132]	@ (810081c <MX_ADC1_Init+0xec>)
 8100798:	2200      	movs	r2, #0
 810079a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 810079c:	4b1f      	ldr	r3, [pc, #124]	@ (810081c <MX_ADC1_Init+0xec>)
 810079e:	2200      	movs	r2, #0
 81007a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 81007a2:	4b1e      	ldr	r3, [pc, #120]	@ (810081c <MX_ADC1_Init+0xec>)
 81007a4:	2200      	movs	r2, #0
 81007a6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 81007a8:	4b1c      	ldr	r3, [pc, #112]	@ (810081c <MX_ADC1_Init+0xec>)
 81007aa:	2200      	movs	r2, #0
 81007ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Oversampling.Ratio = 1;
 81007b0:	4b1a      	ldr	r3, [pc, #104]	@ (810081c <MX_ADC1_Init+0xec>)
 81007b2:	2201      	movs	r2, #1
 81007b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 81007b6:	4819      	ldr	r0, [pc, #100]	@ (810081c <MX_ADC1_Init+0xec>)
 81007b8:	f002 fc78 	bl	81030ac <HAL_ADC_Init>
 81007bc:	4603      	mov	r3, r0
 81007be:	2b00      	cmp	r3, #0
 81007c0:	d001      	beq.n	81007c6 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 81007c2:	f000 febf 	bl	8101544 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 81007c6:	2300      	movs	r3, #0
 81007c8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 81007ca:	f107 031c 	add.w	r3, r7, #28
 81007ce:	4619      	mov	r1, r3
 81007d0:	4812      	ldr	r0, [pc, #72]	@ (810081c <MX_ADC1_Init+0xec>)
 81007d2:	f003 fa2f 	bl	8103c34 <HAL_ADCEx_MultiModeConfigChannel>
 81007d6:	4603      	mov	r3, r0
 81007d8:	2b00      	cmp	r3, #0
 81007da:	d001      	beq.n	81007e0 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 81007dc:	f000 feb2 	bl	8101544 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 81007e0:	4b10      	ldr	r3, [pc, #64]	@ (8100824 <MX_ADC1_Init+0xf4>)
 81007e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81007e4:	2306      	movs	r3, #6
 81007e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 81007e8:	2300      	movs	r3, #0
 81007ea:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81007ec:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 81007f0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81007f2:	2304      	movs	r3, #4
 81007f4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 81007f6:	2300      	movs	r3, #0
 81007f8:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 81007fa:	2300      	movs	r3, #0
 81007fc:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 81007fe:	463b      	mov	r3, r7
 8100800:	4619      	mov	r1, r3
 8100802:	4806      	ldr	r0, [pc, #24]	@ (810081c <MX_ADC1_Init+0xec>)
 8100804:	f002 fdf4 	bl	81033f0 <HAL_ADC_ConfigChannel>
 8100808:	4603      	mov	r3, r0
 810080a:	2b00      	cmp	r3, #0
 810080c:	d001      	beq.n	8100812 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 810080e:	f000 fe99 	bl	8101544 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8100812:	bf00      	nop
 8100814:	3728      	adds	r7, #40	@ 0x28
 8100816:	46bd      	mov	sp, r7
 8100818:	bd80      	pop	{r7, pc}
 810081a:	bf00      	nop
 810081c:	10000124 	.word	0x10000124
 8100820:	40022000 	.word	0x40022000
 8100824:	04300002 	.word	0x04300002

08100828 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8100828:	b580      	push	{r7, lr}
 810082a:	b088      	sub	sp, #32
 810082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 810082e:	1d3b      	adds	r3, r7, #4
 8100830:	2200      	movs	r2, #0
 8100832:	601a      	str	r2, [r3, #0]
 8100834:	605a      	str	r2, [r3, #4]
 8100836:	609a      	str	r2, [r3, #8]
 8100838:	60da      	str	r2, [r3, #12]
 810083a:	611a      	str	r2, [r3, #16]
 810083c:	615a      	str	r2, [r3, #20]
 810083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8100840:	4b2a      	ldr	r3, [pc, #168]	@ (81008ec <MX_ADC3_Init+0xc4>)
 8100842:	4a2b      	ldr	r2, [pc, #172]	@ (81008f0 <MX_ADC3_Init+0xc8>)
 8100844:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8100846:	4b29      	ldr	r3, [pc, #164]	@ (81008ec <MX_ADC3_Init+0xc4>)
 8100848:	2200      	movs	r2, #0
 810084a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 810084c:	4b27      	ldr	r3, [pc, #156]	@ (81008ec <MX_ADC3_Init+0xc4>)
 810084e:	2200      	movs	r2, #0
 8100850:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8100852:	4b26      	ldr	r3, [pc, #152]	@ (81008ec <MX_ADC3_Init+0xc4>)
 8100854:	2200      	movs	r2, #0
 8100856:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8100858:	4b24      	ldr	r3, [pc, #144]	@ (81008ec <MX_ADC3_Init+0xc4>)
 810085a:	2204      	movs	r2, #4
 810085c:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 810085e:	4b23      	ldr	r3, [pc, #140]	@ (81008ec <MX_ADC3_Init+0xc4>)
 8100860:	2200      	movs	r2, #0
 8100862:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8100864:	4b21      	ldr	r3, [pc, #132]	@ (81008ec <MX_ADC3_Init+0xc4>)
 8100866:	2200      	movs	r2, #0
 8100868:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 810086a:	4b20      	ldr	r3, [pc, #128]	@ (81008ec <MX_ADC3_Init+0xc4>)
 810086c:	2201      	movs	r2, #1
 810086e:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8100870:	4b1e      	ldr	r3, [pc, #120]	@ (81008ec <MX_ADC3_Init+0xc4>)
 8100872:	2200      	movs	r2, #0
 8100874:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8100876:	4b1d      	ldr	r3, [pc, #116]	@ (81008ec <MX_ADC3_Init+0xc4>)
 8100878:	2200      	movs	r2, #0
 810087a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 810087c:	4b1b      	ldr	r3, [pc, #108]	@ (81008ec <MX_ADC3_Init+0xc4>)
 810087e:	2200      	movs	r2, #0
 8100880:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8100882:	4b1a      	ldr	r3, [pc, #104]	@ (81008ec <MX_ADC3_Init+0xc4>)
 8100884:	2200      	movs	r2, #0
 8100886:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8100888:	4b18      	ldr	r3, [pc, #96]	@ (81008ec <MX_ADC3_Init+0xc4>)
 810088a:	2200      	movs	r2, #0
 810088c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 810088e:	4b17      	ldr	r3, [pc, #92]	@ (81008ec <MX_ADC3_Init+0xc4>)
 8100890:	2200      	movs	r2, #0
 8100892:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8100894:	4b15      	ldr	r3, [pc, #84]	@ (81008ec <MX_ADC3_Init+0xc4>)
 8100896:	2200      	movs	r2, #0
 8100898:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 810089c:	4b13      	ldr	r3, [pc, #76]	@ (81008ec <MX_ADC3_Init+0xc4>)
 810089e:	2201      	movs	r2, #1
 81008a0:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 81008a2:	4812      	ldr	r0, [pc, #72]	@ (81008ec <MX_ADC3_Init+0xc4>)
 81008a4:	f002 fc02 	bl	81030ac <HAL_ADC_Init>
 81008a8:	4603      	mov	r3, r0
 81008aa:	2b00      	cmp	r3, #0
 81008ac:	d001      	beq.n	81008b2 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 81008ae:	f000 fe49 	bl	8101544 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 81008b2:	2301      	movs	r3, #1
 81008b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 81008b6:	2306      	movs	r3, #6
 81008b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 81008ba:	2300      	movs	r3, #0
 81008bc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 81008be:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 81008c2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 81008c4:	2304      	movs	r3, #4
 81008c6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 81008c8:	2300      	movs	r3, #0
 81008ca:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 81008cc:	2300      	movs	r3, #0
 81008ce:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 81008d0:	1d3b      	adds	r3, r7, #4
 81008d2:	4619      	mov	r1, r3
 81008d4:	4805      	ldr	r0, [pc, #20]	@ (81008ec <MX_ADC3_Init+0xc4>)
 81008d6:	f002 fd8b 	bl	81033f0 <HAL_ADC_ConfigChannel>
 81008da:	4603      	mov	r3, r0
 81008dc:	2b00      	cmp	r3, #0
 81008de:	d001      	beq.n	81008e4 <MX_ADC3_Init+0xbc>
  {
    Error_Handler();
 81008e0:	f000 fe30 	bl	8101544 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 81008e4:	bf00      	nop
 81008e6:	3720      	adds	r7, #32
 81008e8:	46bd      	mov	sp, r7
 81008ea:	bd80      	pop	{r7, pc}
 81008ec:	10000188 	.word	0x10000188
 81008f0:	58026000 	.word	0x58026000

081008f4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 81008f4:	b580      	push	{r7, lr}
 81008f6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 81008f8:	4b47      	ldr	r3, [pc, #284]	@ (8100a18 <MX_DFSDM1_Init+0x124>)
 81008fa:	4a48      	ldr	r2, [pc, #288]	@ (8100a1c <MX_DFSDM1_Init+0x128>)
 81008fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 81008fe:	4b46      	ldr	r3, [pc, #280]	@ (8100a18 <MX_DFSDM1_Init+0x124>)
 8100900:	2201      	movs	r2, #1
 8100902:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8100904:	4b44      	ldr	r3, [pc, #272]	@ (8100a18 <MX_DFSDM1_Init+0x124>)
 8100906:	2200      	movs	r2, #0
 8100908:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 810090a:	4b43      	ldr	r3, [pc, #268]	@ (8100a18 <MX_DFSDM1_Init+0x124>)
 810090c:	2202      	movs	r2, #2
 810090e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 8100910:	4b41      	ldr	r3, [pc, #260]	@ (8100a18 <MX_DFSDM1_Init+0x124>)
 8100912:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8100916:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8100918:	4b3f      	ldr	r3, [pc, #252]	@ (8100a18 <MX_DFSDM1_Init+0x124>)
 810091a:	2200      	movs	r2, #0
 810091c:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 810091e:	4b3e      	ldr	r3, [pc, #248]	@ (8100a18 <MX_DFSDM1_Init+0x124>)
 8100920:	2200      	movs	r2, #0
 8100922:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8100924:	4b3c      	ldr	r3, [pc, #240]	@ (8100a18 <MX_DFSDM1_Init+0x124>)
 8100926:	2200      	movs	r2, #0
 8100928:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 810092a:	4b3b      	ldr	r3, [pc, #236]	@ (8100a18 <MX_DFSDM1_Init+0x124>)
 810092c:	2200      	movs	r2, #0
 810092e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8100930:	4b39      	ldr	r3, [pc, #228]	@ (8100a18 <MX_DFSDM1_Init+0x124>)
 8100932:	2200      	movs	r2, #0
 8100934:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8100936:	4b38      	ldr	r3, [pc, #224]	@ (8100a18 <MX_DFSDM1_Init+0x124>)
 8100938:	2201      	movs	r2, #1
 810093a:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 810093c:	4b36      	ldr	r3, [pc, #216]	@ (8100a18 <MX_DFSDM1_Init+0x124>)
 810093e:	2200      	movs	r2, #0
 8100940:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8100942:	4b35      	ldr	r3, [pc, #212]	@ (8100a18 <MX_DFSDM1_Init+0x124>)
 8100944:	2200      	movs	r2, #0
 8100946:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8100948:	4833      	ldr	r0, [pc, #204]	@ (8100a18 <MX_DFSDM1_Init+0x124>)
 810094a:	f003 fcd5 	bl	81042f8 <HAL_DFSDM_ChannelInit>
 810094e:	4603      	mov	r3, r0
 8100950:	2b00      	cmp	r3, #0
 8100952:	d001      	beq.n	8100958 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8100954:	f000 fdf6 	bl	8101544 <Error_Handler>
  }
  hdfsdm1_channel3.Instance = DFSDM1_Channel3;
 8100958:	4b31      	ldr	r3, [pc, #196]	@ (8100a20 <MX_DFSDM1_Init+0x12c>)
 810095a:	4a32      	ldr	r2, [pc, #200]	@ (8100a24 <MX_DFSDM1_Init+0x130>)
 810095c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel3.Init.OutputClock.Activation = ENABLE;
 810095e:	4b30      	ldr	r3, [pc, #192]	@ (8100a20 <MX_DFSDM1_Init+0x12c>)
 8100960:	2201      	movs	r2, #1
 8100962:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel3.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8100964:	4b2e      	ldr	r3, [pc, #184]	@ (8100a20 <MX_DFSDM1_Init+0x12c>)
 8100966:	2200      	movs	r2, #0
 8100968:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel3.Init.OutputClock.Divider = 2;
 810096a:	4b2d      	ldr	r3, [pc, #180]	@ (8100a20 <MX_DFSDM1_Init+0x12c>)
 810096c:	2202      	movs	r2, #2
 810096e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel3.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8100970:	4b2b      	ldr	r3, [pc, #172]	@ (8100a20 <MX_DFSDM1_Init+0x12c>)
 8100972:	2200      	movs	r2, #0
 8100974:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel3.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8100976:	4b2a      	ldr	r3, [pc, #168]	@ (8100a20 <MX_DFSDM1_Init+0x12c>)
 8100978:	2200      	movs	r2, #0
 810097a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel3.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 810097c:	4b28      	ldr	r3, [pc, #160]	@ (8100a20 <MX_DFSDM1_Init+0x12c>)
 810097e:	2200      	movs	r2, #0
 8100980:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel3.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8100982:	4b27      	ldr	r3, [pc, #156]	@ (8100a20 <MX_DFSDM1_Init+0x12c>)
 8100984:	2200      	movs	r2, #0
 8100986:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel3.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8100988:	4b25      	ldr	r3, [pc, #148]	@ (8100a20 <MX_DFSDM1_Init+0x12c>)
 810098a:	2204      	movs	r2, #4
 810098c:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel3.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 810098e:	4b24      	ldr	r3, [pc, #144]	@ (8100a20 <MX_DFSDM1_Init+0x12c>)
 8100990:	2200      	movs	r2, #0
 8100992:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel3.Init.Awd.Oversampling = 1;
 8100994:	4b22      	ldr	r3, [pc, #136]	@ (8100a20 <MX_DFSDM1_Init+0x12c>)
 8100996:	2201      	movs	r2, #1
 8100998:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel3.Init.Offset = 0;
 810099a:	4b21      	ldr	r3, [pc, #132]	@ (8100a20 <MX_DFSDM1_Init+0x12c>)
 810099c:	2200      	movs	r2, #0
 810099e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel3.Init.RightBitShift = 0x00;
 81009a0:	4b1f      	ldr	r3, [pc, #124]	@ (8100a20 <MX_DFSDM1_Init+0x12c>)
 81009a2:	2200      	movs	r2, #0
 81009a4:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel3) != HAL_OK)
 81009a6:	481e      	ldr	r0, [pc, #120]	@ (8100a20 <MX_DFSDM1_Init+0x12c>)
 81009a8:	f003 fca6 	bl	81042f8 <HAL_DFSDM_ChannelInit>
 81009ac:	4603      	mov	r3, r0
 81009ae:	2b00      	cmp	r3, #0
 81009b0:	d001      	beq.n	81009b6 <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 81009b2:	f000 fdc7 	bl	8101544 <Error_Handler>
  }
  hdfsdm1_channel7.Instance = DFSDM1_Channel7;
 81009b6:	4b1c      	ldr	r3, [pc, #112]	@ (8100a28 <MX_DFSDM1_Init+0x134>)
 81009b8:	4a1c      	ldr	r2, [pc, #112]	@ (8100a2c <MX_DFSDM1_Init+0x138>)
 81009ba:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel7.Init.OutputClock.Activation = ENABLE;
 81009bc:	4b1a      	ldr	r3, [pc, #104]	@ (8100a28 <MX_DFSDM1_Init+0x134>)
 81009be:	2201      	movs	r2, #1
 81009c0:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 81009c2:	4b19      	ldr	r3, [pc, #100]	@ (8100a28 <MX_DFSDM1_Init+0x134>)
 81009c4:	2200      	movs	r2, #0
 81009c6:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel7.Init.OutputClock.Divider = 2;
 81009c8:	4b17      	ldr	r3, [pc, #92]	@ (8100a28 <MX_DFSDM1_Init+0x134>)
 81009ca:	2202      	movs	r2, #2
 81009cc:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 81009ce:	4b16      	ldr	r3, [pc, #88]	@ (8100a28 <MX_DFSDM1_Init+0x134>)
 81009d0:	2200      	movs	r2, #0
 81009d2:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 81009d4:	4b14      	ldr	r3, [pc, #80]	@ (8100a28 <MX_DFSDM1_Init+0x134>)
 81009d6:	2200      	movs	r2, #0
 81009d8:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 81009da:	4b13      	ldr	r3, [pc, #76]	@ (8100a28 <MX_DFSDM1_Init+0x134>)
 81009dc:	2200      	movs	r2, #0
 81009de:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 81009e0:	4b11      	ldr	r3, [pc, #68]	@ (8100a28 <MX_DFSDM1_Init+0x134>)
 81009e2:	2200      	movs	r2, #0
 81009e4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 81009e6:	4b10      	ldr	r3, [pc, #64]	@ (8100a28 <MX_DFSDM1_Init+0x134>)
 81009e8:	2200      	movs	r2, #0
 81009ea:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 81009ec:	4b0e      	ldr	r3, [pc, #56]	@ (8100a28 <MX_DFSDM1_Init+0x134>)
 81009ee:	2200      	movs	r2, #0
 81009f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hdfsdm1_channel7.Init.Awd.Oversampling = 1;
 81009f2:	4b0d      	ldr	r3, [pc, #52]	@ (8100a28 <MX_DFSDM1_Init+0x134>)
 81009f4:	2201      	movs	r2, #1
 81009f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hdfsdm1_channel7.Init.Offset = 0;
 81009f8:	4b0b      	ldr	r3, [pc, #44]	@ (8100a28 <MX_DFSDM1_Init+0x134>)
 81009fa:	2200      	movs	r2, #0
 81009fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdfsdm1_channel7.Init.RightBitShift = 0x00;
 81009fe:	4b0a      	ldr	r3, [pc, #40]	@ (8100a28 <MX_DFSDM1_Init+0x134>)
 8100a00:	2200      	movs	r2, #0
 8100a02:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel7) != HAL_OK)
 8100a04:	4808      	ldr	r0, [pc, #32]	@ (8100a28 <MX_DFSDM1_Init+0x134>)
 8100a06:	f003 fc77 	bl	81042f8 <HAL_DFSDM_ChannelInit>
 8100a0a:	4603      	mov	r3, r0
 8100a0c:	2b00      	cmp	r3, #0
 8100a0e:	d001      	beq.n	8100a14 <MX_DFSDM1_Init+0x120>
  {
    Error_Handler();
 8100a10:	f000 fd98 	bl	8101544 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8100a14:	bf00      	nop
 8100a16:	bd80      	pop	{r7, pc}
 8100a18:	100001ec 	.word	0x100001ec
 8100a1c:	40017000 	.word	0x40017000
 8100a20:	10000224 	.word	0x10000224
 8100a24:	40017060 	.word	0x40017060
 8100a28:	1000025c 	.word	0x1000025c
 8100a2c:	400170e0 	.word	0x400170e0

08100a30 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8100a30:	b580      	push	{r7, lr}
 8100a32:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8100a34:	4b1e      	ldr	r3, [pc, #120]	@ (8100ab0 <MX_ETH_Init+0x80>)
 8100a36:	4a1f      	ldr	r2, [pc, #124]	@ (8100ab4 <MX_ETH_Init+0x84>)
 8100a38:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8100a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8100ab8 <MX_ETH_Init+0x88>)
 8100a3c:	2200      	movs	r2, #0
 8100a3e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8100a40:	4b1d      	ldr	r3, [pc, #116]	@ (8100ab8 <MX_ETH_Init+0x88>)
 8100a42:	2280      	movs	r2, #128	@ 0x80
 8100a44:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8100a46:	4b1c      	ldr	r3, [pc, #112]	@ (8100ab8 <MX_ETH_Init+0x88>)
 8100a48:	22e1      	movs	r2, #225	@ 0xe1
 8100a4a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8100a4c:	4b1a      	ldr	r3, [pc, #104]	@ (8100ab8 <MX_ETH_Init+0x88>)
 8100a4e:	2200      	movs	r2, #0
 8100a50:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8100a52:	4b19      	ldr	r3, [pc, #100]	@ (8100ab8 <MX_ETH_Init+0x88>)
 8100a54:	2200      	movs	r2, #0
 8100a56:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8100a58:	4b17      	ldr	r3, [pc, #92]	@ (8100ab8 <MX_ETH_Init+0x88>)
 8100a5a:	2200      	movs	r2, #0
 8100a5c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8100a5e:	4b14      	ldr	r3, [pc, #80]	@ (8100ab0 <MX_ETH_Init+0x80>)
 8100a60:	4a15      	ldr	r2, [pc, #84]	@ (8100ab8 <MX_ETH_Init+0x88>)
 8100a62:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8100a64:	4b12      	ldr	r3, [pc, #72]	@ (8100ab0 <MX_ETH_Init+0x80>)
 8100a66:	2201      	movs	r2, #1
 8100a68:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8100a6a:	4b11      	ldr	r3, [pc, #68]	@ (8100ab0 <MX_ETH_Init+0x80>)
 8100a6c:	4a13      	ldr	r2, [pc, #76]	@ (8100abc <MX_ETH_Init+0x8c>)
 8100a6e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8100a70:	4b0f      	ldr	r3, [pc, #60]	@ (8100ab0 <MX_ETH_Init+0x80>)
 8100a72:	4a13      	ldr	r2, [pc, #76]	@ (8100ac0 <MX_ETH_Init+0x90>)
 8100a74:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8100a76:	4b0e      	ldr	r3, [pc, #56]	@ (8100ab0 <MX_ETH_Init+0x80>)
 8100a78:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8100a7c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8100a7e:	480c      	ldr	r0, [pc, #48]	@ (8100ab0 <MX_ETH_Init+0x80>)
 8100a80:	f003 fd4e 	bl	8104520 <HAL_ETH_Init>
 8100a84:	4603      	mov	r3, r0
 8100a86:	2b00      	cmp	r3, #0
 8100a88:	d001      	beq.n	8100a8e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8100a8a:	f000 fd5b 	bl	8101544 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8100a8e:	2238      	movs	r2, #56	@ 0x38
 8100a90:	2100      	movs	r1, #0
 8100a92:	480c      	ldr	r0, [pc, #48]	@ (8100ac4 <MX_ETH_Init+0x94>)
 8100a94:	f00c fd69 	bl	810d56a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8100a98:	4b0a      	ldr	r3, [pc, #40]	@ (8100ac4 <MX_ETH_Init+0x94>)
 8100a9a:	2221      	movs	r2, #33	@ 0x21
 8100a9c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8100a9e:	4b09      	ldr	r3, [pc, #36]	@ (8100ac4 <MX_ETH_Init+0x94>)
 8100aa0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8100aa4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8100aa6:	4b07      	ldr	r3, [pc, #28]	@ (8100ac4 <MX_ETH_Init+0x94>)
 8100aa8:	2200      	movs	r2, #0
 8100aaa:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8100aac:	bf00      	nop
 8100aae:	bd80      	pop	{r7, pc}
 8100ab0:	10000294 	.word	0x10000294
 8100ab4:	40028000 	.word	0x40028000
 8100ab8:	10000e80 	.word	0x10000e80
 8100abc:	10000070 	.word	0x10000070
 8100ac0:	10000010 	.word	0x10000010
 8100ac4:	100000ec 	.word	0x100000ec

08100ac8 <MX_HDMI_CEC_Init>:
  * @brief HDMI_CEC Initialization Function
  * @param None
  * @retval None
  */
static void MX_HDMI_CEC_Init(void)
{
 8100ac8:	b580      	push	{r7, lr}
 8100aca:	af00      	add	r7, sp, #0
  /* USER CODE END HDMI_CEC_Init 0 */

  /* USER CODE BEGIN HDMI_CEC_Init 1 */

  /* USER CODE END HDMI_CEC_Init 1 */
  hcec.Instance = CEC;
 8100acc:	4b15      	ldr	r3, [pc, #84]	@ (8100b24 <MX_HDMI_CEC_Init+0x5c>)
 8100ace:	4a16      	ldr	r2, [pc, #88]	@ (8100b28 <MX_HDMI_CEC_Init+0x60>)
 8100ad0:	601a      	str	r2, [r3, #0]
  hcec.Init.SignalFreeTime = CEC_DEFAULT_SFT;
 8100ad2:	4b14      	ldr	r3, [pc, #80]	@ (8100b24 <MX_HDMI_CEC_Init+0x5c>)
 8100ad4:	2200      	movs	r2, #0
 8100ad6:	605a      	str	r2, [r3, #4]
  hcec.Init.Tolerance = CEC_STANDARD_TOLERANCE;
 8100ad8:	4b12      	ldr	r3, [pc, #72]	@ (8100b24 <MX_HDMI_CEC_Init+0x5c>)
 8100ada:	2200      	movs	r2, #0
 8100adc:	609a      	str	r2, [r3, #8]
  hcec.Init.BRERxStop = CEC_RX_STOP_ON_BRE;
 8100ade:	4b11      	ldr	r3, [pc, #68]	@ (8100b24 <MX_HDMI_CEC_Init+0x5c>)
 8100ae0:	2210      	movs	r2, #16
 8100ae2:	60da      	str	r2, [r3, #12]
  hcec.Init.BREErrorBitGen = CEC_BRE_ERRORBIT_NO_GENERATION;
 8100ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8100b24 <MX_HDMI_CEC_Init+0x5c>)
 8100ae6:	2200      	movs	r2, #0
 8100ae8:	611a      	str	r2, [r3, #16]
  hcec.Init.LBPEErrorBitGen = CEC_LBPE_ERRORBIT_NO_GENERATION;
 8100aea:	4b0e      	ldr	r3, [pc, #56]	@ (8100b24 <MX_HDMI_CEC_Init+0x5c>)
 8100aec:	2200      	movs	r2, #0
 8100aee:	615a      	str	r2, [r3, #20]
  hcec.Init.BroadcastMsgNoErrorBitGen = CEC_BROADCASTERROR_ERRORBIT_GENERATION;
 8100af0:	4b0c      	ldr	r3, [pc, #48]	@ (8100b24 <MX_HDMI_CEC_Init+0x5c>)
 8100af2:	2200      	movs	r2, #0
 8100af4:	619a      	str	r2, [r3, #24]
  hcec.Init.SignalFreeTimeOption = CEC_SFT_START_ON_TXSOM;
 8100af6:	4b0b      	ldr	r3, [pc, #44]	@ (8100b24 <MX_HDMI_CEC_Init+0x5c>)
 8100af8:	2200      	movs	r2, #0
 8100afa:	61da      	str	r2, [r3, #28]
  hcec.Init.ListenMode = CEC_FULL_LISTENING_MODE;
 8100afc:	4b09      	ldr	r3, [pc, #36]	@ (8100b24 <MX_HDMI_CEC_Init+0x5c>)
 8100afe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8100b02:	621a      	str	r2, [r3, #32]
  hcec.Init.OwnAddress = CEC_OWN_ADDRESS_NONE;
 8100b04:	4b07      	ldr	r3, [pc, #28]	@ (8100b24 <MX_HDMI_CEC_Init+0x5c>)
 8100b06:	2200      	movs	r2, #0
 8100b08:	849a      	strh	r2, [r3, #36]	@ 0x24
  hcec.Init.RxBuffer = cec_receive_buffer;
 8100b0a:	4b06      	ldr	r3, [pc, #24]	@ (8100b24 <MX_HDMI_CEC_Init+0x5c>)
 8100b0c:	4a07      	ldr	r2, [pc, #28]	@ (8100b2c <MX_HDMI_CEC_Init+0x64>)
 8100b0e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_CEC_Init(&hcec) != HAL_OK)
 8100b10:	4804      	ldr	r0, [pc, #16]	@ (8100b24 <MX_HDMI_CEC_Init+0x5c>)
 8100b12:	f003 f971 	bl	8103df8 <HAL_CEC_Init>
 8100b16:	4603      	mov	r3, r0
 8100b18:	2b00      	cmp	r3, #0
 8100b1a:	d001      	beq.n	8100b20 <MX_HDMI_CEC_Init+0x58>
  {
    Error_Handler();
 8100b1c:	f000 fd12 	bl	8101544 <Error_Handler>
  }
  /* USER CODE BEGIN HDMI_CEC_Init 2 */

  /* USER CODE END HDMI_CEC_Init 2 */

}
 8100b20:	bf00      	nop
 8100b22:	bd80      	pop	{r7, pc}
 8100b24:	10000344 	.word	0x10000344
 8100b28:	40006c00 	.word	0x40006c00
 8100b2c:	10000e70 	.word	0x10000e70

08100b30 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8100b30:	b580      	push	{r7, lr}
 8100b32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8100b34:	4b10      	ldr	r3, [pc, #64]	@ (8100b78 <MX_QUADSPI_Init+0x48>)
 8100b36:	4a11      	ldr	r2, [pc, #68]	@ (8100b7c <MX_QUADSPI_Init+0x4c>)
 8100b38:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8100b3a:	4b0f      	ldr	r3, [pc, #60]	@ (8100b78 <MX_QUADSPI_Init+0x48>)
 8100b3c:	22ff      	movs	r2, #255	@ 0xff
 8100b3e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8100b40:	4b0d      	ldr	r3, [pc, #52]	@ (8100b78 <MX_QUADSPI_Init+0x48>)
 8100b42:	2201      	movs	r2, #1
 8100b44:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8100b46:	4b0c      	ldr	r3, [pc, #48]	@ (8100b78 <MX_QUADSPI_Init+0x48>)
 8100b48:	2200      	movs	r2, #0
 8100b4a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8100b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8100b78 <MX_QUADSPI_Init+0x48>)
 8100b4e:	2201      	movs	r2, #1
 8100b50:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8100b52:	4b09      	ldr	r3, [pc, #36]	@ (8100b78 <MX_QUADSPI_Init+0x48>)
 8100b54:	2200      	movs	r2, #0
 8100b56:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8100b58:	4b07      	ldr	r3, [pc, #28]	@ (8100b78 <MX_QUADSPI_Init+0x48>)
 8100b5a:	2200      	movs	r2, #0
 8100b5c:	619a      	str	r2, [r3, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8100b5e:	4b06      	ldr	r3, [pc, #24]	@ (8100b78 <MX_QUADSPI_Init+0x48>)
 8100b60:	2240      	movs	r2, #64	@ 0x40
 8100b62:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8100b64:	4804      	ldr	r0, [pc, #16]	@ (8100b78 <MX_QUADSPI_Init+0x48>)
 8100b66:	f004 fc99 	bl	810549c <HAL_QSPI_Init>
 8100b6a:	4603      	mov	r3, r0
 8100b6c:	2b00      	cmp	r3, #0
 8100b6e:	d001      	beq.n	8100b74 <MX_QUADSPI_Init+0x44>
  {
    Error_Handler();
 8100b70:	f000 fce8 	bl	8101544 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8100b74:	bf00      	nop
 8100b76:	bd80      	pop	{r7, pc}
 8100b78:	10000388 	.word	0x10000388
 8100b7c:	52005000 	.word	0x52005000

08100b80 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8100b80:	b580      	push	{r7, lr}
 8100b82:	b08a      	sub	sp, #40	@ 0x28
 8100b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TamperTypeDef sTamper = {0};
 8100b86:	463b      	mov	r3, r7
 8100b88:	2228      	movs	r2, #40	@ 0x28
 8100b8a:	2100      	movs	r1, #0
 8100b8c:	4618      	mov	r0, r3
 8100b8e:	f00c fcec 	bl	810d56a <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8100b92:	4b20      	ldr	r3, [pc, #128]	@ (8100c14 <MX_RTC_Init+0x94>)
 8100b94:	4a20      	ldr	r2, [pc, #128]	@ (8100c18 <MX_RTC_Init+0x98>)
 8100b96:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8100b98:	4b1e      	ldr	r3, [pc, #120]	@ (8100c14 <MX_RTC_Init+0x94>)
 8100b9a:	2200      	movs	r2, #0
 8100b9c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8100b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8100c14 <MX_RTC_Init+0x94>)
 8100ba0:	227f      	movs	r2, #127	@ 0x7f
 8100ba2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8100ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8100c14 <MX_RTC_Init+0x94>)
 8100ba6:	22ff      	movs	r2, #255	@ 0xff
 8100ba8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8100baa:	4b1a      	ldr	r3, [pc, #104]	@ (8100c14 <MX_RTC_Init+0x94>)
 8100bac:	2200      	movs	r2, #0
 8100bae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8100bb0:	4b18      	ldr	r3, [pc, #96]	@ (8100c14 <MX_RTC_Init+0x94>)
 8100bb2:	2200      	movs	r2, #0
 8100bb4:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8100bb6:	4b17      	ldr	r3, [pc, #92]	@ (8100c14 <MX_RTC_Init+0x94>)
 8100bb8:	2200      	movs	r2, #0
 8100bba:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8100bbc:	4b15      	ldr	r3, [pc, #84]	@ (8100c14 <MX_RTC_Init+0x94>)
 8100bbe:	2200      	movs	r2, #0
 8100bc0:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8100bc2:	4814      	ldr	r0, [pc, #80]	@ (8100c14 <MX_RTC_Init+0x94>)
 8100bc4:	f007 fc3a 	bl	810843c <HAL_RTC_Init>
 8100bc8:	4603      	mov	r3, r0
 8100bca:	2b00      	cmp	r3, #0
 8100bcc:	d001      	beq.n	8100bd2 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8100bce:	f000 fcb9 	bl	8101544 <Error_Handler>
  }

  /** Enable the RTC Tamper 1
  */
  sTamper.Tamper = RTC_TAMPER_1;
 8100bd2:	2301      	movs	r3, #1
 8100bd4:	603b      	str	r3, [r7, #0]
  sTamper.Trigger = RTC_TAMPERTRIGGER_RISINGEDGE;
 8100bd6:	2301      	movs	r3, #1
 8100bd8:	60bb      	str	r3, [r7, #8]
  sTamper.NoErase = RTC_TAMPER_ERASE_BACKUP_ENABLE;
 8100bda:	2300      	movs	r3, #0
 8100bdc:	60fb      	str	r3, [r7, #12]
  sTamper.MaskFlag = RTC_TAMPERMASK_FLAG_DISABLE;
 8100bde:	2300      	movs	r3, #0
 8100be0:	613b      	str	r3, [r7, #16]
  sTamper.Filter = RTC_TAMPERFILTER_DISABLE;
 8100be2:	2300      	movs	r3, #0
 8100be4:	617b      	str	r3, [r7, #20]
  sTamper.SamplingFrequency = RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768;
 8100be6:	2300      	movs	r3, #0
 8100be8:	61bb      	str	r3, [r7, #24]
  sTamper.PrechargeDuration = RTC_TAMPERPRECHARGEDURATION_1RTCCLK;
 8100bea:	2300      	movs	r3, #0
 8100bec:	61fb      	str	r3, [r7, #28]
  sTamper.TamperPullUp = RTC_TAMPER_PULLUP_ENABLE;
 8100bee:	2300      	movs	r3, #0
 8100bf0:	623b      	str	r3, [r7, #32]
  sTamper.TimeStampOnTamperDetection = RTC_TIMESTAMPONTAMPERDETECTION_ENABLE;
 8100bf2:	2380      	movs	r3, #128	@ 0x80
 8100bf4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_RTCEx_SetTamper(&hrtc, &sTamper) != HAL_OK)
 8100bf6:	463b      	mov	r3, r7
 8100bf8:	4619      	mov	r1, r3
 8100bfa:	4806      	ldr	r0, [pc, #24]	@ (8100c14 <MX_RTC_Init+0x94>)
 8100bfc:	f007 fd36 	bl	810866c <HAL_RTCEx_SetTamper>
 8100c00:	4603      	mov	r3, r0
 8100c02:	2b00      	cmp	r3, #0
 8100c04:	d001      	beq.n	8100c0a <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 8100c06:	f000 fc9d 	bl	8101544 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8100c0a:	bf00      	nop
 8100c0c:	3728      	adds	r7, #40	@ 0x28
 8100c0e:	46bd      	mov	sp, r7
 8100c10:	bd80      	pop	{r7, pc}
 8100c12:	bf00      	nop
 8100c14:	100003d4 	.word	0x100003d4
 8100c18:	58004000 	.word	0x58004000

08100c1c <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8100c1c:	b580      	push	{r7, lr}
 8100c1e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8100c20:	4b4a      	ldr	r3, [pc, #296]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100c22:	4a4b      	ldr	r2, [pc, #300]	@ (8100d50 <MX_SAI1_Init+0x134>)
 8100c24:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8100c26:	4b49      	ldr	r3, [pc, #292]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100c28:	2200      	movs	r2, #0
 8100c2a:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100c2c:	4b47      	ldr	r3, [pc, #284]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100c2e:	2200      	movs	r2, #0
 8100c30:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8100c32:	4b46      	ldr	r3, [pc, #280]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100c34:	2240      	movs	r2, #64	@ 0x40
 8100c36:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8100c38:	4b44      	ldr	r3, [pc, #272]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100c3a:	2200      	movs	r2, #0
 8100c3c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8100c3e:	4b43      	ldr	r3, [pc, #268]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100c40:	2200      	movs	r2, #0
 8100c42:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100c44:	4b41      	ldr	r3, [pc, #260]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100c46:	2200      	movs	r2, #0
 8100c48:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100c4a:	4b40      	ldr	r3, [pc, #256]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100c4c:	2200      	movs	r2, #0
 8100c4e:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MCK_OVERSAMPLING_DISABLE;
 8100c50:	4b3e      	ldr	r3, [pc, #248]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100c52:	2200      	movs	r2, #0
 8100c54:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100c56:	4b3d      	ldr	r3, [pc, #244]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100c58:	2200      	movs	r2, #0
 8100c5a:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100c5c:	4b3b      	ldr	r3, [pc, #236]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100c5e:	2200      	movs	r2, #0
 8100c60:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8100c62:	4b3a      	ldr	r3, [pc, #232]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100c64:	4a3b      	ldr	r2, [pc, #236]	@ (8100d54 <MX_SAI1_Init+0x138>)
 8100c66:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100c68:	4b38      	ldr	r3, [pc, #224]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100c6a:	2200      	movs	r2, #0
 8100c6c:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100c6e:	4b37      	ldr	r3, [pc, #220]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100c70:	2200      	movs	r2, #0
 8100c72:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100c74:	4b35      	ldr	r3, [pc, #212]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100c76:	2200      	movs	r2, #0
 8100c78:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8100c7a:	4b34      	ldr	r3, [pc, #208]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100c7c:	2200      	movs	r2, #0
 8100c7e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8100c80:	4b32      	ldr	r3, [pc, #200]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100c82:	2200      	movs	r2, #0
 8100c84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8100c88:	4b30      	ldr	r3, [pc, #192]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100c8a:	2201      	movs	r2, #1
 8100c8c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100c90:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100c94:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8100c96:	4b2d      	ldr	r3, [pc, #180]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100c98:	2208      	movs	r2, #8
 8100c9a:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8100c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100c9e:	2201      	movs	r2, #1
 8100ca0:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8100ca2:	4b2a      	ldr	r3, [pc, #168]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100ca4:	2200      	movs	r2, #0
 8100ca6:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8100ca8:	4b28      	ldr	r3, [pc, #160]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100caa:	2200      	movs	r2, #0
 8100cac:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8100cae:	4b27      	ldr	r3, [pc, #156]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100cb0:	2200      	movs	r2, #0
 8100cb2:	665a      	str	r2, [r3, #100]	@ 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8100cb4:	4b25      	ldr	r3, [pc, #148]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100cb6:	2200      	movs	r2, #0
 8100cb8:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8100cba:	4b24      	ldr	r3, [pc, #144]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100cbc:	2200      	movs	r2, #0
 8100cbe:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8100cc0:	4b22      	ldr	r3, [pc, #136]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100cc2:	2201      	movs	r2, #1
 8100cc4:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8100cc6:	4b21      	ldr	r3, [pc, #132]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100cc8:	2200      	movs	r2, #0
 8100cca:	675a      	str	r2, [r3, #116]	@ 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8100ccc:	481f      	ldr	r0, [pc, #124]	@ (8100d4c <MX_SAI1_Init+0x130>)
 8100cce:	f007 fdad 	bl	810882c <HAL_SAI_Init>
 8100cd2:	4603      	mov	r3, r0
 8100cd4:	2b00      	cmp	r3, #0
 8100cd6:	d001      	beq.n	8100cdc <MX_SAI1_Init+0xc0>
  {
    Error_Handler();
 8100cd8:	f000 fc34 	bl	8101544 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 8100cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8100d58 <MX_SAI1_Init+0x13c>)
 8100cde:	4a1f      	ldr	r2, [pc, #124]	@ (8100d5c <MX_SAI1_Init+0x140>)
 8100ce0:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8100ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8100d58 <MX_SAI1_Init+0x13c>)
 8100ce4:	2204      	movs	r2, #4
 8100ce6:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 8100ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8100d58 <MX_SAI1_Init+0x13c>)
 8100cea:	2200      	movs	r2, #0
 8100cec:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8100cee:	4b1a      	ldr	r3, [pc, #104]	@ (8100d58 <MX_SAI1_Init+0x13c>)
 8100cf0:	2200      	movs	r2, #0
 8100cf2:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8100cf4:	4b18      	ldr	r3, [pc, #96]	@ (8100d58 <MX_SAI1_Init+0x13c>)
 8100cf6:	2200      	movs	r2, #0
 8100cf8:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.MckOverSampling = SAI_MCK_OVERSAMPLING_DISABLE;
 8100cfa:	4b17      	ldr	r3, [pc, #92]	@ (8100d58 <MX_SAI1_Init+0x13c>)
 8100cfc:	2200      	movs	r2, #0
 8100cfe:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8100d00:	4b15      	ldr	r3, [pc, #84]	@ (8100d58 <MX_SAI1_Init+0x13c>)
 8100d02:	2200      	movs	r2, #0
 8100d04:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8100d06:	4b14      	ldr	r3, [pc, #80]	@ (8100d58 <MX_SAI1_Init+0x13c>)
 8100d08:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8100d0c:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8100d0e:	4b12      	ldr	r3, [pc, #72]	@ (8100d58 <MX_SAI1_Init+0x13c>)
 8100d10:	2200      	movs	r2, #0
 8100d12:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8100d14:	4b10      	ldr	r3, [pc, #64]	@ (8100d58 <MX_SAI1_Init+0x13c>)
 8100d16:	2200      	movs	r2, #0
 8100d18:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8100d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8100d58 <MX_SAI1_Init+0x13c>)
 8100d1c:	2200      	movs	r2, #0
 8100d1e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 8100d20:	4b0d      	ldr	r3, [pc, #52]	@ (8100d58 <MX_SAI1_Init+0x13c>)
 8100d22:	2200      	movs	r2, #0
 8100d24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8100d28:	4b0b      	ldr	r3, [pc, #44]	@ (8100d58 <MX_SAI1_Init+0x13c>)
 8100d2a:	2201      	movs	r2, #1
 8100d2c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8100d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8100d58 <MX_SAI1_Init+0x13c>)
 8100d30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100d34:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8100d36:	4808      	ldr	r0, [pc, #32]	@ (8100d58 <MX_SAI1_Init+0x13c>)
 8100d38:	f007 fd78 	bl	810882c <HAL_SAI_Init>
 8100d3c:	4603      	mov	r3, r0
 8100d3e:	2b00      	cmp	r3, #0
 8100d40:	d001      	beq.n	8100d46 <MX_SAI1_Init+0x12a>
  {
    Error_Handler();
 8100d42:	f000 fbff 	bl	8101544 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8100d46:	bf00      	nop
 8100d48:	bd80      	pop	{r7, pc}
 8100d4a:	bf00      	nop
 8100d4c:	100003f8 	.word	0x100003f8
 8100d50:	40015804 	.word	0x40015804
 8100d54:	0002ee00 	.word	0x0002ee00
 8100d58:	10000490 	.word	0x10000490
 8100d5c:	40015824 	.word	0x40015824

08100d60 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8100d60:	b580      	push	{r7, lr}
 8100d62:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8100d64:	4b0e      	ldr	r3, [pc, #56]	@ (8100da0 <MX_SDMMC1_SD_Init+0x40>)
 8100d66:	4a0f      	ldr	r2, [pc, #60]	@ (8100da4 <MX_SDMMC1_SD_Init+0x44>)
 8100d68:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8100d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8100da0 <MX_SDMMC1_SD_Init+0x40>)
 8100d6c:	2200      	movs	r2, #0
 8100d6e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8100d70:	4b0b      	ldr	r3, [pc, #44]	@ (8100da0 <MX_SDMMC1_SD_Init+0x40>)
 8100d72:	2200      	movs	r2, #0
 8100d74:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8100d76:	4b0a      	ldr	r3, [pc, #40]	@ (8100da0 <MX_SDMMC1_SD_Init+0x40>)
 8100d78:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8100d7c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8100d7e:	4b08      	ldr	r3, [pc, #32]	@ (8100da0 <MX_SDMMC1_SD_Init+0x40>)
 8100d80:	2200      	movs	r2, #0
 8100d82:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8100d84:	4b06      	ldr	r3, [pc, #24]	@ (8100da0 <MX_SDMMC1_SD_Init+0x40>)
 8100d86:	2200      	movs	r2, #0
 8100d88:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8100d8a:	4805      	ldr	r0, [pc, #20]	@ (8100da0 <MX_SDMMC1_SD_Init+0x40>)
 8100d8c:	f008 f832 	bl	8108df4 <HAL_SD_Init>
 8100d90:	4603      	mov	r3, r0
 8100d92:	2b00      	cmp	r3, #0
 8100d94:	d001      	beq.n	8100d9a <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 8100d96:	f000 fbd5 	bl	8101544 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8100d9a:	bf00      	nop
 8100d9c:	bd80      	pop	{r7, pc}
 8100d9e:	bf00      	nop
 8100da0:	10000528 	.word	0x10000528
 8100da4:	52007000 	.word	0x52007000

08100da8 <MX_SPDIFRX1_Init>:
  * @brief SPDIFRX1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX1_Init(void)
{
 8100da8:	b580      	push	{r7, lr}
 8100daa:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX1_Init 0 */

  /* USER CODE BEGIN SPDIFRX1_Init 1 */

  /* USER CODE END SPDIFRX1_Init 1 */
  hspdif1.Instance = SPDIFRX;
 8100dac:	4b19      	ldr	r3, [pc, #100]	@ (8100e14 <MX_SPDIFRX1_Init+0x6c>)
 8100dae:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8100db2:	601a      	str	r2, [r3, #0]
  hspdif1.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8100db4:	4b17      	ldr	r3, [pc, #92]	@ (8100e14 <MX_SPDIFRX1_Init+0x6c>)
 8100db6:	2200      	movs	r2, #0
 8100db8:	605a      	str	r2, [r3, #4]
  hspdif1.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8100dba:	4b16      	ldr	r3, [pc, #88]	@ (8100e14 <MX_SPDIFRX1_Init+0x6c>)
 8100dbc:	2200      	movs	r2, #0
 8100dbe:	609a      	str	r2, [r3, #8]
  hspdif1.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8100dc0:	4b14      	ldr	r3, [pc, #80]	@ (8100e14 <MX_SPDIFRX1_Init+0x6c>)
 8100dc2:	2200      	movs	r2, #0
 8100dc4:	60da      	str	r2, [r3, #12]
  hspdif1.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8100dc6:	4b13      	ldr	r3, [pc, #76]	@ (8100e14 <MX_SPDIFRX1_Init+0x6c>)
 8100dc8:	2200      	movs	r2, #0
 8100dca:	611a      	str	r2, [r3, #16]
  hspdif1.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8100dcc:	4b11      	ldr	r3, [pc, #68]	@ (8100e14 <MX_SPDIFRX1_Init+0x6c>)
 8100dce:	2200      	movs	r2, #0
 8100dd0:	615a      	str	r2, [r3, #20]
  hspdif1.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8100dd2:	4b10      	ldr	r3, [pc, #64]	@ (8100e14 <MX_SPDIFRX1_Init+0x6c>)
 8100dd4:	2200      	movs	r2, #0
 8100dd6:	619a      	str	r2, [r3, #24]
  hspdif1.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8100dd8:	4b0e      	ldr	r3, [pc, #56]	@ (8100e14 <MX_SPDIFRX1_Init+0x6c>)
 8100dda:	2200      	movs	r2, #0
 8100ddc:	61da      	str	r2, [r3, #28]
  hspdif1.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8100dde:	4b0d      	ldr	r3, [pc, #52]	@ (8100e14 <MX_SPDIFRX1_Init+0x6c>)
 8100de0:	2200      	movs	r2, #0
 8100de2:	621a      	str	r2, [r3, #32]
  hspdif1.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8100de4:	4b0b      	ldr	r3, [pc, #44]	@ (8100e14 <MX_SPDIFRX1_Init+0x6c>)
 8100de6:	2200      	movs	r2, #0
 8100de8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspdif1.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8100dea:	4b0a      	ldr	r3, [pc, #40]	@ (8100e14 <MX_SPDIFRX1_Init+0x6c>)
 8100dec:	2200      	movs	r2, #0
 8100dee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspdif1.Init.SymbolClockGen = DISABLE;
 8100df0:	4b08      	ldr	r3, [pc, #32]	@ (8100e14 <MX_SPDIFRX1_Init+0x6c>)
 8100df2:	2200      	movs	r2, #0
 8100df4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hspdif1.Init.BackupSymbolClockGen = DISABLE;
 8100df8:	4b06      	ldr	r3, [pc, #24]	@ (8100e14 <MX_SPDIFRX1_Init+0x6c>)
 8100dfa:	2200      	movs	r2, #0
 8100dfc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  if (HAL_SPDIFRX_Init(&hspdif1) != HAL_OK)
 8100e00:	4804      	ldr	r0, [pc, #16]	@ (8100e14 <MX_SPDIFRX1_Init+0x6c>)
 8100e02:	f009 f8a1 	bl	8109f48 <HAL_SPDIFRX_Init>
 8100e06:	4603      	mov	r3, r0
 8100e08:	2b00      	cmp	r3, #0
 8100e0a:	d001      	beq.n	8100e10 <MX_SPDIFRX1_Init+0x68>
  {
    Error_Handler();
 8100e0c:	f000 fb9a 	bl	8101544 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX1_Init 2 */

  /* USER CODE END SPDIFRX1_Init 2 */

}
 8100e10:	bf00      	nop
 8100e12:	bd80      	pop	{r7, pc}
 8100e14:	100005a4 	.word	0x100005a4

08100e18 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8100e18:	b580      	push	{r7, lr}
 8100e1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8100e1c:	4b26      	ldr	r3, [pc, #152]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100e1e:	4a27      	ldr	r2, [pc, #156]	@ (8100ebc <MX_SPI2_Init+0xa4>)
 8100e20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8100e22:	4b25      	ldr	r3, [pc, #148]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100e24:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100e28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8100e2a:	4b23      	ldr	r3, [pc, #140]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100e2c:	2200      	movs	r2, #0
 8100e2e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8100e30:	4b21      	ldr	r3, [pc, #132]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100e32:	2203      	movs	r2, #3
 8100e34:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100e36:	4b20      	ldr	r3, [pc, #128]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100e38:	2200      	movs	r2, #0
 8100e3a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100e3c:	4b1e      	ldr	r3, [pc, #120]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100e3e:	2200      	movs	r2, #0
 8100e40:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8100e42:	4b1d      	ldr	r3, [pc, #116]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100e44:	2200      	movs	r2, #0
 8100e46:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100e48:	4b1b      	ldr	r3, [pc, #108]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100e4a:	2200      	movs	r2, #0
 8100e4c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100e50:	2200      	movs	r2, #0
 8100e52:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8100e54:	4b18      	ldr	r3, [pc, #96]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100e56:	2200      	movs	r2, #0
 8100e58:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100e5a:	4b17      	ldr	r3, [pc, #92]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100e5c:	2200      	movs	r2, #0
 8100e5e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8100e60:	4b15      	ldr	r3, [pc, #84]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100e62:	2200      	movs	r2, #0
 8100e64:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100e66:	4b14      	ldr	r3, [pc, #80]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100e68:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100e6c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100e6e:	4b12      	ldr	r3, [pc, #72]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100e70:	2200      	movs	r2, #0
 8100e72:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100e74:	4b10      	ldr	r3, [pc, #64]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100e76:	2200      	movs	r2, #0
 8100e78:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100e7c:	2200      	movs	r2, #0
 8100e7e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100e80:	4b0d      	ldr	r3, [pc, #52]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100e82:	2200      	movs	r2, #0
 8100e84:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100e86:	4b0c      	ldr	r3, [pc, #48]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100e88:	2200      	movs	r2, #0
 8100e8a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100e8e:	2200      	movs	r2, #0
 8100e90:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100e92:	4b09      	ldr	r3, [pc, #36]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100e94:	2200      	movs	r2, #0
 8100e96:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100e98:	4b07      	ldr	r3, [pc, #28]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100e9a:	2200      	movs	r2, #0
 8100e9c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100e9e:	4b06      	ldr	r3, [pc, #24]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100ea0:	2200      	movs	r2, #0
 8100ea2:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8100ea4:	4804      	ldr	r0, [pc, #16]	@ (8100eb8 <MX_SPI2_Init+0xa0>)
 8100ea6:	f009 f8bd 	bl	810a024 <HAL_SPI_Init>
 8100eaa:	4603      	mov	r3, r0
 8100eac:	2b00      	cmp	r3, #0
 8100eae:	d001      	beq.n	8100eb4 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 8100eb0:	f000 fb48 	bl	8101544 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8100eb4:	bf00      	nop
 8100eb6:	bd80      	pop	{r7, pc}
 8100eb8:	100005f4 	.word	0x100005f4
 8100ebc:	40003800 	.word	0x40003800

08100ec0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8100ec0:	b580      	push	{r7, lr}
 8100ec2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8100ec4:	4b26      	ldr	r3, [pc, #152]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100ec6:	4a27      	ldr	r2, [pc, #156]	@ (8100f64 <MX_SPI5_Init+0xa4>)
 8100ec8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8100eca:	4b25      	ldr	r3, [pc, #148]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100ecc:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8100ed0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8100ed2:	4b23      	ldr	r3, [pc, #140]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100ed4:	2200      	movs	r2, #0
 8100ed6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8100ed8:	4b21      	ldr	r3, [pc, #132]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100eda:	2203      	movs	r2, #3
 8100edc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8100ede:	4b20      	ldr	r3, [pc, #128]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100ee0:	2200      	movs	r2, #0
 8100ee2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8100ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100ee6:	2200      	movs	r2, #0
 8100ee8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8100eea:	4b1d      	ldr	r3, [pc, #116]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100eec:	2200      	movs	r2, #0
 8100eee:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8100ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100ef2:	2200      	movs	r2, #0
 8100ef4:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8100ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100ef8:	2200      	movs	r2, #0
 8100efa:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8100efc:	4b18      	ldr	r3, [pc, #96]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100efe:	2200      	movs	r2, #0
 8100f00:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8100f02:	4b17      	ldr	r3, [pc, #92]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100f04:	2200      	movs	r2, #0
 8100f06:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 0x0;
 8100f08:	4b15      	ldr	r3, [pc, #84]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100f0a:	2200      	movs	r2, #0
 8100f0c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8100f0e:	4b14      	ldr	r3, [pc, #80]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100f10:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8100f14:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8100f16:	4b12      	ldr	r3, [pc, #72]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100f18:	2200      	movs	r2, #0
 8100f1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8100f1c:	4b10      	ldr	r3, [pc, #64]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100f1e:	2200      	movs	r2, #0
 8100f20:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100f22:	4b0f      	ldr	r3, [pc, #60]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100f24:	2200      	movs	r2, #0
 8100f26:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8100f28:	4b0d      	ldr	r3, [pc, #52]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100f2a:	2200      	movs	r2, #0
 8100f2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8100f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100f30:	2200      	movs	r2, #0
 8100f32:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8100f34:	4b0a      	ldr	r3, [pc, #40]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100f36:	2200      	movs	r2, #0
 8100f38:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8100f3a:	4b09      	ldr	r3, [pc, #36]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100f3c:	2200      	movs	r2, #0
 8100f3e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8100f40:	4b07      	ldr	r3, [pc, #28]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100f42:	2200      	movs	r2, #0
 8100f44:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8100f46:	4b06      	ldr	r3, [pc, #24]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100f48:	2200      	movs	r2, #0
 8100f4a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8100f4c:	4804      	ldr	r0, [pc, #16]	@ (8100f60 <MX_SPI5_Init+0xa0>)
 8100f4e:	f009 f869 	bl	810a024 <HAL_SPI_Init>
 8100f52:	4603      	mov	r3, r0
 8100f54:	2b00      	cmp	r3, #0
 8100f56:	d001      	beq.n	8100f5c <MX_SPI5_Init+0x9c>
  {
    Error_Handler();
 8100f58:	f000 faf4 	bl	8101544 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8100f5c:	bf00      	nop
 8100f5e:	bd80      	pop	{r7, pc}
 8100f60:	1000067c 	.word	0x1000067c
 8100f64:	40015000 	.word	0x40015000

08100f68 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8100f68:	b580      	push	{r7, lr}
 8100f6a:	b096      	sub	sp, #88	@ 0x58
 8100f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8100f6e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8100f72:	2200      	movs	r2, #0
 8100f74:	601a      	str	r2, [r3, #0]
 8100f76:	605a      	str	r2, [r3, #4]
 8100f78:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8100f7a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8100f7e:	2200      	movs	r2, #0
 8100f80:	601a      	str	r2, [r3, #0]
 8100f82:	605a      	str	r2, [r3, #4]
 8100f84:	609a      	str	r2, [r3, #8]
 8100f86:	60da      	str	r2, [r3, #12]
 8100f88:	611a      	str	r2, [r3, #16]
 8100f8a:	615a      	str	r2, [r3, #20]
 8100f8c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8100f8e:	1d3b      	adds	r3, r7, #4
 8100f90:	222c      	movs	r2, #44	@ 0x2c
 8100f92:	2100      	movs	r1, #0
 8100f94:	4618      	mov	r0, r3
 8100f96:	f00c fae8 	bl	810d56a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8100f9a:	4b39      	ldr	r3, [pc, #228]	@ (8101080 <MX_TIM8_Init+0x118>)
 8100f9c:	4a39      	ldr	r2, [pc, #228]	@ (8101084 <MX_TIM8_Init+0x11c>)
 8100f9e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8100fa0:	4b37      	ldr	r3, [pc, #220]	@ (8101080 <MX_TIM8_Init+0x118>)
 8100fa2:	2200      	movs	r2, #0
 8100fa4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8100fa6:	4b36      	ldr	r3, [pc, #216]	@ (8101080 <MX_TIM8_Init+0x118>)
 8100fa8:	2200      	movs	r2, #0
 8100faa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8100fac:	4b34      	ldr	r3, [pc, #208]	@ (8101080 <MX_TIM8_Init+0x118>)
 8100fae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8100fb2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8100fb4:	4b32      	ldr	r3, [pc, #200]	@ (8101080 <MX_TIM8_Init+0x118>)
 8100fb6:	2200      	movs	r2, #0
 8100fb8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8100fba:	4b31      	ldr	r3, [pc, #196]	@ (8101080 <MX_TIM8_Init+0x118>)
 8100fbc:	2200      	movs	r2, #0
 8100fbe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8100fc0:	4b2f      	ldr	r3, [pc, #188]	@ (8101080 <MX_TIM8_Init+0x118>)
 8100fc2:	2200      	movs	r2, #0
 8100fc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim8) != HAL_OK)
 8100fc6:	482e      	ldr	r0, [pc, #184]	@ (8101080 <MX_TIM8_Init+0x118>)
 8100fc8:	f009 f9c2 	bl	810a350 <HAL_TIM_OC_Init>
 8100fcc:	4603      	mov	r3, r0
 8100fce:	2b00      	cmp	r3, #0
 8100fd0:	d001      	beq.n	8100fd6 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8100fd2:	f000 fab7 	bl	8101544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8100fd6:	2300      	movs	r3, #0
 8100fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8100fda:	2300      	movs	r3, #0
 8100fdc:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8100fde:	2300      	movs	r3, #0
 8100fe0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8100fe2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8100fe6:	4619      	mov	r1, r3
 8100fe8:	4825      	ldr	r0, [pc, #148]	@ (8101080 <MX_TIM8_Init+0x118>)
 8100fea:	f00a f81f 	bl	810b02c <HAL_TIMEx_MasterConfigSynchronization>
 8100fee:	4603      	mov	r3, r0
 8100ff0:	2b00      	cmp	r3, #0
 8100ff2:	d001      	beq.n	8100ff8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8100ff4:	f000 faa6 	bl	8101544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8100ff8:	2300      	movs	r3, #0
 8100ffa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8100ffc:	2300      	movs	r3, #0
 8100ffe:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101000:	2300      	movs	r3, #0
 8101002:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8101004:	2300      	movs	r3, #0
 8101006:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8101008:	2300      	movs	r3, #0
 810100a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 810100c:	2300      	movs	r3, #0
 810100e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8101010:	2300      	movs	r3, #0
 8101012:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_OC_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8101014:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101018:	2204      	movs	r2, #4
 810101a:	4619      	mov	r1, r3
 810101c:	4818      	ldr	r0, [pc, #96]	@ (8101080 <MX_TIM8_Init+0x118>)
 810101e:	f009 fa4f 	bl	810a4c0 <HAL_TIM_OC_ConfigChannel>
 8101022:	4603      	mov	r3, r0
 8101024:	2b00      	cmp	r3, #0
 8101026:	d001      	beq.n	810102c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8101028:	f000 fa8c 	bl	8101544 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 810102c:	2300      	movs	r3, #0
 810102e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8101030:	2300      	movs	r3, #0
 8101032:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8101034:	2300      	movs	r3, #0
 8101036:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8101038:	2300      	movs	r3, #0
 810103a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 810103c:	2300      	movs	r3, #0
 810103e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8101040:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8101044:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8101046:	2300      	movs	r3, #0
 8101048:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 810104a:	2300      	movs	r3, #0
 810104c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 810104e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8101052:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8101054:	2300      	movs	r3, #0
 8101056:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8101058:	2300      	movs	r3, #0
 810105a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 810105c:	1d3b      	adds	r3, r7, #4
 810105e:	4619      	mov	r1, r3
 8101060:	4807      	ldr	r0, [pc, #28]	@ (8101080 <MX_TIM8_Init+0x118>)
 8101062:	f00a f871 	bl	810b148 <HAL_TIMEx_ConfigBreakDeadTime>
 8101066:	4603      	mov	r3, r0
 8101068:	2b00      	cmp	r3, #0
 810106a:	d001      	beq.n	8101070 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 810106c:	f000 fa6a 	bl	8101544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8101070:	4803      	ldr	r0, [pc, #12]	@ (8101080 <MX_TIM8_Init+0x118>)
 8101072:	f001 f8bb 	bl	81021ec <HAL_TIM_MspPostInit>

}
 8101076:	bf00      	nop
 8101078:	3758      	adds	r7, #88	@ 0x58
 810107a:	46bd      	mov	sp, r7
 810107c:	bd80      	pop	{r7, pc}
 810107e:	bf00      	nop
 8101080:	10000704 	.word	0x10000704
 8101084:	40010400 	.word	0x40010400

08101088 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8101088:	b580      	push	{r7, lr}
 810108a:	b084      	sub	sp, #16
 810108c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 810108e:	463b      	mov	r3, r7
 8101090:	2200      	movs	r2, #0
 8101092:	601a      	str	r2, [r3, #0]
 8101094:	605a      	str	r2, [r3, #4]
 8101096:	609a      	str	r2, [r3, #8]
 8101098:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 810109a:	4b1d      	ldr	r3, [pc, #116]	@ (8101110 <MX_TIM13_Init+0x88>)
 810109c:	4a1d      	ldr	r2, [pc, #116]	@ (8101114 <MX_TIM13_Init+0x8c>)
 810109e:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 81010a0:	4b1b      	ldr	r3, [pc, #108]	@ (8101110 <MX_TIM13_Init+0x88>)
 81010a2:	2200      	movs	r2, #0
 81010a4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 81010a6:	4b1a      	ldr	r3, [pc, #104]	@ (8101110 <MX_TIM13_Init+0x88>)
 81010a8:	2200      	movs	r2, #0
 81010aa:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 81010ac:	4b18      	ldr	r3, [pc, #96]	@ (8101110 <MX_TIM13_Init+0x88>)
 81010ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 81010b2:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81010b4:	4b16      	ldr	r3, [pc, #88]	@ (8101110 <MX_TIM13_Init+0x88>)
 81010b6:	2200      	movs	r2, #0
 81010b8:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81010ba:	4b15      	ldr	r3, [pc, #84]	@ (8101110 <MX_TIM13_Init+0x88>)
 81010bc:	2200      	movs	r2, #0
 81010be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 81010c0:	4813      	ldr	r0, [pc, #76]	@ (8101110 <MX_TIM13_Init+0x88>)
 81010c2:	f009 f8ee 	bl	810a2a2 <HAL_TIM_Base_Init>
 81010c6:	4603      	mov	r3, r0
 81010c8:	2b00      	cmp	r3, #0
 81010ca:	d001      	beq.n	81010d0 <MX_TIM13_Init+0x48>
  {
    Error_Handler();
 81010cc:	f000 fa3a 	bl	8101544 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 81010d0:	480f      	ldr	r0, [pc, #60]	@ (8101110 <MX_TIM13_Init+0x88>)
 81010d2:	f009 f994 	bl	810a3fe <HAL_TIM_IC_Init>
 81010d6:	4603      	mov	r3, r0
 81010d8:	2b00      	cmp	r3, #0
 81010da:	d001      	beq.n	81010e0 <MX_TIM13_Init+0x58>
  {
    Error_Handler();
 81010dc:	f000 fa32 	bl	8101544 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 81010e0:	2300      	movs	r3, #0
 81010e2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 81010e4:	2301      	movs	r3, #1
 81010e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 81010e8:	2300      	movs	r3, #0
 81010ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 81010ec:	2300      	movs	r3, #0
 81010ee:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 81010f0:	463b      	mov	r3, r7
 81010f2:	2200      	movs	r2, #0
 81010f4:	4619      	mov	r1, r3
 81010f6:	4806      	ldr	r0, [pc, #24]	@ (8101110 <MX_TIM13_Init+0x88>)
 81010f8:	f009 fa5c 	bl	810a5b4 <HAL_TIM_IC_ConfigChannel>
 81010fc:	4603      	mov	r3, r0
 81010fe:	2b00      	cmp	r3, #0
 8101100:	d001      	beq.n	8101106 <MX_TIM13_Init+0x7e>
  {
    Error_Handler();
 8101102:	f000 fa1f 	bl	8101544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8101106:	bf00      	nop
 8101108:	3710      	adds	r7, #16
 810110a:	46bd      	mov	sp, r7
 810110c:	bd80      	pop	{r7, pc}
 810110e:	bf00      	nop
 8101110:	10000750 	.word	0x10000750
 8101114:	40001c00 	.word	0x40001c00

08101118 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8101118:	b580      	push	{r7, lr}
 810111a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 810111c:	4b22      	ldr	r3, [pc, #136]	@ (81011a8 <MX_UART8_Init+0x90>)
 810111e:	4a23      	ldr	r2, [pc, #140]	@ (81011ac <MX_UART8_Init+0x94>)
 8101120:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8101122:	4b21      	ldr	r3, [pc, #132]	@ (81011a8 <MX_UART8_Init+0x90>)
 8101124:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8101128:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 810112a:	4b1f      	ldr	r3, [pc, #124]	@ (81011a8 <MX_UART8_Init+0x90>)
 810112c:	2200      	movs	r2, #0
 810112e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8101130:	4b1d      	ldr	r3, [pc, #116]	@ (81011a8 <MX_UART8_Init+0x90>)
 8101132:	2200      	movs	r2, #0
 8101134:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8101136:	4b1c      	ldr	r3, [pc, #112]	@ (81011a8 <MX_UART8_Init+0x90>)
 8101138:	2200      	movs	r2, #0
 810113a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 810113c:	4b1a      	ldr	r3, [pc, #104]	@ (81011a8 <MX_UART8_Init+0x90>)
 810113e:	220c      	movs	r2, #12
 8101140:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101142:	4b19      	ldr	r3, [pc, #100]	@ (81011a8 <MX_UART8_Init+0x90>)
 8101144:	2200      	movs	r2, #0
 8101146:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8101148:	4b17      	ldr	r3, [pc, #92]	@ (81011a8 <MX_UART8_Init+0x90>)
 810114a:	2200      	movs	r2, #0
 810114c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 810114e:	4b16      	ldr	r3, [pc, #88]	@ (81011a8 <MX_UART8_Init+0x90>)
 8101150:	2200      	movs	r2, #0
 8101152:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101154:	4b14      	ldr	r3, [pc, #80]	@ (81011a8 <MX_UART8_Init+0x90>)
 8101156:	2200      	movs	r2, #0
 8101158:	625a      	str	r2, [r3, #36]	@ 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810115a:	4b13      	ldr	r3, [pc, #76]	@ (81011a8 <MX_UART8_Init+0x90>)
 810115c:	2200      	movs	r2, #0
 810115e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8101160:	4811      	ldr	r0, [pc, #68]	@ (81011a8 <MX_UART8_Init+0x90>)
 8101162:	f00a f86f 	bl	810b244 <HAL_UART_Init>
 8101166:	4603      	mov	r3, r0
 8101168:	2b00      	cmp	r3, #0
 810116a:	d001      	beq.n	8101170 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 810116c:	f000 f9ea 	bl	8101544 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101170:	2100      	movs	r1, #0
 8101172:	480d      	ldr	r0, [pc, #52]	@ (81011a8 <MX_UART8_Init+0x90>)
 8101174:	f00b f876 	bl	810c264 <HAL_UARTEx_SetTxFifoThreshold>
 8101178:	4603      	mov	r3, r0
 810117a:	2b00      	cmp	r3, #0
 810117c:	d001      	beq.n	8101182 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 810117e:	f000 f9e1 	bl	8101544 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101182:	2100      	movs	r1, #0
 8101184:	4808      	ldr	r0, [pc, #32]	@ (81011a8 <MX_UART8_Init+0x90>)
 8101186:	f00b f8ab 	bl	810c2e0 <HAL_UARTEx_SetRxFifoThreshold>
 810118a:	4603      	mov	r3, r0
 810118c:	2b00      	cmp	r3, #0
 810118e:	d001      	beq.n	8101194 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8101190:	f000 f9d8 	bl	8101544 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8101194:	4804      	ldr	r0, [pc, #16]	@ (81011a8 <MX_UART8_Init+0x90>)
 8101196:	f00b f82c 	bl	810c1f2 <HAL_UARTEx_DisableFifoMode>
 810119a:	4603      	mov	r3, r0
 810119c:	2b00      	cmp	r3, #0
 810119e:	d001      	beq.n	81011a4 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 81011a0:	f000 f9d0 	bl	8101544 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 81011a4:	bf00      	nop
 81011a6:	bd80      	pop	{r7, pc}
 81011a8:	1000079c 	.word	0x1000079c
 81011ac:	40007c00 	.word	0x40007c00

081011b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 81011b0:	b580      	push	{r7, lr}
 81011b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 81011b4:	4b22      	ldr	r3, [pc, #136]	@ (8101240 <MX_USART1_UART_Init+0x90>)
 81011b6:	4a23      	ldr	r2, [pc, #140]	@ (8101244 <MX_USART1_UART_Init+0x94>)
 81011b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 81011ba:	4b21      	ldr	r3, [pc, #132]	@ (8101240 <MX_USART1_UART_Init+0x90>)
 81011bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 81011c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 81011c2:	4b1f      	ldr	r3, [pc, #124]	@ (8101240 <MX_USART1_UART_Init+0x90>)
 81011c4:	2200      	movs	r2, #0
 81011c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 81011c8:	4b1d      	ldr	r3, [pc, #116]	@ (8101240 <MX_USART1_UART_Init+0x90>)
 81011ca:	2200      	movs	r2, #0
 81011cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 81011ce:	4b1c      	ldr	r3, [pc, #112]	@ (8101240 <MX_USART1_UART_Init+0x90>)
 81011d0:	2200      	movs	r2, #0
 81011d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 81011d4:	4b1a      	ldr	r3, [pc, #104]	@ (8101240 <MX_USART1_UART_Init+0x90>)
 81011d6:	220c      	movs	r2, #12
 81011d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81011da:	4b19      	ldr	r3, [pc, #100]	@ (8101240 <MX_USART1_UART_Init+0x90>)
 81011dc:	2200      	movs	r2, #0
 81011de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 81011e0:	4b17      	ldr	r3, [pc, #92]	@ (8101240 <MX_USART1_UART_Init+0x90>)
 81011e2:	2200      	movs	r2, #0
 81011e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81011e6:	4b16      	ldr	r3, [pc, #88]	@ (8101240 <MX_USART1_UART_Init+0x90>)
 81011e8:	2200      	movs	r2, #0
 81011ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81011ec:	4b14      	ldr	r3, [pc, #80]	@ (8101240 <MX_USART1_UART_Init+0x90>)
 81011ee:	2200      	movs	r2, #0
 81011f0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81011f2:	4b13      	ldr	r3, [pc, #76]	@ (8101240 <MX_USART1_UART_Init+0x90>)
 81011f4:	2200      	movs	r2, #0
 81011f6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 81011f8:	4811      	ldr	r0, [pc, #68]	@ (8101240 <MX_USART1_UART_Init+0x90>)
 81011fa:	f00a f823 	bl	810b244 <HAL_UART_Init>
 81011fe:	4603      	mov	r3, r0
 8101200:	2b00      	cmp	r3, #0
 8101202:	d001      	beq.n	8101208 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8101204:	f000 f99e 	bl	8101544 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101208:	2100      	movs	r1, #0
 810120a:	480d      	ldr	r0, [pc, #52]	@ (8101240 <MX_USART1_UART_Init+0x90>)
 810120c:	f00b f82a 	bl	810c264 <HAL_UARTEx_SetTxFifoThreshold>
 8101210:	4603      	mov	r3, r0
 8101212:	2b00      	cmp	r3, #0
 8101214:	d001      	beq.n	810121a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8101216:	f000 f995 	bl	8101544 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 810121a:	2100      	movs	r1, #0
 810121c:	4808      	ldr	r0, [pc, #32]	@ (8101240 <MX_USART1_UART_Init+0x90>)
 810121e:	f00b f85f 	bl	810c2e0 <HAL_UARTEx_SetRxFifoThreshold>
 8101222:	4603      	mov	r3, r0
 8101224:	2b00      	cmp	r3, #0
 8101226:	d001      	beq.n	810122c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8101228:	f000 f98c 	bl	8101544 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 810122c:	4804      	ldr	r0, [pc, #16]	@ (8101240 <MX_USART1_UART_Init+0x90>)
 810122e:	f00a ffe0 	bl	810c1f2 <HAL_UARTEx_DisableFifoMode>
 8101232:	4603      	mov	r3, r0
 8101234:	2b00      	cmp	r3, #0
 8101236:	d001      	beq.n	810123c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8101238:	f000 f984 	bl	8101544 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 810123c:	bf00      	nop
 810123e:	bd80      	pop	{r7, pc}
 8101240:	10000830 	.word	0x10000830
 8101244:	40011000 	.word	0x40011000

08101248 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8101248:	b580      	push	{r7, lr}
 810124a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 810124c:	4b23      	ldr	r3, [pc, #140]	@ (81012dc <MX_USART2_UART_Init+0x94>)
 810124e:	4a24      	ldr	r2, [pc, #144]	@ (81012e0 <MX_USART2_UART_Init+0x98>)
 8101250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8101252:	4b22      	ldr	r3, [pc, #136]	@ (81012dc <MX_USART2_UART_Init+0x94>)
 8101254:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8101258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 810125a:	4b20      	ldr	r3, [pc, #128]	@ (81012dc <MX_USART2_UART_Init+0x94>)
 810125c:	2200      	movs	r2, #0
 810125e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8101260:	4b1e      	ldr	r3, [pc, #120]	@ (81012dc <MX_USART2_UART_Init+0x94>)
 8101262:	2200      	movs	r2, #0
 8101264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8101266:	4b1d      	ldr	r3, [pc, #116]	@ (81012dc <MX_USART2_UART_Init+0x94>)
 8101268:	2200      	movs	r2, #0
 810126a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 810126c:	4b1b      	ldr	r3, [pc, #108]	@ (81012dc <MX_USART2_UART_Init+0x94>)
 810126e:	220c      	movs	r2, #12
 8101270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8101272:	4b1a      	ldr	r3, [pc, #104]	@ (81012dc <MX_USART2_UART_Init+0x94>)
 8101274:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8101278:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 810127a:	4b18      	ldr	r3, [pc, #96]	@ (81012dc <MX_USART2_UART_Init+0x94>)
 810127c:	2200      	movs	r2, #0
 810127e:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101280:	4b16      	ldr	r3, [pc, #88]	@ (81012dc <MX_USART2_UART_Init+0x94>)
 8101282:	2200      	movs	r2, #0
 8101284:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101286:	4b15      	ldr	r3, [pc, #84]	@ (81012dc <MX_USART2_UART_Init+0x94>)
 8101288:	2200      	movs	r2, #0
 810128a:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810128c:	4b13      	ldr	r3, [pc, #76]	@ (81012dc <MX_USART2_UART_Init+0x94>)
 810128e:	2200      	movs	r2, #0
 8101290:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8101292:	4812      	ldr	r0, [pc, #72]	@ (81012dc <MX_USART2_UART_Init+0x94>)
 8101294:	f009 ffd6 	bl	810b244 <HAL_UART_Init>
 8101298:	4603      	mov	r3, r0
 810129a:	2b00      	cmp	r3, #0
 810129c:	d001      	beq.n	81012a2 <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 810129e:	f000 f951 	bl	8101544 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 81012a2:	2100      	movs	r1, #0
 81012a4:	480d      	ldr	r0, [pc, #52]	@ (81012dc <MX_USART2_UART_Init+0x94>)
 81012a6:	f00a ffdd 	bl	810c264 <HAL_UARTEx_SetTxFifoThreshold>
 81012aa:	4603      	mov	r3, r0
 81012ac:	2b00      	cmp	r3, #0
 81012ae:	d001      	beq.n	81012b4 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 81012b0:	f000 f948 	bl	8101544 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 81012b4:	2100      	movs	r1, #0
 81012b6:	4809      	ldr	r0, [pc, #36]	@ (81012dc <MX_USART2_UART_Init+0x94>)
 81012b8:	f00b f812 	bl	810c2e0 <HAL_UARTEx_SetRxFifoThreshold>
 81012bc:	4603      	mov	r3, r0
 81012be:	2b00      	cmp	r3, #0
 81012c0:	d001      	beq.n	81012c6 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 81012c2:	f000 f93f 	bl	8101544 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 81012c6:	4805      	ldr	r0, [pc, #20]	@ (81012dc <MX_USART2_UART_Init+0x94>)
 81012c8:	f00a ff93 	bl	810c1f2 <HAL_UARTEx_DisableFifoMode>
 81012cc:	4603      	mov	r3, r0
 81012ce:	2b00      	cmp	r3, #0
 81012d0:	d001      	beq.n	81012d6 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 81012d2:	f000 f937 	bl	8101544 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 81012d6:	bf00      	nop
 81012d8:	bd80      	pop	{r7, pc}
 81012da:	bf00      	nop
 81012dc:	100008c4 	.word	0x100008c4
 81012e0:	40004400 	.word	0x40004400

081012e4 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 81012e4:	b580      	push	{r7, lr}
 81012e6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 81012e8:	4b15      	ldr	r3, [pc, #84]	@ (8101340 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81012ea:	4a16      	ldr	r2, [pc, #88]	@ (8101344 <MX_USB_OTG_HS_PCD_Init+0x60>)
 81012ec:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 9;
 81012ee:	4b14      	ldr	r3, [pc, #80]	@ (8101340 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81012f0:	2209      	movs	r2, #9
 81012f2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 81012f4:	4b12      	ldr	r3, [pc, #72]	@ (8101340 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81012f6:	2200      	movs	r2, #0
 81012f8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 81012fa:	4b11      	ldr	r3, [pc, #68]	@ (8101340 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 81012fc:	2200      	movs	r2, #0
 81012fe:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8101300:	4b0f      	ldr	r3, [pc, #60]	@ (8101340 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101302:	2201      	movs	r2, #1
 8101304:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8101306:	4b0e      	ldr	r3, [pc, #56]	@ (8101340 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101308:	2200      	movs	r2, #0
 810130a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 810130c:	4b0c      	ldr	r3, [pc, #48]	@ (8101340 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810130e:	2200      	movs	r2, #0
 8101310:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8101312:	4b0b      	ldr	r3, [pc, #44]	@ (8101340 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101314:	2200      	movs	r2, #0
 8101316:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8101318:	4b09      	ldr	r3, [pc, #36]	@ (8101340 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810131a:	2200      	movs	r2, #0
 810131c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 810131e:	4b08      	ldr	r3, [pc, #32]	@ (8101340 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101320:	2200      	movs	r2, #0
 8101322:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8101324:	4b06      	ldr	r3, [pc, #24]	@ (8101340 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8101326:	2200      	movs	r2, #0
 8101328:	741a      	strb	r2, [r3, #16]
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 810132a:	4805      	ldr	r0, [pc, #20]	@ (8101340 <MX_USB_OTG_HS_PCD_Init+0x5c>)
 810132c:	f003 feee 	bl	810510c <HAL_PCD_Init>
 8101330:	4603      	mov	r3, r0
 8101332:	2b00      	cmp	r3, #0
 8101334:	d001      	beq.n	810133a <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8101336:	f000 f905 	bl	8101544 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 810133a:	bf00      	nop
 810133c:	bd80      	pop	{r7, pc}
 810133e:	bf00      	nop
 8101340:	10000958 	.word	0x10000958
 8101344:	40040000 	.word	0x40040000

08101348 <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8101348:	b580      	push	{r7, lr}
 810134a:	b088      	sub	sp, #32
 810134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 810134e:	1d3b      	adds	r3, r7, #4
 8101350:	2200      	movs	r2, #0
 8101352:	601a      	str	r2, [r3, #0]
 8101354:	605a      	str	r2, [r3, #4]
 8101356:	609a      	str	r2, [r3, #8]
 8101358:	60da      	str	r2, [r3, #12]
 810135a:	611a      	str	r2, [r3, #16]
 810135c:	615a      	str	r2, [r3, #20]
 810135e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8101360:	4b1e      	ldr	r3, [pc, #120]	@ (81013dc <MX_FMC_Init+0x94>)
 8101362:	4a1f      	ldr	r2, [pc, #124]	@ (81013e0 <MX_FMC_Init+0x98>)
 8101364:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8101366:	4b1d      	ldr	r3, [pc, #116]	@ (81013dc <MX_FMC_Init+0x94>)
 8101368:	2201      	movs	r2, #1
 810136a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 810136c:	4b1b      	ldr	r3, [pc, #108]	@ (81013dc <MX_FMC_Init+0x94>)
 810136e:	2200      	movs	r2, #0
 8101370:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8101372:	4b1a      	ldr	r3, [pc, #104]	@ (81013dc <MX_FMC_Init+0x94>)
 8101374:	2208      	movs	r2, #8
 8101376:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8101378:	4b18      	ldr	r3, [pc, #96]	@ (81013dc <MX_FMC_Init+0x94>)
 810137a:	2220      	movs	r2, #32
 810137c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 810137e:	4b17      	ldr	r3, [pc, #92]	@ (81013dc <MX_FMC_Init+0x94>)
 8101380:	2200      	movs	r2, #0
 8101382:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8101384:	4b15      	ldr	r3, [pc, #84]	@ (81013dc <MX_FMC_Init+0x94>)
 8101386:	2280      	movs	r2, #128	@ 0x80
 8101388:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 810138a:	4b14      	ldr	r3, [pc, #80]	@ (81013dc <MX_FMC_Init+0x94>)
 810138c:	2200      	movs	r2, #0
 810138e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8101390:	4b12      	ldr	r3, [pc, #72]	@ (81013dc <MX_FMC_Init+0x94>)
 8101392:	2200      	movs	r2, #0
 8101394:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8101396:	4b11      	ldr	r3, [pc, #68]	@ (81013dc <MX_FMC_Init+0x94>)
 8101398:	2200      	movs	r2, #0
 810139a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 810139c:	4b0f      	ldr	r3, [pc, #60]	@ (81013dc <MX_FMC_Init+0x94>)
 810139e:	2200      	movs	r2, #0
 81013a0:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 81013a2:	2310      	movs	r3, #16
 81013a4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 81013a6:	2310      	movs	r3, #16
 81013a8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 81013aa:	2310      	movs	r3, #16
 81013ac:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 81013ae:	2310      	movs	r3, #16
 81013b0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 81013b2:	2310      	movs	r3, #16
 81013b4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 81013b6:	2310      	movs	r3, #16
 81013b8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 81013ba:	2310      	movs	r3, #16
 81013bc:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 81013be:	1d3b      	adds	r3, r7, #4
 81013c0:	4619      	mov	r1, r3
 81013c2:	4806      	ldr	r0, [pc, #24]	@ (81013dc <MX_FMC_Init+0x94>)
 81013c4:	f008 fd84 	bl	8109ed0 <HAL_SDRAM_Init>
 81013c8:	4603      	mov	r3, r0
 81013ca:	2b00      	cmp	r3, #0
 81013cc:	d001      	beq.n	81013d2 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 81013ce:	f000 f8b9 	bl	8101544 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 81013d2:	bf00      	nop
 81013d4:	3720      	adds	r7, #32
 81013d6:	46bd      	mov	sp, r7
 81013d8:	bd80      	pop	{r7, pc}
 81013da:	bf00      	nop
 81013dc:	10000e3c 	.word	0x10000e3c
 81013e0:	52004140 	.word	0x52004140

081013e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81013e4:	b480      	push	{r7}
 81013e6:	b08d      	sub	sp, #52	@ 0x34
 81013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 81013ea:	4b55      	ldr	r3, [pc, #340]	@ (8101540 <MX_GPIO_Init+0x15c>)
 81013ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81013f0:	4a53      	ldr	r2, [pc, #332]	@ (8101540 <MX_GPIO_Init+0x15c>)
 81013f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81013f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81013fa:	4b51      	ldr	r3, [pc, #324]	@ (8101540 <MX_GPIO_Init+0x15c>)
 81013fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101404:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8101406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8101408:	4b4d      	ldr	r3, [pc, #308]	@ (8101540 <MX_GPIO_Init+0x15c>)
 810140a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810140e:	4a4c      	ldr	r2, [pc, #304]	@ (8101540 <MX_GPIO_Init+0x15c>)
 8101410:	f043 0302 	orr.w	r3, r3, #2
 8101414:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101418:	4b49      	ldr	r3, [pc, #292]	@ (8101540 <MX_GPIO_Init+0x15c>)
 810141a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810141e:	f003 0302 	and.w	r3, r3, #2
 8101422:	62bb      	str	r3, [r7, #40]	@ 0x28
 8101424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8101426:	4b46      	ldr	r3, [pc, #280]	@ (8101540 <MX_GPIO_Init+0x15c>)
 8101428:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810142c:	4a44      	ldr	r2, [pc, #272]	@ (8101540 <MX_GPIO_Init+0x15c>)
 810142e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8101432:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101436:	4b42      	ldr	r3, [pc, #264]	@ (8101540 <MX_GPIO_Init+0x15c>)
 8101438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810143c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8101440:	627b      	str	r3, [r7, #36]	@ 0x24
 8101442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8101444:	4b3e      	ldr	r3, [pc, #248]	@ (8101540 <MX_GPIO_Init+0x15c>)
 8101446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810144a:	4a3d      	ldr	r2, [pc, #244]	@ (8101540 <MX_GPIO_Init+0x15c>)
 810144c:	f043 0308 	orr.w	r3, r3, #8
 8101450:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101454:	4b3a      	ldr	r3, [pc, #232]	@ (8101540 <MX_GPIO_Init+0x15c>)
 8101456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810145a:	f003 0308 	and.w	r3, r3, #8
 810145e:	623b      	str	r3, [r7, #32]
 8101460:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8101462:	4b37      	ldr	r3, [pc, #220]	@ (8101540 <MX_GPIO_Init+0x15c>)
 8101464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101468:	4a35      	ldr	r2, [pc, #212]	@ (8101540 <MX_GPIO_Init+0x15c>)
 810146a:	f043 0304 	orr.w	r3, r3, #4
 810146e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101472:	4b33      	ldr	r3, [pc, #204]	@ (8101540 <MX_GPIO_Init+0x15c>)
 8101474:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101478:	f003 0304 	and.w	r3, r3, #4
 810147c:	61fb      	str	r3, [r7, #28]
 810147e:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8101480:	4b2f      	ldr	r3, [pc, #188]	@ (8101540 <MX_GPIO_Init+0x15c>)
 8101482:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101486:	4a2e      	ldr	r2, [pc, #184]	@ (8101540 <MX_GPIO_Init+0x15c>)
 8101488:	f043 0310 	orr.w	r3, r3, #16
 810148c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101490:	4b2b      	ldr	r3, [pc, #172]	@ (8101540 <MX_GPIO_Init+0x15c>)
 8101492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101496:	f003 0310 	and.w	r3, r3, #16
 810149a:	61bb      	str	r3, [r7, #24]
 810149c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 810149e:	4b28      	ldr	r3, [pc, #160]	@ (8101540 <MX_GPIO_Init+0x15c>)
 81014a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014a4:	4a26      	ldr	r2, [pc, #152]	@ (8101540 <MX_GPIO_Init+0x15c>)
 81014a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81014aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81014ae:	4b24      	ldr	r3, [pc, #144]	@ (8101540 <MX_GPIO_Init+0x15c>)
 81014b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81014b8:	617b      	str	r3, [r7, #20]
 81014ba:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 81014bc:	4b20      	ldr	r3, [pc, #128]	@ (8101540 <MX_GPIO_Init+0x15c>)
 81014be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014c2:	4a1f      	ldr	r2, [pc, #124]	@ (8101540 <MX_GPIO_Init+0x15c>)
 81014c4:	f043 0301 	orr.w	r3, r3, #1
 81014c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81014cc:	4b1c      	ldr	r3, [pc, #112]	@ (8101540 <MX_GPIO_Init+0x15c>)
 81014ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014d2:	f003 0301 	and.w	r3, r3, #1
 81014d6:	613b      	str	r3, [r7, #16]
 81014d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 81014da:	4b19      	ldr	r3, [pc, #100]	@ (8101540 <MX_GPIO_Init+0x15c>)
 81014dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014e0:	4a17      	ldr	r2, [pc, #92]	@ (8101540 <MX_GPIO_Init+0x15c>)
 81014e2:	f043 0320 	orr.w	r3, r3, #32
 81014e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81014ea:	4b15      	ldr	r3, [pc, #84]	@ (8101540 <MX_GPIO_Init+0x15c>)
 81014ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014f0:	f003 0320 	and.w	r3, r3, #32
 81014f4:	60fb      	str	r3, [r7, #12]
 81014f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 81014f8:	4b11      	ldr	r3, [pc, #68]	@ (8101540 <MX_GPIO_Init+0x15c>)
 81014fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81014fe:	4a10      	ldr	r2, [pc, #64]	@ (8101540 <MX_GPIO_Init+0x15c>)
 8101500:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8101504:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101508:	4b0d      	ldr	r3, [pc, #52]	@ (8101540 <MX_GPIO_Init+0x15c>)
 810150a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810150e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8101512:	60bb      	str	r3, [r7, #8]
 8101514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8101516:	4b0a      	ldr	r3, [pc, #40]	@ (8101540 <MX_GPIO_Init+0x15c>)
 8101518:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810151c:	4a08      	ldr	r2, [pc, #32]	@ (8101540 <MX_GPIO_Init+0x15c>)
 810151e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8101522:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101526:	4b06      	ldr	r3, [pc, #24]	@ (8101540 <MX_GPIO_Init+0x15c>)
 8101528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810152c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8101530:	607b      	str	r3, [r7, #4]
 8101532:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8101534:	bf00      	nop
 8101536:	3734      	adds	r7, #52	@ 0x34
 8101538:	46bd      	mov	sp, r7
 810153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810153e:	4770      	bx	lr
 8101540:	58024400 	.word	0x58024400

08101544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101544:	b480      	push	{r7}
 8101546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101548:	b672      	cpsid	i
}
 810154a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810154c:	bf00      	nop
 810154e:	e7fd      	b.n	810154c <Error_Handler+0x8>

08101550 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101550:	b480      	push	{r7}
 8101552:	b083      	sub	sp, #12
 8101554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101556:	4b0a      	ldr	r3, [pc, #40]	@ (8101580 <HAL_MspInit+0x30>)
 8101558:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810155c:	4a08      	ldr	r2, [pc, #32]	@ (8101580 <HAL_MspInit+0x30>)
 810155e:	f043 0302 	orr.w	r3, r3, #2
 8101562:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101566:	4b06      	ldr	r3, [pc, #24]	@ (8101580 <HAL_MspInit+0x30>)
 8101568:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810156c:	f003 0302 	and.w	r3, r3, #2
 8101570:	607b      	str	r3, [r7, #4]
 8101572:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101574:	bf00      	nop
 8101576:	370c      	adds	r7, #12
 8101578:	46bd      	mov	sp, r7
 810157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810157e:	4770      	bx	lr
 8101580:	58024400 	.word	0x58024400

08101584 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8101584:	b580      	push	{r7, lr}
 8101586:	b08c      	sub	sp, #48	@ 0x30
 8101588:	af00      	add	r7, sp, #0
 810158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810158c:	f107 031c 	add.w	r3, r7, #28
 8101590:	2200      	movs	r2, #0
 8101592:	601a      	str	r2, [r3, #0]
 8101594:	605a      	str	r2, [r3, #4]
 8101596:	609a      	str	r2, [r3, #8]
 8101598:	60da      	str	r2, [r3, #12]
 810159a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 810159c:	687b      	ldr	r3, [r7, #4]
 810159e:	681b      	ldr	r3, [r3, #0]
 81015a0:	4a3e      	ldr	r2, [pc, #248]	@ (810169c <HAL_ADC_MspInit+0x118>)
 81015a2:	4293      	cmp	r3, r2
 81015a4:	d12a      	bne.n	81015fc <HAL_ADC_MspInit+0x78>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 81015a6:	4b3e      	ldr	r3, [pc, #248]	@ (81016a0 <HAL_ADC_MspInit+0x11c>)
 81015a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81015ac:	4a3c      	ldr	r2, [pc, #240]	@ (81016a0 <HAL_ADC_MspInit+0x11c>)
 81015ae:	f043 0320 	orr.w	r3, r3, #32
 81015b2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81015b6:	4b3a      	ldr	r3, [pc, #232]	@ (81016a0 <HAL_ADC_MspInit+0x11c>)
 81015b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81015bc:	f003 0320 	and.w	r3, r3, #32
 81015c0:	61bb      	str	r3, [r7, #24]
 81015c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 81015c4:	4b36      	ldr	r3, [pc, #216]	@ (81016a0 <HAL_ADC_MspInit+0x11c>)
 81015c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015ca:	4a35      	ldr	r2, [pc, #212]	@ (81016a0 <HAL_ADC_MspInit+0x11c>)
 81015cc:	f043 0301 	orr.w	r3, r3, #1
 81015d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81015d4:	4b32      	ldr	r3, [pc, #200]	@ (81016a0 <HAL_ADC_MspInit+0x11c>)
 81015d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81015da:	f003 0301 	and.w	r3, r3, #1
 81015de:	617b      	str	r3, [r7, #20]
 81015e0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 81015e2:	f04f 7180 	mov.w	r1, #16777216	@ 0x1000000
 81015e6:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 81015ea:	f001 fb8b 	bl	8102d04 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 81015ee:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 81015f2:	f04f 7000 	mov.w	r0, #33554432	@ 0x2000000
 81015f6:	f001 fb85 	bl	8102d04 <HAL_SYSCFG_AnalogSwitchConfig>
    /* USER CODE BEGIN ADC3_MspInit 1 */

    /* USER CODE END ADC3_MspInit 1 */
  }

}
 81015fa:	e04a      	b.n	8101692 <HAL_ADC_MspInit+0x10e>
  else if(hadc->Instance==ADC3)
 81015fc:	687b      	ldr	r3, [r7, #4]
 81015fe:	681b      	ldr	r3, [r3, #0]
 8101600:	4a28      	ldr	r2, [pc, #160]	@ (81016a4 <HAL_ADC_MspInit+0x120>)
 8101602:	4293      	cmp	r3, r2
 8101604:	d145      	bne.n	8101692 <HAL_ADC_MspInit+0x10e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8101606:	4b26      	ldr	r3, [pc, #152]	@ (81016a0 <HAL_ADC_MspInit+0x11c>)
 8101608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810160c:	4a24      	ldr	r2, [pc, #144]	@ (81016a0 <HAL_ADC_MspInit+0x11c>)
 810160e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8101612:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101616:	4b22      	ldr	r3, [pc, #136]	@ (81016a0 <HAL_ADC_MspInit+0x11c>)
 8101618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810161c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8101620:	613b      	str	r3, [r7, #16]
 8101622:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101624:	4b1e      	ldr	r3, [pc, #120]	@ (81016a0 <HAL_ADC_MspInit+0x11c>)
 8101626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810162a:	4a1d      	ldr	r2, [pc, #116]	@ (81016a0 <HAL_ADC_MspInit+0x11c>)
 810162c:	f043 0320 	orr.w	r3, r3, #32
 8101630:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101634:	4b1a      	ldr	r3, [pc, #104]	@ (81016a0 <HAL_ADC_MspInit+0x11c>)
 8101636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810163a:	f003 0320 	and.w	r3, r3, #32
 810163e:	60fb      	str	r3, [r7, #12]
 8101640:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101642:	4b17      	ldr	r3, [pc, #92]	@ (81016a0 <HAL_ADC_MspInit+0x11c>)
 8101644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101648:	4a15      	ldr	r2, [pc, #84]	@ (81016a0 <HAL_ADC_MspInit+0x11c>)
 810164a:	f043 0304 	orr.w	r3, r3, #4
 810164e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101652:	4b13      	ldr	r3, [pc, #76]	@ (81016a0 <HAL_ADC_MspInit+0x11c>)
 8101654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101658:	f003 0304 	and.w	r3, r3, #4
 810165c:	60bb      	str	r3, [r7, #8]
 810165e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_A1_Pin;
 8101660:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8101664:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8101666:	2303      	movs	r3, #3
 8101668:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810166a:	2300      	movs	r3, #0
 810166c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ARD_A1_GPIO_Port, &GPIO_InitStruct);
 810166e:	f107 031c 	add.w	r3, r7, #28
 8101672:	4619      	mov	r1, r3
 8101674:	480c      	ldr	r0, [pc, #48]	@ (81016a8 <HAL_ADC_MspInit+0x124>)
 8101676:	f003 fb87 	bl	8104d88 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 810167a:	f04f 6180 	mov.w	r1, #67108864	@ 0x4000000
 810167e:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 8101682:	f001 fb3f 	bl	8102d04 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8101686:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 810168a:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 810168e:	f001 fb39 	bl	8102d04 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8101692:	bf00      	nop
 8101694:	3730      	adds	r7, #48	@ 0x30
 8101696:	46bd      	mov	sp, r7
 8101698:	bd80      	pop	{r7, pc}
 810169a:	bf00      	nop
 810169c:	40022000 	.word	0x40022000
 81016a0:	58024400 	.word	0x58024400
 81016a4:	58026000 	.word	0x58026000
 81016a8:	58021400 	.word	0x58021400

081016ac <HAL_DFSDM_ChannelMspInit>:
  * This function configures the hardware resources used in this example
  * @param hdfsdm_channel: DFSDM_Channel handle pointer
  * @retval None
  */
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 81016ac:	b580      	push	{r7, lr}
 81016ae:	b0be      	sub	sp, #248	@ 0xf8
 81016b0:	af00      	add	r7, sp, #0
 81016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81016b4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 81016b8:	2200      	movs	r2, #0
 81016ba:	601a      	str	r2, [r3, #0]
 81016bc:	605a      	str	r2, [r3, #4]
 81016be:	609a      	str	r2, [r3, #8]
 81016c0:	60da      	str	r2, [r3, #12]
 81016c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81016c4:	f107 0318 	add.w	r3, r7, #24
 81016c8:	22c8      	movs	r2, #200	@ 0xc8
 81016ca:	2100      	movs	r1, #0
 81016cc:	4618      	mov	r0, r3
 81016ce:	f00b ff4c 	bl	810d56a <memset>
  if(DFSDM1_Init == 0)
 81016d2:	4b4e      	ldr	r3, [pc, #312]	@ (810180c <HAL_DFSDM_ChannelMspInit+0x160>)
 81016d4:	681b      	ldr	r3, [r3, #0]
 81016d6:	2b00      	cmp	r3, #0
 81016d8:	f040 8094 	bne.w	8101804 <HAL_DFSDM_ChannelMspInit+0x158>

    /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 81016dc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 81016e0:	f04f 0300 	mov.w	r3, #0
 81016e4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_D2PCLK1;
 81016e8:	2300      	movs	r3, #0
 81016ea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81016ee:	f107 0318 	add.w	r3, r7, #24
 81016f2:	4618      	mov	r0, r3
 81016f4:	f004 f964 	bl	81059c0 <HAL_RCCEx_PeriphCLKConfig>
 81016f8:	4603      	mov	r3, r0
 81016fa:	2b00      	cmp	r3, #0
 81016fc:	d001      	beq.n	8101702 <HAL_DFSDM_ChannelMspInit+0x56>
    {
      Error_Handler();
 81016fe:	f7ff ff21 	bl	8101544 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8101702:	4b43      	ldr	r3, [pc, #268]	@ (8101810 <HAL_DFSDM_ChannelMspInit+0x164>)
 8101704:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101708:	4a41      	ldr	r2, [pc, #260]	@ (8101810 <HAL_DFSDM_ChannelMspInit+0x164>)
 810170a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810170e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8101712:	4b3f      	ldr	r3, [pc, #252]	@ (8101810 <HAL_DFSDM_ChannelMspInit+0x164>)
 8101714:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8101718:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810171c:	617b      	str	r3, [r7, #20]
 810171e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101720:	4b3b      	ldr	r3, [pc, #236]	@ (8101810 <HAL_DFSDM_ChannelMspInit+0x164>)
 8101722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101726:	4a3a      	ldr	r2, [pc, #232]	@ (8101810 <HAL_DFSDM_ChannelMspInit+0x164>)
 8101728:	f043 0308 	orr.w	r3, r3, #8
 810172c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101730:	4b37      	ldr	r3, [pc, #220]	@ (8101810 <HAL_DFSDM_ChannelMspInit+0x164>)
 8101732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101736:	f003 0308 	and.w	r3, r3, #8
 810173a:	613b      	str	r3, [r7, #16]
 810173c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 810173e:	4b34      	ldr	r3, [pc, #208]	@ (8101810 <HAL_DFSDM_ChannelMspInit+0x164>)
 8101740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101744:	4a32      	ldr	r2, [pc, #200]	@ (8101810 <HAL_DFSDM_ChannelMspInit+0x164>)
 8101746:	f043 0302 	orr.w	r3, r3, #2
 810174a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810174e:	4b30      	ldr	r3, [pc, #192]	@ (8101810 <HAL_DFSDM_ChannelMspInit+0x164>)
 8101750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101754:	f003 0302 	and.w	r3, r3, #2
 8101758:	60fb      	str	r3, [r7, #12]
 810175a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810175c:	4b2c      	ldr	r3, [pc, #176]	@ (8101810 <HAL_DFSDM_ChannelMspInit+0x164>)
 810175e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101762:	4a2b      	ldr	r2, [pc, #172]	@ (8101810 <HAL_DFSDM_ChannelMspInit+0x164>)
 8101764:	f043 0304 	orr.w	r3, r3, #4
 8101768:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810176c:	4b28      	ldr	r3, [pc, #160]	@ (8101810 <HAL_DFSDM_ChannelMspInit+0x164>)
 810176e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101772:	f003 0304 	and.w	r3, r3, #4
 8101776:	60bb      	str	r3, [r7, #8]
 8101778:	68bb      	ldr	r3, [r7, #8]
    PD3     ------> DFSDM1_CKOUT
    PB9     ------> DFSDM1_DATIN7
    PB8     ------> DFSDM1_CKIN7
    PC7     ------> DFSDM1_DATIN3
    */
    GPIO_InitStruct.Pin = PMOD_18_DFSDM_CKOUT_Pin;
 810177a:	2308      	movs	r3, #8
 810177c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101780:	2302      	movs	r3, #2
 8101782:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101786:	2300      	movs	r3, #0
 8101788:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810178c:	2300      	movs	r3, #0
 810178e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8101792:	2303      	movs	r3, #3
 8101794:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(PMOD_18_DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8101798:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 810179c:	4619      	mov	r1, r3
 810179e:	481d      	ldr	r0, [pc, #116]	@ (8101814 <HAL_DFSDM_ChannelMspInit+0x168>)
 81017a0:	f003 faf2 	bl	8104d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_19_DFSDM_DATA7_Pin|PMOD_20_DFSDM_CK7_Pin;
 81017a4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 81017a8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81017ac:	2302      	movs	r3, #2
 81017ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81017b2:	2300      	movs	r3, #0
 81017b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81017b8:	2300      	movs	r3, #0
 81017ba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 81017be:	2303      	movs	r3, #3
 81017c0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81017c4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 81017c8:	4619      	mov	r1, r3
 81017ca:	4813      	ldr	r0, [pc, #76]	@ (8101818 <HAL_DFSDM_ChannelMspInit+0x16c>)
 81017cc:	f003 fadc 	bl	8104d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_17_DFSDM_DATA3_Pin;
 81017d0:	2380      	movs	r3, #128	@ 0x80
 81017d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81017d6:	2302      	movs	r3, #2
 81017d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81017dc:	2300      	movs	r3, #0
 81017de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81017e2:	2300      	movs	r3, #0
 81017e4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_DFSDM1;
 81017e8:	2304      	movs	r3, #4
 81017ea:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(PMOD_17_DFSDM_DATA3_GPIO_Port, &GPIO_InitStruct);
 81017ee:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 81017f2:	4619      	mov	r1, r3
 81017f4:	4809      	ldr	r0, [pc, #36]	@ (810181c <HAL_DFSDM_ChannelMspInit+0x170>)
 81017f6:	f003 fac7 	bl	8104d88 <HAL_GPIO_Init>

    /* USER CODE BEGIN DFSDM1_MspInit 1 */

    /* USER CODE END DFSDM1_MspInit 1 */

  DFSDM1_Init++;
 81017fa:	4b04      	ldr	r3, [pc, #16]	@ (810180c <HAL_DFSDM_ChannelMspInit+0x160>)
 81017fc:	681b      	ldr	r3, [r3, #0]
 81017fe:	3301      	adds	r3, #1
 8101800:	4a02      	ldr	r2, [pc, #8]	@ (810180c <HAL_DFSDM_ChannelMspInit+0x160>)
 8101802:	6013      	str	r3, [r2, #0]
  }

}
 8101804:	bf00      	nop
 8101806:	37f8      	adds	r7, #248	@ 0xf8
 8101808:	46bd      	mov	sp, r7
 810180a:	bd80      	pop	{r7, pc}
 810180c:	10000e88 	.word	0x10000e88
 8101810:	58024400 	.word	0x58024400
 8101814:	58020c00 	.word	0x58020c00
 8101818:	58020400 	.word	0x58020400
 810181c:	58020800 	.word	0x58020800

08101820 <HAL_ETH_MspInit>:
  * This function configures the hardware resources used in this example
  * @param heth: ETH handle pointer
  * @retval None
  */
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8101820:	b580      	push	{r7, lr}
 8101822:	b08e      	sub	sp, #56	@ 0x38
 8101824:	af00      	add	r7, sp, #0
 8101826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101828:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810182c:	2200      	movs	r2, #0
 810182e:	601a      	str	r2, [r3, #0]
 8101830:	605a      	str	r2, [r3, #4]
 8101832:	609a      	str	r2, [r3, #8]
 8101834:	60da      	str	r2, [r3, #12]
 8101836:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8101838:	687b      	ldr	r3, [r7, #4]
 810183a:	681b      	ldr	r3, [r3, #0]
 810183c:	4a49      	ldr	r2, [pc, #292]	@ (8101964 <HAL_ETH_MspInit+0x144>)
 810183e:	4293      	cmp	r3, r2
 8101840:	f040 808b 	bne.w	810195a <HAL_ETH_MspInit+0x13a>
  {
    /* USER CODE BEGIN ETH_MspInit 0 */

    /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8101844:	4b48      	ldr	r3, [pc, #288]	@ (8101968 <HAL_ETH_MspInit+0x148>)
 8101846:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810184a:	4a47      	ldr	r2, [pc, #284]	@ (8101968 <HAL_ETH_MspInit+0x148>)
 810184c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8101850:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101854:	4b44      	ldr	r3, [pc, #272]	@ (8101968 <HAL_ETH_MspInit+0x148>)
 8101856:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810185a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810185e:	623b      	str	r3, [r7, #32]
 8101860:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8101862:	4b41      	ldr	r3, [pc, #260]	@ (8101968 <HAL_ETH_MspInit+0x148>)
 8101864:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101868:	4a3f      	ldr	r2, [pc, #252]	@ (8101968 <HAL_ETH_MspInit+0x148>)
 810186a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810186e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101872:	4b3d      	ldr	r3, [pc, #244]	@ (8101968 <HAL_ETH_MspInit+0x148>)
 8101874:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101878:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810187c:	61fb      	str	r3, [r7, #28]
 810187e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8101880:	4b39      	ldr	r3, [pc, #228]	@ (8101968 <HAL_ETH_MspInit+0x148>)
 8101882:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101886:	4a38      	ldr	r2, [pc, #224]	@ (8101968 <HAL_ETH_MspInit+0x148>)
 8101888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810188c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101890:	4b35      	ldr	r3, [pc, #212]	@ (8101968 <HAL_ETH_MspInit+0x148>)
 8101892:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810189a:	61bb      	str	r3, [r7, #24]
 810189c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 810189e:	4b32      	ldr	r3, [pc, #200]	@ (8101968 <HAL_ETH_MspInit+0x148>)
 81018a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018a4:	4a30      	ldr	r2, [pc, #192]	@ (8101968 <HAL_ETH_MspInit+0x148>)
 81018a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81018aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81018ae:	4b2e      	ldr	r3, [pc, #184]	@ (8101968 <HAL_ETH_MspInit+0x148>)
 81018b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81018b8:	617b      	str	r3, [r7, #20]
 81018ba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 81018bc:	4b2a      	ldr	r3, [pc, #168]	@ (8101968 <HAL_ETH_MspInit+0x148>)
 81018be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018c2:	4a29      	ldr	r2, [pc, #164]	@ (8101968 <HAL_ETH_MspInit+0x148>)
 81018c4:	f043 0304 	orr.w	r3, r3, #4
 81018c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81018cc:	4b26      	ldr	r3, [pc, #152]	@ (8101968 <HAL_ETH_MspInit+0x148>)
 81018ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018d2:	f003 0304 	and.w	r3, r3, #4
 81018d6:	613b      	str	r3, [r7, #16]
 81018d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81018da:	4b23      	ldr	r3, [pc, #140]	@ (8101968 <HAL_ETH_MspInit+0x148>)
 81018dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018e0:	4a21      	ldr	r2, [pc, #132]	@ (8101968 <HAL_ETH_MspInit+0x148>)
 81018e2:	f043 0301 	orr.w	r3, r3, #1
 81018e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81018ea:	4b1f      	ldr	r3, [pc, #124]	@ (8101968 <HAL_ETH_MspInit+0x148>)
 81018ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81018f0:	f003 0301 	and.w	r3, r3, #1
 81018f4:	60fb      	str	r3, [r7, #12]
 81018f6:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ETH_REF_CLK
    PA7     ------> ETH_CRS_DV
    PC4     ------> ETH_RXD0
    PC5     ------> ETH_RXD1
    */
    GPIO_InitStruct.Pin = ETH_TX_EN_Pin|ETH_TXD1_Pin|ETH_TXD0_Pin;
 81018f8:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 81018fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81018fe:	2302      	movs	r3, #2
 8101900:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101902:	2300      	movs	r3, #0
 8101904:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101906:	2300      	movs	r3, #0
 8101908:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810190a:	230b      	movs	r3, #11
 810190c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 810190e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8101912:	4619      	mov	r1, r3
 8101914:	4815      	ldr	r0, [pc, #84]	@ (810196c <HAL_ETH_MspInit+0x14c>)
 8101916:	f003 fa37 	bl	8104d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDC_SAI4_D1_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 810191a:	2332      	movs	r3, #50	@ 0x32
 810191c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810191e:	2302      	movs	r3, #2
 8101920:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101922:	2300      	movs	r3, #0
 8101924:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101926:	2300      	movs	r3, #0
 8101928:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810192a:	230b      	movs	r3, #11
 810192c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810192e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8101932:	4619      	mov	r1, r3
 8101934:	480e      	ldr	r0, [pc, #56]	@ (8101970 <HAL_ETH_MspInit+0x150>)
 8101936:	f003 fa27 	bl	8104d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_MDIO_Pin|ETH_REF_CLK_Pin|ETH_CRS_DV_Pin;
 810193a:	2386      	movs	r3, #134	@ 0x86
 810193c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810193e:	2302      	movs	r3, #2
 8101940:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101942:	2300      	movs	r3, #0
 8101944:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101946:	2300      	movs	r3, #0
 8101948:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 810194a:	230b      	movs	r3, #11
 810194c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810194e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8101952:	4619      	mov	r1, r3
 8101954:	4807      	ldr	r0, [pc, #28]	@ (8101974 <HAL_ETH_MspInit+0x154>)
 8101956:	f003 fa17 	bl	8104d88 <HAL_GPIO_Init>

    /* USER CODE END ETH_MspInit 1 */

  }

}
 810195a:	bf00      	nop
 810195c:	3738      	adds	r7, #56	@ 0x38
 810195e:	46bd      	mov	sp, r7
 8101960:	bd80      	pop	{r7, pc}
 8101962:	bf00      	nop
 8101964:	40028000 	.word	0x40028000
 8101968:	58024400 	.word	0x58024400
 810196c:	58021800 	.word	0x58021800
 8101970:	58020800 	.word	0x58020800
 8101974:	58020000 	.word	0x58020000

08101978 <HAL_CEC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcec: CEC handle pointer
  * @retval None
  */
void HAL_CEC_MspInit(CEC_HandleTypeDef* hcec)
{
 8101978:	b580      	push	{r7, lr}
 810197a:	b0bc      	sub	sp, #240	@ 0xf0
 810197c:	af00      	add	r7, sp, #0
 810197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101980:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101984:	2200      	movs	r2, #0
 8101986:	601a      	str	r2, [r3, #0]
 8101988:	605a      	str	r2, [r3, #4]
 810198a:	609a      	str	r2, [r3, #8]
 810198c:	60da      	str	r2, [r3, #12]
 810198e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101990:	f107 0310 	add.w	r3, r7, #16
 8101994:	22c8      	movs	r2, #200	@ 0xc8
 8101996:	2100      	movs	r1, #0
 8101998:	4618      	mov	r0, r3
 810199a:	f00b fde6 	bl	810d56a <memset>
  if(hcec->Instance==CEC)
 810199e:	687b      	ldr	r3, [r7, #4]
 81019a0:	681b      	ldr	r3, [r3, #0]
 81019a2:	4a2b      	ldr	r2, [pc, #172]	@ (8101a50 <HAL_CEC_MspInit+0xd8>)
 81019a4:	4293      	cmp	r3, r2
 81019a6:	d14e      	bne.n	8101a46 <HAL_CEC_MspInit+0xce>

    /* USER CODE END CEC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CEC;
 81019a8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 81019ac:	f04f 0300 	mov.w	r3, #0
 81019b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.CecClockSelection = RCC_CECCLKSOURCE_LSI;
 81019b4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 81019b8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81019bc:	f107 0310 	add.w	r3, r7, #16
 81019c0:	4618      	mov	r0, r3
 81019c2:	f003 fffd 	bl	81059c0 <HAL_RCCEx_PeriphCLKConfig>
 81019c6:	4603      	mov	r3, r0
 81019c8:	2b00      	cmp	r3, #0
 81019ca:	d001      	beq.n	81019d0 <HAL_CEC_MspInit+0x58>
    {
      Error_Handler();
 81019cc:	f7ff fdba 	bl	8101544 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_CEC_CLK_ENABLE();
 81019d0:	4b20      	ldr	r3, [pc, #128]	@ (8101a54 <HAL_CEC_MspInit+0xdc>)
 81019d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81019d6:	4a1f      	ldr	r2, [pc, #124]	@ (8101a54 <HAL_CEC_MspInit+0xdc>)
 81019d8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 81019dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81019e0:	4b1c      	ldr	r3, [pc, #112]	@ (8101a54 <HAL_CEC_MspInit+0xdc>)
 81019e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81019e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81019ea:	60fb      	str	r3, [r7, #12]
 81019ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81019ee:	4b19      	ldr	r3, [pc, #100]	@ (8101a54 <HAL_CEC_MspInit+0xdc>)
 81019f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81019f4:	4a17      	ldr	r2, [pc, #92]	@ (8101a54 <HAL_CEC_MspInit+0xdc>)
 81019f6:	f043 0302 	orr.w	r3, r3, #2
 81019fa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81019fe:	4b15      	ldr	r3, [pc, #84]	@ (8101a54 <HAL_CEC_MspInit+0xdc>)
 8101a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101a04:	f003 0302 	and.w	r3, r3, #2
 8101a08:	60bb      	str	r3, [r7, #8]
 8101a0a:	68bb      	ldr	r3, [r7, #8]
    /**HDMI_CEC GPIO Configuration
    PB6     ------> CEC
    */
    GPIO_InitStruct.Pin = HDMI_CEC_Pin;
 8101a0c:	2340      	movs	r3, #64	@ 0x40
 8101a0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101a12:	2312      	movs	r3, #18
 8101a14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101a18:	2300      	movs	r3, #0
 8101a1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101a1e:	2300      	movs	r3, #0
 8101a20:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_CEC;
 8101a24:	2305      	movs	r3, #5
 8101a26:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(HDMI_CEC_GPIO_Port, &GPIO_InitStruct);
 8101a2a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101a2e:	4619      	mov	r1, r3
 8101a30:	4809      	ldr	r0, [pc, #36]	@ (8101a58 <HAL_CEC_MspInit+0xe0>)
 8101a32:	f003 f9a9 	bl	8104d88 <HAL_GPIO_Init>

    /* CEC interrupt Init */
    HAL_NVIC_SetPriority(CEC_IRQn, 0, 0);
 8101a36:	2200      	movs	r2, #0
 8101a38:	2100      	movs	r1, #0
 8101a3a:	205e      	movs	r0, #94	@ 0x5e
 8101a3c:	f002 fc15 	bl	810426a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CEC_IRQn);
 8101a40:	205e      	movs	r0, #94	@ 0x5e
 8101a42:	f002 fc2c 	bl	810429e <HAL_NVIC_EnableIRQ>

    /* USER CODE END CEC_MspInit 1 */

  }

}
 8101a46:	bf00      	nop
 8101a48:	37f0      	adds	r7, #240	@ 0xf0
 8101a4a:	46bd      	mov	sp, r7
 8101a4c:	bd80      	pop	{r7, pc}
 8101a4e:	bf00      	nop
 8101a50:	40006c00 	.word	0x40006c00
 8101a54:	58024400 	.word	0x58024400
 8101a58:	58020400 	.word	0x58020400

08101a5c <HAL_QSPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hqspi: QSPI handle pointer
  * @retval None
  */
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8101a5c:	b580      	push	{r7, lr}
 8101a5e:	b0c0      	sub	sp, #256	@ 0x100
 8101a60:	af00      	add	r7, sp, #0
 8101a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101a64:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101a68:	2200      	movs	r2, #0
 8101a6a:	601a      	str	r2, [r3, #0]
 8101a6c:	605a      	str	r2, [r3, #4]
 8101a6e:	609a      	str	r2, [r3, #8]
 8101a70:	60da      	str	r2, [r3, #12]
 8101a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101a74:	f107 0320 	add.w	r3, r7, #32
 8101a78:	22c8      	movs	r2, #200	@ 0xc8
 8101a7a:	2100      	movs	r1, #0
 8101a7c:	4618      	mov	r0, r3
 8101a7e:	f00b fd74 	bl	810d56a <memset>
  if(hqspi->Instance==QUADSPI)
 8101a82:	687b      	ldr	r3, [r7, #4]
 8101a84:	681b      	ldr	r3, [r3, #0]
 8101a86:	4a85      	ldr	r2, [pc, #532]	@ (8101c9c <HAL_QSPI_MspInit+0x240>)
 8101a88:	4293      	cmp	r3, r2
 8101a8a:	f040 8102 	bne.w	8101c92 <HAL_QSPI_MspInit+0x236>

    /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8101a8e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8101a92:	f04f 0300 	mov.w	r3, #0
 8101a96:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8101a9a:	2300      	movs	r3, #0
 8101a9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101a9e:	f107 0320 	add.w	r3, r7, #32
 8101aa2:	4618      	mov	r0, r3
 8101aa4:	f003 ff8c 	bl	81059c0 <HAL_RCCEx_PeriphCLKConfig>
 8101aa8:	4603      	mov	r3, r0
 8101aaa:	2b00      	cmp	r3, #0
 8101aac:	d001      	beq.n	8101ab2 <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 8101aae:	f7ff fd49 	bl	8101544 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8101ab2:	4b7b      	ldr	r3, [pc, #492]	@ (8101ca0 <HAL_QSPI_MspInit+0x244>)
 8101ab4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101ab8:	4a79      	ldr	r2, [pc, #484]	@ (8101ca0 <HAL_QSPI_MspInit+0x244>)
 8101aba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8101abe:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8101ac2:	4b77      	ldr	r3, [pc, #476]	@ (8101ca0 <HAL_QSPI_MspInit+0x244>)
 8101ac4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101ac8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101acc:	61fb      	str	r3, [r7, #28]
 8101ace:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8101ad0:	4b73      	ldr	r3, [pc, #460]	@ (8101ca0 <HAL_QSPI_MspInit+0x244>)
 8101ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101ad6:	4a72      	ldr	r2, [pc, #456]	@ (8101ca0 <HAL_QSPI_MspInit+0x244>)
 8101ad8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8101adc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101ae0:	4b6f      	ldr	r3, [pc, #444]	@ (8101ca0 <HAL_QSPI_MspInit+0x244>)
 8101ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8101aea:	61bb      	str	r3, [r7, #24]
 8101aec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8101aee:	4b6c      	ldr	r3, [pc, #432]	@ (8101ca0 <HAL_QSPI_MspInit+0x244>)
 8101af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101af4:	4a6a      	ldr	r2, [pc, #424]	@ (8101ca0 <HAL_QSPI_MspInit+0x244>)
 8101af6:	f043 0320 	orr.w	r3, r3, #32
 8101afa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101afe:	4b68      	ldr	r3, [pc, #416]	@ (8101ca0 <HAL_QSPI_MspInit+0x244>)
 8101b00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b04:	f003 0320 	and.w	r3, r3, #32
 8101b08:	617b      	str	r3, [r7, #20]
 8101b0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8101b0c:	4b64      	ldr	r3, [pc, #400]	@ (8101ca0 <HAL_QSPI_MspInit+0x244>)
 8101b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b12:	4a63      	ldr	r2, [pc, #396]	@ (8101ca0 <HAL_QSPI_MspInit+0x244>)
 8101b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8101b18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101b1c:	4b60      	ldr	r3, [pc, #384]	@ (8101ca0 <HAL_QSPI_MspInit+0x244>)
 8101b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8101b26:	613b      	str	r3, [r7, #16]
 8101b28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101b2a:	4b5d      	ldr	r3, [pc, #372]	@ (8101ca0 <HAL_QSPI_MspInit+0x244>)
 8101b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b30:	4a5b      	ldr	r2, [pc, #364]	@ (8101ca0 <HAL_QSPI_MspInit+0x244>)
 8101b32:	f043 0302 	orr.w	r3, r3, #2
 8101b36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101b3a:	4b59      	ldr	r3, [pc, #356]	@ (8101ca0 <HAL_QSPI_MspInit+0x244>)
 8101b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b40:	f003 0302 	and.w	r3, r3, #2
 8101b44:	60fb      	str	r3, [r7, #12]
 8101b46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101b48:	4b55      	ldr	r3, [pc, #340]	@ (8101ca0 <HAL_QSPI_MspInit+0x244>)
 8101b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b4e:	4a54      	ldr	r2, [pc, #336]	@ (8101ca0 <HAL_QSPI_MspInit+0x244>)
 8101b50:	f043 0308 	orr.w	r3, r3, #8
 8101b54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101b58:	4b51      	ldr	r3, [pc, #324]	@ (8101ca0 <HAL_QSPI_MspInit+0x244>)
 8101b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b5e:	f003 0308 	and.w	r3, r3, #8
 8101b62:	60bb      	str	r3, [r7, #8]
 8101b64:	68bb      	ldr	r3, [r7, #8]
    PH2     ------> QUADSPI_BK2_IO0
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = QSPI_BK2_IO2_Pin|QSPI_BK2_IO3_Pin;
 8101b66:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8101b6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b6e:	2302      	movs	r3, #2
 8101b70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b74:	2300      	movs	r3, #0
 8101b76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101b7a:	2300      	movs	r3, #0
 8101b7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101b80:	2309      	movs	r3, #9
 8101b82:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101b86:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101b8a:	4619      	mov	r1, r3
 8101b8c:	4845      	ldr	r0, [pc, #276]	@ (8101ca4 <HAL_QSPI_MspInit+0x248>)
 8101b8e:	f003 f8fb 	bl	8104d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8101b92:	2340      	movs	r3, #64	@ 0x40
 8101b94:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101b98:	2302      	movs	r3, #2
 8101b9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101b9e:	2300      	movs	r3, #0
 8101ba0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ba4:	2300      	movs	r3, #0
 8101ba6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8101baa:	230a      	movs	r3, #10
 8101bac:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8101bb0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101bb4:	4619      	mov	r1, r3
 8101bb6:	483b      	ldr	r0, [pc, #236]	@ (8101ca4 <HAL_QSPI_MspInit+0x248>)
 8101bb8:	f003 f8e6 	bl	8104d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin|QSPI_BK1_IO2_Pin;
 8101bbc:	23c0      	movs	r3, #192	@ 0xc0
 8101bbe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101bc2:	2302      	movs	r3, #2
 8101bc4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101bc8:	2300      	movs	r3, #0
 8101bca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101bce:	2300      	movs	r3, #0
 8101bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101bd4:	2309      	movs	r3, #9
 8101bd6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8101bda:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101bde:	4619      	mov	r1, r3
 8101be0:	4831      	ldr	r0, [pc, #196]	@ (8101ca8 <HAL_QSPI_MspInit+0x24c>)
 8101be2:	f003 f8d1 	bl	8104d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO1_Pin;
 8101be6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8101bea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101bee:	2302      	movs	r3, #2
 8101bf0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101bf4:	2300      	movs	r3, #0
 8101bf6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101bfa:	2300      	movs	r3, #0
 8101bfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8101c00:	230a      	movs	r3, #10
 8101c02:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO1_GPIO_Port, &GPIO_InitStruct);
 8101c06:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101c0a:	4619      	mov	r1, r3
 8101c0c:	4826      	ldr	r0, [pc, #152]	@ (8101ca8 <HAL_QSPI_MspInit+0x24c>)
 8101c0e:	f003 f8bb 	bl	8104d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK2_IO0_Pin|QSPI_BK2_IO1_Pin;
 8101c12:	230c      	movs	r3, #12
 8101c14:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c18:	2302      	movs	r3, #2
 8101c1a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c1e:	2300      	movs	r3, #0
 8101c20:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c24:	2300      	movs	r3, #0
 8101c26:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101c2a:	2309      	movs	r3, #9
 8101c2c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8101c30:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101c34:	4619      	mov	r1, r3
 8101c36:	481d      	ldr	r0, [pc, #116]	@ (8101cac <HAL_QSPI_MspInit+0x250>)
 8101c38:	f003 f8a6 	bl	8104d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 8101c3c:	2304      	movs	r3, #4
 8101c3e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c42:	2302      	movs	r3, #2
 8101c44:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c48:	2300      	movs	r3, #0
 8101c4a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c4e:	2300      	movs	r3, #0
 8101c50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101c54:	2309      	movs	r3, #9
 8101c56:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8101c5a:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101c5e:	4619      	mov	r1, r3
 8101c60:	4813      	ldr	r0, [pc, #76]	@ (8101cb0 <HAL_QSPI_MspInit+0x254>)
 8101c62:	f003 f891 	bl	8104d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin;
 8101c66:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8101c6a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101c6e:	2302      	movs	r3, #2
 8101c70:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101c74:	2300      	movs	r3, #0
 8101c76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101c7a:	2300      	movs	r3, #0
 8101c7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8101c80:	2309      	movs	r3, #9
 8101c82:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(QSPI_BK1_IO0_GPIO_Port, &GPIO_InitStruct);
 8101c86:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101c8a:	4619      	mov	r1, r3
 8101c8c:	4809      	ldr	r0, [pc, #36]	@ (8101cb4 <HAL_QSPI_MspInit+0x258>)
 8101c8e:	f003 f87b 	bl	8104d88 <HAL_GPIO_Init>

    /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8101c92:	bf00      	nop
 8101c94:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8101c98:	46bd      	mov	sp, r7
 8101c9a:	bd80      	pop	{r7, pc}
 8101c9c:	52005000 	.word	0x52005000
 8101ca0:	58024400 	.word	0x58024400
 8101ca4:	58021800 	.word	0x58021800
 8101ca8:	58021400 	.word	0x58021400
 8101cac:	58021c00 	.word	0x58021c00
 8101cb0:	58020400 	.word	0x58020400
 8101cb4:	58020c00 	.word	0x58020c00

08101cb8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8101cb8:	b580      	push	{r7, lr}
 8101cba:	b0b4      	sub	sp, #208	@ 0xd0
 8101cbc:	af00      	add	r7, sp, #0
 8101cbe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101cc0:	f107 0308 	add.w	r3, r7, #8
 8101cc4:	22c8      	movs	r2, #200	@ 0xc8
 8101cc6:	2100      	movs	r1, #0
 8101cc8:	4618      	mov	r0, r3
 8101cca:	f00b fc4e 	bl	810d56a <memset>
  if(hrtc->Instance==RTC)
 8101cce:	687b      	ldr	r3, [r7, #4]
 8101cd0:	681b      	ldr	r3, [r3, #0]
 8101cd2:	4a10      	ldr	r2, [pc, #64]	@ (8101d14 <HAL_RTC_MspInit+0x5c>)
 8101cd4:	4293      	cmp	r3, r2
 8101cd6:	d119      	bne.n	8101d0c <HAL_RTC_MspInit+0x54>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8101cd8:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8101cdc:	f04f 0300 	mov.w	r3, #0
 8101ce0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8101ce4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8101ce8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101cec:	f107 0308 	add.w	r3, r7, #8
 8101cf0:	4618      	mov	r0, r3
 8101cf2:	f003 fe65 	bl	81059c0 <HAL_RCCEx_PeriphCLKConfig>
 8101cf6:	4603      	mov	r3, r0
 8101cf8:	2b00      	cmp	r3, #0
 8101cfa:	d001      	beq.n	8101d00 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8101cfc:	f7ff fc22 	bl	8101544 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8101d00:	4b05      	ldr	r3, [pc, #20]	@ (8101d18 <HAL_RTC_MspInit+0x60>)
 8101d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101d04:	4a04      	ldr	r2, [pc, #16]	@ (8101d18 <HAL_RTC_MspInit+0x60>)
 8101d06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8101d0a:	6713      	str	r3, [r2, #112]	@ 0x70

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8101d0c:	bf00      	nop
 8101d0e:	37d0      	adds	r7, #208	@ 0xd0
 8101d10:	46bd      	mov	sp, r7
 8101d12:	bd80      	pop	{r7, pc}
 8101d14:	58004000 	.word	0x58004000
 8101d18:	58024400 	.word	0x58024400

08101d1c <HAL_SD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hsd: SD handle pointer
  * @retval None
  */
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8101d1c:	b580      	push	{r7, lr}
 8101d1e:	b0be      	sub	sp, #248	@ 0xf8
 8101d20:	af00      	add	r7, sp, #0
 8101d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101d24:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101d28:	2200      	movs	r2, #0
 8101d2a:	601a      	str	r2, [r3, #0]
 8101d2c:	605a      	str	r2, [r3, #4]
 8101d2e:	609a      	str	r2, [r3, #8]
 8101d30:	60da      	str	r2, [r3, #12]
 8101d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101d34:	f107 0318 	add.w	r3, r7, #24
 8101d38:	22c8      	movs	r2, #200	@ 0xc8
 8101d3a:	2100      	movs	r1, #0
 8101d3c:	4618      	mov	r0, r3
 8101d3e:	f00b fc14 	bl	810d56a <memset>
  if(hsd->Instance==SDMMC1)
 8101d42:	687b      	ldr	r3, [r7, #4]
 8101d44:	681b      	ldr	r3, [r3, #0]
 8101d46:	4a38      	ldr	r2, [pc, #224]	@ (8101e28 <HAL_SD_MspInit+0x10c>)
 8101d48:	4293      	cmp	r3, r2
 8101d4a:	d169      	bne.n	8101e20 <HAL_SD_MspInit+0x104>

    /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8101d4c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8101d50:	f04f 0300 	mov.w	r3, #0
 8101d54:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8101d58:	2300      	movs	r3, #0
 8101d5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101d5c:	f107 0318 	add.w	r3, r7, #24
 8101d60:	4618      	mov	r0, r3
 8101d62:	f003 fe2d 	bl	81059c0 <HAL_RCCEx_PeriphCLKConfig>
 8101d66:	4603      	mov	r3, r0
 8101d68:	2b00      	cmp	r3, #0
 8101d6a:	d001      	beq.n	8101d70 <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8101d6c:	f7ff fbea 	bl	8101544 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8101d70:	4b2e      	ldr	r3, [pc, #184]	@ (8101e2c <HAL_SD_MspInit+0x110>)
 8101d72:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101d76:	4a2d      	ldr	r2, [pc, #180]	@ (8101e2c <HAL_SD_MspInit+0x110>)
 8101d78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101d7c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8101d80:	4b2a      	ldr	r3, [pc, #168]	@ (8101e2c <HAL_SD_MspInit+0x110>)
 8101d82:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8101d86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101d8a:	617b      	str	r3, [r7, #20]
 8101d8c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101d8e:	4b27      	ldr	r3, [pc, #156]	@ (8101e2c <HAL_SD_MspInit+0x110>)
 8101d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d94:	4a25      	ldr	r2, [pc, #148]	@ (8101e2c <HAL_SD_MspInit+0x110>)
 8101d96:	f043 0304 	orr.w	r3, r3, #4
 8101d9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101d9e:	4b23      	ldr	r3, [pc, #140]	@ (8101e2c <HAL_SD_MspInit+0x110>)
 8101da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101da4:	f003 0304 	and.w	r3, r3, #4
 8101da8:	613b      	str	r3, [r7, #16]
 8101daa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101dac:	4b1f      	ldr	r3, [pc, #124]	@ (8101e2c <HAL_SD_MspInit+0x110>)
 8101dae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101db2:	4a1e      	ldr	r2, [pc, #120]	@ (8101e2c <HAL_SD_MspInit+0x110>)
 8101db4:	f043 0308 	orr.w	r3, r3, #8
 8101db8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8101e2c <HAL_SD_MspInit+0x110>)
 8101dbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101dc2:	f003 0308 	and.w	r3, r3, #8
 8101dc6:	60fb      	str	r3, [r7, #12]
 8101dc8:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    PC8     ------> SDMMC1_D0
    PC9     ------> SDMMC1_D1
    */
    GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8101dca:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8101dce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
                          |SDIO1_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101dd2:	2302      	movs	r3, #2
 8101dd4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101dd8:	2300      	movs	r3, #0
 8101dda:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101dde:	2303      	movs	r3, #3
 8101de0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101de4:	230c      	movs	r3, #12
 8101de6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101dea:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101dee:	4619      	mov	r1, r3
 8101df0:	480f      	ldr	r0, [pc, #60]	@ (8101e30 <HAL_SD_MspInit+0x114>)
 8101df2:	f002 ffc9 	bl	8104d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8101df6:	2304      	movs	r3, #4
 8101df8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101dfc:	2302      	movs	r3, #2
 8101dfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101e02:	2300      	movs	r3, #0
 8101e04:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8101e08:	2303      	movs	r3, #3
 8101e0a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8101e0e:	230c      	movs	r3, #12
 8101e10:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8101e14:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8101e18:	4619      	mov	r1, r3
 8101e1a:	4806      	ldr	r0, [pc, #24]	@ (8101e34 <HAL_SD_MspInit+0x118>)
 8101e1c:	f002 ffb4 	bl	8104d88 <HAL_GPIO_Init>

    /* USER CODE END SDMMC1_MspInit 1 */

  }

}
 8101e20:	bf00      	nop
 8101e22:	37f8      	adds	r7, #248	@ 0xf8
 8101e24:	46bd      	mov	sp, r7
 8101e26:	bd80      	pop	{r7, pc}
 8101e28:	52007000 	.word	0x52007000
 8101e2c:	58024400 	.word	0x58024400
 8101e30:	58020800 	.word	0x58020800
 8101e34:	58020c00 	.word	0x58020c00

08101e38 <HAL_SPDIFRX_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspdifrx: SPDIFRX handle pointer
  * @retval None
  */
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8101e38:	b580      	push	{r7, lr}
 8101e3a:	b0bc      	sub	sp, #240	@ 0xf0
 8101e3c:	af00      	add	r7, sp, #0
 8101e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101e40:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101e44:	2200      	movs	r2, #0
 8101e46:	601a      	str	r2, [r3, #0]
 8101e48:	605a      	str	r2, [r3, #4]
 8101e4a:	609a      	str	r2, [r3, #8]
 8101e4c:	60da      	str	r2, [r3, #12]
 8101e4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101e50:	f107 0310 	add.w	r3, r7, #16
 8101e54:	22c8      	movs	r2, #200	@ 0xc8
 8101e56:	2100      	movs	r1, #0
 8101e58:	4618      	mov	r0, r3
 8101e5a:	f00b fb86 	bl	810d56a <memset>
  if(hspdifrx->Instance==SPDIFRX)
 8101e5e:	687b      	ldr	r3, [r7, #4]
 8101e60:	681b      	ldr	r3, [r3, #0]
 8101e62:	f1b3 2f40 	cmp.w	r3, #1073758208	@ 0x40004000
 8101e66:	d144      	bne.n	8101ef2 <HAL_SPDIFRX_MspInit+0xba>

    /* USER CODE END SPDIFRX_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX;
 8101e68:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8101e6c:	f04f 0300 	mov.w	r3, #0
 8101e70:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.SpdifrxClockSelection = RCC_SPDIFRXCLKSOURCE_PLL;
 8101e74:	2300      	movs	r3, #0
 8101e76:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101e78:	f107 0310 	add.w	r3, r7, #16
 8101e7c:	4618      	mov	r0, r3
 8101e7e:	f003 fd9f 	bl	81059c0 <HAL_RCCEx_PeriphCLKConfig>
 8101e82:	4603      	mov	r3, r0
 8101e84:	2b00      	cmp	r3, #0
 8101e86:	d001      	beq.n	8101e8c <HAL_SPDIFRX_MspInit+0x54>
    {
      Error_Handler();
 8101e88:	f7ff fb5c 	bl	8101544 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8101e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8101efc <HAL_SPDIFRX_MspInit+0xc4>)
 8101e8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101e92:	4a1a      	ldr	r2, [pc, #104]	@ (8101efc <HAL_SPDIFRX_MspInit+0xc4>)
 8101e94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101e98:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101e9c:	4b17      	ldr	r3, [pc, #92]	@ (8101efc <HAL_SPDIFRX_MspInit+0xc4>)
 8101e9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101ea2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101ea6:	60fb      	str	r3, [r7, #12]
 8101ea8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8101eaa:	4b14      	ldr	r3, [pc, #80]	@ (8101efc <HAL_SPDIFRX_MspInit+0xc4>)
 8101eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101eb0:	4a12      	ldr	r2, [pc, #72]	@ (8101efc <HAL_SPDIFRX_MspInit+0xc4>)
 8101eb2:	f043 0308 	orr.w	r3, r3, #8
 8101eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101eba:	4b10      	ldr	r3, [pc, #64]	@ (8101efc <HAL_SPDIFRX_MspInit+0xc4>)
 8101ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101ec0:	f003 0308 	and.w	r3, r3, #8
 8101ec4:	60bb      	str	r3, [r7, #8]
 8101ec6:	68bb      	ldr	r3, [r7, #8]
    /**SPDIFRX1 GPIO Configuration
    PD7     ------> SPDIFRX1_IN0
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8101ec8:	2380      	movs	r3, #128	@ 0x80
 8101eca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101ece:	2302      	movs	r3, #2
 8101ed0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101ed4:	2300      	movs	r3, #0
 8101ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101eda:	2300      	movs	r3, #0
 8101edc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_SPDIF;
 8101ee0:	2309      	movs	r3, #9
 8101ee2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8101ee6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8101eea:	4619      	mov	r1, r3
 8101eec:	4804      	ldr	r0, [pc, #16]	@ (8101f00 <HAL_SPDIFRX_MspInit+0xc8>)
 8101eee:	f002 ff4b 	bl	8104d88 <HAL_GPIO_Init>

    /* USER CODE END SPDIFRX_MspInit 1 */

  }

}
 8101ef2:	bf00      	nop
 8101ef4:	37f0      	adds	r7, #240	@ 0xf0
 8101ef6:	46bd      	mov	sp, r7
 8101ef8:	bd80      	pop	{r7, pc}
 8101efa:	bf00      	nop
 8101efc:	58024400 	.word	0x58024400
 8101f00:	58020c00 	.word	0x58020c00

08101f04 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8101f04:	b580      	push	{r7, lr}
 8101f06:	b0c0      	sub	sp, #256	@ 0x100
 8101f08:	af00      	add	r7, sp, #0
 8101f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101f0c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101f10:	2200      	movs	r2, #0
 8101f12:	601a      	str	r2, [r3, #0]
 8101f14:	605a      	str	r2, [r3, #4]
 8101f16:	609a      	str	r2, [r3, #8]
 8101f18:	60da      	str	r2, [r3, #12]
 8101f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101f1c:	f107 0320 	add.w	r3, r7, #32
 8101f20:	22c8      	movs	r2, #200	@ 0xc8
 8101f22:	2100      	movs	r1, #0
 8101f24:	4618      	mov	r0, r3
 8101f26:	f00b fb20 	bl	810d56a <memset>
  if(hspi->Instance==SPI2)
 8101f2a:	687b      	ldr	r3, [r7, #4]
 8101f2c:	681b      	ldr	r3, [r3, #0]
 8101f2e:	4a72      	ldr	r2, [pc, #456]	@ (81020f8 <HAL_SPI_MspInit+0x1f4>)
 8101f30:	4293      	cmp	r3, r2
 8101f32:	d16b      	bne.n	810200c <HAL_SPI_MspInit+0x108>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8101f34:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8101f38:	f04f 0300 	mov.w	r3, #0
 8101f3c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8101f40:	2300      	movs	r3, #0
 8101f42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101f46:	f107 0320 	add.w	r3, r7, #32
 8101f4a:	4618      	mov	r0, r3
 8101f4c:	f003 fd38 	bl	81059c0 <HAL_RCCEx_PeriphCLKConfig>
 8101f50:	4603      	mov	r3, r0
 8101f52:	2b00      	cmp	r3, #0
 8101f54:	d001      	beq.n	8101f5a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8101f56:	f7ff faf5 	bl	8101544 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8101f5a:	4b68      	ldr	r3, [pc, #416]	@ (81020fc <HAL_SPI_MspInit+0x1f8>)
 8101f5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101f60:	4a66      	ldr	r2, [pc, #408]	@ (81020fc <HAL_SPI_MspInit+0x1f8>)
 8101f62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8101f66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101f6a:	4b64      	ldr	r3, [pc, #400]	@ (81020fc <HAL_SPI_MspInit+0x1f8>)
 8101f6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101f70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101f74:	61fb      	str	r3, [r7, #28]
 8101f76:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8101f78:	4b60      	ldr	r3, [pc, #384]	@ (81020fc <HAL_SPI_MspInit+0x1f8>)
 8101f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101f7e:	4a5f      	ldr	r2, [pc, #380]	@ (81020fc <HAL_SPI_MspInit+0x1f8>)
 8101f80:	f043 0301 	orr.w	r3, r3, #1
 8101f84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101f88:	4b5c      	ldr	r3, [pc, #368]	@ (81020fc <HAL_SPI_MspInit+0x1f8>)
 8101f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101f8e:	f003 0301 	and.w	r3, r3, #1
 8101f92:	61bb      	str	r3, [r7, #24]
 8101f94:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8101f96:	4b59      	ldr	r3, [pc, #356]	@ (81020fc <HAL_SPI_MspInit+0x1f8>)
 8101f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101f9c:	4a57      	ldr	r2, [pc, #348]	@ (81020fc <HAL_SPI_MspInit+0x1f8>)
 8101f9e:	f043 0304 	orr.w	r3, r3, #4
 8101fa2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101fa6:	4b55      	ldr	r3, [pc, #340]	@ (81020fc <HAL_SPI_MspInit+0x1f8>)
 8101fa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101fac:	f003 0304 	and.w	r3, r3, #4
 8101fb0:	617b      	str	r3, [r7, #20]
 8101fb2:	697b      	ldr	r3, [r7, #20]
    PA12     ------> SPI2_SCK
    PA11     ------> SPI2_NSS
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = SPI2_SCK_Pin|PMOD_1_Pin;
 8101fb4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8101fb8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101fbc:	2302      	movs	r3, #2
 8101fbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101fc2:	2300      	movs	r3, #0
 8101fc4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101fc8:	2300      	movs	r3, #0
 8101fca:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101fce:	2305      	movs	r3, #5
 8101fd0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101fd4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8101fd8:	4619      	mov	r1, r3
 8101fda:	4849      	ldr	r0, [pc, #292]	@ (8102100 <HAL_SPI_MspInit+0x1fc>)
 8101fdc:	f002 fed4 	bl	8104d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PMOD_3_Pin|PMOD_2_Pin;
 8101fe0:	230c      	movs	r3, #12
 8101fe2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8101fe6:	2302      	movs	r3, #2
 8101fe8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101fec:	2300      	movs	r3, #0
 8101fee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101ff2:	2300      	movs	r3, #0
 8101ff4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8101ff8:	2305      	movs	r3, #5
 8101ffa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101ffe:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8102002:	4619      	mov	r1, r3
 8102004:	483f      	ldr	r0, [pc, #252]	@ (8102104 <HAL_SPI_MspInit+0x200>)
 8102006:	f002 febf 	bl	8104d88 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI5_MspInit 1 */

    /* USER CODE END SPI5_MspInit 1 */
  }

}
 810200a:	e06f      	b.n	81020ec <HAL_SPI_MspInit+0x1e8>
  else if(hspi->Instance==SPI5)
 810200c:	687b      	ldr	r3, [r7, #4]
 810200e:	681b      	ldr	r3, [r3, #0]
 8102010:	4a3d      	ldr	r2, [pc, #244]	@ (8102108 <HAL_SPI_MspInit+0x204>)
 8102012:	4293      	cmp	r3, r2
 8102014:	d16a      	bne.n	81020ec <HAL_SPI_MspInit+0x1e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8102016:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 810201a:	f04f 0300 	mov.w	r3, #0
 810201e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Spi45ClockSelection = RCC_SPI45CLKSOURCE_D2PCLK1;
 8102022:	2300      	movs	r3, #0
 8102024:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102028:	f107 0320 	add.w	r3, r7, #32
 810202c:	4618      	mov	r0, r3
 810202e:	f003 fcc7 	bl	81059c0 <HAL_RCCEx_PeriphCLKConfig>
 8102032:	4603      	mov	r3, r0
 8102034:	2b00      	cmp	r3, #0
 8102036:	d001      	beq.n	810203c <HAL_SPI_MspInit+0x138>
      Error_Handler();
 8102038:	f7ff fa84 	bl	8101544 <Error_Handler>
    __HAL_RCC_SPI5_CLK_ENABLE();
 810203c:	4b2f      	ldr	r3, [pc, #188]	@ (81020fc <HAL_SPI_MspInit+0x1f8>)
 810203e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102042:	4a2e      	ldr	r2, [pc, #184]	@ (81020fc <HAL_SPI_MspInit+0x1f8>)
 8102044:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8102048:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 810204c:	4b2b      	ldr	r3, [pc, #172]	@ (81020fc <HAL_SPI_MspInit+0x1f8>)
 810204e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102052:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8102056:	613b      	str	r3, [r7, #16]
 8102058:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 810205a:	4b28      	ldr	r3, [pc, #160]	@ (81020fc <HAL_SPI_MspInit+0x1f8>)
 810205c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102060:	4a26      	ldr	r2, [pc, #152]	@ (81020fc <HAL_SPI_MspInit+0x1f8>)
 8102062:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8102066:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810206a:	4b24      	ldr	r3, [pc, #144]	@ (81020fc <HAL_SPI_MspInit+0x1f8>)
 810206c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102070:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8102074:	60fb      	str	r3, [r7, #12]
 8102076:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8102078:	4b20      	ldr	r3, [pc, #128]	@ (81020fc <HAL_SPI_MspInit+0x1f8>)
 810207a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810207e:	4a1f      	ldr	r2, [pc, #124]	@ (81020fc <HAL_SPI_MspInit+0x1f8>)
 8102080:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8102084:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102088:	4b1c      	ldr	r3, [pc, #112]	@ (81020fc <HAL_SPI_MspInit+0x1f8>)
 810208a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810208e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8102092:	60bb      	str	r3, [r7, #8]
 8102094:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D10_Pin;
 8102096:	2303      	movs	r3, #3
 8102098:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810209c:	2302      	movs	r3, #2
 810209e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81020a2:	2300      	movs	r3, #0
 81020a4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81020a8:	2300      	movs	r3, #0
 81020aa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 81020ae:	2305      	movs	r3, #5
 81020b0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 81020b4:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 81020b8:	4619      	mov	r1, r3
 81020ba:	4814      	ldr	r0, [pc, #80]	@ (810210c <HAL_SPI_MspInit+0x208>)
 81020bc:	f002 fe64 	bl	8104d88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 81020c0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 81020c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81020c8:	2302      	movs	r3, #2
 81020ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81020ce:	2300      	movs	r3, #0
 81020d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81020d4:	2300      	movs	r3, #0
 81020d6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 81020da:	2305      	movs	r3, #5
 81020dc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 81020e0:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 81020e4:	4619      	mov	r1, r3
 81020e6:	480a      	ldr	r0, [pc, #40]	@ (8102110 <HAL_SPI_MspInit+0x20c>)
 81020e8:	f002 fe4e 	bl	8104d88 <HAL_GPIO_Init>
}
 81020ec:	bf00      	nop
 81020ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 81020f2:	46bd      	mov	sp, r7
 81020f4:	bd80      	pop	{r7, pc}
 81020f6:	bf00      	nop
 81020f8:	40003800 	.word	0x40003800
 81020fc:	58024400 	.word	0x58024400
 8102100:	58020000 	.word	0x58020000
 8102104:	58020800 	.word	0x58020800
 8102108:	40015000 	.word	0x40015000
 810210c:	58022800 	.word	0x58022800
 8102110:	58022400 	.word	0x58022400

08102114 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 8102114:	b480      	push	{r7}
 8102116:	b085      	sub	sp, #20
 8102118:	af00      	add	r7, sp, #0
 810211a:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM8)
 810211c:	687b      	ldr	r3, [r7, #4]
 810211e:	681b      	ldr	r3, [r3, #0]
 8102120:	4a0b      	ldr	r2, [pc, #44]	@ (8102150 <HAL_TIM_OC_MspInit+0x3c>)
 8102122:	4293      	cmp	r3, r2
 8102124:	d10e      	bne.n	8102144 <HAL_TIM_OC_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM8_MspInit 0 */

    /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8102126:	4b0b      	ldr	r3, [pc, #44]	@ (8102154 <HAL_TIM_OC_MspInit+0x40>)
 8102128:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810212c:	4a09      	ldr	r2, [pc, #36]	@ (8102154 <HAL_TIM_OC_MspInit+0x40>)
 810212e:	f043 0302 	orr.w	r3, r3, #2
 8102132:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8102136:	4b07      	ldr	r3, [pc, #28]	@ (8102154 <HAL_TIM_OC_MspInit+0x40>)
 8102138:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810213c:	f003 0302 	and.w	r3, r3, #2
 8102140:	60fb      	str	r3, [r7, #12]
 8102142:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM8_MspInit 1 */

  }

}
 8102144:	bf00      	nop
 8102146:	3714      	adds	r7, #20
 8102148:	46bd      	mov	sp, r7
 810214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810214e:	4770      	bx	lr
 8102150:	40010400 	.word	0x40010400
 8102154:	58024400 	.word	0x58024400

08102158 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8102158:	b580      	push	{r7, lr}
 810215a:	b08a      	sub	sp, #40	@ 0x28
 810215c:	af00      	add	r7, sp, #0
 810215e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102160:	f107 0314 	add.w	r3, r7, #20
 8102164:	2200      	movs	r2, #0
 8102166:	601a      	str	r2, [r3, #0]
 8102168:	605a      	str	r2, [r3, #4]
 810216a:	609a      	str	r2, [r3, #8]
 810216c:	60da      	str	r2, [r3, #12]
 810216e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM13)
 8102170:	687b      	ldr	r3, [r7, #4]
 8102172:	681b      	ldr	r3, [r3, #0]
 8102174:	4a1a      	ldr	r2, [pc, #104]	@ (81021e0 <HAL_TIM_Base_MspInit+0x88>)
 8102176:	4293      	cmp	r3, r2
 8102178:	d12e      	bne.n	81021d8 <HAL_TIM_Base_MspInit+0x80>
  {
    /* USER CODE BEGIN TIM13_MspInit 0 */

    /* USER CODE END TIM13_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM13_CLK_ENABLE();
 810217a:	4b1a      	ldr	r3, [pc, #104]	@ (81021e4 <HAL_TIM_Base_MspInit+0x8c>)
 810217c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102180:	4a18      	ldr	r2, [pc, #96]	@ (81021e4 <HAL_TIM_Base_MspInit+0x8c>)
 8102182:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8102186:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810218a:	4b16      	ldr	r3, [pc, #88]	@ (81021e4 <HAL_TIM_Base_MspInit+0x8c>)
 810218c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8102194:	613b      	str	r3, [r7, #16]
 8102196:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8102198:	4b12      	ldr	r3, [pc, #72]	@ (81021e4 <HAL_TIM_Base_MspInit+0x8c>)
 810219a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810219e:	4a11      	ldr	r2, [pc, #68]	@ (81021e4 <HAL_TIM_Base_MspInit+0x8c>)
 81021a0:	f043 0320 	orr.w	r3, r3, #32
 81021a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81021a8:	4b0e      	ldr	r3, [pc, #56]	@ (81021e4 <HAL_TIM_Base_MspInit+0x8c>)
 81021aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81021ae:	f003 0320 	and.w	r3, r3, #32
 81021b2:	60fb      	str	r3, [r7, #12]
 81021b4:	68fb      	ldr	r3, [r7, #12]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = PMOD_14_ARD_D3_Pin;
 81021b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 81021ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81021bc:	2302      	movs	r3, #2
 81021be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81021c0:	2300      	movs	r3, #0
 81021c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81021c4:	2300      	movs	r3, #0
 81021c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 81021c8:	2309      	movs	r3, #9
 81021ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PMOD_14_ARD_D3_GPIO_Port, &GPIO_InitStruct);
 81021cc:	f107 0314 	add.w	r3, r7, #20
 81021d0:	4619      	mov	r1, r3
 81021d2:	4805      	ldr	r0, [pc, #20]	@ (81021e8 <HAL_TIM_Base_MspInit+0x90>)
 81021d4:	f002 fdd8 	bl	8104d88 <HAL_GPIO_Init>

    /* USER CODE END TIM13_MspInit 1 */

  }

}
 81021d8:	bf00      	nop
 81021da:	3728      	adds	r7, #40	@ 0x28
 81021dc:	46bd      	mov	sp, r7
 81021de:	bd80      	pop	{r7, pc}
 81021e0:	40001c00 	.word	0x40001c00
 81021e4:	58024400 	.word	0x58024400
 81021e8:	58021400 	.word	0x58021400

081021ec <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 81021ec:	b580      	push	{r7, lr}
 81021ee:	b088      	sub	sp, #32
 81021f0:	af00      	add	r7, sp, #0
 81021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81021f4:	f107 030c 	add.w	r3, r7, #12
 81021f8:	2200      	movs	r2, #0
 81021fa:	601a      	str	r2, [r3, #0]
 81021fc:	605a      	str	r2, [r3, #4]
 81021fe:	609a      	str	r2, [r3, #8]
 8102200:	60da      	str	r2, [r3, #12]
 8102202:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8102204:	687b      	ldr	r3, [r7, #4]
 8102206:	681b      	ldr	r3, [r3, #0]
 8102208:	4a12      	ldr	r2, [pc, #72]	@ (8102254 <HAL_TIM_MspPostInit+0x68>)
 810220a:	4293      	cmp	r3, r2
 810220c:	d11e      	bne.n	810224c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 810220e:	4b12      	ldr	r3, [pc, #72]	@ (8102258 <HAL_TIM_MspPostInit+0x6c>)
 8102210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102214:	4a10      	ldr	r2, [pc, #64]	@ (8102258 <HAL_TIM_MspPostInit+0x6c>)
 8102216:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 810221a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810221e:	4b0e      	ldr	r3, [pc, #56]	@ (8102258 <HAL_TIM_MspPostInit+0x6c>)
 8102220:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102224:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8102228:	60bb      	str	r3, [r7, #8]
 810222a:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PJ7     ------> TIM8_CH2N
    PJ6     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = ARD_D6_Pin|ARD_D9_Pin;
 810222c:	23c0      	movs	r3, #192	@ 0xc0
 810222e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102230:	2302      	movs	r3, #2
 8102232:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102234:	2300      	movs	r3, #0
 8102236:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102238:	2300      	movs	r3, #0
 810223a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 810223c:	2303      	movs	r3, #3
 810223e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8102240:	f107 030c 	add.w	r3, r7, #12
 8102244:	4619      	mov	r1, r3
 8102246:	4805      	ldr	r0, [pc, #20]	@ (810225c <HAL_TIM_MspPostInit+0x70>)
 8102248:	f002 fd9e 	bl	8104d88 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 810224c:	bf00      	nop
 810224e:	3720      	adds	r7, #32
 8102250:	46bd      	mov	sp, r7
 8102252:	bd80      	pop	{r7, pc}
 8102254:	40010400 	.word	0x40010400
 8102258:	58024400 	.word	0x58024400
 810225c:	58022400 	.word	0x58022400

08102260 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8102260:	b580      	push	{r7, lr}
 8102262:	b0c2      	sub	sp, #264	@ 0x108
 8102264:	af00      	add	r7, sp, #0
 8102266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 810226a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 810226e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102270:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8102274:	2200      	movs	r2, #0
 8102276:	601a      	str	r2, [r3, #0]
 8102278:	605a      	str	r2, [r3, #4]
 810227a:	609a      	str	r2, [r3, #8]
 810227c:	60da      	str	r2, [r3, #12]
 810227e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102280:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8102284:	22c8      	movs	r2, #200	@ 0xc8
 8102286:	2100      	movs	r1, #0
 8102288:	4618      	mov	r0, r3
 810228a:	f00b f96e 	bl	810d56a <memset>
  if(huart->Instance==UART8)
 810228e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8102292:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8102296:	681b      	ldr	r3, [r3, #0]
 8102298:	681b      	ldr	r3, [r3, #0]
 810229a:	4a8a      	ldr	r2, [pc, #552]	@ (81024c4 <HAL_UART_MspInit+0x264>)
 810229c:	4293      	cmp	r3, r2
 810229e:	d147      	bne.n	8102330 <HAL_UART_MspInit+0xd0>

    /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 81022a0:	f04f 0202 	mov.w	r2, #2
 81022a4:	f04f 0300 	mov.w	r3, #0
 81022a8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81022ac:	2300      	movs	r3, #0
 81022ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81022b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81022b6:	4618      	mov	r0, r3
 81022b8:	f003 fb82 	bl	81059c0 <HAL_RCCEx_PeriphCLKConfig>
 81022bc:	4603      	mov	r3, r0
 81022be:	2b00      	cmp	r3, #0
 81022c0:	d001      	beq.n	81022c6 <HAL_UART_MspInit+0x66>
    {
      Error_Handler();
 81022c2:	f7ff f93f 	bl	8101544 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 81022c6:	4b80      	ldr	r3, [pc, #512]	@ (81024c8 <HAL_UART_MspInit+0x268>)
 81022c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81022cc:	4a7e      	ldr	r2, [pc, #504]	@ (81024c8 <HAL_UART_MspInit+0x268>)
 81022ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 81022d2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81022d6:	4b7c      	ldr	r3, [pc, #496]	@ (81024c8 <HAL_UART_MspInit+0x268>)
 81022d8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81022dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 81022e0:	627b      	str	r3, [r7, #36]	@ 0x24
 81022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOJ_CLK_ENABLE();
 81022e4:	4b78      	ldr	r3, [pc, #480]	@ (81024c8 <HAL_UART_MspInit+0x268>)
 81022e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022ea:	4a77      	ldr	r2, [pc, #476]	@ (81024c8 <HAL_UART_MspInit+0x268>)
 81022ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 81022f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81022f4:	4b74      	ldr	r3, [pc, #464]	@ (81024c8 <HAL_UART_MspInit+0x268>)
 81022f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81022fe:	623b      	str	r3, [r7, #32]
 8102300:	6a3b      	ldr	r3, [r7, #32]
    /**UART8 GPIO Configuration
    PJ9     ------> UART8_RX
    PJ8     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = ARD_D0_Pin|ARD_D1_Pin;
 8102302:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8102306:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810230a:	2302      	movs	r3, #2
 810230c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102310:	2300      	movs	r3, #0
 8102312:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102316:	2300      	movs	r3, #0
 8102318:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 810231c:	2308      	movs	r3, #8
 810231e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8102322:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8102326:	4619      	mov	r1, r3
 8102328:	4868      	ldr	r0, [pc, #416]	@ (81024cc <HAL_UART_MspInit+0x26c>)
 810232a:	f002 fd2d 	bl	8104d88 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 810232e:	e0c3      	b.n	81024b8 <HAL_UART_MspInit+0x258>
  else if(huart->Instance==USART1)
 8102330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8102334:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8102338:	681b      	ldr	r3, [r3, #0]
 810233a:	681b      	ldr	r3, [r3, #0]
 810233c:	4a64      	ldr	r2, [pc, #400]	@ (81024d0 <HAL_UART_MspInit+0x270>)
 810233e:	4293      	cmp	r3, r2
 8102340:	d147      	bne.n	81023d2 <HAL_UART_MspInit+0x172>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8102342:	f04f 0201 	mov.w	r2, #1
 8102346:	f04f 0300 	mov.w	r3, #0
 810234a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 810234e:	2300      	movs	r3, #0
 8102350:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102354:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8102358:	4618      	mov	r0, r3
 810235a:	f003 fb31 	bl	81059c0 <HAL_RCCEx_PeriphCLKConfig>
 810235e:	4603      	mov	r3, r0
 8102360:	2b00      	cmp	r3, #0
 8102362:	d001      	beq.n	8102368 <HAL_UART_MspInit+0x108>
      Error_Handler();
 8102364:	f7ff f8ee 	bl	8101544 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8102368:	4b57      	ldr	r3, [pc, #348]	@ (81024c8 <HAL_UART_MspInit+0x268>)
 810236a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810236e:	4a56      	ldr	r2, [pc, #344]	@ (81024c8 <HAL_UART_MspInit+0x268>)
 8102370:	f043 0310 	orr.w	r3, r3, #16
 8102374:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8102378:	4b53      	ldr	r3, [pc, #332]	@ (81024c8 <HAL_UART_MspInit+0x268>)
 810237a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810237e:	f003 0310 	and.w	r3, r3, #16
 8102382:	61fb      	str	r3, [r7, #28]
 8102384:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102386:	4b50      	ldr	r3, [pc, #320]	@ (81024c8 <HAL_UART_MspInit+0x268>)
 8102388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810238c:	4a4e      	ldr	r2, [pc, #312]	@ (81024c8 <HAL_UART_MspInit+0x268>)
 810238e:	f043 0301 	orr.w	r3, r3, #1
 8102392:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102396:	4b4c      	ldr	r3, [pc, #304]	@ (81024c8 <HAL_UART_MspInit+0x268>)
 8102398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810239c:	f003 0301 	and.w	r3, r3, #1
 81023a0:	61bb      	str	r3, [r7, #24]
 81023a2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 81023a4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 81023a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81023ac:	2302      	movs	r3, #2
 81023ae:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81023b2:	2300      	movs	r3, #0
 81023b4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81023b8:	2300      	movs	r3, #0
 81023ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 81023be:	2307      	movs	r3, #7
 81023c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81023c4:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81023c8:	4619      	mov	r1, r3
 81023ca:	4842      	ldr	r0, [pc, #264]	@ (81024d4 <HAL_UART_MspInit+0x274>)
 81023cc:	f002 fcdc 	bl	8104d88 <HAL_GPIO_Init>
}
 81023d0:	e072      	b.n	81024b8 <HAL_UART_MspInit+0x258>
  else if(huart->Instance==USART2)
 81023d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 81023d6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 81023da:	681b      	ldr	r3, [r3, #0]
 81023dc:	681b      	ldr	r3, [r3, #0]
 81023de:	4a3e      	ldr	r2, [pc, #248]	@ (81024d8 <HAL_UART_MspInit+0x278>)
 81023e0:	4293      	cmp	r3, r2
 81023e2:	d169      	bne.n	81024b8 <HAL_UART_MspInit+0x258>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 81023e4:	f04f 0202 	mov.w	r2, #2
 81023e8:	f04f 0300 	mov.w	r3, #0
 81023ec:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 81023f0:	2300      	movs	r3, #0
 81023f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81023f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 81023fa:	4618      	mov	r0, r3
 81023fc:	f003 fae0 	bl	81059c0 <HAL_RCCEx_PeriphCLKConfig>
 8102400:	4603      	mov	r3, r0
 8102402:	2b00      	cmp	r3, #0
 8102404:	d001      	beq.n	810240a <HAL_UART_MspInit+0x1aa>
      Error_Handler();
 8102406:	f7ff f89d 	bl	8101544 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 810240a:	4b2f      	ldr	r3, [pc, #188]	@ (81024c8 <HAL_UART_MspInit+0x268>)
 810240c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102410:	4a2d      	ldr	r2, [pc, #180]	@ (81024c8 <HAL_UART_MspInit+0x268>)
 8102412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102416:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810241a:	4b2b      	ldr	r3, [pc, #172]	@ (81024c8 <HAL_UART_MspInit+0x268>)
 810241c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102420:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8102424:	617b      	str	r3, [r7, #20]
 8102426:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8102428:	4b27      	ldr	r3, [pc, #156]	@ (81024c8 <HAL_UART_MspInit+0x268>)
 810242a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810242e:	4a26      	ldr	r2, [pc, #152]	@ (81024c8 <HAL_UART_MspInit+0x268>)
 8102430:	f043 0308 	orr.w	r3, r3, #8
 8102434:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102438:	4b23      	ldr	r3, [pc, #140]	@ (81024c8 <HAL_UART_MspInit+0x268>)
 810243a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810243e:	f003 0308 	and.w	r3, r3, #8
 8102442:	613b      	str	r3, [r7, #16]
 8102444:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8102446:	4b20      	ldr	r3, [pc, #128]	@ (81024c8 <HAL_UART_MspInit+0x268>)
 8102448:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810244c:	4a1e      	ldr	r2, [pc, #120]	@ (81024c8 <HAL_UART_MspInit+0x268>)
 810244e:	f043 0301 	orr.w	r3, r3, #1
 8102452:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102456:	4b1c      	ldr	r3, [pc, #112]	@ (81024c8 <HAL_UART_MspInit+0x268>)
 8102458:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810245c:	f003 0301 	and.w	r3, r3, #1
 8102460:	60fb      	str	r3, [r7, #12]
 8102462:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PMOD_2__USART2_TX_Pin|PMOD_4__USART2_RTS_Pin|PMOD_3__USART2_RX_Pin;
 8102464:	2370      	movs	r3, #112	@ 0x70
 8102466:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810246a:	2302      	movs	r3, #2
 810246c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102470:	2300      	movs	r3, #0
 8102472:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102476:	2300      	movs	r3, #0
 8102478:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 810247c:	2307      	movs	r3, #7
 810247e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102482:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8102486:	4619      	mov	r1, r3
 8102488:	4814      	ldr	r0, [pc, #80]	@ (81024dc <HAL_UART_MspInit+0x27c>)
 810248a:	f002 fc7d 	bl	8104d88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PMOD_1__USART2_CTS_NSS_Pin;
 810248e:	2301      	movs	r3, #1
 8102490:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102494:	2302      	movs	r3, #2
 8102496:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810249a:	2300      	movs	r3, #0
 810249c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81024a0:	2300      	movs	r3, #0
 81024a2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 81024a6:	2307      	movs	r3, #7
 81024a8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(PMOD_1__USART2_CTS_NSS_GPIO_Port, &GPIO_InitStruct);
 81024ac:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81024b0:	4619      	mov	r1, r3
 81024b2:	4808      	ldr	r0, [pc, #32]	@ (81024d4 <HAL_UART_MspInit+0x274>)
 81024b4:	f002 fc68 	bl	8104d88 <HAL_GPIO_Init>
}
 81024b8:	bf00      	nop
 81024ba:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 81024be:	46bd      	mov	sp, r7
 81024c0:	bd80      	pop	{r7, pc}
 81024c2:	bf00      	nop
 81024c4:	40007c00 	.word	0x40007c00
 81024c8:	58024400 	.word	0x58024400
 81024cc:	58022400 	.word	0x58022400
 81024d0:	40011000 	.word	0x40011000
 81024d4:	58020000 	.word	0x58020000
 81024d8:	40004400 	.word	0x40004400
 81024dc:	58020c00 	.word	0x58020c00

081024e0 <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 81024e0:	b580      	push	{r7, lr}
 81024e2:	b0c2      	sub	sp, #264	@ 0x108
 81024e4:	af00      	add	r7, sp, #0
 81024e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 81024ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 81024ee:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81024f0:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81024f4:	2200      	movs	r2, #0
 81024f6:	601a      	str	r2, [r3, #0]
 81024f8:	605a      	str	r2, [r3, #4]
 81024fa:	609a      	str	r2, [r3, #8]
 81024fc:	60da      	str	r2, [r3, #12]
 81024fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102500:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8102504:	22c8      	movs	r2, #200	@ 0xc8
 8102506:	2100      	movs	r1, #0
 8102508:	4618      	mov	r0, r3
 810250a:	f00b f82e 	bl	810d56a <memset>
  if(hpcd->Instance==USB_OTG_HS)
 810250e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8102512:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8102516:	681b      	ldr	r3, [r3, #0]
 8102518:	681b      	ldr	r3, [r3, #0]
 810251a:	4a79      	ldr	r2, [pc, #484]	@ (8102700 <HAL_PCD_MspInit+0x220>)
 810251c:	4293      	cmp	r3, r2
 810251e:	f040 80ea 	bne.w	81026f6 <HAL_PCD_MspInit+0x216>

    /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8102522:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8102526:	f04f 0300 	mov.w	r3, #0
 810252a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 810252e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8102532:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102536:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 810253a:	4618      	mov	r0, r3
 810253c:	f003 fa40 	bl	81059c0 <HAL_RCCEx_PeriphCLKConfig>
 8102540:	4603      	mov	r3, r0
 8102542:	2b00      	cmp	r3, #0
 8102544:	d001      	beq.n	810254a <HAL_PCD_MspInit+0x6a>
    {
      Error_Handler();
 8102546:	f7fe fffd 	bl	8101544 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 810254a:	f002 ff97 	bl	810547c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810254e:	4b6d      	ldr	r3, [pc, #436]	@ (8102704 <HAL_PCD_MspInit+0x224>)
 8102550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102554:	4a6b      	ldr	r2, [pc, #428]	@ (8102704 <HAL_PCD_MspInit+0x224>)
 8102556:	f043 0302 	orr.w	r3, r3, #2
 810255a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810255e:	4b69      	ldr	r3, [pc, #420]	@ (8102704 <HAL_PCD_MspInit+0x224>)
 8102560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102564:	f003 0302 	and.w	r3, r3, #2
 8102568:	627b      	str	r3, [r7, #36]	@ 0x24
 810256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 810256c:	4b65      	ldr	r3, [pc, #404]	@ (8102704 <HAL_PCD_MspInit+0x224>)
 810256e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102572:	4a64      	ldr	r2, [pc, #400]	@ (8102704 <HAL_PCD_MspInit+0x224>)
 8102574:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8102578:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810257c:	4b61      	ldr	r3, [pc, #388]	@ (8102704 <HAL_PCD_MspInit+0x224>)
 810257e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102586:	623b      	str	r3, [r7, #32]
 8102588:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810258a:	4b5e      	ldr	r3, [pc, #376]	@ (8102704 <HAL_PCD_MspInit+0x224>)
 810258c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102590:	4a5c      	ldr	r2, [pc, #368]	@ (8102704 <HAL_PCD_MspInit+0x224>)
 8102592:	f043 0304 	orr.w	r3, r3, #4
 8102596:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810259a:	4b5a      	ldr	r3, [pc, #360]	@ (8102704 <HAL_PCD_MspInit+0x224>)
 810259c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81025a0:	f003 0304 	and.w	r3, r3, #4
 81025a4:	61fb      	str	r3, [r7, #28]
 81025a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 81025a8:	4b56      	ldr	r3, [pc, #344]	@ (8102704 <HAL_PCD_MspInit+0x224>)
 81025aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81025ae:	4a55      	ldr	r2, [pc, #340]	@ (8102704 <HAL_PCD_MspInit+0x224>)
 81025b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81025b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81025b8:	4b52      	ldr	r3, [pc, #328]	@ (8102704 <HAL_PCD_MspInit+0x224>)
 81025ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81025be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81025c2:	61bb      	str	r3, [r7, #24]
 81025c4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81025c6:	4b4f      	ldr	r3, [pc, #316]	@ (8102704 <HAL_PCD_MspInit+0x224>)
 81025c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81025cc:	4a4d      	ldr	r2, [pc, #308]	@ (8102704 <HAL_PCD_MspInit+0x224>)
 81025ce:	f043 0301 	orr.w	r3, r3, #1
 81025d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81025d6:	4b4b      	ldr	r3, [pc, #300]	@ (8102704 <HAL_PCD_MspInit+0x224>)
 81025d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81025dc:	f003 0301 	and.w	r3, r3, #1
 81025e0:	617b      	str	r3, [r7, #20]
 81025e2:	697b      	ldr	r3, [r7, #20]
    PB12     ------> USB_OTG_HS_ULPI_D5
    PA3     ------> USB_OTG_HS_ULPI_D0
    PB0     ------> USB_OTG_HS_ULPI_D1
    PB13     ------> USB_OTG_HS_ULPI_D6
    */
    GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D3_Pin|ULPI_D4_Pin|ULPI_D2_Pin
 81025e4:	f643 4323 	movw	r3, #15395	@ 0x3c23
 81025e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                          |ULPI_D5_Pin|ULPI_D1_Pin|ULPI_D6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81025ec:	2302      	movs	r3, #2
 81025ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81025f2:	2300      	movs	r3, #0
 81025f4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81025f8:	2302      	movs	r3, #2
 81025fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81025fe:	230a      	movs	r3, #10
 8102600:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8102604:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8102608:	4619      	mov	r1, r3
 810260a:	483f      	ldr	r0, [pc, #252]	@ (8102708 <HAL_PCD_MspInit+0x228>)
 810260c:	f002 fbbc 	bl	8104d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8102610:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8102614:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102618:	2302      	movs	r3, #2
 810261a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810261e:	2300      	movs	r3, #0
 8102620:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8102624:	2302      	movs	r3, #2
 8102626:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 810262a:	230a      	movs	r3, #10
 810262c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8102630:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8102634:	4619      	mov	r1, r3
 8102636:	4835      	ldr	r0, [pc, #212]	@ (810270c <HAL_PCD_MspInit+0x22c>)
 8102638:	f002 fba6 	bl	8104d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_STP_Pin;
 810263c:	2301      	movs	r3, #1
 810263e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102642:	2302      	movs	r3, #2
 8102644:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102648:	2300      	movs	r3, #0
 810264a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 810264e:	2302      	movs	r3, #2
 8102650:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 8102654:	230a      	movs	r3, #10
 8102656:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 810265a:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 810265e:	4619      	mov	r1, r3
 8102660:	482b      	ldr	r0, [pc, #172]	@ (8102710 <HAL_PCD_MspInit+0x230>)
 8102662:	f002 fb91 	bl	8104d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8102666:	2310      	movs	r3, #16
 8102668:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810266c:	2302      	movs	r3, #2
 810266e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102672:	2300      	movs	r3, #0
 8102674:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8102678:	2302      	movs	r3, #2
 810267a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 810267e:	230a      	movs	r3, #10
 8102680:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8102684:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 8102688:	4619      	mov	r1, r3
 810268a:	4822      	ldr	r0, [pc, #136]	@ (8102714 <HAL_PCD_MspInit+0x234>)
 810268c:	f002 fb7c 	bl	8104d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ULPI_CK_Pin|ULPI_D0_Pin;
 8102690:	2328      	movs	r3, #40	@ 0x28
 8102692:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102696:	2302      	movs	r3, #2
 8102698:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810269c:	2300      	movs	r3, #0
 810269e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 81026a2:	2302      	movs	r3, #2
 81026a4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG2_HS;
 81026a8:	230a      	movs	r3, #10
 81026aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81026ae:	f107 03f4 	add.w	r3, r7, #244	@ 0xf4
 81026b2:	4619      	mov	r1, r3
 81026b4:	4818      	ldr	r0, [pc, #96]	@ (8102718 <HAL_PCD_MspInit+0x238>)
 81026b6:	f002 fb67 	bl	8104d88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 81026ba:	4b12      	ldr	r3, [pc, #72]	@ (8102704 <HAL_PCD_MspInit+0x224>)
 81026bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81026c0:	4a10      	ldr	r2, [pc, #64]	@ (8102704 <HAL_PCD_MspInit+0x224>)
 81026c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 81026c6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81026ca:	4b0e      	ldr	r3, [pc, #56]	@ (8102704 <HAL_PCD_MspInit+0x224>)
 81026cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81026d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81026d4:	613b      	str	r3, [r7, #16]
 81026d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 81026d8:	4b0a      	ldr	r3, [pc, #40]	@ (8102704 <HAL_PCD_MspInit+0x224>)
 81026da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81026de:	4a09      	ldr	r2, [pc, #36]	@ (8102704 <HAL_PCD_MspInit+0x224>)
 81026e0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81026e4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81026e8:	4b06      	ldr	r3, [pc, #24]	@ (8102704 <HAL_PCD_MspInit+0x224>)
 81026ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81026ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 81026f2:	60fb      	str	r3, [r7, #12]
 81026f4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 81026f6:	bf00      	nop
 81026f8:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 81026fc:	46bd      	mov	sp, r7
 81026fe:	bd80      	pop	{r7, pc}
 8102700:	40040000 	.word	0x40040000
 8102704:	58024400 	.word	0x58024400
 8102708:	58020400 	.word	0x58020400
 810270c:	58022000 	.word	0x58022000
 8102710:	58020800 	.word	0x58020800
 8102714:	58021c00 	.word	0x58021c00
 8102718:	58020000 	.word	0x58020000

0810271c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 810271c:	b580      	push	{r7, lr}
 810271e:	b0ba      	sub	sp, #232	@ 0xe8
 8102720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8102722:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102726:	2200      	movs	r2, #0
 8102728:	601a      	str	r2, [r3, #0]
 810272a:	605a      	str	r2, [r3, #4]
 810272c:	609a      	str	r2, [r3, #8]
 810272e:	60da      	str	r2, [r3, #12]
 8102730:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8102732:	4b5c      	ldr	r3, [pc, #368]	@ (81028a4 <HAL_FMC_MspInit+0x188>)
 8102734:	681b      	ldr	r3, [r3, #0]
 8102736:	2b00      	cmp	r3, #0
 8102738:	f040 80b0 	bne.w	810289c <HAL_FMC_MspInit+0x180>
    return;
  }
  FMC_Initialized = 1;
 810273c:	4b59      	ldr	r3, [pc, #356]	@ (81028a4 <HAL_FMC_MspInit+0x188>)
 810273e:	2201      	movs	r2, #1
 8102740:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102742:	f107 0308 	add.w	r3, r7, #8
 8102746:	22c8      	movs	r2, #200	@ 0xc8
 8102748:	2100      	movs	r1, #0
 810274a:	4618      	mov	r0, r3
 810274c:	f00a ff0d 	bl	810d56a <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8102750:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8102754:	f04f 0300 	mov.w	r3, #0
 8102758:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 810275c:	2300      	movs	r3, #0
 810275e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102760:	f107 0308 	add.w	r3, r7, #8
 8102764:	4618      	mov	r0, r3
 8102766:	f003 f92b 	bl	81059c0 <HAL_RCCEx_PeriphCLKConfig>
 810276a:	4603      	mov	r3, r0
 810276c:	2b00      	cmp	r3, #0
 810276e:	d001      	beq.n	8102774 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8102770:	f7fe fee8 	bl	8101544 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8102774:	4b4c      	ldr	r3, [pc, #304]	@ (81028a8 <HAL_FMC_MspInit+0x18c>)
 8102776:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 810277a:	4a4b      	ldr	r2, [pc, #300]	@ (81028a8 <HAL_FMC_MspInit+0x18c>)
 810277c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8102780:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8102784:	4b48      	ldr	r3, [pc, #288]	@ (81028a8 <HAL_FMC_MspInit+0x18c>)
 8102786:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 810278a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 810278e:	607b      	str	r3, [r7, #4]
 8102790:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = FMC_D28_Pin|FMC_NBL3_Pin|FMC_NBL2_Pin|FMC_D25_Pin
 8102792:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8102796:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_D24_Pin|FMC_D29_Pin|FMC_D26_Pin|FMC_D27_Pin
                          |FMC_D30_Pin|FMC_D31_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810279a:	2302      	movs	r3, #2
 810279c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81027a0:	2300      	movs	r3, #0
 81027a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81027a6:	2303      	movs	r3, #3
 81027a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81027ac:	230c      	movs	r3, #12
 81027ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 81027b2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81027b6:	4619      	mov	r1, r3
 81027b8:	483c      	ldr	r0, [pc, #240]	@ (81028ac <HAL_FMC_MspInit+0x190>)
 81027ba:	f002 fae5 	bl	8104d88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D7_Pin|FMC_D6_Pin
 81027be:	f64f 7383 	movw	r3, #65411	@ 0xff83
 81027c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_D8_Pin|FMC_D9_Pin|FMC_D12_Pin|FMC_D5_Pin
                          |FMC_D10_Pin|FMC_D4_Pin|FMC_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81027c6:	2302      	movs	r3, #2
 81027c8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81027cc:	2300      	movs	r3, #0
 81027ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81027d2:	2303      	movs	r3, #3
 81027d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 81027d8:	230c      	movs	r3, #12
 81027da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81027de:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 81027e2:	4619      	mov	r1, r3
 81027e4:	4832      	ldr	r0, [pc, #200]	@ (81028b0 <HAL_FMC_MspInit+0x194>)
 81027e6:	f002 facf 	bl	8104d88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D23_Pin|FMC_D22_Pin|FMC_D21_Pin|FMC_SDNWE_Pin
 81027ea:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 81027ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_D18_Pin|FMC_D19_Pin|FMC_D17_Pin|FMC_D20_Pin
                          |FMC_SDNE1_Pin|FMC_D16_Pin|FMC_SDCKE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81027f2:	2302      	movs	r3, #2
 81027f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 81027f8:	2300      	movs	r3, #0
 81027fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81027fe:	2303      	movs	r3, #3
 8102800:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8102804:	230c      	movs	r3, #12
 8102806:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 810280a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810280e:	4619      	mov	r1, r3
 8102810:	4828      	ldr	r0, [pc, #160]	@ (81028b4 <HAL_FMC_MspInit+0x198>)
 8102812:	f002 fab9 	bl	8104d88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCAS_Pin|FMC_SDCLK_Pin|GPIO_PIN_5|FMC_BA0_Pin
 8102816:	f248 1337 	movw	r3, #33079	@ 0x8137
 810281a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_A12_Pin|FMC_A10_Pin|FMC_A11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810281e:	2302      	movs	r3, #2
 8102820:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102824:	2300      	movs	r3, #0
 8102826:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810282a:	2303      	movs	r3, #3
 810282c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8102830:	230c      	movs	r3, #12
 8102832:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8102836:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810283a:	4619      	mov	r1, r3
 810283c:	481e      	ldr	r0, [pc, #120]	@ (81028b8 <HAL_FMC_MspInit+0x19c>)
 810283e:	f002 faa3 	bl	8104d88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D0_Pin
 8102842:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8102846:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_D15_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810284a:	2302      	movs	r3, #2
 810284c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102850:	2300      	movs	r3, #0
 8102852:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102856:	2303      	movs	r3, #3
 8102858:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 810285c:	230c      	movs	r3, #12
 810285e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8102862:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102866:	4619      	mov	r1, r3
 8102868:	4814      	ldr	r0, [pc, #80]	@ (81028bc <HAL_FMC_MspInit+0x1a0>)
 810286a:	f002 fa8d 	bl	8104d88 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A2_Pin|FMC_A1_Pin|FMC_A0_Pin|FMC_A3_Pin
 810286e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8102872:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                          |FMC_A5_Pin|FMC_A4_Pin|FMC_A7_Pin|FMC_A8_Pin
                          |FMC_A6_Pin|FMC_A9_Pin|FMC_SDRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102876:	2302      	movs	r3, #2
 8102878:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 810287c:	2300      	movs	r3, #0
 810287e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102882:	2303      	movs	r3, #3
 8102884:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8102888:	230c      	movs	r3, #12
 810288a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 810288e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8102892:	4619      	mov	r1, r3
 8102894:	480a      	ldr	r0, [pc, #40]	@ (81028c0 <HAL_FMC_MspInit+0x1a4>)
 8102896:	f002 fa77 	bl	8104d88 <HAL_GPIO_Init>
 810289a:	e000      	b.n	810289e <HAL_FMC_MspInit+0x182>
    return;
 810289c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 810289e:	37e8      	adds	r7, #232	@ 0xe8
 81028a0:	46bd      	mov	sp, r7
 81028a2:	bd80      	pop	{r7, pc}
 81028a4:	10000e8c 	.word	0x10000e8c
 81028a8:	58024400 	.word	0x58024400
 81028ac:	58022000 	.word	0x58022000
 81028b0:	58021000 	.word	0x58021000
 81028b4:	58021c00 	.word	0x58021c00
 81028b8:	58021800 	.word	0x58021800
 81028bc:	58020c00 	.word	0x58020c00
 81028c0:	58021400 	.word	0x58021400

081028c4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 81028c4:	b580      	push	{r7, lr}
 81028c6:	b082      	sub	sp, #8
 81028c8:	af00      	add	r7, sp, #0
 81028ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 81028cc:	f7ff ff26 	bl	810271c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 81028d0:	bf00      	nop
 81028d2:	3708      	adds	r7, #8
 81028d4:	46bd      	mov	sp, r7
 81028d6:	bd80      	pop	{r7, pc}

081028d8 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 81028d8:	b580      	push	{r7, lr}
 81028da:	b0bc      	sub	sp, #240	@ 0xf0
 81028dc:	af00      	add	r7, sp, #0
 81028de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81028e0:	f107 0310 	add.w	r3, r7, #16
 81028e4:	22c8      	movs	r2, #200	@ 0xc8
 81028e6:	2100      	movs	r1, #0
 81028e8:	4618      	mov	r0, r3
 81028ea:	f00a fe3e 	bl	810d56a <memset>
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 81028ee:	687b      	ldr	r3, [r7, #4]
 81028f0:	681b      	ldr	r3, [r3, #0]
 81028f2:	4a4f      	ldr	r2, [pc, #316]	@ (8102a30 <HAL_SAI_MspInit+0x158>)
 81028f4:	4293      	cmp	r3, r2
 81028f6:	d153      	bne.n	81029a0 <HAL_SAI_MspInit+0xc8>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 81028f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81028fc:	f04f 0300 	mov.w	r3, #0
 8102900:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 8102904:	2300      	movs	r3, #0
 8102906:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8102908:	f107 0310 	add.w	r3, r7, #16
 810290c:	4618      	mov	r0, r3
 810290e:	f003 f857 	bl	81059c0 <HAL_RCCEx_PeriphCLKConfig>
 8102912:	4603      	mov	r3, r0
 8102914:	2b00      	cmp	r3, #0
 8102916:	d001      	beq.n	810291c <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 8102918:	f7fe fe14 	bl	8101544 <Error_Handler>
    }

    if (SAI1_client == 0)
 810291c:	4b45      	ldr	r3, [pc, #276]	@ (8102a34 <HAL_SAI_MspInit+0x15c>)
 810291e:	681b      	ldr	r3, [r3, #0]
 8102920:	2b00      	cmp	r3, #0
 8102922:	d10e      	bne.n	8102942 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8102924:	4b44      	ldr	r3, [pc, #272]	@ (8102a38 <HAL_SAI_MspInit+0x160>)
 8102926:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810292a:	4a43      	ldr	r2, [pc, #268]	@ (8102a38 <HAL_SAI_MspInit+0x160>)
 810292c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8102930:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8102934:	4b40      	ldr	r3, [pc, #256]	@ (8102a38 <HAL_SAI_MspInit+0x160>)
 8102936:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 810293a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810293e:	60fb      	str	r3, [r7, #12]
 8102940:	68fb      	ldr	r3, [r7, #12]
    }
    SAI1_client ++;
 8102942:	4b3c      	ldr	r3, [pc, #240]	@ (8102a34 <HAL_SAI_MspInit+0x15c>)
 8102944:	681b      	ldr	r3, [r3, #0]
 8102946:	3301      	adds	r3, #1
 8102948:	4a3a      	ldr	r2, [pc, #232]	@ (8102a34 <HAL_SAI_MspInit+0x15c>)
 810294a:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE6     ------> SAI1_SD_A
    PG7     ------> SAI1_MCLK_A
    */
    GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_FS_A_Pin|SAI1_SD_A_Pin;
 810294c:	2370      	movs	r3, #112	@ 0x70
 810294e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102952:	2302      	movs	r3, #2
 8102954:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102958:	2300      	movs	r3, #0
 810295a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810295e:	2300      	movs	r3, #0
 8102960:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8102964:	2306      	movs	r3, #6
 8102966:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 810296a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810296e:	4619      	mov	r1, r3
 8102970:	4832      	ldr	r0, [pc, #200]	@ (8102a3c <HAL_SAI_MspInit+0x164>)
 8102972:	f002 fa09 	bl	8104d88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SAI1_MCLK_A_Pin;
 8102976:	2380      	movs	r3, #128	@ 0x80
 8102978:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810297c:	2302      	movs	r3, #2
 810297e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102982:	2300      	movs	r3, #0
 8102984:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102988:	2300      	movs	r3, #0
 810298a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 810298e:	2306      	movs	r3, #6
 8102990:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_MCLK_A_GPIO_Port, &GPIO_InitStruct);
 8102994:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8102998:	4619      	mov	r1, r3
 810299a:	4829      	ldr	r0, [pc, #164]	@ (8102a40 <HAL_SAI_MspInit+0x168>)
 810299c:	f002 f9f4 	bl	8104d88 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 81029a0:	687b      	ldr	r3, [r7, #4]
 81029a2:	681b      	ldr	r3, [r3, #0]
 81029a4:	4a27      	ldr	r2, [pc, #156]	@ (8102a44 <HAL_SAI_MspInit+0x16c>)
 81029a6:	4293      	cmp	r3, r2
 81029a8:	d13e      	bne.n	8102a28 <HAL_SAI_MspInit+0x150>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 81029aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81029ae:	f04f 0300 	mov.w	r3, #0
 81029b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL;
 81029b6:	2300      	movs	r3, #0
 81029b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81029ba:	f107 0310 	add.w	r3, r7, #16
 81029be:	4618      	mov	r0, r3
 81029c0:	f002 fffe 	bl	81059c0 <HAL_RCCEx_PeriphCLKConfig>
 81029c4:	4603      	mov	r3, r0
 81029c6:	2b00      	cmp	r3, #0
 81029c8:	d001      	beq.n	81029ce <HAL_SAI_MspInit+0xf6>
    {
      Error_Handler();
 81029ca:	f7fe fdbb 	bl	8101544 <Error_Handler>
    }

      if (SAI1_client == 0)
 81029ce:	4b19      	ldr	r3, [pc, #100]	@ (8102a34 <HAL_SAI_MspInit+0x15c>)
 81029d0:	681b      	ldr	r3, [r3, #0]
 81029d2:	2b00      	cmp	r3, #0
 81029d4:	d10e      	bne.n	81029f4 <HAL_SAI_MspInit+0x11c>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 81029d6:	4b18      	ldr	r3, [pc, #96]	@ (8102a38 <HAL_SAI_MspInit+0x160>)
 81029d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81029dc:	4a16      	ldr	r2, [pc, #88]	@ (8102a38 <HAL_SAI_MspInit+0x160>)
 81029de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81029e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81029e6:	4b14      	ldr	r3, [pc, #80]	@ (8102a38 <HAL_SAI_MspInit+0x160>)
 81029e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81029ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81029f0:	60bb      	str	r3, [r7, #8]
 81029f2:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 81029f4:	4b0f      	ldr	r3, [pc, #60]	@ (8102a34 <HAL_SAI_MspInit+0x15c>)
 81029f6:	681b      	ldr	r3, [r3, #0]
 81029f8:	3301      	adds	r3, #1
 81029fa:	4a0e      	ldr	r2, [pc, #56]	@ (8102a34 <HAL_SAI_MspInit+0x15c>)
 81029fc:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = SAI1_SD_B_Pin;
 81029fe:	2308      	movs	r3, #8
 8102a00:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102a04:	2302      	movs	r3, #2
 8102a06:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102a0a:	2300      	movs	r3, #0
 8102a0c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102a10:	2300      	movs	r3, #0
 8102a12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8102a16:	2306      	movs	r3, #6
 8102a18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(SAI1_SD_B_GPIO_Port, &GPIO_InitStruct);
 8102a1c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8102a20:	4619      	mov	r1, r3
 8102a22:	4806      	ldr	r0, [pc, #24]	@ (8102a3c <HAL_SAI_MspInit+0x164>)
 8102a24:	f002 f9b0 	bl	8104d88 <HAL_GPIO_Init>

    }
}
 8102a28:	bf00      	nop
 8102a2a:	37f0      	adds	r7, #240	@ 0xf0
 8102a2c:	46bd      	mov	sp, r7
 8102a2e:	bd80      	pop	{r7, pc}
 8102a30:	40015804 	.word	0x40015804
 8102a34:	10000e90 	.word	0x10000e90
 8102a38:	58024400 	.word	0x58024400
 8102a3c:	58021000 	.word	0x58021000
 8102a40:	58021800 	.word	0x58021800
 8102a44:	40015824 	.word	0x40015824

08102a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102a48:	b480      	push	{r7}
 8102a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8102a4c:	bf00      	nop
 8102a4e:	e7fd      	b.n	8102a4c <NMI_Handler+0x4>

08102a50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102a50:	b480      	push	{r7}
 8102a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8102a54:	bf00      	nop
 8102a56:	e7fd      	b.n	8102a54 <HardFault_Handler+0x4>

08102a58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102a58:	b480      	push	{r7}
 8102a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102a5c:	bf00      	nop
 8102a5e:	e7fd      	b.n	8102a5c <MemManage_Handler+0x4>

08102a60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102a60:	b480      	push	{r7}
 8102a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102a64:	bf00      	nop
 8102a66:	e7fd      	b.n	8102a64 <BusFault_Handler+0x4>

08102a68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102a68:	b480      	push	{r7}
 8102a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102a6c:	bf00      	nop
 8102a6e:	e7fd      	b.n	8102a6c <UsageFault_Handler+0x4>

08102a70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102a70:	b480      	push	{r7}
 8102a72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8102a74:	bf00      	nop
 8102a76:	46bd      	mov	sp, r7
 8102a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a7c:	4770      	bx	lr

08102a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102a7e:	b480      	push	{r7}
 8102a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102a82:	bf00      	nop
 8102a84:	46bd      	mov	sp, r7
 8102a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a8a:	4770      	bx	lr

08102a8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102a8c:	b480      	push	{r7}
 8102a8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102a90:	bf00      	nop
 8102a92:	46bd      	mov	sp, r7
 8102a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a98:	4770      	bx	lr

08102a9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102a9a:	b580      	push	{r7, lr}
 8102a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8102a9e:	f000 f8cd 	bl	8102c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102aa2:	bf00      	nop
 8102aa4:	bd80      	pop	{r7, pc}
	...

08102aa8 <CEC_IRQHandler>:

/**
  * @brief This function handles HDMI-CEC global interrupt.
  */
void CEC_IRQHandler(void)
{
 8102aa8:	b580      	push	{r7, lr}
 8102aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CEC_IRQn 0 */

  /* USER CODE END CEC_IRQn 0 */
  HAL_CEC_IRQHandler(&hcec);
 8102aac:	4802      	ldr	r0, [pc, #8]	@ (8102ab8 <CEC_IRQHandler+0x10>)
 8102aae:	f001 fa05 	bl	8103ebc <HAL_CEC_IRQHandler>
  /* USER CODE BEGIN CEC_IRQn 1 */

  /* USER CODE END CEC_IRQn 1 */
}
 8102ab2:	bf00      	nop
 8102ab4:	bd80      	pop	{r7, pc}
 8102ab6:	bf00      	nop
 8102ab8:	10000344 	.word	0x10000344

08102abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102abc:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8102af8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8102ac0:	f7fd fdb8 	bl	8100634 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8102ac4:	f7fd fd9e 	bl	8100604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102ac8:	480c      	ldr	r0, [pc, #48]	@ (8102afc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102aca:	490d      	ldr	r1, [pc, #52]	@ (8102b00 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102acc:	4a0d      	ldr	r2, [pc, #52]	@ (8102b04 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8102ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8102ad0:	e002      	b.n	8102ad8 <LoopCopyDataInit>

08102ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8102ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8102ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8102ad6:	3304      	adds	r3, #4

08102ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8102ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8102ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8102adc:	d3f9      	bcc.n	8102ad2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8102ade:	4a0a      	ldr	r2, [pc, #40]	@ (8102b08 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8102ae0:	4c0a      	ldr	r4, [pc, #40]	@ (8102b0c <LoopFillZerobss+0x22>)
  movs r3, #0
 8102ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102ae4:	e001      	b.n	8102aea <LoopFillZerobss>

08102ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102ae8:	3204      	adds	r2, #4

08102aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102aec:	d3fb      	bcc.n	8102ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8102aee:	f00a fd45 	bl	810d57c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8102af2:	f7fd fdb7 	bl	8100664 <main>
  bx  lr
 8102af6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102af8:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102afc:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8102b00:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 8102b04:	0810d624 	.word	0x0810d624
  ldr r2, =_sbss
 8102b08:	100000d0 	.word	0x100000d0
  ldr r4, =_ebss
 8102b0c:	10000ebc 	.word	0x10000ebc

08102b10 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8102b10:	e7fe      	b.n	8102b10 <ADC3_IRQHandler>
	...

08102b14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102b14:	b580      	push	{r7, lr}
 8102b16:	b082      	sub	sp, #8
 8102b18:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8102b1a:	4b28      	ldr	r3, [pc, #160]	@ (8102bbc <HAL_Init+0xa8>)
 8102b1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102b20:	4a26      	ldr	r2, [pc, #152]	@ (8102bbc <HAL_Init+0xa8>)
 8102b22:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8102b26:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8102b2a:	4b24      	ldr	r3, [pc, #144]	@ (8102bbc <HAL_Init+0xa8>)
 8102b2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102b30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8102b34:	603b      	str	r3, [r7, #0]
 8102b36:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102b38:	4b21      	ldr	r3, [pc, #132]	@ (8102bc0 <HAL_Init+0xac>)
 8102b3a:	681b      	ldr	r3, [r3, #0]
 8102b3c:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8102b40:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8102b44:	4a1e      	ldr	r2, [pc, #120]	@ (8102bc0 <HAL_Init+0xac>)
 8102b46:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8102b4a:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8102bc0 <HAL_Init+0xac>)
 8102b4e:	681b      	ldr	r3, [r3, #0]
 8102b50:	4a1b      	ldr	r2, [pc, #108]	@ (8102bc0 <HAL_Init+0xac>)
 8102b52:	f043 0301 	orr.w	r3, r3, #1
 8102b56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102b58:	2003      	movs	r0, #3
 8102b5a:	f001 fb7b 	bl	8104254 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8102b5e:	f002 fd57 	bl	8105610 <HAL_RCC_GetSysClockFreq>
 8102b62:	4602      	mov	r2, r0
 8102b64:	4b15      	ldr	r3, [pc, #84]	@ (8102bbc <HAL_Init+0xa8>)
 8102b66:	699b      	ldr	r3, [r3, #24]
 8102b68:	0a1b      	lsrs	r3, r3, #8
 8102b6a:	f003 030f 	and.w	r3, r3, #15
 8102b6e:	4915      	ldr	r1, [pc, #84]	@ (8102bc4 <HAL_Init+0xb0>)
 8102b70:	5ccb      	ldrb	r3, [r1, r3]
 8102b72:	f003 031f 	and.w	r3, r3, #31
 8102b76:	fa22 f303 	lsr.w	r3, r2, r3
 8102b7a:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8102bbc <HAL_Init+0xa8>)
 8102b7e:	699b      	ldr	r3, [r3, #24]
 8102b80:	f003 030f 	and.w	r3, r3, #15
 8102b84:	4a0f      	ldr	r2, [pc, #60]	@ (8102bc4 <HAL_Init+0xb0>)
 8102b86:	5cd3      	ldrb	r3, [r2, r3]
 8102b88:	f003 031f 	and.w	r3, r3, #31
 8102b8c:	687a      	ldr	r2, [r7, #4]
 8102b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8102b92:	4a0d      	ldr	r2, [pc, #52]	@ (8102bc8 <HAL_Init+0xb4>)
 8102b94:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102b96:	4b0c      	ldr	r3, [pc, #48]	@ (8102bc8 <HAL_Init+0xb4>)
 8102b98:	681b      	ldr	r3, [r3, #0]
 8102b9a:	4a0c      	ldr	r2, [pc, #48]	@ (8102bcc <HAL_Init+0xb8>)
 8102b9c:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8102b9e:	2000      	movs	r0, #0
 8102ba0:	f000 f816 	bl	8102bd0 <HAL_InitTick>
 8102ba4:	4603      	mov	r3, r0
 8102ba6:	2b00      	cmp	r3, #0
 8102ba8:	d001      	beq.n	8102bae <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102baa:	2301      	movs	r3, #1
 8102bac:	e002      	b.n	8102bb4 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102bae:	f7fe fccf 	bl	8101550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102bb2:	2300      	movs	r3, #0
}
 8102bb4:	4618      	mov	r0, r3
 8102bb6:	3708      	adds	r7, #8
 8102bb8:	46bd      	mov	sp, r7
 8102bba:	bd80      	pop	{r7, pc}
 8102bbc:	58024400 	.word	0x58024400
 8102bc0:	40024400 	.word	0x40024400
 8102bc4:	0810d5dc 	.word	0x0810d5dc
 8102bc8:	10000004 	.word	0x10000004
 8102bcc:	10000000 	.word	0x10000000

08102bd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102bd0:	b580      	push	{r7, lr}
 8102bd2:	b082      	sub	sp, #8
 8102bd4:	af00      	add	r7, sp, #0
 8102bd6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8102bd8:	4b15      	ldr	r3, [pc, #84]	@ (8102c30 <HAL_InitTick+0x60>)
 8102bda:	781b      	ldrb	r3, [r3, #0]
 8102bdc:	2b00      	cmp	r3, #0
 8102bde:	d101      	bne.n	8102be4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8102be0:	2301      	movs	r3, #1
 8102be2:	e021      	b.n	8102c28 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8102be4:	4b13      	ldr	r3, [pc, #76]	@ (8102c34 <HAL_InitTick+0x64>)
 8102be6:	681a      	ldr	r2, [r3, #0]
 8102be8:	4b11      	ldr	r3, [pc, #68]	@ (8102c30 <HAL_InitTick+0x60>)
 8102bea:	781b      	ldrb	r3, [r3, #0]
 8102bec:	4619      	mov	r1, r3
 8102bee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8102bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8102bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8102bfa:	4618      	mov	r0, r3
 8102bfc:	f001 fb5d 	bl	81042ba <HAL_SYSTICK_Config>
 8102c00:	4603      	mov	r3, r0
 8102c02:	2b00      	cmp	r3, #0
 8102c04:	d001      	beq.n	8102c0a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8102c06:	2301      	movs	r3, #1
 8102c08:	e00e      	b.n	8102c28 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102c0a:	687b      	ldr	r3, [r7, #4]
 8102c0c:	2b0f      	cmp	r3, #15
 8102c0e:	d80a      	bhi.n	8102c26 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8102c10:	2200      	movs	r2, #0
 8102c12:	6879      	ldr	r1, [r7, #4]
 8102c14:	f04f 30ff 	mov.w	r0, #4294967295
 8102c18:	f001 fb27 	bl	810426a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8102c1c:	4a06      	ldr	r2, [pc, #24]	@ (8102c38 <HAL_InitTick+0x68>)
 8102c1e:	687b      	ldr	r3, [r7, #4]
 8102c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8102c22:	2300      	movs	r3, #0
 8102c24:	e000      	b.n	8102c28 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8102c26:	2301      	movs	r3, #1
}
 8102c28:	4618      	mov	r0, r3
 8102c2a:	3708      	adds	r7, #8
 8102c2c:	46bd      	mov	sp, r7
 8102c2e:	bd80      	pop	{r7, pc}
 8102c30:	1000000c 	.word	0x1000000c
 8102c34:	10000000 	.word	0x10000000
 8102c38:	10000008 	.word	0x10000008

08102c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102c3c:	b480      	push	{r7}
 8102c3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102c40:	4b06      	ldr	r3, [pc, #24]	@ (8102c5c <HAL_IncTick+0x20>)
 8102c42:	781b      	ldrb	r3, [r3, #0]
 8102c44:	461a      	mov	r2, r3
 8102c46:	4b06      	ldr	r3, [pc, #24]	@ (8102c60 <HAL_IncTick+0x24>)
 8102c48:	681b      	ldr	r3, [r3, #0]
 8102c4a:	4413      	add	r3, r2
 8102c4c:	4a04      	ldr	r2, [pc, #16]	@ (8102c60 <HAL_IncTick+0x24>)
 8102c4e:	6013      	str	r3, [r2, #0]
}
 8102c50:	bf00      	nop
 8102c52:	46bd      	mov	sp, r7
 8102c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c58:	4770      	bx	lr
 8102c5a:	bf00      	nop
 8102c5c:	1000000c 	.word	0x1000000c
 8102c60:	10000e94 	.word	0x10000e94

08102c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8102c64:	b480      	push	{r7}
 8102c66:	af00      	add	r7, sp, #0
  return uwTick;
 8102c68:	4b03      	ldr	r3, [pc, #12]	@ (8102c78 <HAL_GetTick+0x14>)
 8102c6a:	681b      	ldr	r3, [r3, #0]
}
 8102c6c:	4618      	mov	r0, r3
 8102c6e:	46bd      	mov	sp, r7
 8102c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c74:	4770      	bx	lr
 8102c76:	bf00      	nop
 8102c78:	10000e94 	.word	0x10000e94

08102c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8102c7c:	b580      	push	{r7, lr}
 8102c7e:	b084      	sub	sp, #16
 8102c80:	af00      	add	r7, sp, #0
 8102c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8102c84:	f7ff ffee 	bl	8102c64 <HAL_GetTick>
 8102c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8102c8a:	687b      	ldr	r3, [r7, #4]
 8102c8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8102c8e:	68fb      	ldr	r3, [r7, #12]
 8102c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8102c94:	d005      	beq.n	8102ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8102c96:	4b0a      	ldr	r3, [pc, #40]	@ (8102cc0 <HAL_Delay+0x44>)
 8102c98:	781b      	ldrb	r3, [r3, #0]
 8102c9a:	461a      	mov	r2, r3
 8102c9c:	68fb      	ldr	r3, [r7, #12]
 8102c9e:	4413      	add	r3, r2
 8102ca0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102ca2:	bf00      	nop
 8102ca4:	f7ff ffde 	bl	8102c64 <HAL_GetTick>
 8102ca8:	4602      	mov	r2, r0
 8102caa:	68bb      	ldr	r3, [r7, #8]
 8102cac:	1ad3      	subs	r3, r2, r3
 8102cae:	68fa      	ldr	r2, [r7, #12]
 8102cb0:	429a      	cmp	r2, r3
 8102cb2:	d8f7      	bhi.n	8102ca4 <HAL_Delay+0x28>
  {
  }
}
 8102cb4:	bf00      	nop
 8102cb6:	bf00      	nop
 8102cb8:	3710      	adds	r7, #16
 8102cba:	46bd      	mov	sp, r7
 8102cbc:	bd80      	pop	{r7, pc}
 8102cbe:	bf00      	nop
 8102cc0:	1000000c 	.word	0x1000000c

08102cc4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8102cc4:	b480      	push	{r7}
 8102cc6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8102cc8:	4b03      	ldr	r3, [pc, #12]	@ (8102cd8 <HAL_GetREVID+0x14>)
 8102cca:	681b      	ldr	r3, [r3, #0]
 8102ccc:	0c1b      	lsrs	r3, r3, #16
}
 8102cce:	4618      	mov	r0, r3
 8102cd0:	46bd      	mov	sp, r7
 8102cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cd6:	4770      	bx	lr
 8102cd8:	5c001000 	.word	0x5c001000

08102cdc <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8102cdc:	b480      	push	{r7}
 8102cde:	b083      	sub	sp, #12
 8102ce0:	af00      	add	r7, sp, #0
 8102ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8102ce4:	4b06      	ldr	r3, [pc, #24]	@ (8102d00 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8102ce6:	685b      	ldr	r3, [r3, #4]
 8102ce8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8102cec:	4904      	ldr	r1, [pc, #16]	@ (8102d00 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	4313      	orrs	r3, r2
 8102cf2:	604b      	str	r3, [r1, #4]
}
 8102cf4:	bf00      	nop
 8102cf6:	370c      	adds	r7, #12
 8102cf8:	46bd      	mov	sp, r7
 8102cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cfe:	4770      	bx	lr
 8102d00:	58000400 	.word	0x58000400

08102d04 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8102d04:	b480      	push	{r7}
 8102d06:	b083      	sub	sp, #12
 8102d08:	af00      	add	r7, sp, #0
 8102d0a:	6078      	str	r0, [r7, #4]
 8102d0c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8102d0e:	4b07      	ldr	r3, [pc, #28]	@ (8102d2c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8102d10:	685a      	ldr	r2, [r3, #4]
 8102d12:	687b      	ldr	r3, [r7, #4]
 8102d14:	43db      	mvns	r3, r3
 8102d16:	401a      	ands	r2, r3
 8102d18:	4904      	ldr	r1, [pc, #16]	@ (8102d2c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8102d1a:	683b      	ldr	r3, [r7, #0]
 8102d1c:	4313      	orrs	r3, r2
 8102d1e:	604b      	str	r3, [r1, #4]
}
 8102d20:	bf00      	nop
 8102d22:	370c      	adds	r7, #12
 8102d24:	46bd      	mov	sp, r7
 8102d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d2a:	4770      	bx	lr
 8102d2c:	58000400 	.word	0x58000400

08102d30 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8102d30:	b480      	push	{r7}
 8102d32:	b083      	sub	sp, #12
 8102d34:	af00      	add	r7, sp, #0
 8102d36:	6078      	str	r0, [r7, #4]
 8102d38:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8102d3a:	687b      	ldr	r3, [r7, #4]
 8102d3c:	689b      	ldr	r3, [r3, #8]
 8102d3e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8102d42:	683b      	ldr	r3, [r7, #0]
 8102d44:	431a      	orrs	r2, r3
 8102d46:	687b      	ldr	r3, [r7, #4]
 8102d48:	609a      	str	r2, [r3, #8]
}
 8102d4a:	bf00      	nop
 8102d4c:	370c      	adds	r7, #12
 8102d4e:	46bd      	mov	sp, r7
 8102d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d54:	4770      	bx	lr

08102d56 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8102d56:	b480      	push	{r7}
 8102d58:	b083      	sub	sp, #12
 8102d5a:	af00      	add	r7, sp, #0
 8102d5c:	6078      	str	r0, [r7, #4]
 8102d5e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8102d60:	687b      	ldr	r3, [r7, #4]
 8102d62:	689b      	ldr	r3, [r3, #8]
 8102d64:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8102d68:	683b      	ldr	r3, [r7, #0]
 8102d6a:	431a      	orrs	r2, r3
 8102d6c:	687b      	ldr	r3, [r7, #4]
 8102d6e:	609a      	str	r2, [r3, #8]
}
 8102d70:	bf00      	nop
 8102d72:	370c      	adds	r7, #12
 8102d74:	46bd      	mov	sp, r7
 8102d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d7a:	4770      	bx	lr

08102d7c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8102d7c:	b480      	push	{r7}
 8102d7e:	b083      	sub	sp, #12
 8102d80:	af00      	add	r7, sp, #0
 8102d82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8102d84:	687b      	ldr	r3, [r7, #4]
 8102d86:	689b      	ldr	r3, [r3, #8]
 8102d88:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8102d8c:	4618      	mov	r0, r3
 8102d8e:	370c      	adds	r7, #12
 8102d90:	46bd      	mov	sp, r7
 8102d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102d96:	4770      	bx	lr

08102d98 <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8102d98:	b480      	push	{r7}
 8102d9a:	b087      	sub	sp, #28
 8102d9c:	af00      	add	r7, sp, #0
 8102d9e:	6078      	str	r0, [r7, #4]
 8102da0:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 8102da2:	683b      	ldr	r3, [r7, #0]
 8102da4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102da8:	2b00      	cmp	r3, #0
 8102daa:	d107      	bne.n	8102dbc <LL_ADC_SetChannelPreselection+0x24>
 8102dac:	683b      	ldr	r3, [r7, #0]
 8102dae:	0e9b      	lsrs	r3, r3, #26
 8102db0:	f003 031f 	and.w	r3, r3, #31
 8102db4:	2201      	movs	r2, #1
 8102db6:	fa02 f303 	lsl.w	r3, r2, r3
 8102dba:	e015      	b.n	8102de8 <LL_ADC_SetChannelPreselection+0x50>
 8102dbc:	683b      	ldr	r3, [r7, #0]
 8102dbe:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102dc0:	693b      	ldr	r3, [r7, #16]
 8102dc2:	fa93 f3a3 	rbit	r3, r3
 8102dc6:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8102dc8:	68fb      	ldr	r3, [r7, #12]
 8102dca:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8102dcc:	697b      	ldr	r3, [r7, #20]
 8102dce:	2b00      	cmp	r3, #0
 8102dd0:	d101      	bne.n	8102dd6 <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 8102dd2:	2320      	movs	r3, #32
 8102dd4:	e003      	b.n	8102dde <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 8102dd6:	697b      	ldr	r3, [r7, #20]
 8102dd8:	fab3 f383 	clz	r3, r3
 8102ddc:	b2db      	uxtb	r3, r3
 8102dde:	f003 031f 	and.w	r3, r3, #31
 8102de2:	2201      	movs	r2, #1
 8102de4:	fa02 f303 	lsl.w	r3, r2, r3
 8102de8:	687a      	ldr	r2, [r7, #4]
 8102dea:	69d2      	ldr	r2, [r2, #28]
 8102dec:	431a      	orrs	r2, r3
 8102dee:	687b      	ldr	r3, [r7, #4]
 8102df0:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8102df2:	bf00      	nop
 8102df4:	371c      	adds	r7, #28
 8102df6:	46bd      	mov	sp, r7
 8102df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102dfc:	4770      	bx	lr

08102dfe <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8102dfe:	b480      	push	{r7}
 8102e00:	b087      	sub	sp, #28
 8102e02:	af00      	add	r7, sp, #0
 8102e04:	60f8      	str	r0, [r7, #12]
 8102e06:	60b9      	str	r1, [r7, #8]
 8102e08:	607a      	str	r2, [r7, #4]
 8102e0a:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102e0c:	68fb      	ldr	r3, [r7, #12]
 8102e0e:	3360      	adds	r3, #96	@ 0x60
 8102e10:	461a      	mov	r2, r3
 8102e12:	68bb      	ldr	r3, [r7, #8]
 8102e14:	009b      	lsls	r3, r3, #2
 8102e16:	4413      	add	r3, r2
 8102e18:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8102e1a:	697b      	ldr	r3, [r7, #20]
 8102e1c:	681b      	ldr	r3, [r3, #0]
 8102e1e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8102e22:	687b      	ldr	r3, [r7, #4]
 8102e24:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8102e28:	683b      	ldr	r3, [r7, #0]
 8102e2a:	430b      	orrs	r3, r1
 8102e2c:	431a      	orrs	r2, r3
 8102e2e:	697b      	ldr	r3, [r7, #20]
 8102e30:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8102e32:	bf00      	nop
 8102e34:	371c      	adds	r7, #28
 8102e36:	46bd      	mov	sp, r7
 8102e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e3c:	4770      	bx	lr

08102e3e <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8102e3e:	b480      	push	{r7}
 8102e40:	b085      	sub	sp, #20
 8102e42:	af00      	add	r7, sp, #0
 8102e44:	60f8      	str	r0, [r7, #12]
 8102e46:	60b9      	str	r1, [r7, #8]
 8102e48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8102e4a:	68fb      	ldr	r3, [r7, #12]
 8102e4c:	691b      	ldr	r3, [r3, #16]
 8102e4e:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8102e52:	68bb      	ldr	r3, [r7, #8]
 8102e54:	f003 031f 	and.w	r3, r3, #31
 8102e58:	6879      	ldr	r1, [r7, #4]
 8102e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8102e5e:	431a      	orrs	r2, r3
 8102e60:	68fb      	ldr	r3, [r7, #12]
 8102e62:	611a      	str	r2, [r3, #16]
}
 8102e64:	bf00      	nop
 8102e66:	3714      	adds	r7, #20
 8102e68:	46bd      	mov	sp, r7
 8102e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102e6e:	4770      	bx	lr

08102e70 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8102e70:	b480      	push	{r7}
 8102e72:	b087      	sub	sp, #28
 8102e74:	af00      	add	r7, sp, #0
 8102e76:	60f8      	str	r0, [r7, #12]
 8102e78:	60b9      	str	r1, [r7, #8]
 8102e7a:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8102e7c:	68fb      	ldr	r3, [r7, #12]
 8102e7e:	3360      	adds	r3, #96	@ 0x60
 8102e80:	461a      	mov	r2, r3
 8102e82:	68bb      	ldr	r3, [r7, #8]
 8102e84:	009b      	lsls	r3, r3, #2
 8102e86:	4413      	add	r3, r2
 8102e88:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8102e8a:	697b      	ldr	r3, [r7, #20]
 8102e8c:	681b      	ldr	r3, [r3, #0]
 8102e8e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8102e92:	687b      	ldr	r3, [r7, #4]
 8102e94:	431a      	orrs	r2, r3
 8102e96:	697b      	ldr	r3, [r7, #20]
 8102e98:	601a      	str	r2, [r3, #0]
  }
}
 8102e9a:	bf00      	nop
 8102e9c:	371c      	adds	r7, #28
 8102e9e:	46bd      	mov	sp, r7
 8102ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ea4:	4770      	bx	lr

08102ea6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8102ea6:	b480      	push	{r7}
 8102ea8:	b087      	sub	sp, #28
 8102eaa:	af00      	add	r7, sp, #0
 8102eac:	60f8      	str	r0, [r7, #12]
 8102eae:	60b9      	str	r1, [r7, #8]
 8102eb0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8102eb2:	68fb      	ldr	r3, [r7, #12]
 8102eb4:	3330      	adds	r3, #48	@ 0x30
 8102eb6:	461a      	mov	r2, r3
 8102eb8:	68bb      	ldr	r3, [r7, #8]
 8102eba:	0a1b      	lsrs	r3, r3, #8
 8102ebc:	009b      	lsls	r3, r3, #2
 8102ebe:	f003 030c 	and.w	r3, r3, #12
 8102ec2:	4413      	add	r3, r2
 8102ec4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102ec6:	697b      	ldr	r3, [r7, #20]
 8102ec8:	681a      	ldr	r2, [r3, #0]
 8102eca:	68bb      	ldr	r3, [r7, #8]
 8102ecc:	f003 031f 	and.w	r3, r3, #31
 8102ed0:	211f      	movs	r1, #31
 8102ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8102ed6:	43db      	mvns	r3, r3
 8102ed8:	401a      	ands	r2, r3
 8102eda:	687b      	ldr	r3, [r7, #4]
 8102edc:	0e9b      	lsrs	r3, r3, #26
 8102ede:	f003 011f 	and.w	r1, r3, #31
 8102ee2:	68bb      	ldr	r3, [r7, #8]
 8102ee4:	f003 031f 	and.w	r3, r3, #31
 8102ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8102eec:	431a      	orrs	r2, r3
 8102eee:	697b      	ldr	r3, [r7, #20]
 8102ef0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8102ef2:	bf00      	nop
 8102ef4:	371c      	adds	r7, #28
 8102ef6:	46bd      	mov	sp, r7
 8102ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102efc:	4770      	bx	lr

08102efe <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8102efe:	b480      	push	{r7}
 8102f00:	b087      	sub	sp, #28
 8102f02:	af00      	add	r7, sp, #0
 8102f04:	60f8      	str	r0, [r7, #12]
 8102f06:	60b9      	str	r1, [r7, #8]
 8102f08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8102f0a:	68fb      	ldr	r3, [r7, #12]
 8102f0c:	3314      	adds	r3, #20
 8102f0e:	461a      	mov	r2, r3
 8102f10:	68bb      	ldr	r3, [r7, #8]
 8102f12:	0e5b      	lsrs	r3, r3, #25
 8102f14:	009b      	lsls	r3, r3, #2
 8102f16:	f003 0304 	and.w	r3, r3, #4
 8102f1a:	4413      	add	r3, r2
 8102f1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8102f1e:	697b      	ldr	r3, [r7, #20]
 8102f20:	681a      	ldr	r2, [r3, #0]
 8102f22:	68bb      	ldr	r3, [r7, #8]
 8102f24:	0d1b      	lsrs	r3, r3, #20
 8102f26:	f003 031f 	and.w	r3, r3, #31
 8102f2a:	2107      	movs	r1, #7
 8102f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8102f30:	43db      	mvns	r3, r3
 8102f32:	401a      	ands	r2, r3
 8102f34:	68bb      	ldr	r3, [r7, #8]
 8102f36:	0d1b      	lsrs	r3, r3, #20
 8102f38:	f003 031f 	and.w	r3, r3, #31
 8102f3c:	6879      	ldr	r1, [r7, #4]
 8102f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8102f42:	431a      	orrs	r2, r3
 8102f44:	697b      	ldr	r3, [r7, #20]
 8102f46:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8102f48:	bf00      	nop
 8102f4a:	371c      	adds	r7, #28
 8102f4c:	46bd      	mov	sp, r7
 8102f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f52:	4770      	bx	lr

08102f54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8102f54:	b480      	push	{r7}
 8102f56:	b085      	sub	sp, #20
 8102f58:	af00      	add	r7, sp, #0
 8102f5a:	60f8      	str	r0, [r7, #12]
 8102f5c:	60b9      	str	r1, [r7, #8]
 8102f5e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8102f60:	68fb      	ldr	r3, [r7, #12]
 8102f62:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8102f66:	68bb      	ldr	r3, [r7, #8]
 8102f68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102f6c:	43db      	mvns	r3, r3
 8102f6e:	401a      	ands	r2, r3
 8102f70:	687b      	ldr	r3, [r7, #4]
 8102f72:	f003 0318 	and.w	r3, r3, #24
 8102f76:	4908      	ldr	r1, [pc, #32]	@ (8102f98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8102f78:	40d9      	lsrs	r1, r3
 8102f7a:	68bb      	ldr	r3, [r7, #8]
 8102f7c:	400b      	ands	r3, r1
 8102f7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102f82:	431a      	orrs	r2, r3
 8102f84:	68fb      	ldr	r3, [r7, #12]
 8102f86:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8102f8a:	bf00      	nop
 8102f8c:	3714      	adds	r7, #20
 8102f8e:	46bd      	mov	sp, r7
 8102f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f94:	4770      	bx	lr
 8102f96:	bf00      	nop
 8102f98:	000fffff 	.word	0x000fffff

08102f9c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8102f9c:	b480      	push	{r7}
 8102f9e:	b083      	sub	sp, #12
 8102fa0:	af00      	add	r7, sp, #0
 8102fa2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8102fa4:	687b      	ldr	r3, [r7, #4]
 8102fa6:	689b      	ldr	r3, [r3, #8]
 8102fa8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8102fac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8102fb0:	687a      	ldr	r2, [r7, #4]
 8102fb2:	6093      	str	r3, [r2, #8]
}
 8102fb4:	bf00      	nop
 8102fb6:	370c      	adds	r7, #12
 8102fb8:	46bd      	mov	sp, r7
 8102fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fbe:	4770      	bx	lr

08102fc0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8102fc0:	b480      	push	{r7}
 8102fc2:	b083      	sub	sp, #12
 8102fc4:	af00      	add	r7, sp, #0
 8102fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8102fc8:	687b      	ldr	r3, [r7, #4]
 8102fca:	689b      	ldr	r3, [r3, #8]
 8102fcc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8102fd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102fd4:	d101      	bne.n	8102fda <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8102fd6:	2301      	movs	r3, #1
 8102fd8:	e000      	b.n	8102fdc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8102fda:	2300      	movs	r3, #0
}
 8102fdc:	4618      	mov	r0, r3
 8102fde:	370c      	adds	r7, #12
 8102fe0:	46bd      	mov	sp, r7
 8102fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102fe6:	4770      	bx	lr

08102fe8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8102fe8:	b480      	push	{r7}
 8102fea:	b083      	sub	sp, #12
 8102fec:	af00      	add	r7, sp, #0
 8102fee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8102ff0:	687b      	ldr	r3, [r7, #4]
 8102ff2:	689b      	ldr	r3, [r3, #8]
 8102ff4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8102ff8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8102ffc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8103000:	687b      	ldr	r3, [r7, #4]
 8103002:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8103004:	bf00      	nop
 8103006:	370c      	adds	r7, #12
 8103008:	46bd      	mov	sp, r7
 810300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810300e:	4770      	bx	lr

08103010 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8103010:	b480      	push	{r7}
 8103012:	b083      	sub	sp, #12
 8103014:	af00      	add	r7, sp, #0
 8103016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8103018:	687b      	ldr	r3, [r7, #4]
 810301a:	689b      	ldr	r3, [r3, #8]
 810301c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8103020:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103024:	d101      	bne.n	810302a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8103026:	2301      	movs	r3, #1
 8103028:	e000      	b.n	810302c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 810302a:	2300      	movs	r3, #0
}
 810302c:	4618      	mov	r0, r3
 810302e:	370c      	adds	r7, #12
 8103030:	46bd      	mov	sp, r7
 8103032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103036:	4770      	bx	lr

08103038 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8103038:	b480      	push	{r7}
 810303a:	b083      	sub	sp, #12
 810303c:	af00      	add	r7, sp, #0
 810303e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103040:	687b      	ldr	r3, [r7, #4]
 8103042:	689b      	ldr	r3, [r3, #8]
 8103044:	f003 0301 	and.w	r3, r3, #1
 8103048:	2b01      	cmp	r3, #1
 810304a:	d101      	bne.n	8103050 <LL_ADC_IsEnabled+0x18>
 810304c:	2301      	movs	r3, #1
 810304e:	e000      	b.n	8103052 <LL_ADC_IsEnabled+0x1a>
 8103050:	2300      	movs	r3, #0
}
 8103052:	4618      	mov	r0, r3
 8103054:	370c      	adds	r7, #12
 8103056:	46bd      	mov	sp, r7
 8103058:	f85d 7b04 	ldr.w	r7, [sp], #4
 810305c:	4770      	bx	lr

0810305e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 810305e:	b480      	push	{r7}
 8103060:	b083      	sub	sp, #12
 8103062:	af00      	add	r7, sp, #0
 8103064:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103066:	687b      	ldr	r3, [r7, #4]
 8103068:	689b      	ldr	r3, [r3, #8]
 810306a:	f003 0304 	and.w	r3, r3, #4
 810306e:	2b04      	cmp	r3, #4
 8103070:	d101      	bne.n	8103076 <LL_ADC_REG_IsConversionOngoing+0x18>
 8103072:	2301      	movs	r3, #1
 8103074:	e000      	b.n	8103078 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103076:	2300      	movs	r3, #0
}
 8103078:	4618      	mov	r0, r3
 810307a:	370c      	adds	r7, #12
 810307c:	46bd      	mov	sp, r7
 810307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103082:	4770      	bx	lr

08103084 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8103084:	b480      	push	{r7}
 8103086:	b083      	sub	sp, #12
 8103088:	af00      	add	r7, sp, #0
 810308a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 810308c:	687b      	ldr	r3, [r7, #4]
 810308e:	689b      	ldr	r3, [r3, #8]
 8103090:	f003 0308 	and.w	r3, r3, #8
 8103094:	2b08      	cmp	r3, #8
 8103096:	d101      	bne.n	810309c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8103098:	2301      	movs	r3, #1
 810309a:	e000      	b.n	810309e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 810309c:	2300      	movs	r3, #0
}
 810309e:	4618      	mov	r0, r3
 81030a0:	370c      	adds	r7, #12
 81030a2:	46bd      	mov	sp, r7
 81030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81030a8:	4770      	bx	lr
	...

081030ac <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 81030ac:	b590      	push	{r4, r7, lr}
 81030ae:	b089      	sub	sp, #36	@ 0x24
 81030b0:	af00      	add	r7, sp, #0
 81030b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81030b4:	2300      	movs	r3, #0
 81030b6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 81030b8:	2300      	movs	r3, #0
 81030ba:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 81030bc:	687b      	ldr	r3, [r7, #4]
 81030be:	2b00      	cmp	r3, #0
 81030c0:	d101      	bne.n	81030c6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 81030c2:	2301      	movs	r3, #1
 81030c4:	e18f      	b.n	81033e6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 81030c6:	687b      	ldr	r3, [r7, #4]
 81030c8:	68db      	ldr	r3, [r3, #12]
 81030ca:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 81030cc:	687b      	ldr	r3, [r7, #4]
 81030ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81030d0:	2b00      	cmp	r3, #0
 81030d2:	d109      	bne.n	81030e8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 81030d4:	6878      	ldr	r0, [r7, #4]
 81030d6:	f7fe fa55 	bl	8101584 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 81030da:	687b      	ldr	r3, [r7, #4]
 81030dc:	2200      	movs	r2, #0
 81030de:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 81030e0:	687b      	ldr	r3, [r7, #4]
 81030e2:	2200      	movs	r2, #0
 81030e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 81030e8:	687b      	ldr	r3, [r7, #4]
 81030ea:	681b      	ldr	r3, [r3, #0]
 81030ec:	4618      	mov	r0, r3
 81030ee:	f7ff ff67 	bl	8102fc0 <LL_ADC_IsDeepPowerDownEnabled>
 81030f2:	4603      	mov	r3, r0
 81030f4:	2b00      	cmp	r3, #0
 81030f6:	d004      	beq.n	8103102 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 81030f8:	687b      	ldr	r3, [r7, #4]
 81030fa:	681b      	ldr	r3, [r3, #0]
 81030fc:	4618      	mov	r0, r3
 81030fe:	f7ff ff4d 	bl	8102f9c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8103102:	687b      	ldr	r3, [r7, #4]
 8103104:	681b      	ldr	r3, [r3, #0]
 8103106:	4618      	mov	r0, r3
 8103108:	f7ff ff82 	bl	8103010 <LL_ADC_IsInternalRegulatorEnabled>
 810310c:	4603      	mov	r3, r0
 810310e:	2b00      	cmp	r3, #0
 8103110:	d114      	bne.n	810313c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8103112:	687b      	ldr	r3, [r7, #4]
 8103114:	681b      	ldr	r3, [r3, #0]
 8103116:	4618      	mov	r0, r3
 8103118:	f7ff ff66 	bl	8102fe8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 810311c:	4b88      	ldr	r3, [pc, #544]	@ (8103340 <HAL_ADC_Init+0x294>)
 810311e:	681b      	ldr	r3, [r3, #0]
 8103120:	099b      	lsrs	r3, r3, #6
 8103122:	4a88      	ldr	r2, [pc, #544]	@ (8103344 <HAL_ADC_Init+0x298>)
 8103124:	fba2 2303 	umull	r2, r3, r2, r3
 8103128:	099b      	lsrs	r3, r3, #6
 810312a:	3301      	adds	r3, #1
 810312c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 810312e:	e002      	b.n	8103136 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8103130:	68bb      	ldr	r3, [r7, #8]
 8103132:	3b01      	subs	r3, #1
 8103134:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8103136:	68bb      	ldr	r3, [r7, #8]
 8103138:	2b00      	cmp	r3, #0
 810313a:	d1f9      	bne.n	8103130 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 810313c:	687b      	ldr	r3, [r7, #4]
 810313e:	681b      	ldr	r3, [r3, #0]
 8103140:	4618      	mov	r0, r3
 8103142:	f7ff ff65 	bl	8103010 <LL_ADC_IsInternalRegulatorEnabled>
 8103146:	4603      	mov	r3, r0
 8103148:	2b00      	cmp	r3, #0
 810314a:	d10d      	bne.n	8103168 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103150:	f043 0210 	orr.w	r2, r3, #16
 8103154:	687b      	ldr	r3, [r7, #4]
 8103156:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8103158:	687b      	ldr	r3, [r7, #4]
 810315a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810315c:	f043 0201 	orr.w	r2, r3, #1
 8103160:	687b      	ldr	r3, [r7, #4]
 8103162:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8103164:	2301      	movs	r3, #1
 8103166:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8103168:	687b      	ldr	r3, [r7, #4]
 810316a:	681b      	ldr	r3, [r3, #0]
 810316c:	4618      	mov	r0, r3
 810316e:	f7ff ff76 	bl	810305e <LL_ADC_REG_IsConversionOngoing>
 8103172:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8103174:	687b      	ldr	r3, [r7, #4]
 8103176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103178:	f003 0310 	and.w	r3, r3, #16
 810317c:	2b00      	cmp	r3, #0
 810317e:	f040 8129 	bne.w	81033d4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8103182:	697b      	ldr	r3, [r7, #20]
 8103184:	2b00      	cmp	r3, #0
 8103186:	f040 8125 	bne.w	81033d4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 810318a:	687b      	ldr	r3, [r7, #4]
 810318c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810318e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8103192:	f043 0202 	orr.w	r2, r3, #2
 8103196:	687b      	ldr	r3, [r7, #4]
 8103198:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 810319a:	687b      	ldr	r3, [r7, #4]
 810319c:	681b      	ldr	r3, [r3, #0]
 810319e:	4618      	mov	r0, r3
 81031a0:	f7ff ff4a 	bl	8103038 <LL_ADC_IsEnabled>
 81031a4:	4603      	mov	r3, r0
 81031a6:	2b00      	cmp	r3, #0
 81031a8:	d136      	bne.n	8103218 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81031aa:	687b      	ldr	r3, [r7, #4]
 81031ac:	681b      	ldr	r3, [r3, #0]
 81031ae:	4a66      	ldr	r2, [pc, #408]	@ (8103348 <HAL_ADC_Init+0x29c>)
 81031b0:	4293      	cmp	r3, r2
 81031b2:	d004      	beq.n	81031be <HAL_ADC_Init+0x112>
 81031b4:	687b      	ldr	r3, [r7, #4]
 81031b6:	681b      	ldr	r3, [r3, #0]
 81031b8:	4a64      	ldr	r2, [pc, #400]	@ (810334c <HAL_ADC_Init+0x2a0>)
 81031ba:	4293      	cmp	r3, r2
 81031bc:	d10e      	bne.n	81031dc <HAL_ADC_Init+0x130>
 81031be:	4862      	ldr	r0, [pc, #392]	@ (8103348 <HAL_ADC_Init+0x29c>)
 81031c0:	f7ff ff3a 	bl	8103038 <LL_ADC_IsEnabled>
 81031c4:	4604      	mov	r4, r0
 81031c6:	4861      	ldr	r0, [pc, #388]	@ (810334c <HAL_ADC_Init+0x2a0>)
 81031c8:	f7ff ff36 	bl	8103038 <LL_ADC_IsEnabled>
 81031cc:	4603      	mov	r3, r0
 81031ce:	4323      	orrs	r3, r4
 81031d0:	2b00      	cmp	r3, #0
 81031d2:	bf0c      	ite	eq
 81031d4:	2301      	moveq	r3, #1
 81031d6:	2300      	movne	r3, #0
 81031d8:	b2db      	uxtb	r3, r3
 81031da:	e008      	b.n	81031ee <HAL_ADC_Init+0x142>
 81031dc:	485c      	ldr	r0, [pc, #368]	@ (8103350 <HAL_ADC_Init+0x2a4>)
 81031de:	f7ff ff2b 	bl	8103038 <LL_ADC_IsEnabled>
 81031e2:	4603      	mov	r3, r0
 81031e4:	2b00      	cmp	r3, #0
 81031e6:	bf0c      	ite	eq
 81031e8:	2301      	moveq	r3, #1
 81031ea:	2300      	movne	r3, #0
 81031ec:	b2db      	uxtb	r3, r3
 81031ee:	2b00      	cmp	r3, #0
 81031f0:	d012      	beq.n	8103218 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 81031f2:	687b      	ldr	r3, [r7, #4]
 81031f4:	681b      	ldr	r3, [r3, #0]
 81031f6:	4a54      	ldr	r2, [pc, #336]	@ (8103348 <HAL_ADC_Init+0x29c>)
 81031f8:	4293      	cmp	r3, r2
 81031fa:	d004      	beq.n	8103206 <HAL_ADC_Init+0x15a>
 81031fc:	687b      	ldr	r3, [r7, #4]
 81031fe:	681b      	ldr	r3, [r3, #0]
 8103200:	4a52      	ldr	r2, [pc, #328]	@ (810334c <HAL_ADC_Init+0x2a0>)
 8103202:	4293      	cmp	r3, r2
 8103204:	d101      	bne.n	810320a <HAL_ADC_Init+0x15e>
 8103206:	4a53      	ldr	r2, [pc, #332]	@ (8103354 <HAL_ADC_Init+0x2a8>)
 8103208:	e000      	b.n	810320c <HAL_ADC_Init+0x160>
 810320a:	4a53      	ldr	r2, [pc, #332]	@ (8103358 <HAL_ADC_Init+0x2ac>)
 810320c:	687b      	ldr	r3, [r7, #4]
 810320e:	685b      	ldr	r3, [r3, #4]
 8103210:	4619      	mov	r1, r3
 8103212:	4610      	mov	r0, r2
 8103214:	f7ff fd8c 	bl	8102d30 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8103218:	f7ff fd54 	bl	8102cc4 <HAL_GetREVID>
 810321c:	4603      	mov	r3, r0
 810321e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8103222:	4293      	cmp	r3, r2
 8103224:	d914      	bls.n	8103250 <HAL_ADC_Init+0x1a4>
 8103226:	687b      	ldr	r3, [r7, #4]
 8103228:	689b      	ldr	r3, [r3, #8]
 810322a:	2b10      	cmp	r3, #16
 810322c:	d110      	bne.n	8103250 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810322e:	687b      	ldr	r3, [r7, #4]
 8103230:	7d5b      	ldrb	r3, [r3, #21]
 8103232:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103238:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 810323a:	687b      	ldr	r3, [r7, #4]
 810323c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 810323e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8103240:	687b      	ldr	r3, [r7, #4]
 8103242:	7f1b      	ldrb	r3, [r3, #28]
 8103244:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8103246:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103248:	f043 030c 	orr.w	r3, r3, #12
 810324c:	61bb      	str	r3, [r7, #24]
 810324e:	e00d      	b.n	810326c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103250:	687b      	ldr	r3, [r7, #4]
 8103252:	7d5b      	ldrb	r3, [r3, #21]
 8103254:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8103256:	687b      	ldr	r3, [r7, #4]
 8103258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 810325a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 810325c:	687b      	ldr	r3, [r7, #4]
 810325e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8103260:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8103262:	687b      	ldr	r3, [r7, #4]
 8103264:	7f1b      	ldrb	r3, [r3, #28]
 8103266:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8103268:	4313      	orrs	r3, r2
 810326a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 810326c:	687b      	ldr	r3, [r7, #4]
 810326e:	7f1b      	ldrb	r3, [r3, #28]
 8103270:	2b01      	cmp	r3, #1
 8103272:	d106      	bne.n	8103282 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8103274:	687b      	ldr	r3, [r7, #4]
 8103276:	6a1b      	ldr	r3, [r3, #32]
 8103278:	3b01      	subs	r3, #1
 810327a:	045b      	lsls	r3, r3, #17
 810327c:	69ba      	ldr	r2, [r7, #24]
 810327e:	4313      	orrs	r3, r2
 8103280:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8103282:	687b      	ldr	r3, [r7, #4]
 8103284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103286:	2b00      	cmp	r3, #0
 8103288:	d009      	beq.n	810329e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 810328a:	687b      	ldr	r3, [r7, #4]
 810328c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810328e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8103292:	687b      	ldr	r3, [r7, #4]
 8103294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103296:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8103298:	69ba      	ldr	r2, [r7, #24]
 810329a:	4313      	orrs	r3, r2
 810329c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 810329e:	687b      	ldr	r3, [r7, #4]
 81032a0:	681b      	ldr	r3, [r3, #0]
 81032a2:	68da      	ldr	r2, [r3, #12]
 81032a4:	4b2d      	ldr	r3, [pc, #180]	@ (810335c <HAL_ADC_Init+0x2b0>)
 81032a6:	4013      	ands	r3, r2
 81032a8:	687a      	ldr	r2, [r7, #4]
 81032aa:	6812      	ldr	r2, [r2, #0]
 81032ac:	69b9      	ldr	r1, [r7, #24]
 81032ae:	430b      	orrs	r3, r1
 81032b0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81032b2:	687b      	ldr	r3, [r7, #4]
 81032b4:	681b      	ldr	r3, [r3, #0]
 81032b6:	4618      	mov	r0, r3
 81032b8:	f7ff fed1 	bl	810305e <LL_ADC_REG_IsConversionOngoing>
 81032bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81032be:	687b      	ldr	r3, [r7, #4]
 81032c0:	681b      	ldr	r3, [r3, #0]
 81032c2:	4618      	mov	r0, r3
 81032c4:	f7ff fede 	bl	8103084 <LL_ADC_INJ_IsConversionOngoing>
 81032c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81032ca:	693b      	ldr	r3, [r7, #16]
 81032cc:	2b00      	cmp	r3, #0
 81032ce:	d15f      	bne.n	8103390 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81032d0:	68fb      	ldr	r3, [r7, #12]
 81032d2:	2b00      	cmp	r3, #0
 81032d4:	d15c      	bne.n	8103390 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 81032d6:	687b      	ldr	r3, [r7, #4]
 81032d8:	7d1b      	ldrb	r3, [r3, #20]
 81032da:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 81032dc:	687b      	ldr	r3, [r7, #4]
 81032de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 81032e0:	4313      	orrs	r3, r2
 81032e2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 81032e4:	687b      	ldr	r3, [r7, #4]
 81032e6:	681b      	ldr	r3, [r3, #0]
 81032e8:	68db      	ldr	r3, [r3, #12]
 81032ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 81032ee:	f023 0303 	bic.w	r3, r3, #3
 81032f2:	687a      	ldr	r2, [r7, #4]
 81032f4:	6812      	ldr	r2, [r2, #0]
 81032f6:	69b9      	ldr	r1, [r7, #24]
 81032f8:	430b      	orrs	r3, r1
 81032fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 81032fc:	687b      	ldr	r3, [r7, #4]
 81032fe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8103302:	2b01      	cmp	r3, #1
 8103304:	d12e      	bne.n	8103364 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8103306:	687b      	ldr	r3, [r7, #4]
 8103308:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810330a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 810330c:	687b      	ldr	r3, [r7, #4]
 810330e:	681b      	ldr	r3, [r3, #0]
 8103310:	691a      	ldr	r2, [r3, #16]
 8103312:	4b13      	ldr	r3, [pc, #76]	@ (8103360 <HAL_ADC_Init+0x2b4>)
 8103314:	4013      	ands	r3, r2
 8103316:	687a      	ldr	r2, [r7, #4]
 8103318:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 810331a:	3a01      	subs	r2, #1
 810331c:	0411      	lsls	r1, r2, #16
 810331e:	687a      	ldr	r2, [r7, #4]
 8103320:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8103322:	4311      	orrs	r1, r2
 8103324:	687a      	ldr	r2, [r7, #4]
 8103326:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8103328:	4311      	orrs	r1, r2
 810332a:	687a      	ldr	r2, [r7, #4]
 810332c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 810332e:	430a      	orrs	r2, r1
 8103330:	431a      	orrs	r2, r3
 8103332:	687b      	ldr	r3, [r7, #4]
 8103334:	681b      	ldr	r3, [r3, #0]
 8103336:	f042 0201 	orr.w	r2, r2, #1
 810333a:	611a      	str	r2, [r3, #16]
 810333c:	e01a      	b.n	8103374 <HAL_ADC_Init+0x2c8>
 810333e:	bf00      	nop
 8103340:	10000000 	.word	0x10000000
 8103344:	053e2d63 	.word	0x053e2d63
 8103348:	40022000 	.word	0x40022000
 810334c:	40022100 	.word	0x40022100
 8103350:	58026000 	.word	0x58026000
 8103354:	40022300 	.word	0x40022300
 8103358:	58026300 	.word	0x58026300
 810335c:	fff0c003 	.word	0xfff0c003
 8103360:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8103364:	687b      	ldr	r3, [r7, #4]
 8103366:	681b      	ldr	r3, [r3, #0]
 8103368:	691a      	ldr	r2, [r3, #16]
 810336a:	687b      	ldr	r3, [r7, #4]
 810336c:	681b      	ldr	r3, [r3, #0]
 810336e:	f022 0201 	bic.w	r2, r2, #1
 8103372:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8103374:	687b      	ldr	r3, [r7, #4]
 8103376:	681b      	ldr	r3, [r3, #0]
 8103378:	691b      	ldr	r3, [r3, #16]
 810337a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 810337e:	687b      	ldr	r3, [r7, #4]
 8103380:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103382:	687b      	ldr	r3, [r7, #4]
 8103384:	681b      	ldr	r3, [r3, #0]
 8103386:	430a      	orrs	r2, r1
 8103388:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 810338a:	6878      	ldr	r0, [r7, #4]
 810338c:	f000 fb20 	bl	81039d0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8103390:	687b      	ldr	r3, [r7, #4]
 8103392:	68db      	ldr	r3, [r3, #12]
 8103394:	2b01      	cmp	r3, #1
 8103396:	d10c      	bne.n	81033b2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8103398:	687b      	ldr	r3, [r7, #4]
 810339a:	681b      	ldr	r3, [r3, #0]
 810339c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810339e:	f023 010f 	bic.w	r1, r3, #15
 81033a2:	687b      	ldr	r3, [r7, #4]
 81033a4:	699b      	ldr	r3, [r3, #24]
 81033a6:	1e5a      	subs	r2, r3, #1
 81033a8:	687b      	ldr	r3, [r7, #4]
 81033aa:	681b      	ldr	r3, [r3, #0]
 81033ac:	430a      	orrs	r2, r1
 81033ae:	631a      	str	r2, [r3, #48]	@ 0x30
 81033b0:	e007      	b.n	81033c2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 81033b2:	687b      	ldr	r3, [r7, #4]
 81033b4:	681b      	ldr	r3, [r3, #0]
 81033b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 81033b8:	687b      	ldr	r3, [r7, #4]
 81033ba:	681b      	ldr	r3, [r3, #0]
 81033bc:	f022 020f 	bic.w	r2, r2, #15
 81033c0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 81033c2:	687b      	ldr	r3, [r7, #4]
 81033c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81033c6:	f023 0303 	bic.w	r3, r3, #3
 81033ca:	f043 0201 	orr.w	r2, r3, #1
 81033ce:	687b      	ldr	r3, [r7, #4]
 81033d0:	655a      	str	r2, [r3, #84]	@ 0x54
 81033d2:	e007      	b.n	81033e4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81033d4:	687b      	ldr	r3, [r7, #4]
 81033d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81033d8:	f043 0210 	orr.w	r2, r3, #16
 81033dc:	687b      	ldr	r3, [r7, #4]
 81033de:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 81033e0:	2301      	movs	r3, #1
 81033e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 81033e4:	7ffb      	ldrb	r3, [r7, #31]
}
 81033e6:	4618      	mov	r0, r3
 81033e8:	3724      	adds	r7, #36	@ 0x24
 81033ea:	46bd      	mov	sp, r7
 81033ec:	bd90      	pop	{r4, r7, pc}
 81033ee:	bf00      	nop

081033f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 81033f0:	b590      	push	{r4, r7, lr}
 81033f2:	b08d      	sub	sp, #52	@ 0x34
 81033f4:	af00      	add	r7, sp, #0
 81033f6:	6078      	str	r0, [r7, #4]
 81033f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81033fa:	2300      	movs	r3, #0
 81033fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8103400:	2300      	movs	r3, #0
 8103402:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8103404:	683b      	ldr	r3, [r7, #0]
 8103406:	68db      	ldr	r3, [r3, #12]
 8103408:	4a65      	ldr	r2, [pc, #404]	@ (81035a0 <HAL_ADC_ConfigChannel+0x1b0>)
 810340a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 810340c:	687b      	ldr	r3, [r7, #4]
 810340e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8103412:	2b01      	cmp	r3, #1
 8103414:	d101      	bne.n	810341a <HAL_ADC_ConfigChannel+0x2a>
 8103416:	2302      	movs	r3, #2
 8103418:	e2c7      	b.n	81039aa <HAL_ADC_ConfigChannel+0x5ba>
 810341a:	687b      	ldr	r3, [r7, #4]
 810341c:	2201      	movs	r2, #1
 810341e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103422:	687b      	ldr	r3, [r7, #4]
 8103424:	681b      	ldr	r3, [r3, #0]
 8103426:	4618      	mov	r0, r3
 8103428:	f7ff fe19 	bl	810305e <LL_ADC_REG_IsConversionOngoing>
 810342c:	4603      	mov	r3, r0
 810342e:	2b00      	cmp	r3, #0
 8103430:	f040 82ac 	bne.w	810398c <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8103434:	683b      	ldr	r3, [r7, #0]
 8103436:	681b      	ldr	r3, [r3, #0]
 8103438:	2b00      	cmp	r3, #0
 810343a:	db2c      	blt.n	8103496 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 810343c:	683b      	ldr	r3, [r7, #0]
 810343e:	681b      	ldr	r3, [r3, #0]
 8103440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8103444:	2b00      	cmp	r3, #0
 8103446:	d108      	bne.n	810345a <HAL_ADC_ConfigChannel+0x6a>
 8103448:	683b      	ldr	r3, [r7, #0]
 810344a:	681b      	ldr	r3, [r3, #0]
 810344c:	0e9b      	lsrs	r3, r3, #26
 810344e:	f003 031f 	and.w	r3, r3, #31
 8103452:	2201      	movs	r2, #1
 8103454:	fa02 f303 	lsl.w	r3, r2, r3
 8103458:	e016      	b.n	8103488 <HAL_ADC_ConfigChannel+0x98>
 810345a:	683b      	ldr	r3, [r7, #0]
 810345c:	681b      	ldr	r3, [r3, #0]
 810345e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8103460:	697b      	ldr	r3, [r7, #20]
 8103462:	fa93 f3a3 	rbit	r3, r3
 8103466:	613b      	str	r3, [r7, #16]
  return result;
 8103468:	693b      	ldr	r3, [r7, #16]
 810346a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 810346c:	69bb      	ldr	r3, [r7, #24]
 810346e:	2b00      	cmp	r3, #0
 8103470:	d101      	bne.n	8103476 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 8103472:	2320      	movs	r3, #32
 8103474:	e003      	b.n	810347e <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8103476:	69bb      	ldr	r3, [r7, #24]
 8103478:	fab3 f383 	clz	r3, r3
 810347c:	b2db      	uxtb	r3, r3
 810347e:	f003 031f 	and.w	r3, r3, #31
 8103482:	2201      	movs	r2, #1
 8103484:	fa02 f303 	lsl.w	r3, r2, r3
 8103488:	687a      	ldr	r2, [r7, #4]
 810348a:	6812      	ldr	r2, [r2, #0]
 810348c:	69d1      	ldr	r1, [r2, #28]
 810348e:	687a      	ldr	r2, [r7, #4]
 8103490:	6812      	ldr	r2, [r2, #0]
 8103492:	430b      	orrs	r3, r1
 8103494:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8103496:	687b      	ldr	r3, [r7, #4]
 8103498:	6818      	ldr	r0, [r3, #0]
 810349a:	683b      	ldr	r3, [r7, #0]
 810349c:	6859      	ldr	r1, [r3, #4]
 810349e:	683b      	ldr	r3, [r7, #0]
 81034a0:	681b      	ldr	r3, [r3, #0]
 81034a2:	461a      	mov	r2, r3
 81034a4:	f7ff fcff 	bl	8102ea6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81034a8:	687b      	ldr	r3, [r7, #4]
 81034aa:	681b      	ldr	r3, [r3, #0]
 81034ac:	4618      	mov	r0, r3
 81034ae:	f7ff fdd6 	bl	810305e <LL_ADC_REG_IsConversionOngoing>
 81034b2:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81034b4:	687b      	ldr	r3, [r7, #4]
 81034b6:	681b      	ldr	r3, [r3, #0]
 81034b8:	4618      	mov	r0, r3
 81034ba:	f7ff fde3 	bl	8103084 <LL_ADC_INJ_IsConversionOngoing>
 81034be:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81034c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81034c2:	2b00      	cmp	r3, #0
 81034c4:	f040 80b8 	bne.w	8103638 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81034c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81034ca:	2b00      	cmp	r3, #0
 81034cc:	f040 80b4 	bne.w	8103638 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 81034d0:	687b      	ldr	r3, [r7, #4]
 81034d2:	6818      	ldr	r0, [r3, #0]
 81034d4:	683b      	ldr	r3, [r7, #0]
 81034d6:	6819      	ldr	r1, [r3, #0]
 81034d8:	683b      	ldr	r3, [r7, #0]
 81034da:	689b      	ldr	r3, [r3, #8]
 81034dc:	461a      	mov	r2, r3
 81034de:	f7ff fd0e 	bl	8102efe <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 81034e2:	4b30      	ldr	r3, [pc, #192]	@ (81035a4 <HAL_ADC_ConfigChannel+0x1b4>)
 81034e4:	681b      	ldr	r3, [r3, #0]
 81034e6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 81034ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81034ee:	d10b      	bne.n	8103508 <HAL_ADC_ConfigChannel+0x118>
 81034f0:	683b      	ldr	r3, [r7, #0]
 81034f2:	695a      	ldr	r2, [r3, #20]
 81034f4:	687b      	ldr	r3, [r7, #4]
 81034f6:	681b      	ldr	r3, [r3, #0]
 81034f8:	68db      	ldr	r3, [r3, #12]
 81034fa:	089b      	lsrs	r3, r3, #2
 81034fc:	f003 0307 	and.w	r3, r3, #7
 8103500:	005b      	lsls	r3, r3, #1
 8103502:	fa02 f303 	lsl.w	r3, r2, r3
 8103506:	e01d      	b.n	8103544 <HAL_ADC_ConfigChannel+0x154>
 8103508:	687b      	ldr	r3, [r7, #4]
 810350a:	681b      	ldr	r3, [r3, #0]
 810350c:	68db      	ldr	r3, [r3, #12]
 810350e:	f003 0310 	and.w	r3, r3, #16
 8103512:	2b00      	cmp	r3, #0
 8103514:	d10b      	bne.n	810352e <HAL_ADC_ConfigChannel+0x13e>
 8103516:	683b      	ldr	r3, [r7, #0]
 8103518:	695a      	ldr	r2, [r3, #20]
 810351a:	687b      	ldr	r3, [r7, #4]
 810351c:	681b      	ldr	r3, [r3, #0]
 810351e:	68db      	ldr	r3, [r3, #12]
 8103520:	089b      	lsrs	r3, r3, #2
 8103522:	f003 0307 	and.w	r3, r3, #7
 8103526:	005b      	lsls	r3, r3, #1
 8103528:	fa02 f303 	lsl.w	r3, r2, r3
 810352c:	e00a      	b.n	8103544 <HAL_ADC_ConfigChannel+0x154>
 810352e:	683b      	ldr	r3, [r7, #0]
 8103530:	695a      	ldr	r2, [r3, #20]
 8103532:	687b      	ldr	r3, [r7, #4]
 8103534:	681b      	ldr	r3, [r3, #0]
 8103536:	68db      	ldr	r3, [r3, #12]
 8103538:	089b      	lsrs	r3, r3, #2
 810353a:	f003 0304 	and.w	r3, r3, #4
 810353e:	005b      	lsls	r3, r3, #1
 8103540:	fa02 f303 	lsl.w	r3, r2, r3
 8103544:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8103546:	683b      	ldr	r3, [r7, #0]
 8103548:	691b      	ldr	r3, [r3, #16]
 810354a:	2b04      	cmp	r3, #4
 810354c:	d02c      	beq.n	81035a8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 810354e:	687b      	ldr	r3, [r7, #4]
 8103550:	6818      	ldr	r0, [r3, #0]
 8103552:	683b      	ldr	r3, [r7, #0]
 8103554:	6919      	ldr	r1, [r3, #16]
 8103556:	683b      	ldr	r3, [r7, #0]
 8103558:	681a      	ldr	r2, [r3, #0]
 810355a:	6a3b      	ldr	r3, [r7, #32]
 810355c:	f7ff fc4f 	bl	8102dfe <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8103560:	687b      	ldr	r3, [r7, #4]
 8103562:	6818      	ldr	r0, [r3, #0]
 8103564:	683b      	ldr	r3, [r7, #0]
 8103566:	6919      	ldr	r1, [r3, #16]
 8103568:	683b      	ldr	r3, [r7, #0]
 810356a:	7e5b      	ldrb	r3, [r3, #25]
 810356c:	2b01      	cmp	r3, #1
 810356e:	d102      	bne.n	8103576 <HAL_ADC_ConfigChannel+0x186>
 8103570:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8103574:	e000      	b.n	8103578 <HAL_ADC_ConfigChannel+0x188>
 8103576:	2300      	movs	r3, #0
 8103578:	461a      	mov	r2, r3
 810357a:	f7ff fc79 	bl	8102e70 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 810357e:	687b      	ldr	r3, [r7, #4]
 8103580:	6818      	ldr	r0, [r3, #0]
 8103582:	683b      	ldr	r3, [r7, #0]
 8103584:	6919      	ldr	r1, [r3, #16]
 8103586:	683b      	ldr	r3, [r7, #0]
 8103588:	7e1b      	ldrb	r3, [r3, #24]
 810358a:	2b01      	cmp	r3, #1
 810358c:	d102      	bne.n	8103594 <HAL_ADC_ConfigChannel+0x1a4>
 810358e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8103592:	e000      	b.n	8103596 <HAL_ADC_ConfigChannel+0x1a6>
 8103594:	2300      	movs	r3, #0
 8103596:	461a      	mov	r2, r3
 8103598:	f7ff fc51 	bl	8102e3e <LL_ADC_SetDataRightShift>
 810359c:	e04c      	b.n	8103638 <HAL_ADC_ConfigChannel+0x248>
 810359e:	bf00      	nop
 81035a0:	47ff0000 	.word	0x47ff0000
 81035a4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81035a8:	687b      	ldr	r3, [r7, #4]
 81035aa:	681b      	ldr	r3, [r3, #0]
 81035ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81035ae:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81035b2:	683b      	ldr	r3, [r7, #0]
 81035b4:	681b      	ldr	r3, [r3, #0]
 81035b6:	069b      	lsls	r3, r3, #26
 81035b8:	429a      	cmp	r2, r3
 81035ba:	d107      	bne.n	81035cc <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 81035bc:	687b      	ldr	r3, [r7, #4]
 81035be:	681b      	ldr	r3, [r3, #0]
 81035c0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 81035c2:	687b      	ldr	r3, [r7, #4]
 81035c4:	681b      	ldr	r3, [r3, #0]
 81035c6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 81035ca:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81035cc:	687b      	ldr	r3, [r7, #4]
 81035ce:	681b      	ldr	r3, [r3, #0]
 81035d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81035d2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81035d6:	683b      	ldr	r3, [r7, #0]
 81035d8:	681b      	ldr	r3, [r3, #0]
 81035da:	069b      	lsls	r3, r3, #26
 81035dc:	429a      	cmp	r2, r3
 81035de:	d107      	bne.n	81035f0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 81035e0:	687b      	ldr	r3, [r7, #4]
 81035e2:	681b      	ldr	r3, [r3, #0]
 81035e4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 81035e6:	687b      	ldr	r3, [r7, #4]
 81035e8:	681b      	ldr	r3, [r3, #0]
 81035ea:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 81035ee:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81035f0:	687b      	ldr	r3, [r7, #4]
 81035f2:	681b      	ldr	r3, [r3, #0]
 81035f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81035f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 81035fa:	683b      	ldr	r3, [r7, #0]
 81035fc:	681b      	ldr	r3, [r3, #0]
 81035fe:	069b      	lsls	r3, r3, #26
 8103600:	429a      	cmp	r2, r3
 8103602:	d107      	bne.n	8103614 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8103604:	687b      	ldr	r3, [r7, #4]
 8103606:	681b      	ldr	r3, [r3, #0]
 8103608:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 810360a:	687b      	ldr	r3, [r7, #4]
 810360c:	681b      	ldr	r3, [r3, #0]
 810360e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8103612:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8103614:	687b      	ldr	r3, [r7, #4]
 8103616:	681b      	ldr	r3, [r3, #0]
 8103618:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810361a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 810361e:	683b      	ldr	r3, [r7, #0]
 8103620:	681b      	ldr	r3, [r3, #0]
 8103622:	069b      	lsls	r3, r3, #26
 8103624:	429a      	cmp	r2, r3
 8103626:	d107      	bne.n	8103638 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8103628:	687b      	ldr	r3, [r7, #4]
 810362a:	681b      	ldr	r3, [r3, #0]
 810362c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 810362e:	687b      	ldr	r3, [r7, #4]
 8103630:	681b      	ldr	r3, [r3, #0]
 8103632:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8103636:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8103638:	687b      	ldr	r3, [r7, #4]
 810363a:	681b      	ldr	r3, [r3, #0]
 810363c:	4618      	mov	r0, r3
 810363e:	f7ff fcfb 	bl	8103038 <LL_ADC_IsEnabled>
 8103642:	4603      	mov	r3, r0
 8103644:	2b00      	cmp	r3, #0
 8103646:	f040 81aa 	bne.w	810399e <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 810364a:	687b      	ldr	r3, [r7, #4]
 810364c:	6818      	ldr	r0, [r3, #0]
 810364e:	683b      	ldr	r3, [r7, #0]
 8103650:	6819      	ldr	r1, [r3, #0]
 8103652:	683b      	ldr	r3, [r7, #0]
 8103654:	68db      	ldr	r3, [r3, #12]
 8103656:	461a      	mov	r2, r3
 8103658:	f7ff fc7c 	bl	8102f54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 810365c:	683b      	ldr	r3, [r7, #0]
 810365e:	68db      	ldr	r3, [r3, #12]
 8103660:	4a87      	ldr	r2, [pc, #540]	@ (8103880 <HAL_ADC_ConfigChannel+0x490>)
 8103662:	4293      	cmp	r3, r2
 8103664:	f040 809a 	bne.w	810379c <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8103668:	687b      	ldr	r3, [r7, #4]
 810366a:	681a      	ldr	r2, [r3, #0]
 810366c:	687b      	ldr	r3, [r7, #4]
 810366e:	681b      	ldr	r3, [r3, #0]
 8103670:	4984      	ldr	r1, [pc, #528]	@ (8103884 <HAL_ADC_ConfigChannel+0x494>)
 8103672:	428b      	cmp	r3, r1
 8103674:	d147      	bne.n	8103706 <HAL_ADC_ConfigChannel+0x316>
 8103676:	683b      	ldr	r3, [r7, #0]
 8103678:	681b      	ldr	r3, [r3, #0]
 810367a:	4983      	ldr	r1, [pc, #524]	@ (8103888 <HAL_ADC_ConfigChannel+0x498>)
 810367c:	428b      	cmp	r3, r1
 810367e:	d040      	beq.n	8103702 <HAL_ADC_ConfigChannel+0x312>
 8103680:	683b      	ldr	r3, [r7, #0]
 8103682:	681b      	ldr	r3, [r3, #0]
 8103684:	4981      	ldr	r1, [pc, #516]	@ (810388c <HAL_ADC_ConfigChannel+0x49c>)
 8103686:	428b      	cmp	r3, r1
 8103688:	d039      	beq.n	81036fe <HAL_ADC_ConfigChannel+0x30e>
 810368a:	683b      	ldr	r3, [r7, #0]
 810368c:	681b      	ldr	r3, [r3, #0]
 810368e:	4980      	ldr	r1, [pc, #512]	@ (8103890 <HAL_ADC_ConfigChannel+0x4a0>)
 8103690:	428b      	cmp	r3, r1
 8103692:	d032      	beq.n	81036fa <HAL_ADC_ConfigChannel+0x30a>
 8103694:	683b      	ldr	r3, [r7, #0]
 8103696:	681b      	ldr	r3, [r3, #0]
 8103698:	497e      	ldr	r1, [pc, #504]	@ (8103894 <HAL_ADC_ConfigChannel+0x4a4>)
 810369a:	428b      	cmp	r3, r1
 810369c:	d02b      	beq.n	81036f6 <HAL_ADC_ConfigChannel+0x306>
 810369e:	683b      	ldr	r3, [r7, #0]
 81036a0:	681b      	ldr	r3, [r3, #0]
 81036a2:	497d      	ldr	r1, [pc, #500]	@ (8103898 <HAL_ADC_ConfigChannel+0x4a8>)
 81036a4:	428b      	cmp	r3, r1
 81036a6:	d024      	beq.n	81036f2 <HAL_ADC_ConfigChannel+0x302>
 81036a8:	683b      	ldr	r3, [r7, #0]
 81036aa:	681b      	ldr	r3, [r3, #0]
 81036ac:	497b      	ldr	r1, [pc, #492]	@ (810389c <HAL_ADC_ConfigChannel+0x4ac>)
 81036ae:	428b      	cmp	r3, r1
 81036b0:	d01d      	beq.n	81036ee <HAL_ADC_ConfigChannel+0x2fe>
 81036b2:	683b      	ldr	r3, [r7, #0]
 81036b4:	681b      	ldr	r3, [r3, #0]
 81036b6:	497a      	ldr	r1, [pc, #488]	@ (81038a0 <HAL_ADC_ConfigChannel+0x4b0>)
 81036b8:	428b      	cmp	r3, r1
 81036ba:	d016      	beq.n	81036ea <HAL_ADC_ConfigChannel+0x2fa>
 81036bc:	683b      	ldr	r3, [r7, #0]
 81036be:	681b      	ldr	r3, [r3, #0]
 81036c0:	4978      	ldr	r1, [pc, #480]	@ (81038a4 <HAL_ADC_ConfigChannel+0x4b4>)
 81036c2:	428b      	cmp	r3, r1
 81036c4:	d00f      	beq.n	81036e6 <HAL_ADC_ConfigChannel+0x2f6>
 81036c6:	683b      	ldr	r3, [r7, #0]
 81036c8:	681b      	ldr	r3, [r3, #0]
 81036ca:	4977      	ldr	r1, [pc, #476]	@ (81038a8 <HAL_ADC_ConfigChannel+0x4b8>)
 81036cc:	428b      	cmp	r3, r1
 81036ce:	d008      	beq.n	81036e2 <HAL_ADC_ConfigChannel+0x2f2>
 81036d0:	683b      	ldr	r3, [r7, #0]
 81036d2:	681b      	ldr	r3, [r3, #0]
 81036d4:	4975      	ldr	r1, [pc, #468]	@ (81038ac <HAL_ADC_ConfigChannel+0x4bc>)
 81036d6:	428b      	cmp	r3, r1
 81036d8:	d101      	bne.n	81036de <HAL_ADC_ConfigChannel+0x2ee>
 81036da:	4b75      	ldr	r3, [pc, #468]	@ (81038b0 <HAL_ADC_ConfigChannel+0x4c0>)
 81036dc:	e05a      	b.n	8103794 <HAL_ADC_ConfigChannel+0x3a4>
 81036de:	2300      	movs	r3, #0
 81036e0:	e058      	b.n	8103794 <HAL_ADC_ConfigChannel+0x3a4>
 81036e2:	4b74      	ldr	r3, [pc, #464]	@ (81038b4 <HAL_ADC_ConfigChannel+0x4c4>)
 81036e4:	e056      	b.n	8103794 <HAL_ADC_ConfigChannel+0x3a4>
 81036e6:	4b74      	ldr	r3, [pc, #464]	@ (81038b8 <HAL_ADC_ConfigChannel+0x4c8>)
 81036e8:	e054      	b.n	8103794 <HAL_ADC_ConfigChannel+0x3a4>
 81036ea:	4b6e      	ldr	r3, [pc, #440]	@ (81038a4 <HAL_ADC_ConfigChannel+0x4b4>)
 81036ec:	e052      	b.n	8103794 <HAL_ADC_ConfigChannel+0x3a4>
 81036ee:	4b6c      	ldr	r3, [pc, #432]	@ (81038a0 <HAL_ADC_ConfigChannel+0x4b0>)
 81036f0:	e050      	b.n	8103794 <HAL_ADC_ConfigChannel+0x3a4>
 81036f2:	4b72      	ldr	r3, [pc, #456]	@ (81038bc <HAL_ADC_ConfigChannel+0x4cc>)
 81036f4:	e04e      	b.n	8103794 <HAL_ADC_ConfigChannel+0x3a4>
 81036f6:	4b72      	ldr	r3, [pc, #456]	@ (81038c0 <HAL_ADC_ConfigChannel+0x4d0>)
 81036f8:	e04c      	b.n	8103794 <HAL_ADC_ConfigChannel+0x3a4>
 81036fa:	4b72      	ldr	r3, [pc, #456]	@ (81038c4 <HAL_ADC_ConfigChannel+0x4d4>)
 81036fc:	e04a      	b.n	8103794 <HAL_ADC_ConfigChannel+0x3a4>
 81036fe:	4b72      	ldr	r3, [pc, #456]	@ (81038c8 <HAL_ADC_ConfigChannel+0x4d8>)
 8103700:	e048      	b.n	8103794 <HAL_ADC_ConfigChannel+0x3a4>
 8103702:	2301      	movs	r3, #1
 8103704:	e046      	b.n	8103794 <HAL_ADC_ConfigChannel+0x3a4>
 8103706:	687b      	ldr	r3, [r7, #4]
 8103708:	681b      	ldr	r3, [r3, #0]
 810370a:	4970      	ldr	r1, [pc, #448]	@ (81038cc <HAL_ADC_ConfigChannel+0x4dc>)
 810370c:	428b      	cmp	r3, r1
 810370e:	d140      	bne.n	8103792 <HAL_ADC_ConfigChannel+0x3a2>
 8103710:	683b      	ldr	r3, [r7, #0]
 8103712:	681b      	ldr	r3, [r3, #0]
 8103714:	495c      	ldr	r1, [pc, #368]	@ (8103888 <HAL_ADC_ConfigChannel+0x498>)
 8103716:	428b      	cmp	r3, r1
 8103718:	d039      	beq.n	810378e <HAL_ADC_ConfigChannel+0x39e>
 810371a:	683b      	ldr	r3, [r7, #0]
 810371c:	681b      	ldr	r3, [r3, #0]
 810371e:	495b      	ldr	r1, [pc, #364]	@ (810388c <HAL_ADC_ConfigChannel+0x49c>)
 8103720:	428b      	cmp	r3, r1
 8103722:	d032      	beq.n	810378a <HAL_ADC_ConfigChannel+0x39a>
 8103724:	683b      	ldr	r3, [r7, #0]
 8103726:	681b      	ldr	r3, [r3, #0]
 8103728:	4959      	ldr	r1, [pc, #356]	@ (8103890 <HAL_ADC_ConfigChannel+0x4a0>)
 810372a:	428b      	cmp	r3, r1
 810372c:	d02b      	beq.n	8103786 <HAL_ADC_ConfigChannel+0x396>
 810372e:	683b      	ldr	r3, [r7, #0]
 8103730:	681b      	ldr	r3, [r3, #0]
 8103732:	4958      	ldr	r1, [pc, #352]	@ (8103894 <HAL_ADC_ConfigChannel+0x4a4>)
 8103734:	428b      	cmp	r3, r1
 8103736:	d024      	beq.n	8103782 <HAL_ADC_ConfigChannel+0x392>
 8103738:	683b      	ldr	r3, [r7, #0]
 810373a:	681b      	ldr	r3, [r3, #0]
 810373c:	4956      	ldr	r1, [pc, #344]	@ (8103898 <HAL_ADC_ConfigChannel+0x4a8>)
 810373e:	428b      	cmp	r3, r1
 8103740:	d01d      	beq.n	810377e <HAL_ADC_ConfigChannel+0x38e>
 8103742:	683b      	ldr	r3, [r7, #0]
 8103744:	681b      	ldr	r3, [r3, #0]
 8103746:	4955      	ldr	r1, [pc, #340]	@ (810389c <HAL_ADC_ConfigChannel+0x4ac>)
 8103748:	428b      	cmp	r3, r1
 810374a:	d016      	beq.n	810377a <HAL_ADC_ConfigChannel+0x38a>
 810374c:	683b      	ldr	r3, [r7, #0]
 810374e:	681b      	ldr	r3, [r3, #0]
 8103750:	4953      	ldr	r1, [pc, #332]	@ (81038a0 <HAL_ADC_ConfigChannel+0x4b0>)
 8103752:	428b      	cmp	r3, r1
 8103754:	d00f      	beq.n	8103776 <HAL_ADC_ConfigChannel+0x386>
 8103756:	683b      	ldr	r3, [r7, #0]
 8103758:	681b      	ldr	r3, [r3, #0]
 810375a:	4952      	ldr	r1, [pc, #328]	@ (81038a4 <HAL_ADC_ConfigChannel+0x4b4>)
 810375c:	428b      	cmp	r3, r1
 810375e:	d008      	beq.n	8103772 <HAL_ADC_ConfigChannel+0x382>
 8103760:	683b      	ldr	r3, [r7, #0]
 8103762:	681b      	ldr	r3, [r3, #0]
 8103764:	4951      	ldr	r1, [pc, #324]	@ (81038ac <HAL_ADC_ConfigChannel+0x4bc>)
 8103766:	428b      	cmp	r3, r1
 8103768:	d101      	bne.n	810376e <HAL_ADC_ConfigChannel+0x37e>
 810376a:	4b51      	ldr	r3, [pc, #324]	@ (81038b0 <HAL_ADC_ConfigChannel+0x4c0>)
 810376c:	e012      	b.n	8103794 <HAL_ADC_ConfigChannel+0x3a4>
 810376e:	2300      	movs	r3, #0
 8103770:	e010      	b.n	8103794 <HAL_ADC_ConfigChannel+0x3a4>
 8103772:	4b51      	ldr	r3, [pc, #324]	@ (81038b8 <HAL_ADC_ConfigChannel+0x4c8>)
 8103774:	e00e      	b.n	8103794 <HAL_ADC_ConfigChannel+0x3a4>
 8103776:	4b4b      	ldr	r3, [pc, #300]	@ (81038a4 <HAL_ADC_ConfigChannel+0x4b4>)
 8103778:	e00c      	b.n	8103794 <HAL_ADC_ConfigChannel+0x3a4>
 810377a:	4b49      	ldr	r3, [pc, #292]	@ (81038a0 <HAL_ADC_ConfigChannel+0x4b0>)
 810377c:	e00a      	b.n	8103794 <HAL_ADC_ConfigChannel+0x3a4>
 810377e:	4b4f      	ldr	r3, [pc, #316]	@ (81038bc <HAL_ADC_ConfigChannel+0x4cc>)
 8103780:	e008      	b.n	8103794 <HAL_ADC_ConfigChannel+0x3a4>
 8103782:	4b4f      	ldr	r3, [pc, #316]	@ (81038c0 <HAL_ADC_ConfigChannel+0x4d0>)
 8103784:	e006      	b.n	8103794 <HAL_ADC_ConfigChannel+0x3a4>
 8103786:	4b4f      	ldr	r3, [pc, #316]	@ (81038c4 <HAL_ADC_ConfigChannel+0x4d4>)
 8103788:	e004      	b.n	8103794 <HAL_ADC_ConfigChannel+0x3a4>
 810378a:	4b4f      	ldr	r3, [pc, #316]	@ (81038c8 <HAL_ADC_ConfigChannel+0x4d8>)
 810378c:	e002      	b.n	8103794 <HAL_ADC_ConfigChannel+0x3a4>
 810378e:	2301      	movs	r3, #1
 8103790:	e000      	b.n	8103794 <HAL_ADC_ConfigChannel+0x3a4>
 8103792:	2300      	movs	r3, #0
 8103794:	4619      	mov	r1, r3
 8103796:	4610      	mov	r0, r2
 8103798:	f7ff fafe 	bl	8102d98 <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 810379c:	683b      	ldr	r3, [r7, #0]
 810379e:	681b      	ldr	r3, [r3, #0]
 81037a0:	2b00      	cmp	r3, #0
 81037a2:	f280 80fc 	bge.w	810399e <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81037a6:	687b      	ldr	r3, [r7, #4]
 81037a8:	681b      	ldr	r3, [r3, #0]
 81037aa:	4a36      	ldr	r2, [pc, #216]	@ (8103884 <HAL_ADC_ConfigChannel+0x494>)
 81037ac:	4293      	cmp	r3, r2
 81037ae:	d004      	beq.n	81037ba <HAL_ADC_ConfigChannel+0x3ca>
 81037b0:	687b      	ldr	r3, [r7, #4]
 81037b2:	681b      	ldr	r3, [r3, #0]
 81037b4:	4a45      	ldr	r2, [pc, #276]	@ (81038cc <HAL_ADC_ConfigChannel+0x4dc>)
 81037b6:	4293      	cmp	r3, r2
 81037b8:	d101      	bne.n	81037be <HAL_ADC_ConfigChannel+0x3ce>
 81037ba:	4b45      	ldr	r3, [pc, #276]	@ (81038d0 <HAL_ADC_ConfigChannel+0x4e0>)
 81037bc:	e000      	b.n	81037c0 <HAL_ADC_ConfigChannel+0x3d0>
 81037be:	4b45      	ldr	r3, [pc, #276]	@ (81038d4 <HAL_ADC_ConfigChannel+0x4e4>)
 81037c0:	4618      	mov	r0, r3
 81037c2:	f7ff fadb 	bl	8102d7c <LL_ADC_GetCommonPathInternalCh>
 81037c6:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81037c8:	687b      	ldr	r3, [r7, #4]
 81037ca:	681b      	ldr	r3, [r3, #0]
 81037cc:	4a2d      	ldr	r2, [pc, #180]	@ (8103884 <HAL_ADC_ConfigChannel+0x494>)
 81037ce:	4293      	cmp	r3, r2
 81037d0:	d004      	beq.n	81037dc <HAL_ADC_ConfigChannel+0x3ec>
 81037d2:	687b      	ldr	r3, [r7, #4]
 81037d4:	681b      	ldr	r3, [r3, #0]
 81037d6:	4a3d      	ldr	r2, [pc, #244]	@ (81038cc <HAL_ADC_ConfigChannel+0x4dc>)
 81037d8:	4293      	cmp	r3, r2
 81037da:	d10e      	bne.n	81037fa <HAL_ADC_ConfigChannel+0x40a>
 81037dc:	4829      	ldr	r0, [pc, #164]	@ (8103884 <HAL_ADC_ConfigChannel+0x494>)
 81037de:	f7ff fc2b 	bl	8103038 <LL_ADC_IsEnabled>
 81037e2:	4604      	mov	r4, r0
 81037e4:	4839      	ldr	r0, [pc, #228]	@ (81038cc <HAL_ADC_ConfigChannel+0x4dc>)
 81037e6:	f7ff fc27 	bl	8103038 <LL_ADC_IsEnabled>
 81037ea:	4603      	mov	r3, r0
 81037ec:	4323      	orrs	r3, r4
 81037ee:	2b00      	cmp	r3, #0
 81037f0:	bf0c      	ite	eq
 81037f2:	2301      	moveq	r3, #1
 81037f4:	2300      	movne	r3, #0
 81037f6:	b2db      	uxtb	r3, r3
 81037f8:	e008      	b.n	810380c <HAL_ADC_ConfigChannel+0x41c>
 81037fa:	4837      	ldr	r0, [pc, #220]	@ (81038d8 <HAL_ADC_ConfigChannel+0x4e8>)
 81037fc:	f7ff fc1c 	bl	8103038 <LL_ADC_IsEnabled>
 8103800:	4603      	mov	r3, r0
 8103802:	2b00      	cmp	r3, #0
 8103804:	bf0c      	ite	eq
 8103806:	2301      	moveq	r3, #1
 8103808:	2300      	movne	r3, #0
 810380a:	b2db      	uxtb	r3, r3
 810380c:	2b00      	cmp	r3, #0
 810380e:	f000 80b3 	beq.w	8103978 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8103812:	683b      	ldr	r3, [r7, #0]
 8103814:	681b      	ldr	r3, [r3, #0]
 8103816:	4a31      	ldr	r2, [pc, #196]	@ (81038dc <HAL_ADC_ConfigChannel+0x4ec>)
 8103818:	4293      	cmp	r3, r2
 810381a:	d165      	bne.n	81038e8 <HAL_ADC_ConfigChannel+0x4f8>
 810381c:	69fb      	ldr	r3, [r7, #28]
 810381e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8103822:	2b00      	cmp	r3, #0
 8103824:	d160      	bne.n	81038e8 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8103826:	687b      	ldr	r3, [r7, #4]
 8103828:	681b      	ldr	r3, [r3, #0]
 810382a:	4a2b      	ldr	r2, [pc, #172]	@ (81038d8 <HAL_ADC_ConfigChannel+0x4e8>)
 810382c:	4293      	cmp	r3, r2
 810382e:	f040 80b6 	bne.w	810399e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8103832:	687b      	ldr	r3, [r7, #4]
 8103834:	681b      	ldr	r3, [r3, #0]
 8103836:	4a13      	ldr	r2, [pc, #76]	@ (8103884 <HAL_ADC_ConfigChannel+0x494>)
 8103838:	4293      	cmp	r3, r2
 810383a:	d004      	beq.n	8103846 <HAL_ADC_ConfigChannel+0x456>
 810383c:	687b      	ldr	r3, [r7, #4]
 810383e:	681b      	ldr	r3, [r3, #0]
 8103840:	4a22      	ldr	r2, [pc, #136]	@ (81038cc <HAL_ADC_ConfigChannel+0x4dc>)
 8103842:	4293      	cmp	r3, r2
 8103844:	d101      	bne.n	810384a <HAL_ADC_ConfigChannel+0x45a>
 8103846:	4a22      	ldr	r2, [pc, #136]	@ (81038d0 <HAL_ADC_ConfigChannel+0x4e0>)
 8103848:	e000      	b.n	810384c <HAL_ADC_ConfigChannel+0x45c>
 810384a:	4a22      	ldr	r2, [pc, #136]	@ (81038d4 <HAL_ADC_ConfigChannel+0x4e4>)
 810384c:	69fb      	ldr	r3, [r7, #28]
 810384e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8103852:	4619      	mov	r1, r3
 8103854:	4610      	mov	r0, r2
 8103856:	f7ff fa7e 	bl	8102d56 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 810385a:	4b21      	ldr	r3, [pc, #132]	@ (81038e0 <HAL_ADC_ConfigChannel+0x4f0>)
 810385c:	681b      	ldr	r3, [r3, #0]
 810385e:	099b      	lsrs	r3, r3, #6
 8103860:	4a20      	ldr	r2, [pc, #128]	@ (81038e4 <HAL_ADC_ConfigChannel+0x4f4>)
 8103862:	fba2 2303 	umull	r2, r3, r2, r3
 8103866:	099b      	lsrs	r3, r3, #6
 8103868:	3301      	adds	r3, #1
 810386a:	005b      	lsls	r3, r3, #1
 810386c:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 810386e:	e002      	b.n	8103876 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8103870:	68fb      	ldr	r3, [r7, #12]
 8103872:	3b01      	subs	r3, #1
 8103874:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8103876:	68fb      	ldr	r3, [r7, #12]
 8103878:	2b00      	cmp	r3, #0
 810387a:	d1f9      	bne.n	8103870 <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 810387c:	e08f      	b.n	810399e <HAL_ADC_ConfigChannel+0x5ae>
 810387e:	bf00      	nop
 8103880:	47ff0000 	.word	0x47ff0000
 8103884:	40022000 	.word	0x40022000
 8103888:	04300002 	.word	0x04300002
 810388c:	08600004 	.word	0x08600004
 8103890:	0c900008 	.word	0x0c900008
 8103894:	10c00010 	.word	0x10c00010
 8103898:	14f00020 	.word	0x14f00020
 810389c:	2a000400 	.word	0x2a000400
 81038a0:	2e300800 	.word	0x2e300800
 81038a4:	32601000 	.word	0x32601000
 81038a8:	43210000 	.word	0x43210000
 81038ac:	4b840000 	.word	0x4b840000
 81038b0:	4fb80000 	.word	0x4fb80000
 81038b4:	47520000 	.word	0x47520000
 81038b8:	36902000 	.word	0x36902000
 81038bc:	25b00200 	.word	0x25b00200
 81038c0:	21800100 	.word	0x21800100
 81038c4:	1d500080 	.word	0x1d500080
 81038c8:	19200040 	.word	0x19200040
 81038cc:	40022100 	.word	0x40022100
 81038d0:	40022300 	.word	0x40022300
 81038d4:	58026300 	.word	0x58026300
 81038d8:	58026000 	.word	0x58026000
 81038dc:	cb840000 	.word	0xcb840000
 81038e0:	10000000 	.word	0x10000000
 81038e4:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 81038e8:	683b      	ldr	r3, [r7, #0]
 81038ea:	681b      	ldr	r3, [r3, #0]
 81038ec:	4a31      	ldr	r2, [pc, #196]	@ (81039b4 <HAL_ADC_ConfigChannel+0x5c4>)
 81038ee:	4293      	cmp	r3, r2
 81038f0:	d11e      	bne.n	8103930 <HAL_ADC_ConfigChannel+0x540>
 81038f2:	69fb      	ldr	r3, [r7, #28]
 81038f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 81038f8:	2b00      	cmp	r3, #0
 81038fa:	d119      	bne.n	8103930 <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 81038fc:	687b      	ldr	r3, [r7, #4]
 81038fe:	681b      	ldr	r3, [r3, #0]
 8103900:	4a2d      	ldr	r2, [pc, #180]	@ (81039b8 <HAL_ADC_ConfigChannel+0x5c8>)
 8103902:	4293      	cmp	r3, r2
 8103904:	d14b      	bne.n	810399e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8103906:	687b      	ldr	r3, [r7, #4]
 8103908:	681b      	ldr	r3, [r3, #0]
 810390a:	4a2c      	ldr	r2, [pc, #176]	@ (81039bc <HAL_ADC_ConfigChannel+0x5cc>)
 810390c:	4293      	cmp	r3, r2
 810390e:	d004      	beq.n	810391a <HAL_ADC_ConfigChannel+0x52a>
 8103910:	687b      	ldr	r3, [r7, #4]
 8103912:	681b      	ldr	r3, [r3, #0]
 8103914:	4a2a      	ldr	r2, [pc, #168]	@ (81039c0 <HAL_ADC_ConfigChannel+0x5d0>)
 8103916:	4293      	cmp	r3, r2
 8103918:	d101      	bne.n	810391e <HAL_ADC_ConfigChannel+0x52e>
 810391a:	4a2a      	ldr	r2, [pc, #168]	@ (81039c4 <HAL_ADC_ConfigChannel+0x5d4>)
 810391c:	e000      	b.n	8103920 <HAL_ADC_ConfigChannel+0x530>
 810391e:	4a2a      	ldr	r2, [pc, #168]	@ (81039c8 <HAL_ADC_ConfigChannel+0x5d8>)
 8103920:	69fb      	ldr	r3, [r7, #28]
 8103922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8103926:	4619      	mov	r1, r3
 8103928:	4610      	mov	r0, r2
 810392a:	f7ff fa14 	bl	8102d56 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 810392e:	e036      	b.n	810399e <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8103930:	683b      	ldr	r3, [r7, #0]
 8103932:	681b      	ldr	r3, [r3, #0]
 8103934:	4a25      	ldr	r2, [pc, #148]	@ (81039cc <HAL_ADC_ConfigChannel+0x5dc>)
 8103936:	4293      	cmp	r3, r2
 8103938:	d131      	bne.n	810399e <HAL_ADC_ConfigChannel+0x5ae>
 810393a:	69fb      	ldr	r3, [r7, #28]
 810393c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8103940:	2b00      	cmp	r3, #0
 8103942:	d12c      	bne.n	810399e <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8103944:	687b      	ldr	r3, [r7, #4]
 8103946:	681b      	ldr	r3, [r3, #0]
 8103948:	4a1b      	ldr	r2, [pc, #108]	@ (81039b8 <HAL_ADC_ConfigChannel+0x5c8>)
 810394a:	4293      	cmp	r3, r2
 810394c:	d127      	bne.n	810399e <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 810394e:	687b      	ldr	r3, [r7, #4]
 8103950:	681b      	ldr	r3, [r3, #0]
 8103952:	4a1a      	ldr	r2, [pc, #104]	@ (81039bc <HAL_ADC_ConfigChannel+0x5cc>)
 8103954:	4293      	cmp	r3, r2
 8103956:	d004      	beq.n	8103962 <HAL_ADC_ConfigChannel+0x572>
 8103958:	687b      	ldr	r3, [r7, #4]
 810395a:	681b      	ldr	r3, [r3, #0]
 810395c:	4a18      	ldr	r2, [pc, #96]	@ (81039c0 <HAL_ADC_ConfigChannel+0x5d0>)
 810395e:	4293      	cmp	r3, r2
 8103960:	d101      	bne.n	8103966 <HAL_ADC_ConfigChannel+0x576>
 8103962:	4a18      	ldr	r2, [pc, #96]	@ (81039c4 <HAL_ADC_ConfigChannel+0x5d4>)
 8103964:	e000      	b.n	8103968 <HAL_ADC_ConfigChannel+0x578>
 8103966:	4a18      	ldr	r2, [pc, #96]	@ (81039c8 <HAL_ADC_ConfigChannel+0x5d8>)
 8103968:	69fb      	ldr	r3, [r7, #28]
 810396a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810396e:	4619      	mov	r1, r3
 8103970:	4610      	mov	r0, r2
 8103972:	f7ff f9f0 	bl	8102d56 <LL_ADC_SetCommonPathInternalCh>
 8103976:	e012      	b.n	810399e <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103978:	687b      	ldr	r3, [r7, #4]
 810397a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810397c:	f043 0220 	orr.w	r2, r3, #32
 8103980:	687b      	ldr	r3, [r7, #4]
 8103982:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8103984:	2301      	movs	r3, #1
 8103986:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 810398a:	e008      	b.n	810399e <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810398c:	687b      	ldr	r3, [r7, #4]
 810398e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103990:	f043 0220 	orr.w	r2, r3, #32
 8103994:	687b      	ldr	r3, [r7, #4]
 8103996:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8103998:	2301      	movs	r3, #1
 810399a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 810399e:	687b      	ldr	r3, [r7, #4]
 81039a0:	2200      	movs	r2, #0
 81039a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 81039a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 81039aa:	4618      	mov	r0, r3
 81039ac:	3734      	adds	r7, #52	@ 0x34
 81039ae:	46bd      	mov	sp, r7
 81039b0:	bd90      	pop	{r4, r7, pc}
 81039b2:	bf00      	nop
 81039b4:	c7520000 	.word	0xc7520000
 81039b8:	58026000 	.word	0x58026000
 81039bc:	40022000 	.word	0x40022000
 81039c0:	40022100 	.word	0x40022100
 81039c4:	40022300 	.word	0x40022300
 81039c8:	58026300 	.word	0x58026300
 81039cc:	cfb80000 	.word	0xcfb80000

081039d0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 81039d0:	b580      	push	{r7, lr}
 81039d2:	b084      	sub	sp, #16
 81039d4:	af00      	add	r7, sp, #0
 81039d6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 81039d8:	687b      	ldr	r3, [r7, #4]
 81039da:	681b      	ldr	r3, [r3, #0]
 81039dc:	4a7a      	ldr	r2, [pc, #488]	@ (8103bc8 <ADC_ConfigureBoostMode+0x1f8>)
 81039de:	4293      	cmp	r3, r2
 81039e0:	d004      	beq.n	81039ec <ADC_ConfigureBoostMode+0x1c>
 81039e2:	687b      	ldr	r3, [r7, #4]
 81039e4:	681b      	ldr	r3, [r3, #0]
 81039e6:	4a79      	ldr	r2, [pc, #484]	@ (8103bcc <ADC_ConfigureBoostMode+0x1fc>)
 81039e8:	4293      	cmp	r3, r2
 81039ea:	d109      	bne.n	8103a00 <ADC_ConfigureBoostMode+0x30>
 81039ec:	4b78      	ldr	r3, [pc, #480]	@ (8103bd0 <ADC_ConfigureBoostMode+0x200>)
 81039ee:	689b      	ldr	r3, [r3, #8]
 81039f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81039f4:	2b00      	cmp	r3, #0
 81039f6:	bf14      	ite	ne
 81039f8:	2301      	movne	r3, #1
 81039fa:	2300      	moveq	r3, #0
 81039fc:	b2db      	uxtb	r3, r3
 81039fe:	e008      	b.n	8103a12 <ADC_ConfigureBoostMode+0x42>
 8103a00:	4b74      	ldr	r3, [pc, #464]	@ (8103bd4 <ADC_ConfigureBoostMode+0x204>)
 8103a02:	689b      	ldr	r3, [r3, #8]
 8103a04:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8103a08:	2b00      	cmp	r3, #0
 8103a0a:	bf14      	ite	ne
 8103a0c:	2301      	movne	r3, #1
 8103a0e:	2300      	moveq	r3, #0
 8103a10:	b2db      	uxtb	r3, r3
 8103a12:	2b00      	cmp	r3, #0
 8103a14:	d01c      	beq.n	8103a50 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8103a16:	f001 ff75 	bl	8105904 <HAL_RCC_GetHCLKFreq>
 8103a1a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103a1c:	687b      	ldr	r3, [r7, #4]
 8103a1e:	685b      	ldr	r3, [r3, #4]
 8103a20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103a24:	d010      	beq.n	8103a48 <ADC_ConfigureBoostMode+0x78>
 8103a26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103a2a:	d873      	bhi.n	8103b14 <ADC_ConfigureBoostMode+0x144>
 8103a2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103a30:	d002      	beq.n	8103a38 <ADC_ConfigureBoostMode+0x68>
 8103a32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103a36:	d16d      	bne.n	8103b14 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8103a38:	687b      	ldr	r3, [r7, #4]
 8103a3a:	685b      	ldr	r3, [r3, #4]
 8103a3c:	0c1b      	lsrs	r3, r3, #16
 8103a3e:	68fa      	ldr	r2, [r7, #12]
 8103a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8103a44:	60fb      	str	r3, [r7, #12]
        break;
 8103a46:	e068      	b.n	8103b1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8103a48:	68fb      	ldr	r3, [r7, #12]
 8103a4a:	089b      	lsrs	r3, r3, #2
 8103a4c:	60fb      	str	r3, [r7, #12]
        break;
 8103a4e:	e064      	b.n	8103b1a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8103a50:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8103a54:	f04f 0100 	mov.w	r1, #0
 8103a58:	f003 f9fc 	bl	8106e54 <HAL_RCCEx_GetPeriphCLKFreq>
 8103a5c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8103a5e:	687b      	ldr	r3, [r7, #4]
 8103a60:	685b      	ldr	r3, [r3, #4]
 8103a62:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8103a66:	d051      	beq.n	8103b0c <ADC_ConfigureBoostMode+0x13c>
 8103a68:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8103a6c:	d854      	bhi.n	8103b18 <ADC_ConfigureBoostMode+0x148>
 8103a6e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8103a72:	d047      	beq.n	8103b04 <ADC_ConfigureBoostMode+0x134>
 8103a74:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8103a78:	d84e      	bhi.n	8103b18 <ADC_ConfigureBoostMode+0x148>
 8103a7a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8103a7e:	d03d      	beq.n	8103afc <ADC_ConfigureBoostMode+0x12c>
 8103a80:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8103a84:	d848      	bhi.n	8103b18 <ADC_ConfigureBoostMode+0x148>
 8103a86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103a8a:	d033      	beq.n	8103af4 <ADC_ConfigureBoostMode+0x124>
 8103a8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103a90:	d842      	bhi.n	8103b18 <ADC_ConfigureBoostMode+0x148>
 8103a92:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8103a96:	d029      	beq.n	8103aec <ADC_ConfigureBoostMode+0x11c>
 8103a98:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8103a9c:	d83c      	bhi.n	8103b18 <ADC_ConfigureBoostMode+0x148>
 8103a9e:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8103aa2:	d01a      	beq.n	8103ada <ADC_ConfigureBoostMode+0x10a>
 8103aa4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8103aa8:	d836      	bhi.n	8103b18 <ADC_ConfigureBoostMode+0x148>
 8103aaa:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8103aae:	d014      	beq.n	8103ada <ADC_ConfigureBoostMode+0x10a>
 8103ab0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8103ab4:	d830      	bhi.n	8103b18 <ADC_ConfigureBoostMode+0x148>
 8103ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103aba:	d00e      	beq.n	8103ada <ADC_ConfigureBoostMode+0x10a>
 8103abc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103ac0:	d82a      	bhi.n	8103b18 <ADC_ConfigureBoostMode+0x148>
 8103ac2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8103ac6:	d008      	beq.n	8103ada <ADC_ConfigureBoostMode+0x10a>
 8103ac8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8103acc:	d824      	bhi.n	8103b18 <ADC_ConfigureBoostMode+0x148>
 8103ace:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8103ad2:	d002      	beq.n	8103ada <ADC_ConfigureBoostMode+0x10a>
 8103ad4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8103ad8:	d11e      	bne.n	8103b18 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8103ada:	687b      	ldr	r3, [r7, #4]
 8103adc:	685b      	ldr	r3, [r3, #4]
 8103ade:	0c9b      	lsrs	r3, r3, #18
 8103ae0:	005b      	lsls	r3, r3, #1
 8103ae2:	68fa      	ldr	r2, [r7, #12]
 8103ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8103ae8:	60fb      	str	r3, [r7, #12]
        break;
 8103aea:	e016      	b.n	8103b1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8103aec:	68fb      	ldr	r3, [r7, #12]
 8103aee:	091b      	lsrs	r3, r3, #4
 8103af0:	60fb      	str	r3, [r7, #12]
        break;
 8103af2:	e012      	b.n	8103b1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8103af4:	68fb      	ldr	r3, [r7, #12]
 8103af6:	095b      	lsrs	r3, r3, #5
 8103af8:	60fb      	str	r3, [r7, #12]
        break;
 8103afa:	e00e      	b.n	8103b1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8103afc:	68fb      	ldr	r3, [r7, #12]
 8103afe:	099b      	lsrs	r3, r3, #6
 8103b00:	60fb      	str	r3, [r7, #12]
        break;
 8103b02:	e00a      	b.n	8103b1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8103b04:	68fb      	ldr	r3, [r7, #12]
 8103b06:	09db      	lsrs	r3, r3, #7
 8103b08:	60fb      	str	r3, [r7, #12]
        break;
 8103b0a:	e006      	b.n	8103b1a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8103b0c:	68fb      	ldr	r3, [r7, #12]
 8103b0e:	0a1b      	lsrs	r3, r3, #8
 8103b10:	60fb      	str	r3, [r7, #12]
        break;
 8103b12:	e002      	b.n	8103b1a <ADC_ConfigureBoostMode+0x14a>
        break;
 8103b14:	bf00      	nop
 8103b16:	e000      	b.n	8103b1a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8103b18:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8103b1a:	f7ff f8d3 	bl	8102cc4 <HAL_GetREVID>
 8103b1e:	4603      	mov	r3, r0
 8103b20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8103b24:	4293      	cmp	r3, r2
 8103b26:	d815      	bhi.n	8103b54 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8103b28:	68fb      	ldr	r3, [r7, #12]
 8103b2a:	4a2b      	ldr	r2, [pc, #172]	@ (8103bd8 <ADC_ConfigureBoostMode+0x208>)
 8103b2c:	4293      	cmp	r3, r2
 8103b2e:	d908      	bls.n	8103b42 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103b30:	687b      	ldr	r3, [r7, #4]
 8103b32:	681b      	ldr	r3, [r3, #0]
 8103b34:	689a      	ldr	r2, [r3, #8]
 8103b36:	687b      	ldr	r3, [r7, #4]
 8103b38:	681b      	ldr	r3, [r3, #0]
 8103b3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8103b3e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8103b40:	e03e      	b.n	8103bc0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	681b      	ldr	r3, [r3, #0]
 8103b46:	689a      	ldr	r2, [r3, #8]
 8103b48:	687b      	ldr	r3, [r7, #4]
 8103b4a:	681b      	ldr	r3, [r3, #0]
 8103b4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8103b50:	609a      	str	r2, [r3, #8]
}
 8103b52:	e035      	b.n	8103bc0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8103b54:	68fb      	ldr	r3, [r7, #12]
 8103b56:	085b      	lsrs	r3, r3, #1
 8103b58:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8103b5a:	68fb      	ldr	r3, [r7, #12]
 8103b5c:	4a1f      	ldr	r2, [pc, #124]	@ (8103bdc <ADC_ConfigureBoostMode+0x20c>)
 8103b5e:	4293      	cmp	r3, r2
 8103b60:	d808      	bhi.n	8103b74 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8103b62:	687b      	ldr	r3, [r7, #4]
 8103b64:	681b      	ldr	r3, [r3, #0]
 8103b66:	689a      	ldr	r2, [r3, #8]
 8103b68:	687b      	ldr	r3, [r7, #4]
 8103b6a:	681b      	ldr	r3, [r3, #0]
 8103b6c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8103b70:	609a      	str	r2, [r3, #8]
}
 8103b72:	e025      	b.n	8103bc0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8103b74:	68fb      	ldr	r3, [r7, #12]
 8103b76:	4a1a      	ldr	r2, [pc, #104]	@ (8103be0 <ADC_ConfigureBoostMode+0x210>)
 8103b78:	4293      	cmp	r3, r2
 8103b7a:	d80a      	bhi.n	8103b92 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8103b7c:	687b      	ldr	r3, [r7, #4]
 8103b7e:	681b      	ldr	r3, [r3, #0]
 8103b80:	689b      	ldr	r3, [r3, #8]
 8103b82:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8103b86:	687b      	ldr	r3, [r7, #4]
 8103b88:	681b      	ldr	r3, [r3, #0]
 8103b8a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8103b8e:	609a      	str	r2, [r3, #8]
}
 8103b90:	e016      	b.n	8103bc0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8103b92:	68fb      	ldr	r3, [r7, #12]
 8103b94:	4a13      	ldr	r2, [pc, #76]	@ (8103be4 <ADC_ConfigureBoostMode+0x214>)
 8103b96:	4293      	cmp	r3, r2
 8103b98:	d80a      	bhi.n	8103bb0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8103b9a:	687b      	ldr	r3, [r7, #4]
 8103b9c:	681b      	ldr	r3, [r3, #0]
 8103b9e:	689b      	ldr	r3, [r3, #8]
 8103ba0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8103ba4:	687b      	ldr	r3, [r7, #4]
 8103ba6:	681b      	ldr	r3, [r3, #0]
 8103ba8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8103bac:	609a      	str	r2, [r3, #8]
}
 8103bae:	e007      	b.n	8103bc0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8103bb0:	687b      	ldr	r3, [r7, #4]
 8103bb2:	681b      	ldr	r3, [r3, #0]
 8103bb4:	689a      	ldr	r2, [r3, #8]
 8103bb6:	687b      	ldr	r3, [r7, #4]
 8103bb8:	681b      	ldr	r3, [r3, #0]
 8103bba:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8103bbe:	609a      	str	r2, [r3, #8]
}
 8103bc0:	bf00      	nop
 8103bc2:	3710      	adds	r7, #16
 8103bc4:	46bd      	mov	sp, r7
 8103bc6:	bd80      	pop	{r7, pc}
 8103bc8:	40022000 	.word	0x40022000
 8103bcc:	40022100 	.word	0x40022100
 8103bd0:	40022300 	.word	0x40022300
 8103bd4:	58026300 	.word	0x58026300
 8103bd8:	01312d00 	.word	0x01312d00
 8103bdc:	005f5e10 	.word	0x005f5e10
 8103be0:	00bebc20 	.word	0x00bebc20
 8103be4:	017d7840 	.word	0x017d7840

08103be8 <LL_ADC_IsEnabled>:
{
 8103be8:	b480      	push	{r7}
 8103bea:	b083      	sub	sp, #12
 8103bec:	af00      	add	r7, sp, #0
 8103bee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8103bf0:	687b      	ldr	r3, [r7, #4]
 8103bf2:	689b      	ldr	r3, [r3, #8]
 8103bf4:	f003 0301 	and.w	r3, r3, #1
 8103bf8:	2b01      	cmp	r3, #1
 8103bfa:	d101      	bne.n	8103c00 <LL_ADC_IsEnabled+0x18>
 8103bfc:	2301      	movs	r3, #1
 8103bfe:	e000      	b.n	8103c02 <LL_ADC_IsEnabled+0x1a>
 8103c00:	2300      	movs	r3, #0
}
 8103c02:	4618      	mov	r0, r3
 8103c04:	370c      	adds	r7, #12
 8103c06:	46bd      	mov	sp, r7
 8103c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c0c:	4770      	bx	lr

08103c0e <LL_ADC_REG_IsConversionOngoing>:
{
 8103c0e:	b480      	push	{r7}
 8103c10:	b083      	sub	sp, #12
 8103c12:	af00      	add	r7, sp, #0
 8103c14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103c16:	687b      	ldr	r3, [r7, #4]
 8103c18:	689b      	ldr	r3, [r3, #8]
 8103c1a:	f003 0304 	and.w	r3, r3, #4
 8103c1e:	2b04      	cmp	r3, #4
 8103c20:	d101      	bne.n	8103c26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8103c22:	2301      	movs	r3, #1
 8103c24:	e000      	b.n	8103c28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103c26:	2300      	movs	r3, #0
}
 8103c28:	4618      	mov	r0, r3
 8103c2a:	370c      	adds	r7, #12
 8103c2c:	46bd      	mov	sp, r7
 8103c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c32:	4770      	bx	lr

08103c34 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8103c34:	b590      	push	{r4, r7, lr}
 8103c36:	b09f      	sub	sp, #124	@ 0x7c
 8103c38:	af00      	add	r7, sp, #0
 8103c3a:	6078      	str	r0, [r7, #4]
 8103c3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8103c3e:	2300      	movs	r3, #0
 8103c40:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8103c44:	687b      	ldr	r3, [r7, #4]
 8103c46:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8103c4a:	2b01      	cmp	r3, #1
 8103c4c:	d101      	bne.n	8103c52 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8103c4e:	2302      	movs	r3, #2
 8103c50:	e0c4      	b.n	8103ddc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 8103c52:	687b      	ldr	r3, [r7, #4]
 8103c54:	2201      	movs	r2, #1
 8103c56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8103c5a:	2300      	movs	r3, #0
 8103c5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8103c5e:	2300      	movs	r3, #0
 8103c60:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8103c62:	687b      	ldr	r3, [r7, #4]
 8103c64:	681b      	ldr	r3, [r3, #0]
 8103c66:	4a5f      	ldr	r2, [pc, #380]	@ (8103de4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103c68:	4293      	cmp	r3, r2
 8103c6a:	d102      	bne.n	8103c72 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8103c6c:	4b5e      	ldr	r3, [pc, #376]	@ (8103de8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103c6e:	60bb      	str	r3, [r7, #8]
 8103c70:	e001      	b.n	8103c76 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8103c72:	2300      	movs	r3, #0
 8103c74:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8103c76:	68bb      	ldr	r3, [r7, #8]
 8103c78:	2b00      	cmp	r3, #0
 8103c7a:	d10b      	bne.n	8103c94 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103c7c:	687b      	ldr	r3, [r7, #4]
 8103c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103c80:	f043 0220 	orr.w	r2, r3, #32
 8103c84:	687b      	ldr	r3, [r7, #4]
 8103c86:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8103c88:	687b      	ldr	r3, [r7, #4]
 8103c8a:	2200      	movs	r2, #0
 8103c8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8103c90:	2301      	movs	r3, #1
 8103c92:	e0a3      	b.n	8103ddc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8103c94:	68bb      	ldr	r3, [r7, #8]
 8103c96:	4618      	mov	r0, r3
 8103c98:	f7ff ffb9 	bl	8103c0e <LL_ADC_REG_IsConversionOngoing>
 8103c9c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103c9e:	687b      	ldr	r3, [r7, #4]
 8103ca0:	681b      	ldr	r3, [r3, #0]
 8103ca2:	4618      	mov	r0, r3
 8103ca4:	f7ff ffb3 	bl	8103c0e <LL_ADC_REG_IsConversionOngoing>
 8103ca8:	4603      	mov	r3, r0
 8103caa:	2b00      	cmp	r3, #0
 8103cac:	f040 8085 	bne.w	8103dba <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8103cb0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8103cb2:	2b00      	cmp	r3, #0
 8103cb4:	f040 8081 	bne.w	8103dba <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8103cb8:	687b      	ldr	r3, [r7, #4]
 8103cba:	681b      	ldr	r3, [r3, #0]
 8103cbc:	4a49      	ldr	r2, [pc, #292]	@ (8103de4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103cbe:	4293      	cmp	r3, r2
 8103cc0:	d004      	beq.n	8103ccc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8103cc2:	687b      	ldr	r3, [r7, #4]
 8103cc4:	681b      	ldr	r3, [r3, #0]
 8103cc6:	4a48      	ldr	r2, [pc, #288]	@ (8103de8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103cc8:	4293      	cmp	r3, r2
 8103cca:	d101      	bne.n	8103cd0 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8103ccc:	4b47      	ldr	r3, [pc, #284]	@ (8103dec <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8103cce:	e000      	b.n	8103cd2 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8103cd0:	4b47      	ldr	r3, [pc, #284]	@ (8103df0 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8103cd2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103cd4:	683b      	ldr	r3, [r7, #0]
 8103cd6:	681b      	ldr	r3, [r3, #0]
 8103cd8:	2b00      	cmp	r3, #0
 8103cda:	d03b      	beq.n	8103d54 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8103cdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103cde:	689b      	ldr	r3, [r3, #8]
 8103ce0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8103ce4:	683b      	ldr	r3, [r7, #0]
 8103ce6:	685b      	ldr	r3, [r3, #4]
 8103ce8:	431a      	orrs	r2, r3
 8103cea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103cec:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103cee:	687b      	ldr	r3, [r7, #4]
 8103cf0:	681b      	ldr	r3, [r3, #0]
 8103cf2:	4a3c      	ldr	r2, [pc, #240]	@ (8103de4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103cf4:	4293      	cmp	r3, r2
 8103cf6:	d004      	beq.n	8103d02 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 8103cf8:	687b      	ldr	r3, [r7, #4]
 8103cfa:	681b      	ldr	r3, [r3, #0]
 8103cfc:	4a3a      	ldr	r2, [pc, #232]	@ (8103de8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103cfe:	4293      	cmp	r3, r2
 8103d00:	d10e      	bne.n	8103d20 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8103d02:	4838      	ldr	r0, [pc, #224]	@ (8103de4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103d04:	f7ff ff70 	bl	8103be8 <LL_ADC_IsEnabled>
 8103d08:	4604      	mov	r4, r0
 8103d0a:	4837      	ldr	r0, [pc, #220]	@ (8103de8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103d0c:	f7ff ff6c 	bl	8103be8 <LL_ADC_IsEnabled>
 8103d10:	4603      	mov	r3, r0
 8103d12:	4323      	orrs	r3, r4
 8103d14:	2b00      	cmp	r3, #0
 8103d16:	bf0c      	ite	eq
 8103d18:	2301      	moveq	r3, #1
 8103d1a:	2300      	movne	r3, #0
 8103d1c:	b2db      	uxtb	r3, r3
 8103d1e:	e008      	b.n	8103d32 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8103d20:	4834      	ldr	r0, [pc, #208]	@ (8103df4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8103d22:	f7ff ff61 	bl	8103be8 <LL_ADC_IsEnabled>
 8103d26:	4603      	mov	r3, r0
 8103d28:	2b00      	cmp	r3, #0
 8103d2a:	bf0c      	ite	eq
 8103d2c:	2301      	moveq	r3, #1
 8103d2e:	2300      	movne	r3, #0
 8103d30:	b2db      	uxtb	r3, r3
 8103d32:	2b00      	cmp	r3, #0
 8103d34:	d04b      	beq.n	8103dce <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8103d36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103d38:	689b      	ldr	r3, [r3, #8]
 8103d3a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8103d3e:	f023 030f 	bic.w	r3, r3, #15
 8103d42:	683a      	ldr	r2, [r7, #0]
 8103d44:	6811      	ldr	r1, [r2, #0]
 8103d46:	683a      	ldr	r2, [r7, #0]
 8103d48:	6892      	ldr	r2, [r2, #8]
 8103d4a:	430a      	orrs	r2, r1
 8103d4c:	431a      	orrs	r2, r3
 8103d4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103d50:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103d52:	e03c      	b.n	8103dce <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8103d54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103d56:	689b      	ldr	r3, [r3, #8]
 8103d58:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8103d5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103d5e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103d60:	687b      	ldr	r3, [r7, #4]
 8103d62:	681b      	ldr	r3, [r3, #0]
 8103d64:	4a1f      	ldr	r2, [pc, #124]	@ (8103de4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103d66:	4293      	cmp	r3, r2
 8103d68:	d004      	beq.n	8103d74 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 8103d6a:	687b      	ldr	r3, [r7, #4]
 8103d6c:	681b      	ldr	r3, [r3, #0]
 8103d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8103de8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103d70:	4293      	cmp	r3, r2
 8103d72:	d10e      	bne.n	8103d92 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 8103d74:	481b      	ldr	r0, [pc, #108]	@ (8103de4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103d76:	f7ff ff37 	bl	8103be8 <LL_ADC_IsEnabled>
 8103d7a:	4604      	mov	r4, r0
 8103d7c:	481a      	ldr	r0, [pc, #104]	@ (8103de8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103d7e:	f7ff ff33 	bl	8103be8 <LL_ADC_IsEnabled>
 8103d82:	4603      	mov	r3, r0
 8103d84:	4323      	orrs	r3, r4
 8103d86:	2b00      	cmp	r3, #0
 8103d88:	bf0c      	ite	eq
 8103d8a:	2301      	moveq	r3, #1
 8103d8c:	2300      	movne	r3, #0
 8103d8e:	b2db      	uxtb	r3, r3
 8103d90:	e008      	b.n	8103da4 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8103d92:	4818      	ldr	r0, [pc, #96]	@ (8103df4 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8103d94:	f7ff ff28 	bl	8103be8 <LL_ADC_IsEnabled>
 8103d98:	4603      	mov	r3, r0
 8103d9a:	2b00      	cmp	r3, #0
 8103d9c:	bf0c      	ite	eq
 8103d9e:	2301      	moveq	r3, #1
 8103da0:	2300      	movne	r3, #0
 8103da2:	b2db      	uxtb	r3, r3
 8103da4:	2b00      	cmp	r3, #0
 8103da6:	d012      	beq.n	8103dce <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8103da8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8103daa:	689b      	ldr	r3, [r3, #8]
 8103dac:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8103db0:	f023 030f 	bic.w	r3, r3, #15
 8103db4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8103db6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103db8:	e009      	b.n	8103dce <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8103dba:	687b      	ldr	r3, [r7, #4]
 8103dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103dbe:	f043 0220 	orr.w	r2, r3, #32
 8103dc2:	687b      	ldr	r3, [r7, #4]
 8103dc4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8103dc6:	2301      	movs	r3, #1
 8103dc8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8103dcc:	e000      	b.n	8103dd0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103dce:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103dd0:	687b      	ldr	r3, [r7, #4]
 8103dd2:	2200      	movs	r2, #0
 8103dd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8103dd8:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8103ddc:	4618      	mov	r0, r3
 8103dde:	377c      	adds	r7, #124	@ 0x7c
 8103de0:	46bd      	mov	sp, r7
 8103de2:	bd90      	pop	{r4, r7, pc}
 8103de4:	40022000 	.word	0x40022000
 8103de8:	40022100 	.word	0x40022100
 8103dec:	40022300 	.word	0x40022300
 8103df0:	58026300 	.word	0x58026300
 8103df4:	58026000 	.word	0x58026000

08103df8 <HAL_CEC_Init>:
  *         parameters in the CEC_InitTypeDef and creates the associated handle .
  * @param hcec CEC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CEC_Init(CEC_HandleTypeDef *hcec)
{
 8103df8:	b580      	push	{r7, lr}
 8103dfa:	b082      	sub	sp, #8
 8103dfc:	af00      	add	r7, sp, #0
 8103dfe:	6078      	str	r0, [r7, #4]
  /* Check the CEC handle allocation */
  if ((hcec == NULL) || (hcec->Init.RxBuffer == NULL))
 8103e00:	687b      	ldr	r3, [r7, #4]
 8103e02:	2b00      	cmp	r3, #0
 8103e04:	d003      	beq.n	8103e0e <HAL_CEC_Init+0x16>
 8103e06:	687b      	ldr	r3, [r7, #4]
 8103e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103e0a:	2b00      	cmp	r3, #0
 8103e0c:	d101      	bne.n	8103e12 <HAL_CEC_Init+0x1a>
  {
    return HAL_ERROR;
 8103e0e:	2301      	movs	r3, #1
 8103e10:	e050      	b.n	8103eb4 <HAL_CEC_Init+0xbc>

    /* Init the low level hardware */
    hcec->MspInitCallback(hcec);
  }
#else
  if (hcec->gState == HAL_CEC_STATE_RESET)
 8103e12:	687b      	ldr	r3, [r7, #4]
 8103e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8103e16:	2b00      	cmp	r3, #0
 8103e18:	d106      	bne.n	8103e28 <HAL_CEC_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hcec->Lock = HAL_UNLOCKED;
 8103e1a:	687b      	ldr	r3, [r7, #4]
 8103e1c:	2200      	movs	r2, #0
 8103e1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_CEC_MspInit(hcec);
 8103e22:	6878      	ldr	r0, [r7, #4]
 8103e24:	f7fd fda8 	bl	8101978 <HAL_CEC_MspInit>
  }
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */

  hcec->gState = HAL_CEC_STATE_BUSY;
 8103e28:	687b      	ldr	r3, [r7, #4]
 8103e2a:	2224      	movs	r2, #36	@ 0x24
 8103e2c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Disable the Peripheral */
  __HAL_CEC_DISABLE(hcec);
 8103e2e:	687b      	ldr	r3, [r7, #4]
 8103e30:	681b      	ldr	r3, [r3, #0]
 8103e32:	681a      	ldr	r2, [r3, #0]
 8103e34:	687b      	ldr	r3, [r7, #4]
 8103e36:	681b      	ldr	r3, [r3, #0]
 8103e38:	f022 0201 	bic.w	r2, r2, #1
 8103e3c:	601a      	str	r2, [r3, #0]

  /* Write to CEC Control Register */
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103e3e:	687b      	ldr	r3, [r7, #4]
 8103e40:	685a      	ldr	r2, [r3, #4]
 8103e42:	687b      	ldr	r3, [r7, #4]
 8103e44:	689b      	ldr	r3, [r3, #8]
 8103e46:	431a      	orrs	r2, r3
 8103e48:	687b      	ldr	r3, [r7, #4]
 8103e4a:	68db      	ldr	r3, [r3, #12]
 8103e4c:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8103e4e:	687b      	ldr	r3, [r7, #4]
 8103e50:	691b      	ldr	r3, [r3, #16]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103e52:	431a      	orrs	r2, r3
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8103e54:	687b      	ldr	r3, [r7, #4]
 8103e56:	695b      	ldr	r3, [r3, #20]
 8103e58:	431a      	orrs	r2, r3
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8103e5a:	687b      	ldr	r3, [r7, #4]
 8103e5c:	699b      	ldr	r3, [r3, #24]
                         hcec->Init.BREErrorBitGen | hcec->Init.LBPEErrorBitGen | \
 8103e5e:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8103e60:	687b      	ldr	r3, [r7, #4]
 8103e62:	69db      	ldr	r3, [r3, #28]
                         hcec->Init.BroadcastMsgNoErrorBitGen | \
 8103e64:	431a      	orrs	r2, r3
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8103e66:	687b      	ldr	r3, [r7, #4]
 8103e68:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8103e6a:	041b      	lsls	r3, r3, #16
 8103e6c:	ea42 0103 	orr.w	r1, r2, r3
                         hcec->Init.ListenMode;
 8103e70:	687b      	ldr	r3, [r7, #4]
 8103e72:	6a1a      	ldr	r2, [r3, #32]
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103e74:	687b      	ldr	r3, [r7, #4]
 8103e76:	681b      	ldr	r3, [r3, #0]
                         hcec->Init.SignalFreeTimeOption | ((uint32_t)(hcec->Init.OwnAddress) << 16U) | \
 8103e78:	430a      	orrs	r2, r1
  hcec->Instance->CFGR = hcec->Init.SignalFreeTime | hcec->Init.Tolerance | hcec->Init.BRERxStop | \
 8103e7a:	605a      	str	r2, [r3, #4]
    * End of Transmission IT
    * Tx Missing Acknowledge IT
    * Tx-Error IT
    * Tx-Buffer Underrun IT
    * Tx arbitration lost   */
  __HAL_CEC_ENABLE_IT(hcec, CEC_IT_RXBR | CEC_IT_RXEND | CEC_IER_RX_ALL_ERR | CEC_IT_TXBR | CEC_IT_TXEND |
 8103e7c:	687b      	ldr	r3, [r7, #4]
 8103e7e:	681b      	ldr	r3, [r3, #0]
 8103e80:	695b      	ldr	r3, [r3, #20]
 8103e82:	687a      	ldr	r2, [r7, #4]
 8103e84:	6812      	ldr	r2, [r2, #0]
 8103e86:	ea6f 3353 	mvn.w	r3, r3, lsr #13
 8103e8a:	ea6f 3343 	mvn.w	r3, r3, lsl #13
 8103e8e:	6153      	str	r3, [r2, #20]
                      CEC_IER_TX_ALL_ERR);

  /* Enable the CEC Peripheral */
  __HAL_CEC_ENABLE(hcec);
 8103e90:	687b      	ldr	r3, [r7, #4]
 8103e92:	681b      	ldr	r3, [r3, #0]
 8103e94:	681a      	ldr	r2, [r3, #0]
 8103e96:	687b      	ldr	r3, [r7, #4]
 8103e98:	681b      	ldr	r3, [r3, #0]
 8103e9a:	f042 0201 	orr.w	r2, r2, #1
 8103e9e:	601a      	str	r2, [r3, #0]

  hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8103ea0:	687b      	ldr	r3, [r7, #4]
 8103ea2:	2200      	movs	r2, #0
 8103ea4:	641a      	str	r2, [r3, #64]	@ 0x40
  hcec->gState = HAL_CEC_STATE_READY;
 8103ea6:	687b      	ldr	r3, [r7, #4]
 8103ea8:	2220      	movs	r2, #32
 8103eaa:	639a      	str	r2, [r3, #56]	@ 0x38
  hcec->RxState = HAL_CEC_STATE_READY;
 8103eac:	687b      	ldr	r3, [r7, #4]
 8103eae:	2220      	movs	r2, #32
 8103eb0:	63da      	str	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8103eb2:	2300      	movs	r3, #0
}
 8103eb4:	4618      	mov	r0, r3
 8103eb6:	3708      	adds	r7, #8
 8103eb8:	46bd      	mov	sp, r7
 8103eba:	bd80      	pop	{r7, pc}

08103ebc <HAL_CEC_IRQHandler>:
  * @brief This function handles CEC interrupt requests.
  * @param hcec CEC handle
  * @retval None
  */
void HAL_CEC_IRQHandler(CEC_HandleTypeDef *hcec)
{
 8103ebc:	b580      	push	{r7, lr}
 8103ebe:	b084      	sub	sp, #16
 8103ec0:	af00      	add	r7, sp, #0
 8103ec2:	6078      	str	r0, [r7, #4]

  /* save interrupts register for further error or interrupts handling purposes */
  uint32_t itflag;
  itflag = hcec->Instance->ISR;
 8103ec4:	687b      	ldr	r3, [r7, #4]
 8103ec6:	681b      	ldr	r3, [r3, #0]
 8103ec8:	691b      	ldr	r3, [r3, #16]
 8103eca:	60fb      	str	r3, [r7, #12]


  /* ----------------------------Arbitration Lost Management----------------------------------*/
  /* CEC TX arbitration error interrupt occurred --------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_ARBLST))
 8103ecc:	68fb      	ldr	r3, [r7, #12]
 8103ece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103ed2:	2b00      	cmp	r3, #0
 8103ed4:	d00a      	beq.n	8103eec <HAL_CEC_IRQHandler+0x30>
  {
    hcec->ErrorCode = HAL_CEC_ERROR_ARBLST;
 8103ed6:	687b      	ldr	r3, [r7, #4]
 8103ed8:	2280      	movs	r2, #128	@ 0x80
 8103eda:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_ARBLST);
 8103edc:	687b      	ldr	r3, [r7, #4]
 8103ede:	681b      	ldr	r3, [r3, #0]
 8103ee0:	691a      	ldr	r2, [r3, #16]
 8103ee2:	687b      	ldr	r3, [r7, #4]
 8103ee4:	681b      	ldr	r3, [r3, #0]
 8103ee6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8103eea:	611a      	str	r2, [r3, #16]
  }

  /* ----------------------------Rx Management----------------------------------*/
  /* CEC RX byte received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXBR))
 8103eec:	68fb      	ldr	r3, [r7, #12]
 8103eee:	f003 0301 	and.w	r3, r3, #1
 8103ef2:	2b00      	cmp	r3, #0
 8103ef4:	d01c      	beq.n	8103f30 <HAL_CEC_IRQHandler+0x74>
  {
    /* reception is starting */
    hcec->RxState = HAL_CEC_STATE_BUSY_RX;
 8103ef6:	687b      	ldr	r3, [r7, #4]
 8103ef8:	2222      	movs	r2, #34	@ 0x22
 8103efa:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->RxXferSize++;
 8103efc:	687b      	ldr	r3, [r7, #4]
 8103efe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8103f00:	3301      	adds	r3, #1
 8103f02:	b29a      	uxth	r2, r3
 8103f04:	687b      	ldr	r3, [r7, #4]
 8103f06:	865a      	strh	r2, [r3, #50]	@ 0x32
    /* read received byte */
    *hcec->Init.RxBuffer = (uint8_t) hcec->Instance->RXDR;
 8103f08:	687b      	ldr	r3, [r7, #4]
 8103f0a:	681b      	ldr	r3, [r3, #0]
 8103f0c:	68da      	ldr	r2, [r3, #12]
 8103f0e:	687b      	ldr	r3, [r7, #4]
 8103f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103f12:	b2d2      	uxtb	r2, r2
 8103f14:	701a      	strb	r2, [r3, #0]
    hcec->Init.RxBuffer++;
 8103f16:	687b      	ldr	r3, [r7, #4]
 8103f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103f1a:	1c5a      	adds	r2, r3, #1
 8103f1c:	687b      	ldr	r3, [r7, #4]
 8103f1e:	629a      	str	r2, [r3, #40]	@ 0x28
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXBR);
 8103f20:	687b      	ldr	r3, [r7, #4]
 8103f22:	681b      	ldr	r3, [r3, #0]
 8103f24:	691a      	ldr	r2, [r3, #16]
 8103f26:	687b      	ldr	r3, [r7, #4]
 8103f28:	681b      	ldr	r3, [r3, #0]
 8103f2a:	f042 0201 	orr.w	r2, r2, #1
 8103f2e:	611a      	str	r2, [r3, #16]
  }

  /* CEC RX end received interrupt  ---------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_RXEND))
 8103f30:	68fb      	ldr	r3, [r7, #12]
 8103f32:	f003 0302 	and.w	r3, r3, #2
 8103f36:	2b00      	cmp	r3, #0
 8103f38:	d01e      	beq.n	8103f78 <HAL_CEC_IRQHandler+0xbc>
  {
    /* clear IT */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_RXEND);
 8103f3a:	687b      	ldr	r3, [r7, #4]
 8103f3c:	681b      	ldr	r3, [r3, #0]
 8103f3e:	691a      	ldr	r2, [r3, #16]
 8103f40:	687b      	ldr	r3, [r7, #4]
 8103f42:	681b      	ldr	r3, [r3, #0]
 8103f44:	f042 0202 	orr.w	r2, r2, #2
 8103f48:	611a      	str	r2, [r3, #16]

    /* Rx process is completed, restore hcec->RxState to Ready */
    hcec->RxState = HAL_CEC_STATE_READY;
 8103f4a:	687b      	ldr	r3, [r7, #4]
 8103f4c:	2220      	movs	r2, #32
 8103f4e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8103f50:	687b      	ldr	r3, [r7, #4]
 8103f52:	2200      	movs	r2, #0
 8103f54:	641a      	str	r2, [r3, #64]	@ 0x40
    hcec->Init.RxBuffer -= hcec->RxXferSize;
 8103f56:	687b      	ldr	r3, [r7, #4]
 8103f58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8103f5a:	687b      	ldr	r3, [r7, #4]
 8103f5c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8103f5e:	425b      	negs	r3, r3
 8103f60:	441a      	add	r2, r3
 8103f62:	687b      	ldr	r3, [r7, #4]
 8103f64:	629a      	str	r2, [r3, #40]	@ 0x28
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->RxCpltCallback(hcec, hcec->RxXferSize);
#else
    HAL_CEC_RxCpltCallback(hcec, hcec->RxXferSize);
 8103f66:	687b      	ldr	r3, [r7, #4]
 8103f68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8103f6a:	4619      	mov	r1, r3
 8103f6c:	6878      	ldr	r0, [r7, #4]
 8103f6e:	f000 f88c 	bl	810408a <HAL_CEC_RxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
    hcec->RxXferSize = 0U;
 8103f72:	687b      	ldr	r3, [r7, #4]
 8103f74:	2200      	movs	r2, #0
 8103f76:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* ----------------------------Tx Management----------------------------------*/
  /* CEC TX byte request interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXBR))
 8103f78:	68fb      	ldr	r3, [r7, #12]
 8103f7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103f7e:	2b00      	cmp	r3, #0
 8103f80:	d024      	beq.n	8103fcc <HAL_CEC_IRQHandler+0x110>
  {
    --hcec->TxXferCount;
 8103f82:	687b      	ldr	r3, [r7, #4]
 8103f84:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8103f86:	3b01      	subs	r3, #1
 8103f88:	b29a      	uxth	r2, r3
 8103f8a:	687b      	ldr	r3, [r7, #4]
 8103f8c:	861a      	strh	r2, [r3, #48]	@ 0x30
    if (hcec->TxXferCount == 0U)
 8103f8e:	687b      	ldr	r3, [r7, #4]
 8103f90:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8103f92:	2b00      	cmp	r3, #0
 8103f94:	d107      	bne.n	8103fa6 <HAL_CEC_IRQHandler+0xea>
    {
      /* if this is the last byte transmission, set TX End of Message (TXEOM) bit */
      __HAL_CEC_LAST_BYTE_TX_SET(hcec);
 8103f96:	687b      	ldr	r3, [r7, #4]
 8103f98:	681b      	ldr	r3, [r3, #0]
 8103f9a:	681a      	ldr	r2, [r3, #0]
 8103f9c:	687b      	ldr	r3, [r7, #4]
 8103f9e:	681b      	ldr	r3, [r3, #0]
 8103fa0:	f042 0204 	orr.w	r2, r2, #4
 8103fa4:	601a      	str	r2, [r3, #0]
    }
    /* In all cases transmit the byte */
    hcec->Instance->TXDR = (uint8_t) * hcec->pTxBuffPtr;
 8103fa6:	687b      	ldr	r3, [r7, #4]
 8103fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103faa:	781a      	ldrb	r2, [r3, #0]
 8103fac:	687b      	ldr	r3, [r7, #4]
 8103fae:	681b      	ldr	r3, [r3, #0]
 8103fb0:	609a      	str	r2, [r3, #8]
    hcec->pTxBuffPtr++;
 8103fb2:	687b      	ldr	r3, [r7, #4]
 8103fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103fb6:	1c5a      	adds	r2, r3, #1
 8103fb8:	687b      	ldr	r3, [r7, #4]
 8103fba:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* clear Tx-Byte request flag */
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXBR);
 8103fbc:	687b      	ldr	r3, [r7, #4]
 8103fbe:	681b      	ldr	r3, [r3, #0]
 8103fc0:	691a      	ldr	r2, [r3, #16]
 8103fc2:	687b      	ldr	r3, [r7, #4]
 8103fc4:	681b      	ldr	r3, [r3, #0]
 8103fc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8103fca:	611a      	str	r2, [r3, #16]
  }

  /* CEC TX end interrupt ------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, CEC_FLAG_TXEND))
 8103fcc:	68fb      	ldr	r3, [r7, #12]
 8103fce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8103fd2:	2b00      	cmp	r3, #0
 8103fd4:	d014      	beq.n	8104000 <HAL_CEC_IRQHandler+0x144>
  {
    __HAL_CEC_CLEAR_FLAG(hcec, CEC_FLAG_TXEND);
 8103fd6:	687b      	ldr	r3, [r7, #4]
 8103fd8:	681b      	ldr	r3, [r3, #0]
 8103fda:	691a      	ldr	r2, [r3, #16]
 8103fdc:	687b      	ldr	r3, [r7, #4]
 8103fde:	681b      	ldr	r3, [r3, #0]
 8103fe0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8103fe4:	611a      	str	r2, [r3, #16]

    /* Tx process is ended, restore hcec->gState to Ready */
    hcec->gState = HAL_CEC_STATE_READY;
 8103fe6:	687b      	ldr	r3, [r7, #4]
 8103fe8:	2220      	movs	r2, #32
 8103fea:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Call the Process Unlocked before calling the Tx call back API to give the possibility to
    start again the Transmission under the Tx call back API */
    __HAL_UNLOCK(hcec);
 8103fec:	687b      	ldr	r3, [r7, #4]
 8103fee:	2200      	movs	r2, #0
 8103ff0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hcec->ErrorCode = HAL_CEC_ERROR_NONE;
 8103ff4:	687b      	ldr	r3, [r7, #4]
 8103ff6:	2200      	movs	r2, #0
 8103ff8:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->TxCpltCallback(hcec);
#else
    HAL_CEC_TxCpltCallback(hcec);
 8103ffa:	6878      	ldr	r0, [r7, #4]
 8103ffc:	f000 f83b 	bl	8104076 <HAL_CEC_TxCpltCallback>
#endif /* USE_HAL_CEC_REGISTER_CALLBACKS */
  }

  /* ----------------------------Rx/Tx Error Management----------------------------------*/
  if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE | CEC_ISR_TXUDR |
 8104000:	68fa      	ldr	r2, [r7, #12]
 8104002:	f641 437c 	movw	r3, #7292	@ 0x1c7c
 8104006:	4013      	ands	r3, r2
 8104008:	2b00      	cmp	r3, #0
 810400a:	d030      	beq.n	810406e <HAL_CEC_IRQHandler+0x1b2>
                 CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U)
  {
    hcec->ErrorCode = itflag;
 810400c:	687b      	ldr	r3, [r7, #4]
 810400e:	68fa      	ldr	r2, [r7, #12]
 8104010:	641a      	str	r2, [r3, #64]	@ 0x40
    __HAL_CEC_CLEAR_FLAG(hcec, HAL_CEC_ERROR_RXOVR | HAL_CEC_ERROR_BRE | CEC_FLAG_LBPE | CEC_FLAG_SBPE |
 8104012:	687b      	ldr	r3, [r7, #4]
 8104014:	681b      	ldr	r3, [r3, #0]
 8104016:	691b      	ldr	r3, [r3, #16]
 8104018:	687a      	ldr	r2, [r7, #4]
 810401a:	6812      	ldr	r2, [r2, #0]
 810401c:	f443 53e3 	orr.w	r3, r3, #7264	@ 0x1c60
 8104020:	f043 031c 	orr.w	r3, r3, #28
 8104024:	6113      	str	r3, [r2, #16]
                         HAL_CEC_ERROR_RXACKE | HAL_CEC_ERROR_TXUDR | HAL_CEC_ERROR_TXERR | HAL_CEC_ERROR_TXACKE);


    if ((itflag & (CEC_ISR_RXOVR | CEC_ISR_BRE | CEC_ISR_SBPE | CEC_ISR_LBPE | CEC_ISR_RXACKE)) != 0U)
 8104026:	68fb      	ldr	r3, [r7, #12]
 8104028:	f003 037c 	and.w	r3, r3, #124	@ 0x7c
 810402c:	2b00      	cmp	r3, #0
 810402e:	d00e      	beq.n	810404e <HAL_CEC_IRQHandler+0x192>
    {
      hcec->Init.RxBuffer -= hcec->RxXferSize;
 8104030:	687b      	ldr	r3, [r7, #4]
 8104032:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8104034:	687b      	ldr	r3, [r7, #4]
 8104036:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8104038:	425b      	negs	r3, r3
 810403a:	441a      	add	r2, r3
 810403c:	687b      	ldr	r3, [r7, #4]
 810403e:	629a      	str	r2, [r3, #40]	@ 0x28
      hcec->RxXferSize = 0U;
 8104040:	687b      	ldr	r3, [r7, #4]
 8104042:	2200      	movs	r2, #0
 8104044:	865a      	strh	r2, [r3, #50]	@ 0x32
      hcec->RxState = HAL_CEC_STATE_READY;
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	2220      	movs	r2, #32
 810404a:	63da      	str	r2, [r3, #60]	@ 0x3c
 810404c:	e00c      	b.n	8104068 <HAL_CEC_IRQHandler+0x1ac>
    }
    else if (((itflag & CEC_ISR_ARBLST) == 0U) && ((itflag & (CEC_ISR_TXUDR | CEC_ISR_TXERR | CEC_ISR_TXACKE)) != 0U))
 810404e:	68fb      	ldr	r3, [r7, #12]
 8104050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104054:	2b00      	cmp	r3, #0
 8104056:	d107      	bne.n	8104068 <HAL_CEC_IRQHandler+0x1ac>
 8104058:	68fb      	ldr	r3, [r7, #12]
 810405a:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 810405e:	2b00      	cmp	r3, #0
 8104060:	d002      	beq.n	8104068 <HAL_CEC_IRQHandler+0x1ac>
    {
      /* Set the CEC state ready to be able to start again the process */
      hcec->gState = HAL_CEC_STATE_READY;
 8104062:	687b      	ldr	r3, [r7, #4]
 8104064:	2220      	movs	r2, #32
 8104066:	639a      	str	r2, [r3, #56]	@ 0x38
    }
#if (USE_HAL_CEC_REGISTER_CALLBACKS == 1U)
    hcec->ErrorCallback(hcec);
#else
    /* Error  Call Back */
    HAL_CEC_ErrorCallback(hcec);
 8104068:	6878      	ldr	r0, [r7, #4]
 810406a:	f000 f819 	bl	81040a0 <HAL_CEC_ErrorCallback>
  }
  else
  {
    /* Nothing todo*/
  }
}
 810406e:	bf00      	nop
 8104070:	3710      	adds	r7, #16
 8104072:	46bd      	mov	sp, r7
 8104074:	bd80      	pop	{r7, pc}

08104076 <HAL_CEC_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_TxCpltCallback(CEC_HandleTypeDef *hcec)
{
 8104076:	b480      	push	{r7}
 8104078:	b083      	sub	sp, #12
 810407a:	af00      	add	r7, sp, #0
 810407c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_TxCpltCallback can be implemented in the user file
   */
}
 810407e:	bf00      	nop
 8104080:	370c      	adds	r7, #12
 8104082:	46bd      	mov	sp, r7
 8104084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104088:	4770      	bx	lr

0810408a <HAL_CEC_RxCpltCallback>:
  * @param hcec CEC handle
  * @param RxFrameSize Size of frame
  * @retval None
  */
__weak void HAL_CEC_RxCpltCallback(CEC_HandleTypeDef *hcec, uint32_t RxFrameSize)
{
 810408a:	b480      	push	{r7}
 810408c:	b083      	sub	sp, #12
 810408e:	af00      	add	r7, sp, #0
 8104090:	6078      	str	r0, [r7, #4]
 8104092:	6039      	str	r1, [r7, #0]
  UNUSED(hcec);
  UNUSED(RxFrameSize);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_RxCpltCallback can be implemented in the user file
   */
}
 8104094:	bf00      	nop
 8104096:	370c      	adds	r7, #12
 8104098:	46bd      	mov	sp, r7
 810409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810409e:	4770      	bx	lr

081040a0 <HAL_CEC_ErrorCallback>:
  * @brief CEC error callbacks
  * @param hcec CEC handle
  * @retval None
  */
__weak void HAL_CEC_ErrorCallback(CEC_HandleTypeDef *hcec)
{
 81040a0:	b480      	push	{r7}
 81040a2:	b083      	sub	sp, #12
 81040a4:	af00      	add	r7, sp, #0
 81040a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hcec);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_CEC_ErrorCallback can be implemented in the user file
   */
}
 81040a8:	bf00      	nop
 81040aa:	370c      	adds	r7, #12
 81040ac:	46bd      	mov	sp, r7
 81040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040b2:	4770      	bx	lr

081040b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81040b4:	b480      	push	{r7}
 81040b6:	b085      	sub	sp, #20
 81040b8:	af00      	add	r7, sp, #0
 81040ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 81040bc:	687b      	ldr	r3, [r7, #4]
 81040be:	f003 0307 	and.w	r3, r3, #7
 81040c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 81040c4:	4b0c      	ldr	r3, [pc, #48]	@ (81040f8 <__NVIC_SetPriorityGrouping+0x44>)
 81040c6:	68db      	ldr	r3, [r3, #12]
 81040c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 81040ca:	68ba      	ldr	r2, [r7, #8]
 81040cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 81040d0:	4013      	ands	r3, r2
 81040d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 81040d4:	68fb      	ldr	r3, [r7, #12]
 81040d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 81040d8:	68bb      	ldr	r3, [r7, #8]
 81040da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 81040dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 81040e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81040e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 81040e6:	4a04      	ldr	r2, [pc, #16]	@ (81040f8 <__NVIC_SetPriorityGrouping+0x44>)
 81040e8:	68bb      	ldr	r3, [r7, #8]
 81040ea:	60d3      	str	r3, [r2, #12]
}
 81040ec:	bf00      	nop
 81040ee:	3714      	adds	r7, #20
 81040f0:	46bd      	mov	sp, r7
 81040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81040f6:	4770      	bx	lr
 81040f8:	e000ed00 	.word	0xe000ed00

081040fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81040fc:	b480      	push	{r7}
 81040fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8104100:	4b04      	ldr	r3, [pc, #16]	@ (8104114 <__NVIC_GetPriorityGrouping+0x18>)
 8104102:	68db      	ldr	r3, [r3, #12]
 8104104:	0a1b      	lsrs	r3, r3, #8
 8104106:	f003 0307 	and.w	r3, r3, #7
}
 810410a:	4618      	mov	r0, r3
 810410c:	46bd      	mov	sp, r7
 810410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104112:	4770      	bx	lr
 8104114:	e000ed00 	.word	0xe000ed00

08104118 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8104118:	b480      	push	{r7}
 810411a:	b083      	sub	sp, #12
 810411c:	af00      	add	r7, sp, #0
 810411e:	4603      	mov	r3, r0
 8104120:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104126:	2b00      	cmp	r3, #0
 8104128:	db0b      	blt.n	8104142 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 810412a:	88fb      	ldrh	r3, [r7, #6]
 810412c:	f003 021f 	and.w	r2, r3, #31
 8104130:	4907      	ldr	r1, [pc, #28]	@ (8104150 <__NVIC_EnableIRQ+0x38>)
 8104132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104136:	095b      	lsrs	r3, r3, #5
 8104138:	2001      	movs	r0, #1
 810413a:	fa00 f202 	lsl.w	r2, r0, r2
 810413e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8104142:	bf00      	nop
 8104144:	370c      	adds	r7, #12
 8104146:	46bd      	mov	sp, r7
 8104148:	f85d 7b04 	ldr.w	r7, [sp], #4
 810414c:	4770      	bx	lr
 810414e:	bf00      	nop
 8104150:	e000e100 	.word	0xe000e100

08104154 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8104154:	b480      	push	{r7}
 8104156:	b083      	sub	sp, #12
 8104158:	af00      	add	r7, sp, #0
 810415a:	4603      	mov	r3, r0
 810415c:	6039      	str	r1, [r7, #0]
 810415e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8104160:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104164:	2b00      	cmp	r3, #0
 8104166:	db0a      	blt.n	810417e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8104168:	683b      	ldr	r3, [r7, #0]
 810416a:	b2da      	uxtb	r2, r3
 810416c:	490c      	ldr	r1, [pc, #48]	@ (81041a0 <__NVIC_SetPriority+0x4c>)
 810416e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8104172:	0112      	lsls	r2, r2, #4
 8104174:	b2d2      	uxtb	r2, r2
 8104176:	440b      	add	r3, r1
 8104178:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810417c:	e00a      	b.n	8104194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810417e:	683b      	ldr	r3, [r7, #0]
 8104180:	b2da      	uxtb	r2, r3
 8104182:	4908      	ldr	r1, [pc, #32]	@ (81041a4 <__NVIC_SetPriority+0x50>)
 8104184:	88fb      	ldrh	r3, [r7, #6]
 8104186:	f003 030f 	and.w	r3, r3, #15
 810418a:	3b04      	subs	r3, #4
 810418c:	0112      	lsls	r2, r2, #4
 810418e:	b2d2      	uxtb	r2, r2
 8104190:	440b      	add	r3, r1
 8104192:	761a      	strb	r2, [r3, #24]
}
 8104194:	bf00      	nop
 8104196:	370c      	adds	r7, #12
 8104198:	46bd      	mov	sp, r7
 810419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810419e:	4770      	bx	lr
 81041a0:	e000e100 	.word	0xe000e100
 81041a4:	e000ed00 	.word	0xe000ed00

081041a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81041a8:	b480      	push	{r7}
 81041aa:	b089      	sub	sp, #36	@ 0x24
 81041ac:	af00      	add	r7, sp, #0
 81041ae:	60f8      	str	r0, [r7, #12]
 81041b0:	60b9      	str	r1, [r7, #8]
 81041b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81041b4:	68fb      	ldr	r3, [r7, #12]
 81041b6:	f003 0307 	and.w	r3, r3, #7
 81041ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81041bc:	69fb      	ldr	r3, [r7, #28]
 81041be:	f1c3 0307 	rsb	r3, r3, #7
 81041c2:	2b04      	cmp	r3, #4
 81041c4:	bf28      	it	cs
 81041c6:	2304      	movcs	r3, #4
 81041c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81041ca:	69fb      	ldr	r3, [r7, #28]
 81041cc:	3304      	adds	r3, #4
 81041ce:	2b06      	cmp	r3, #6
 81041d0:	d902      	bls.n	81041d8 <NVIC_EncodePriority+0x30>
 81041d2:	69fb      	ldr	r3, [r7, #28]
 81041d4:	3b03      	subs	r3, #3
 81041d6:	e000      	b.n	81041da <NVIC_EncodePriority+0x32>
 81041d8:	2300      	movs	r3, #0
 81041da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81041dc:	f04f 32ff 	mov.w	r2, #4294967295
 81041e0:	69bb      	ldr	r3, [r7, #24]
 81041e2:	fa02 f303 	lsl.w	r3, r2, r3
 81041e6:	43da      	mvns	r2, r3
 81041e8:	68bb      	ldr	r3, [r7, #8]
 81041ea:	401a      	ands	r2, r3
 81041ec:	697b      	ldr	r3, [r7, #20]
 81041ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81041f0:	f04f 31ff 	mov.w	r1, #4294967295
 81041f4:	697b      	ldr	r3, [r7, #20]
 81041f6:	fa01 f303 	lsl.w	r3, r1, r3
 81041fa:	43d9      	mvns	r1, r3
 81041fc:	687b      	ldr	r3, [r7, #4]
 81041fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8104200:	4313      	orrs	r3, r2
         );
}
 8104202:	4618      	mov	r0, r3
 8104204:	3724      	adds	r7, #36	@ 0x24
 8104206:	46bd      	mov	sp, r7
 8104208:	f85d 7b04 	ldr.w	r7, [sp], #4
 810420c:	4770      	bx	lr
	...

08104210 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8104210:	b580      	push	{r7, lr}
 8104212:	b082      	sub	sp, #8
 8104214:	af00      	add	r7, sp, #0
 8104216:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8104218:	687b      	ldr	r3, [r7, #4]
 810421a:	3b01      	subs	r3, #1
 810421c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8104220:	d301      	bcc.n	8104226 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8104222:	2301      	movs	r3, #1
 8104224:	e00f      	b.n	8104246 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8104226:	4a0a      	ldr	r2, [pc, #40]	@ (8104250 <SysTick_Config+0x40>)
 8104228:	687b      	ldr	r3, [r7, #4]
 810422a:	3b01      	subs	r3, #1
 810422c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810422e:	210f      	movs	r1, #15
 8104230:	f04f 30ff 	mov.w	r0, #4294967295
 8104234:	f7ff ff8e 	bl	8104154 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8104238:	4b05      	ldr	r3, [pc, #20]	@ (8104250 <SysTick_Config+0x40>)
 810423a:	2200      	movs	r2, #0
 810423c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810423e:	4b04      	ldr	r3, [pc, #16]	@ (8104250 <SysTick_Config+0x40>)
 8104240:	2207      	movs	r2, #7
 8104242:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8104244:	2300      	movs	r3, #0
}
 8104246:	4618      	mov	r0, r3
 8104248:	3708      	adds	r7, #8
 810424a:	46bd      	mov	sp, r7
 810424c:	bd80      	pop	{r7, pc}
 810424e:	bf00      	nop
 8104250:	e000e010 	.word	0xe000e010

08104254 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8104254:	b580      	push	{r7, lr}
 8104256:	b082      	sub	sp, #8
 8104258:	af00      	add	r7, sp, #0
 810425a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 810425c:	6878      	ldr	r0, [r7, #4]
 810425e:	f7ff ff29 	bl	81040b4 <__NVIC_SetPriorityGrouping>
}
 8104262:	bf00      	nop
 8104264:	3708      	adds	r7, #8
 8104266:	46bd      	mov	sp, r7
 8104268:	bd80      	pop	{r7, pc}

0810426a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810426a:	b580      	push	{r7, lr}
 810426c:	b086      	sub	sp, #24
 810426e:	af00      	add	r7, sp, #0
 8104270:	4603      	mov	r3, r0
 8104272:	60b9      	str	r1, [r7, #8]
 8104274:	607a      	str	r2, [r7, #4]
 8104276:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8104278:	f7ff ff40 	bl	81040fc <__NVIC_GetPriorityGrouping>
 810427c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 810427e:	687a      	ldr	r2, [r7, #4]
 8104280:	68b9      	ldr	r1, [r7, #8]
 8104282:	6978      	ldr	r0, [r7, #20]
 8104284:	f7ff ff90 	bl	81041a8 <NVIC_EncodePriority>
 8104288:	4602      	mov	r2, r0
 810428a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 810428e:	4611      	mov	r1, r2
 8104290:	4618      	mov	r0, r3
 8104292:	f7ff ff5f 	bl	8104154 <__NVIC_SetPriority>
}
 8104296:	bf00      	nop
 8104298:	3718      	adds	r7, #24
 810429a:	46bd      	mov	sp, r7
 810429c:	bd80      	pop	{r7, pc}

0810429e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 810429e:	b580      	push	{r7, lr}
 81042a0:	b082      	sub	sp, #8
 81042a2:	af00      	add	r7, sp, #0
 81042a4:	4603      	mov	r3, r0
 81042a6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 81042a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81042ac:	4618      	mov	r0, r3
 81042ae:	f7ff ff33 	bl	8104118 <__NVIC_EnableIRQ>
}
 81042b2:	bf00      	nop
 81042b4:	3708      	adds	r7, #8
 81042b6:	46bd      	mov	sp, r7
 81042b8:	bd80      	pop	{r7, pc}

081042ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81042ba:	b580      	push	{r7, lr}
 81042bc:	b082      	sub	sp, #8
 81042be:	af00      	add	r7, sp, #0
 81042c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81042c2:	6878      	ldr	r0, [r7, #4]
 81042c4:	f7ff ffa4 	bl	8104210 <SysTick_Config>
 81042c8:	4603      	mov	r3, r0
}
 81042ca:	4618      	mov	r0, r3
 81042cc:	3708      	adds	r7, #8
 81042ce:	46bd      	mov	sp, r7
 81042d0:	bd80      	pop	{r7, pc}
	...

081042d4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81042d4:	b480      	push	{r7}
 81042d6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81042d8:	4b06      	ldr	r3, [pc, #24]	@ (81042f4 <HAL_GetCurrentCPUID+0x20>)
 81042da:	681b      	ldr	r3, [r3, #0]
 81042dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 81042e0:	2b70      	cmp	r3, #112	@ 0x70
 81042e2:	d101      	bne.n	81042e8 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 81042e4:	2303      	movs	r3, #3
 81042e6:	e000      	b.n	81042ea <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 81042e8:	2301      	movs	r3, #1
  }
}
 81042ea:	4618      	mov	r0, r3
 81042ec:	46bd      	mov	sp, r7
 81042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042f2:	4770      	bx	lr
 81042f4:	e000ed00 	.word	0xe000ed00

081042f8 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 81042f8:	b580      	push	{r7, lr}
 81042fa:	b086      	sub	sp, #24
 81042fc:	af00      	add	r7, sp, #0
 81042fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t               *channelCounterPtr;
  DFSDM_Channel_HandleTypeDef **channelHandleTable;
  DFSDM_Channel_TypeDef       *channel0Instance;

  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8104300:	687b      	ldr	r3, [r7, #4]
 8104302:	2b00      	cmp	r3, #0
 8104304:	d101      	bne.n	810430a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8104306:	2301      	movs	r3, #1
 8104308:	e0b4      	b.n	8104474 <HAL_DFSDM_ChannelInit+0x17c>
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
    channelHandleTable = a_dfsdm2ChannelHandle;
    channel0Instance   = DFSDM2_Channel0;
  }
#else /* DFSDM2_Channel0 */
  channelCounterPtr  = &v_dfsdm1ChannelCounter;
 810430a:	4b5c      	ldr	r3, [pc, #368]	@ (810447c <HAL_DFSDM_ChannelInit+0x184>)
 810430c:	617b      	str	r3, [r7, #20]
  channelHandleTable = a_dfsdm1ChannelHandle;
 810430e:	4b5c      	ldr	r3, [pc, #368]	@ (8104480 <HAL_DFSDM_ChannelInit+0x188>)
 8104310:	613b      	str	r3, [r7, #16]
  channel0Instance   = DFSDM1_Channel0;
 8104312:	4b5c      	ldr	r3, [pc, #368]	@ (8104484 <HAL_DFSDM_ChannelInit+0x18c>)
 8104314:	60fb      	str	r3, [r7, #12]
#endif /* DFSDM2_Channel0 */

  /* Check that channel has not been already initialized */
  if (channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8104316:	687b      	ldr	r3, [r7, #4]
 8104318:	681b      	ldr	r3, [r3, #0]
 810431a:	4618      	mov	r0, r3
 810431c:	f000 f8b4 	bl	8104488 <DFSDM_GetChannelFromInstance>
 8104320:	4603      	mov	r3, r0
 8104322:	009b      	lsls	r3, r3, #2
 8104324:	693a      	ldr	r2, [r7, #16]
 8104326:	4413      	add	r3, r2
 8104328:	681b      	ldr	r3, [r3, #0]
 810432a:	2b00      	cmp	r3, #0
 810432c:	d001      	beq.n	8104332 <HAL_DFSDM_ChannelInit+0x3a>
  {
    return HAL_ERROR;
 810432e:	2301      	movs	r3, #1
 8104330:	e0a0      	b.n	8104474 <HAL_DFSDM_ChannelInit+0x17c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8104332:	6878      	ldr	r0, [r7, #4]
 8104334:	f7fd f9ba 	bl	81016ac <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  (*channelCounterPtr)++;
 8104338:	697b      	ldr	r3, [r7, #20]
 810433a:	681b      	ldr	r3, [r3, #0]
 810433c:	1c5a      	adds	r2, r3, #1
 810433e:	697b      	ldr	r3, [r7, #20]
 8104340:	601a      	str	r2, [r3, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8104342:	697b      	ldr	r3, [r7, #20]
 8104344:	681b      	ldr	r3, [r3, #0]
 8104346:	2b01      	cmp	r3, #1
 8104348:	d125      	bne.n	8104396 <HAL_DFSDM_ChannelInit+0x9e>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 810434a:	68fb      	ldr	r3, [r7, #12]
 810434c:	681b      	ldr	r3, [r3, #0]
 810434e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8104352:	68fb      	ldr	r3, [r7, #12]
 8104354:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8104356:	68fb      	ldr	r3, [r7, #12]
 8104358:	681a      	ldr	r2, [r3, #0]
 810435a:	687b      	ldr	r3, [r7, #4]
 810435c:	689b      	ldr	r3, [r3, #8]
 810435e:	431a      	orrs	r2, r3
 8104360:	68fb      	ldr	r3, [r7, #12]
 8104362:	601a      	str	r2, [r3, #0]

    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8104364:	68fb      	ldr	r3, [r7, #12]
 8104366:	681b      	ldr	r3, [r3, #0]
 8104368:	f423 027f 	bic.w	r2, r3, #16711680	@ 0xff0000
 810436c:	68fb      	ldr	r3, [r7, #12]
 810436e:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8104370:	687b      	ldr	r3, [r7, #4]
 8104372:	791b      	ldrb	r3, [r3, #4]
 8104374:	2b01      	cmp	r3, #1
 8104376:	d108      	bne.n	810438a <HAL_DFSDM_ChannelInit+0x92>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8104378:	68fb      	ldr	r3, [r7, #12]
 810437a:	681a      	ldr	r2, [r3, #0]
 810437c:	687b      	ldr	r3, [r7, #4]
 810437e:	68db      	ldr	r3, [r3, #12]
 8104380:	3b01      	subs	r3, #1
 8104382:	041b      	lsls	r3, r3, #16
 8104384:	431a      	orrs	r2, r3
 8104386:	68fb      	ldr	r3, [r7, #12]
 8104388:	601a      	str	r2, [r3, #0]
                                              DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 810438a:	68fb      	ldr	r3, [r7, #12]
 810438c:	681b      	ldr	r3, [r3, #0]
 810438e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8104392:	68fb      	ldr	r3, [r7, #12]
 8104394:	601a      	str	r2, [r3, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8104396:	687b      	ldr	r3, [r7, #4]
 8104398:	681b      	ldr	r3, [r3, #0]
 810439a:	681a      	ldr	r2, [r3, #0]
 810439c:	687b      	ldr	r3, [r7, #4]
 810439e:	681b      	ldr	r3, [r3, #0]
 81043a0:	f422 4271 	bic.w	r2, r2, #61696	@ 0xf100
 81043a4:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 81043a6:	687b      	ldr	r3, [r7, #4]
 81043a8:	681b      	ldr	r3, [r3, #0]
 81043aa:	6819      	ldr	r1, [r3, #0]
 81043ac:	687b      	ldr	r3, [r7, #4]
 81043ae:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 81043b0:	687b      	ldr	r3, [r7, #4]
 81043b2:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 81043b4:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 81043b6:	687b      	ldr	r3, [r7, #4]
 81043b8:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 81043ba:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 81043bc:	687b      	ldr	r3, [r7, #4]
 81043be:	681b      	ldr	r3, [r3, #0]
 81043c0:	430a      	orrs	r2, r1
 81043c2:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 81043c4:	687b      	ldr	r3, [r7, #4]
 81043c6:	681b      	ldr	r3, [r3, #0]
 81043c8:	681a      	ldr	r2, [r3, #0]
 81043ca:	687b      	ldr	r3, [r7, #4]
 81043cc:	681b      	ldr	r3, [r3, #0]
 81043ce:	f022 020f 	bic.w	r2, r2, #15
 81043d2:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 81043d4:	687b      	ldr	r3, [r7, #4]
 81043d6:	681b      	ldr	r3, [r3, #0]
 81043d8:	6819      	ldr	r1, [r3, #0]
 81043da:	687b      	ldr	r3, [r7, #4]
 81043dc:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 81043de:	687b      	ldr	r3, [r7, #4]
 81043e0:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 81043e2:	431a      	orrs	r2, r3
 81043e4:	687b      	ldr	r3, [r7, #4]
 81043e6:	681b      	ldr	r3, [r3, #0]
 81043e8:	430a      	orrs	r2, r1
 81043ea:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 81043ec:	687b      	ldr	r3, [r7, #4]
 81043ee:	681b      	ldr	r3, [r3, #0]
 81043f0:	689a      	ldr	r2, [r3, #8]
 81043f2:	687b      	ldr	r3, [r7, #4]
 81043f4:	681b      	ldr	r3, [r3, #0]
 81043f6:	f422 025f 	bic.w	r2, r2, #14614528	@ 0xdf0000
 81043fa:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 81043fc:	687b      	ldr	r3, [r7, #4]
 81043fe:	681b      	ldr	r3, [r3, #0]
 8104400:	6899      	ldr	r1, [r3, #8]
 8104402:	687b      	ldr	r3, [r7, #4]
 8104404:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8104406:	687b      	ldr	r3, [r7, #4]
 8104408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810440a:	3b01      	subs	r3, #1
 810440c:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 810440e:	431a      	orrs	r2, r3
 8104410:	687b      	ldr	r3, [r7, #4]
 8104412:	681b      	ldr	r3, [r3, #0]
 8104414:	430a      	orrs	r2, r1
 8104416:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8104418:	687b      	ldr	r3, [r7, #4]
 810441a:	681b      	ldr	r3, [r3, #0]
 810441c:	685a      	ldr	r2, [r3, #4]
 810441e:	687b      	ldr	r3, [r7, #4]
 8104420:	681b      	ldr	r3, [r3, #0]
 8104422:	f002 0207 	and.w	r2, r2, #7
 8104426:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8104428:	687b      	ldr	r3, [r7, #4]
 810442a:	681b      	ldr	r3, [r3, #0]
 810442c:	6859      	ldr	r1, [r3, #4]
 810442e:	687b      	ldr	r3, [r7, #4]
 8104430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104432:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8104434:	687b      	ldr	r3, [r7, #4]
 8104436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8104438:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 810443a:	431a      	orrs	r2, r3
 810443c:	687b      	ldr	r3, [r7, #4]
 810443e:	681b      	ldr	r3, [r3, #0]
 8104440:	430a      	orrs	r2, r1
 8104442:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8104444:	687b      	ldr	r3, [r7, #4]
 8104446:	681b      	ldr	r3, [r3, #0]
 8104448:	681a      	ldr	r2, [r3, #0]
 810444a:	687b      	ldr	r3, [r7, #4]
 810444c:	681b      	ldr	r3, [r3, #0]
 810444e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8104452:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8104454:	687b      	ldr	r3, [r7, #4]
 8104456:	2201      	movs	r2, #1
 8104458:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 810445c:	687b      	ldr	r3, [r7, #4]
 810445e:	681b      	ldr	r3, [r3, #0]
 8104460:	4618      	mov	r0, r3
 8104462:	f000 f811 	bl	8104488 <DFSDM_GetChannelFromInstance>
 8104466:	4603      	mov	r3, r0
 8104468:	009b      	lsls	r3, r3, #2
 810446a:	693a      	ldr	r2, [r7, #16]
 810446c:	4413      	add	r3, r2
 810446e:	687a      	ldr	r2, [r7, #4]
 8104470:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8104472:	2300      	movs	r3, #0
}
 8104474:	4618      	mov	r0, r3
 8104476:	3718      	adds	r7, #24
 8104478:	46bd      	mov	sp, r7
 810447a:	bd80      	pop	{r7, pc}
 810447c:	10000e98 	.word	0x10000e98
 8104480:	10000e9c 	.word	0x10000e9c
 8104484:	40017000 	.word	0x40017000

08104488 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef* Instance)
{
 8104488:	b480      	push	{r7}
 810448a:	b085      	sub	sp, #20
 810448c:	af00      	add	r7, sp, #0
 810448e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if(Instance == DFSDM1_Channel0)
 8104490:	687b      	ldr	r3, [r7, #4]
 8104492:	4a1c      	ldr	r2, [pc, #112]	@ (8104504 <DFSDM_GetChannelFromInstance+0x7c>)
 8104494:	4293      	cmp	r3, r2
 8104496:	d102      	bne.n	810449e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8104498:	2300      	movs	r3, #0
 810449a:	60fb      	str	r3, [r7, #12]
 810449c:	e02b      	b.n	81044f6 <DFSDM_GetChannelFromInstance+0x6e>
  else if (Instance == DFSDM2_Channel1)
  {
    channel = 1;
  }
#endif /* DFSDM2_Channel0 */
  else if(Instance == DFSDM1_Channel1)
 810449e:	687b      	ldr	r3, [r7, #4]
 81044a0:	4a19      	ldr	r2, [pc, #100]	@ (8104508 <DFSDM_GetChannelFromInstance+0x80>)
 81044a2:	4293      	cmp	r3, r2
 81044a4:	d102      	bne.n	81044ac <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 81044a6:	2301      	movs	r3, #1
 81044a8:	60fb      	str	r3, [r7, #12]
 81044aa:	e024      	b.n	81044f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel2)
 81044ac:	687b      	ldr	r3, [r7, #4]
 81044ae:	4a17      	ldr	r2, [pc, #92]	@ (810450c <DFSDM_GetChannelFromInstance+0x84>)
 81044b0:	4293      	cmp	r3, r2
 81044b2:	d102      	bne.n	81044ba <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 81044b4:	2302      	movs	r3, #2
 81044b6:	60fb      	str	r3, [r7, #12]
 81044b8:	e01d      	b.n	81044f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel3)
 81044ba:	687b      	ldr	r3, [r7, #4]
 81044bc:	4a14      	ldr	r2, [pc, #80]	@ (8104510 <DFSDM_GetChannelFromInstance+0x88>)
 81044be:	4293      	cmp	r3, r2
 81044c0:	d102      	bne.n	81044c8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 3;
 81044c2:	2303      	movs	r3, #3
 81044c4:	60fb      	str	r3, [r7, #12]
 81044c6:	e016      	b.n	81044f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel4)
 81044c8:	687b      	ldr	r3, [r7, #4]
 81044ca:	4a12      	ldr	r2, [pc, #72]	@ (8104514 <DFSDM_GetChannelFromInstance+0x8c>)
 81044cc:	4293      	cmp	r3, r2
 81044ce:	d102      	bne.n	81044d6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 4;
 81044d0:	2304      	movs	r3, #4
 81044d2:	60fb      	str	r3, [r7, #12]
 81044d4:	e00f      	b.n	81044f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel5)
 81044d6:	687b      	ldr	r3, [r7, #4]
 81044d8:	4a0f      	ldr	r2, [pc, #60]	@ (8104518 <DFSDM_GetChannelFromInstance+0x90>)
 81044da:	4293      	cmp	r3, r2
 81044dc:	d102      	bne.n	81044e4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 5;
 81044de:	2305      	movs	r3, #5
 81044e0:	60fb      	str	r3, [r7, #12]
 81044e2:	e008      	b.n	81044f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if(Instance == DFSDM1_Channel6)
 81044e4:	687b      	ldr	r3, [r7, #4]
 81044e6:	4a0d      	ldr	r2, [pc, #52]	@ (810451c <DFSDM_GetChannelFromInstance+0x94>)
 81044e8:	4293      	cmp	r3, r2
 81044ea:	d102      	bne.n	81044f2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 6;
 81044ec:	2306      	movs	r3, #6
 81044ee:	60fb      	str	r3, [r7, #12]
 81044f0:	e001      	b.n	81044f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else /* DFSDM1_Channel7 */
  {
    channel = 7;
 81044f2:	2307      	movs	r3, #7
 81044f4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 81044f6:	68fb      	ldr	r3, [r7, #12]
}
 81044f8:	4618      	mov	r0, r3
 81044fa:	3714      	adds	r7, #20
 81044fc:	46bd      	mov	sp, r7
 81044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104502:	4770      	bx	lr
 8104504:	40017000 	.word	0x40017000
 8104508:	40017020 	.word	0x40017020
 810450c:	40017040 	.word	0x40017040
 8104510:	40017060 	.word	0x40017060
 8104514:	40017080 	.word	0x40017080
 8104518:	400170a0 	.word	0x400170a0
 810451c:	400170c0 	.word	0x400170c0

08104520 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8104520:	b580      	push	{r7, lr}
 8104522:	b084      	sub	sp, #16
 8104524:	af00      	add	r7, sp, #0
 8104526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8104528:	687b      	ldr	r3, [r7, #4]
 810452a:	2b00      	cmp	r3, #0
 810452c:	d101      	bne.n	8104532 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 810452e:	2301      	movs	r3, #1
 8104530:	e0e7      	b.n	8104702 <HAL_ETH_Init+0x1e2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8104532:	687b      	ldr	r3, [r7, #4]
 8104534:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104538:	2b00      	cmp	r3, #0
 810453a:	d106      	bne.n	810454a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 810453c:	687b      	ldr	r3, [r7, #4]
 810453e:	2220      	movs	r2, #32
 8104540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8104544:	6878      	ldr	r0, [r7, #4]
 8104546:	f7fd f96b 	bl	8101820 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810454a:	4b70      	ldr	r3, [pc, #448]	@ (810470c <HAL_ETH_Init+0x1ec>)
 810454c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8104550:	4a6e      	ldr	r2, [pc, #440]	@ (810470c <HAL_ETH_Init+0x1ec>)
 8104552:	f043 0302 	orr.w	r3, r3, #2
 8104556:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810455a:	4b6c      	ldr	r3, [pc, #432]	@ (810470c <HAL_ETH_Init+0x1ec>)
 810455c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8104560:	f003 0302 	and.w	r3, r3, #2
 8104564:	60bb      	str	r3, [r7, #8]
 8104566:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8104568:	687b      	ldr	r3, [r7, #4]
 810456a:	7a1b      	ldrb	r3, [r3, #8]
 810456c:	2b00      	cmp	r3, #0
 810456e:	d103      	bne.n	8104578 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8104570:	2000      	movs	r0, #0
 8104572:	f7fe fbb3 	bl	8102cdc <HAL_SYSCFG_ETHInterfaceSelect>
 8104576:	e003      	b.n	8104580 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8104578:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 810457c:	f7fe fbae 	bl	8102cdc <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8104580:	4b63      	ldr	r3, [pc, #396]	@ (8104710 <HAL_ETH_Init+0x1f0>)
 8104582:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8104584:	687b      	ldr	r3, [r7, #4]
 8104586:	681b      	ldr	r3, [r3, #0]
 8104588:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810458c:	681b      	ldr	r3, [r3, #0]
 810458e:	687a      	ldr	r2, [r7, #4]
 8104590:	6812      	ldr	r2, [r2, #0]
 8104592:	f043 0301 	orr.w	r3, r3, #1
 8104596:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810459a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 810459c:	f7fe fb62 	bl	8102c64 <HAL_GetTick>
 81045a0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 81045a2:	e011      	b.n	81045c8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 81045a4:	f7fe fb5e 	bl	8102c64 <HAL_GetTick>
 81045a8:	4602      	mov	r2, r0
 81045aa:	68fb      	ldr	r3, [r7, #12]
 81045ac:	1ad3      	subs	r3, r2, r3
 81045ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 81045b2:	d909      	bls.n	81045c8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 81045b4:	687b      	ldr	r3, [r7, #4]
 81045b6:	2204      	movs	r2, #4
 81045b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 81045bc:	687b      	ldr	r3, [r7, #4]
 81045be:	22e0      	movs	r2, #224	@ 0xe0
 81045c0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 81045c4:	2301      	movs	r3, #1
 81045c6:	e09c      	b.n	8104702 <HAL_ETH_Init+0x1e2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 81045c8:	687b      	ldr	r3, [r7, #4]
 81045ca:	681b      	ldr	r3, [r3, #0]
 81045cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 81045d0:	681b      	ldr	r3, [r3, #0]
 81045d2:	f003 0301 	and.w	r3, r3, #1
 81045d6:	2b00      	cmp	r3, #0
 81045d8:	d1e4      	bne.n	81045a4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 81045da:	6878      	ldr	r0, [r7, #4]
 81045dc:	f000 f89e 	bl	810471c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 81045e0:	f001 f990 	bl	8105904 <HAL_RCC_GetHCLKFreq>
 81045e4:	4603      	mov	r3, r0
 81045e6:	4a4b      	ldr	r2, [pc, #300]	@ (8104714 <HAL_ETH_Init+0x1f4>)
 81045e8:	fba2 2303 	umull	r2, r3, r2, r3
 81045ec:	0c9a      	lsrs	r2, r3, #18
 81045ee:	687b      	ldr	r3, [r7, #4]
 81045f0:	681b      	ldr	r3, [r3, #0]
 81045f2:	3a01      	subs	r2, #1
 81045f4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 81045f8:	6878      	ldr	r0, [r7, #4]
 81045fa:	f000 fa81 	bl	8104b00 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 81045fe:	687b      	ldr	r3, [r7, #4]
 8104600:	681b      	ldr	r3, [r3, #0]
 8104602:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104606:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 810460a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 810460e:	687a      	ldr	r2, [r7, #4]
 8104610:	6812      	ldr	r2, [r2, #0]
 8104612:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8104616:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 810461a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 810461e:	687b      	ldr	r3, [r7, #4]
 8104620:	695b      	ldr	r3, [r3, #20]
 8104622:	f003 0303 	and.w	r3, r3, #3
 8104626:	2b00      	cmp	r3, #0
 8104628:	d009      	beq.n	810463e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 810462a:	687b      	ldr	r3, [r7, #4]
 810462c:	2201      	movs	r2, #1
 810462e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8104632:	687b      	ldr	r3, [r7, #4]
 8104634:	22e0      	movs	r2, #224	@ 0xe0
 8104636:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 810463a:	2301      	movs	r3, #1
 810463c:	e061      	b.n	8104702 <HAL_ETH_Init+0x1e2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 810463e:	687b      	ldr	r3, [r7, #4]
 8104640:	681b      	ldr	r3, [r3, #0]
 8104642:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104646:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 810464a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810464e:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8104652:	687a      	ldr	r2, [r7, #4]
 8104654:	6952      	ldr	r2, [r2, #20]
 8104656:	0051      	lsls	r1, r2, #1
 8104658:	687a      	ldr	r2, [r7, #4]
 810465a:	6812      	ldr	r2, [r2, #0]
 810465c:	430b      	orrs	r3, r1
 810465e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104662:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8104666:	6878      	ldr	r0, [r7, #4]
 8104668:	f000 fae7 	bl	8104c3a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 810466c:	6878      	ldr	r0, [r7, #4]
 810466e:	f000 fb2d 	bl	8104ccc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8104672:	687b      	ldr	r3, [r7, #4]
 8104674:	685b      	ldr	r3, [r3, #4]
 8104676:	3305      	adds	r3, #5
 8104678:	781b      	ldrb	r3, [r3, #0]
 810467a:	021a      	lsls	r2, r3, #8
 810467c:	687b      	ldr	r3, [r7, #4]
 810467e:	685b      	ldr	r3, [r3, #4]
 8104680:	3304      	adds	r3, #4
 8104682:	781b      	ldrb	r3, [r3, #0]
 8104684:	4619      	mov	r1, r3
 8104686:	687b      	ldr	r3, [r7, #4]
 8104688:	681b      	ldr	r3, [r3, #0]
 810468a:	430a      	orrs	r2, r1
 810468c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8104690:	687b      	ldr	r3, [r7, #4]
 8104692:	685b      	ldr	r3, [r3, #4]
 8104694:	3303      	adds	r3, #3
 8104696:	781b      	ldrb	r3, [r3, #0]
 8104698:	061a      	lsls	r2, r3, #24
 810469a:	687b      	ldr	r3, [r7, #4]
 810469c:	685b      	ldr	r3, [r3, #4]
 810469e:	3302      	adds	r3, #2
 81046a0:	781b      	ldrb	r3, [r3, #0]
 81046a2:	041b      	lsls	r3, r3, #16
 81046a4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81046a6:	687b      	ldr	r3, [r7, #4]
 81046a8:	685b      	ldr	r3, [r3, #4]
 81046aa:	3301      	adds	r3, #1
 81046ac:	781b      	ldrb	r3, [r3, #0]
 81046ae:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81046b0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81046b2:	687b      	ldr	r3, [r7, #4]
 81046b4:	685b      	ldr	r3, [r3, #4]
 81046b6:	781b      	ldrb	r3, [r3, #0]
 81046b8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81046ba:	687b      	ldr	r3, [r7, #4]
 81046bc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 81046be:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 81046c0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 81046c4:	687b      	ldr	r3, [r7, #4]
 81046c6:	681b      	ldr	r3, [r3, #0]
 81046c8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 81046cc:	687b      	ldr	r3, [r7, #4]
 81046ce:	681a      	ldr	r2, [r3, #0]
 81046d0:	4b11      	ldr	r3, [pc, #68]	@ (8104718 <HAL_ETH_Init+0x1f8>)
 81046d2:	430b      	orrs	r3, r1
 81046d4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 81046d8:	687b      	ldr	r3, [r7, #4]
 81046da:	681b      	ldr	r3, [r3, #0]
 81046dc:	f8d3 3710 	ldr.w	r3, [r3, #1808]	@ 0x710
 81046e0:	687a      	ldr	r2, [r7, #4]
 81046e2:	6812      	ldr	r2, [r2, #0]
 81046e4:	f043 6342 	orr.w	r3, r3, #203423744	@ 0xc200000
 81046e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 81046ec:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 81046f0:	687b      	ldr	r3, [r7, #4]
 81046f2:	2200      	movs	r2, #0
 81046f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 81046f8:	687b      	ldr	r3, [r7, #4]
 81046fa:	2210      	movs	r2, #16
 81046fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8104700:	2300      	movs	r3, #0
}
 8104702:	4618      	mov	r0, r3
 8104704:	3710      	adds	r7, #16
 8104706:	46bd      	mov	sp, r7
 8104708:	bd80      	pop	{r7, pc}
 810470a:	bf00      	nop
 810470c:	58024400 	.word	0x58024400
 8104710:	58000400 	.word	0x58000400
 8104714:	431bde83 	.word	0x431bde83
 8104718:	0c020060 	.word	0x0c020060

0810471c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 810471c:	b580      	push	{r7, lr}
 810471e:	b084      	sub	sp, #16
 8104720:	af00      	add	r7, sp, #0
 8104722:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8104724:	687b      	ldr	r3, [r7, #4]
 8104726:	681b      	ldr	r3, [r3, #0]
 8104728:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 810472c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 810472e:	68fb      	ldr	r3, [r7, #12]
 8104730:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8104734:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8104736:	f001 f8e5 	bl	8105904 <HAL_RCC_GetHCLKFreq>
 810473a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 810473c:	68bb      	ldr	r3, [r7, #8]
 810473e:	4a1a      	ldr	r2, [pc, #104]	@ (81047a8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8104740:	4293      	cmp	r3, r2
 8104742:	d804      	bhi.n	810474e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8104744:	68fb      	ldr	r3, [r7, #12]
 8104746:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 810474a:	60fb      	str	r3, [r7, #12]
 810474c:	e022      	b.n	8104794 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 810474e:	68bb      	ldr	r3, [r7, #8]
 8104750:	4a16      	ldr	r2, [pc, #88]	@ (81047ac <HAL_ETH_SetMDIOClockRange+0x90>)
 8104752:	4293      	cmp	r3, r2
 8104754:	d204      	bcs.n	8104760 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8104756:	68fb      	ldr	r3, [r7, #12]
 8104758:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 810475c:	60fb      	str	r3, [r7, #12]
 810475e:	e019      	b.n	8104794 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8104760:	68bb      	ldr	r3, [r7, #8]
 8104762:	4a13      	ldr	r2, [pc, #76]	@ (81047b0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8104764:	4293      	cmp	r3, r2
 8104766:	d915      	bls.n	8104794 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8104768:	68bb      	ldr	r3, [r7, #8]
 810476a:	4a12      	ldr	r2, [pc, #72]	@ (81047b4 <HAL_ETH_SetMDIOClockRange+0x98>)
 810476c:	4293      	cmp	r3, r2
 810476e:	d804      	bhi.n	810477a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8104770:	68fb      	ldr	r3, [r7, #12]
 8104772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8104776:	60fb      	str	r3, [r7, #12]
 8104778:	e00c      	b.n	8104794 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 810477a:	68bb      	ldr	r3, [r7, #8]
 810477c:	4a0e      	ldr	r2, [pc, #56]	@ (81047b8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 810477e:	4293      	cmp	r3, r2
 8104780:	d804      	bhi.n	810478c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8104782:	68fb      	ldr	r3, [r7, #12]
 8104784:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8104788:	60fb      	str	r3, [r7, #12]
 810478a:	e003      	b.n	8104794 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 810478c:	68fb      	ldr	r3, [r7, #12]
 810478e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8104792:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8104794:	687b      	ldr	r3, [r7, #4]
 8104796:	681b      	ldr	r3, [r3, #0]
 8104798:	68fa      	ldr	r2, [r7, #12]
 810479a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 810479e:	bf00      	nop
 81047a0:	3710      	adds	r7, #16
 81047a2:	46bd      	mov	sp, r7
 81047a4:	bd80      	pop	{r7, pc}
 81047a6:	bf00      	nop
 81047a8:	02160ebf 	.word	0x02160ebf
 81047ac:	03938700 	.word	0x03938700
 81047b0:	05f5e0ff 	.word	0x05f5e0ff
 81047b4:	08f0d17f 	.word	0x08f0d17f
 81047b8:	0ee6b27f 	.word	0x0ee6b27f

081047bc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 81047bc:	b480      	push	{r7}
 81047be:	b085      	sub	sp, #20
 81047c0:	af00      	add	r7, sp, #0
 81047c2:	6078      	str	r0, [r7, #4]
 81047c4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 81047c6:	683b      	ldr	r3, [r7, #0]
 81047c8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 81047ca:	683b      	ldr	r3, [r7, #0]
 81047cc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 81047ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 81047d0:	683b      	ldr	r3, [r7, #0]
 81047d2:	791b      	ldrb	r3, [r3, #4]
 81047d4:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 81047d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 81047d8:	683b      	ldr	r3, [r7, #0]
 81047da:	7b1b      	ldrb	r3, [r3, #12]
 81047dc:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 81047de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 81047e0:	683b      	ldr	r3, [r7, #0]
 81047e2:	7b5b      	ldrb	r3, [r3, #13]
 81047e4:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 81047e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 81047e8:	683b      	ldr	r3, [r7, #0]
 81047ea:	7b9b      	ldrb	r3, [r3, #14]
 81047ec:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 81047ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 81047f0:	683b      	ldr	r3, [r7, #0]
 81047f2:	7bdb      	ldrb	r3, [r3, #15]
 81047f4:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 81047f6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 81047f8:	683a      	ldr	r2, [r7, #0]
 81047fa:	7c12      	ldrb	r2, [r2, #16]
 81047fc:	2a00      	cmp	r2, #0
 81047fe:	d102      	bne.n	8104806 <ETH_SetMACConfig+0x4a>
 8104800:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8104804:	e000      	b.n	8104808 <ETH_SetMACConfig+0x4c>
 8104806:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8104808:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 810480a:	683a      	ldr	r2, [r7, #0]
 810480c:	7c52      	ldrb	r2, [r2, #17]
 810480e:	2a00      	cmp	r2, #0
 8104810:	d102      	bne.n	8104818 <ETH_SetMACConfig+0x5c>
 8104812:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8104816:	e000      	b.n	810481a <ETH_SetMACConfig+0x5e>
 8104818:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 810481a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 810481c:	683b      	ldr	r3, [r7, #0]
 810481e:	7c9b      	ldrb	r3, [r3, #18]
 8104820:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8104822:	431a      	orrs	r2, r3
               macconf->Speed |
 8104824:	683b      	ldr	r3, [r7, #0]
 8104826:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8104828:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 810482a:	683b      	ldr	r3, [r7, #0]
 810482c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 810482e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8104830:	683b      	ldr	r3, [r7, #0]
 8104832:	7f1b      	ldrb	r3, [r3, #28]
 8104834:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8104836:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8104838:	683b      	ldr	r3, [r7, #0]
 810483a:	7f5b      	ldrb	r3, [r3, #29]
 810483c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 810483e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8104840:	683a      	ldr	r2, [r7, #0]
 8104842:	7f92      	ldrb	r2, [r2, #30]
 8104844:	2a00      	cmp	r2, #0
 8104846:	d102      	bne.n	810484e <ETH_SetMACConfig+0x92>
 8104848:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 810484c:	e000      	b.n	8104850 <ETH_SetMACConfig+0x94>
 810484e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8104850:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8104852:	683b      	ldr	r3, [r7, #0]
 8104854:	7fdb      	ldrb	r3, [r3, #31]
 8104856:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8104858:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 810485a:	683a      	ldr	r2, [r7, #0]
 810485c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8104860:	2a00      	cmp	r2, #0
 8104862:	d102      	bne.n	810486a <ETH_SetMACConfig+0xae>
 8104864:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8104868:	e000      	b.n	810486c <ETH_SetMACConfig+0xb0>
 810486a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 810486c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 810486e:	683b      	ldr	r3, [r7, #0]
 8104870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8104872:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8104874:	683b      	ldr	r3, [r7, #0]
 8104876:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810487a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 810487c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 810487e:	683b      	ldr	r3, [r7, #0]
 8104880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8104882:	4313      	orrs	r3, r2
 8104884:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8104886:	687b      	ldr	r3, [r7, #4]
 8104888:	681b      	ldr	r3, [r3, #0]
 810488a:	681a      	ldr	r2, [r3, #0]
 810488c:	4b57      	ldr	r3, [pc, #348]	@ (81049ec <ETH_SetMACConfig+0x230>)
 810488e:	4013      	ands	r3, r2
 8104890:	687a      	ldr	r2, [r7, #4]
 8104892:	6812      	ldr	r2, [r2, #0]
 8104894:	68f9      	ldr	r1, [r7, #12]
 8104896:	430b      	orrs	r3, r1
 8104898:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 810489a:	683b      	ldr	r3, [r7, #0]
 810489c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810489e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 81048a0:	683b      	ldr	r3, [r7, #0]
 81048a2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 81048a6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81048a8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 81048aa:	683b      	ldr	r3, [r7, #0]
 81048ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 81048b0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 81048b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 81048b4:	683b      	ldr	r3, [r7, #0]
 81048b6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 81048ba:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 81048bc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 81048be:	683a      	ldr	r2, [r7, #0]
 81048c0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 81048c4:	2a00      	cmp	r2, #0
 81048c6:	d102      	bne.n	81048ce <ETH_SetMACConfig+0x112>
 81048c8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 81048cc:	e000      	b.n	81048d0 <ETH_SetMACConfig+0x114>
 81048ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 81048d0:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 81048d2:	683b      	ldr	r3, [r7, #0]
 81048d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 81048d6:	4313      	orrs	r3, r2
 81048d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 81048da:	687b      	ldr	r3, [r7, #4]
 81048dc:	681b      	ldr	r3, [r3, #0]
 81048de:	685a      	ldr	r2, [r3, #4]
 81048e0:	4b43      	ldr	r3, [pc, #268]	@ (81049f0 <ETH_SetMACConfig+0x234>)
 81048e2:	4013      	ands	r3, r2
 81048e4:	687a      	ldr	r2, [r7, #4]
 81048e6:	6812      	ldr	r2, [r2, #0]
 81048e8:	68f9      	ldr	r1, [r7, #12]
 81048ea:	430b      	orrs	r3, r1
 81048ec:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81048ee:	683b      	ldr	r3, [r7, #0]
 81048f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81048f4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 81048f6:	683b      	ldr	r3, [r7, #0]
 81048f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 81048fa:	4313      	orrs	r3, r2
 81048fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 81048fe:	687b      	ldr	r3, [r7, #4]
 8104900:	681b      	ldr	r3, [r3, #0]
 8104902:	68db      	ldr	r3, [r3, #12]
 8104904:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 8104908:	f023 0301 	bic.w	r3, r3, #1
 810490c:	687a      	ldr	r2, [r7, #4]
 810490e:	6812      	ldr	r2, [r2, #0]
 8104910:	68f9      	ldr	r1, [r7, #12]
 8104912:	430b      	orrs	r3, r1
 8104914:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8104916:	683b      	ldr	r3, [r7, #0]
 8104918:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 810491c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 810491e:	683b      	ldr	r3, [r7, #0]
 8104920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8104922:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8104924:	683a      	ldr	r2, [r7, #0]
 8104926:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 810492a:	2a00      	cmp	r2, #0
 810492c:	d101      	bne.n	8104932 <ETH_SetMACConfig+0x176>
 810492e:	2280      	movs	r2, #128	@ 0x80
 8104930:	e000      	b.n	8104934 <ETH_SetMACConfig+0x178>
 8104932:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8104934:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8104936:	683b      	ldr	r3, [r7, #0]
 8104938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810493a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 810493c:	4313      	orrs	r3, r2
 810493e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8104940:	687b      	ldr	r3, [r7, #4]
 8104942:	681b      	ldr	r3, [r3, #0]
 8104944:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8104946:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 810494a:	4013      	ands	r3, r2
 810494c:	687a      	ldr	r2, [r7, #4]
 810494e:	6812      	ldr	r2, [r2, #0]
 8104950:	68f9      	ldr	r1, [r7, #12]
 8104952:	430b      	orrs	r3, r1
 8104954:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8104956:	683b      	ldr	r3, [r7, #0]
 8104958:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 810495c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 810495e:	683b      	ldr	r3, [r7, #0]
 8104960:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8104964:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8104966:	4313      	orrs	r3, r2
 8104968:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 810496a:	687b      	ldr	r3, [r7, #4]
 810496c:	681b      	ldr	r3, [r3, #0]
 810496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8104972:	f023 0103 	bic.w	r1, r3, #3
 8104976:	687b      	ldr	r3, [r7, #4]
 8104978:	681b      	ldr	r3, [r3, #0]
 810497a:	68fa      	ldr	r2, [r7, #12]
 810497c:	430a      	orrs	r2, r1
 810497e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8104982:	687b      	ldr	r3, [r7, #4]
 8104984:	681b      	ldr	r3, [r3, #0]
 8104986:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 810498a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 810498e:	683b      	ldr	r3, [r7, #0]
 8104990:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8104992:	687b      	ldr	r3, [r7, #4]
 8104994:	681b      	ldr	r3, [r3, #0]
 8104996:	430a      	orrs	r2, r1
 8104998:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 810499c:	683b      	ldr	r3, [r7, #0]
 810499e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 81049a0:	683a      	ldr	r2, [r7, #0]
 81049a2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 81049a6:	2a00      	cmp	r2, #0
 81049a8:	d101      	bne.n	81049ae <ETH_SetMACConfig+0x1f2>
 81049aa:	2240      	movs	r2, #64	@ 0x40
 81049ac:	e000      	b.n	81049b0 <ETH_SetMACConfig+0x1f4>
 81049ae:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 81049b0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 81049b2:	683b      	ldr	r3, [r7, #0]
 81049b4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 81049b8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 81049ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 81049bc:	683b      	ldr	r3, [r7, #0]
 81049be:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 81049c2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 81049c4:	4313      	orrs	r3, r2
 81049c6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 81049c8:	687b      	ldr	r3, [r7, #4]
 81049ca:	681b      	ldr	r3, [r3, #0]
 81049cc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 81049d0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 81049d4:	687b      	ldr	r3, [r7, #4]
 81049d6:	681b      	ldr	r3, [r3, #0]
 81049d8:	68fa      	ldr	r2, [r7, #12]
 81049da:	430a      	orrs	r2, r1
 81049dc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 81049e0:	bf00      	nop
 81049e2:	3714      	adds	r7, #20
 81049e4:	46bd      	mov	sp, r7
 81049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81049ea:	4770      	bx	lr
 81049ec:	00048083 	.word	0x00048083
 81049f0:	c0f88000 	.word	0xc0f88000

081049f4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 81049f4:	b480      	push	{r7}
 81049f6:	b085      	sub	sp, #20
 81049f8:	af00      	add	r7, sp, #0
 81049fa:	6078      	str	r0, [r7, #4]
 81049fc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 81049fe:	687b      	ldr	r3, [r7, #4]
 8104a00:	681b      	ldr	r3, [r3, #0]
 8104a02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104a06:	681b      	ldr	r3, [r3, #0]
 8104a08:	f423 43f0 	bic.w	r3, r3, #30720	@ 0x7800
 8104a0c:	f023 0302 	bic.w	r3, r3, #2
 8104a10:	683a      	ldr	r2, [r7, #0]
 8104a12:	6811      	ldr	r1, [r2, #0]
 8104a14:	687a      	ldr	r2, [r7, #4]
 8104a16:	6812      	ldr	r2, [r2, #0]
 8104a18:	430b      	orrs	r3, r1
 8104a1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104a1e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8104a20:	683b      	ldr	r3, [r7, #0]
 8104a22:	791b      	ldrb	r3, [r3, #4]
 8104a24:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8104a26:	683b      	ldr	r3, [r7, #0]
 8104a28:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8104a2a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8104a2c:	683b      	ldr	r3, [r7, #0]
 8104a2e:	7b1b      	ldrb	r3, [r3, #12]
 8104a30:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8104a32:	4313      	orrs	r3, r2
 8104a34:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8104a36:	687b      	ldr	r3, [r7, #4]
 8104a38:	681b      	ldr	r3, [r3, #0]
 8104a3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104a3e:	685b      	ldr	r3, [r3, #4]
 8104a40:	f423 4350 	bic.w	r3, r3, #53248	@ 0xd000
 8104a44:	f023 0301 	bic.w	r3, r3, #1
 8104a48:	687a      	ldr	r2, [r7, #4]
 8104a4a:	6812      	ldr	r2, [r2, #0]
 8104a4c:	68f9      	ldr	r1, [r7, #12]
 8104a4e:	430b      	orrs	r3, r1
 8104a50:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104a54:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8104a56:	683b      	ldr	r3, [r7, #0]
 8104a58:	7b5b      	ldrb	r3, [r3, #13]
 8104a5a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8104a5c:	683b      	ldr	r3, [r7, #0]
 8104a5e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8104a60:	4313      	orrs	r3, r2
 8104a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8104a64:	687b      	ldr	r3, [r7, #4]
 8104a66:	681b      	ldr	r3, [r3, #0]
 8104a68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104a6c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8104a70:	4b21      	ldr	r3, [pc, #132]	@ (8104af8 <ETH_SetDMAConfig+0x104>)
 8104a72:	4013      	ands	r3, r2
 8104a74:	687a      	ldr	r2, [r7, #4]
 8104a76:	6812      	ldr	r2, [r2, #0]
 8104a78:	68f9      	ldr	r1, [r7, #12]
 8104a7a:	430b      	orrs	r3, r1
 8104a7c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104a80:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8104a84:	683b      	ldr	r3, [r7, #0]
 8104a86:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8104a88:	683b      	ldr	r3, [r7, #0]
 8104a8a:	7d1b      	ldrb	r3, [r3, #20]
 8104a8c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8104a8e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8104a90:	683b      	ldr	r3, [r7, #0]
 8104a92:	7f5b      	ldrb	r3, [r3, #29]
 8104a94:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8104a96:	4313      	orrs	r3, r2
 8104a98:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8104a9a:	687b      	ldr	r3, [r7, #4]
 8104a9c:	681b      	ldr	r3, [r3, #0]
 8104a9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104aa2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8104aa6:	4b15      	ldr	r3, [pc, #84]	@ (8104afc <ETH_SetDMAConfig+0x108>)
 8104aa8:	4013      	ands	r3, r2
 8104aaa:	687a      	ldr	r2, [r7, #4]
 8104aac:	6812      	ldr	r2, [r2, #0]
 8104aae:	68f9      	ldr	r1, [r7, #12]
 8104ab0:	430b      	orrs	r3, r1
 8104ab2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104ab6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8104aba:	683b      	ldr	r3, [r7, #0]
 8104abc:	7f1b      	ldrb	r3, [r3, #28]
 8104abe:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8104ac0:	683b      	ldr	r3, [r7, #0]
 8104ac2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8104ac4:	4313      	orrs	r3, r2
 8104ac6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8104ac8:	687b      	ldr	r3, [r7, #4]
 8104aca:	681b      	ldr	r3, [r3, #0]
 8104acc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104ad0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8104ad4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8104ad8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8104adc:	687a      	ldr	r2, [r7, #4]
 8104ade:	6812      	ldr	r2, [r2, #0]
 8104ae0:	68f9      	ldr	r1, [r7, #12]
 8104ae2:	430b      	orrs	r3, r1
 8104ae4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8104ae8:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8104aec:	bf00      	nop
 8104aee:	3714      	adds	r7, #20
 8104af0:	46bd      	mov	sp, r7
 8104af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104af6:	4770      	bx	lr
 8104af8:	fffec000 	.word	0xfffec000
 8104afc:	ffc0efef 	.word	0xffc0efef

08104b00 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8104b00:	b580      	push	{r7, lr}
 8104b02:	b0a4      	sub	sp, #144	@ 0x90
 8104b04:	af00      	add	r7, sp, #0
 8104b06:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8104b08:	2301      	movs	r3, #1
 8104b0a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8104b0e:	2300      	movs	r3, #0
 8104b10:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8104b12:	2300      	movs	r3, #0
 8104b14:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8104b18:	2300      	movs	r3, #0
 8104b1a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8104b1e:	2301      	movs	r3, #1
 8104b20:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8104b24:	2301      	movs	r3, #1
 8104b26:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8104b2a:	2301      	movs	r3, #1
 8104b2c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8104b30:	2300      	movs	r3, #0
 8104b32:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8104b36:	2301      	movs	r3, #1
 8104b38:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8104b3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8104b40:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8104b42:	2300      	movs	r3, #0
 8104b44:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8104b48:	2300      	movs	r3, #0
 8104b4a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8104b4c:	2300      	movs	r3, #0
 8104b4e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8104b52:	2300      	movs	r3, #0
 8104b54:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8104b58:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8104b5c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8104b5e:	2300      	movs	r3, #0
 8104b60:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8104b64:	2300      	movs	r3, #0
 8104b66:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8104b68:	2301      	movs	r3, #1
 8104b6a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8104b6e:	2300      	movs	r3, #0
 8104b70:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8104b74:	2300      	movs	r3, #0
 8104b76:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8104b7a:	2300      	movs	r3, #0
 8104b7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8104b7e:	2300      	movs	r3, #0
 8104b80:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8104b82:	2300      	movs	r3, #0
 8104b84:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8104b86:	2300      	movs	r3, #0
 8104b88:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8104b8c:	2300      	movs	r3, #0
 8104b8e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8104b92:	2301      	movs	r3, #1
 8104b94:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8104b98:	2320      	movs	r3, #32
 8104b9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8104b9e:	2301      	movs	r3, #1
 8104ba0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8104ba4:	2300      	movs	r3, #0
 8104ba6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8104baa:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8104bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8104bb0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8104bb4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8104bb6:	2300      	movs	r3, #0
 8104bb8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8104bbc:	2302      	movs	r3, #2
 8104bbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8104bc2:	2300      	movs	r3, #0
 8104bc4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8104bc8:	2300      	movs	r3, #0
 8104bca:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8104bce:	2300      	movs	r3, #0
 8104bd0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8104bd4:	2301      	movs	r3, #1
 8104bd6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8104bda:	2300      	movs	r3, #0
 8104bdc:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8104bde:	2301      	movs	r3, #1
 8104be0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8104be4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8104be8:	4619      	mov	r1, r3
 8104bea:	6878      	ldr	r0, [r7, #4]
 8104bec:	f7ff fde6 	bl	81047bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8104bf0:	2301      	movs	r3, #1
 8104bf2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8104bf4:	2301      	movs	r3, #1
 8104bf6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8104bf8:	2300      	movs	r3, #0
 8104bfa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8104bfc:	2300      	movs	r3, #0
 8104bfe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8104c02:	2300      	movs	r3, #0
 8104c04:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8104c06:	2300      	movs	r3, #0
 8104c08:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8104c0a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8104c0e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8104c10:	2300      	movs	r3, #0
 8104c12:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8104c14:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8104c18:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8104c1a:	2300      	movs	r3, #0
 8104c1c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8104c20:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8104c24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8104c26:	f107 0308 	add.w	r3, r7, #8
 8104c2a:	4619      	mov	r1, r3
 8104c2c:	6878      	ldr	r0, [r7, #4]
 8104c2e:	f7ff fee1 	bl	81049f4 <ETH_SetDMAConfig>
}
 8104c32:	bf00      	nop
 8104c34:	3790      	adds	r7, #144	@ 0x90
 8104c36:	46bd      	mov	sp, r7
 8104c38:	bd80      	pop	{r7, pc}

08104c3a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8104c3a:	b480      	push	{r7}
 8104c3c:	b085      	sub	sp, #20
 8104c3e:	af00      	add	r7, sp, #0
 8104c40:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8104c42:	2300      	movs	r3, #0
 8104c44:	60fb      	str	r3, [r7, #12]
 8104c46:	e01d      	b.n	8104c84 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8104c48:	687b      	ldr	r3, [r7, #4]
 8104c4a:	68d9      	ldr	r1, [r3, #12]
 8104c4c:	68fa      	ldr	r2, [r7, #12]
 8104c4e:	4613      	mov	r3, r2
 8104c50:	005b      	lsls	r3, r3, #1
 8104c52:	4413      	add	r3, r2
 8104c54:	00db      	lsls	r3, r3, #3
 8104c56:	440b      	add	r3, r1
 8104c58:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8104c5a:	68bb      	ldr	r3, [r7, #8]
 8104c5c:	2200      	movs	r2, #0
 8104c5e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8104c60:	68bb      	ldr	r3, [r7, #8]
 8104c62:	2200      	movs	r2, #0
 8104c64:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8104c66:	68bb      	ldr	r3, [r7, #8]
 8104c68:	2200      	movs	r2, #0
 8104c6a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8104c6c:	68bb      	ldr	r3, [r7, #8]
 8104c6e:	2200      	movs	r2, #0
 8104c70:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8104c72:	68b9      	ldr	r1, [r7, #8]
 8104c74:	687b      	ldr	r3, [r7, #4]
 8104c76:	68fa      	ldr	r2, [r7, #12]
 8104c78:	3206      	adds	r2, #6
 8104c7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8104c7e:	68fb      	ldr	r3, [r7, #12]
 8104c80:	3301      	adds	r3, #1
 8104c82:	60fb      	str	r3, [r7, #12]
 8104c84:	68fb      	ldr	r3, [r7, #12]
 8104c86:	2b03      	cmp	r3, #3
 8104c88:	d9de      	bls.n	8104c48 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8104c8a:	687b      	ldr	r3, [r7, #4]
 8104c8c:	2200      	movs	r2, #0
 8104c8e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8104c90:	687b      	ldr	r3, [r7, #4]
 8104c92:	681b      	ldr	r3, [r3, #0]
 8104c94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104c98:	461a      	mov	r2, r3
 8104c9a:	2303      	movs	r3, #3
 8104c9c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8104ca0:	687b      	ldr	r3, [r7, #4]
 8104ca2:	68da      	ldr	r2, [r3, #12]
 8104ca4:	687b      	ldr	r3, [r7, #4]
 8104ca6:	681b      	ldr	r3, [r3, #0]
 8104ca8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104cac:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8104cb0:	687b      	ldr	r3, [r7, #4]
 8104cb2:	68da      	ldr	r2, [r3, #12]
 8104cb4:	687b      	ldr	r3, [r7, #4]
 8104cb6:	681b      	ldr	r3, [r3, #0]
 8104cb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104cbc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8104cc0:	bf00      	nop
 8104cc2:	3714      	adds	r7, #20
 8104cc4:	46bd      	mov	sp, r7
 8104cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104cca:	4770      	bx	lr

08104ccc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8104ccc:	b480      	push	{r7}
 8104cce:	b085      	sub	sp, #20
 8104cd0:	af00      	add	r7, sp, #0
 8104cd2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8104cd4:	2300      	movs	r3, #0
 8104cd6:	60fb      	str	r3, [r7, #12]
 8104cd8:	e023      	b.n	8104d22 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8104cda:	687b      	ldr	r3, [r7, #4]
 8104cdc:	6919      	ldr	r1, [r3, #16]
 8104cde:	68fa      	ldr	r2, [r7, #12]
 8104ce0:	4613      	mov	r3, r2
 8104ce2:	005b      	lsls	r3, r3, #1
 8104ce4:	4413      	add	r3, r2
 8104ce6:	00db      	lsls	r3, r3, #3
 8104ce8:	440b      	add	r3, r1
 8104cea:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8104cec:	68bb      	ldr	r3, [r7, #8]
 8104cee:	2200      	movs	r2, #0
 8104cf0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8104cf2:	68bb      	ldr	r3, [r7, #8]
 8104cf4:	2200      	movs	r2, #0
 8104cf6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8104cf8:	68bb      	ldr	r3, [r7, #8]
 8104cfa:	2200      	movs	r2, #0
 8104cfc:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8104cfe:	68bb      	ldr	r3, [r7, #8]
 8104d00:	2200      	movs	r2, #0
 8104d02:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8104d04:	68bb      	ldr	r3, [r7, #8]
 8104d06:	2200      	movs	r2, #0
 8104d08:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8104d0a:	68bb      	ldr	r3, [r7, #8]
 8104d0c:	2200      	movs	r2, #0
 8104d0e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8104d10:	68b9      	ldr	r1, [r7, #8]
 8104d12:	687b      	ldr	r3, [r7, #4]
 8104d14:	68fa      	ldr	r2, [r7, #12]
 8104d16:	3212      	adds	r2, #18
 8104d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8104d1c:	68fb      	ldr	r3, [r7, #12]
 8104d1e:	3301      	adds	r3, #1
 8104d20:	60fb      	str	r3, [r7, #12]
 8104d22:	68fb      	ldr	r3, [r7, #12]
 8104d24:	2b03      	cmp	r3, #3
 8104d26:	d9d8      	bls.n	8104cda <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8104d28:	687b      	ldr	r3, [r7, #4]
 8104d2a:	2200      	movs	r2, #0
 8104d2c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8104d2e:	687b      	ldr	r3, [r7, #4]
 8104d30:	2200      	movs	r2, #0
 8104d32:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8104d34:	687b      	ldr	r3, [r7, #4]
 8104d36:	2200      	movs	r2, #0
 8104d38:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8104d3a:	687b      	ldr	r3, [r7, #4]
 8104d3c:	2200      	movs	r2, #0
 8104d3e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8104d40:	687b      	ldr	r3, [r7, #4]
 8104d42:	2200      	movs	r2, #0
 8104d44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8104d46:	687b      	ldr	r3, [r7, #4]
 8104d48:	681b      	ldr	r3, [r3, #0]
 8104d4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104d4e:	461a      	mov	r2, r3
 8104d50:	2303      	movs	r3, #3
 8104d52:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8104d56:	687b      	ldr	r3, [r7, #4]
 8104d58:	691a      	ldr	r2, [r3, #16]
 8104d5a:	687b      	ldr	r3, [r7, #4]
 8104d5c:	681b      	ldr	r3, [r3, #0]
 8104d5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104d62:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8104d66:	687b      	ldr	r3, [r7, #4]
 8104d68:	691b      	ldr	r3, [r3, #16]
 8104d6a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8104d6e:	687b      	ldr	r3, [r7, #4]
 8104d70:	681b      	ldr	r3, [r3, #0]
 8104d72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8104d76:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8104d7a:	bf00      	nop
 8104d7c:	3714      	adds	r7, #20
 8104d7e:	46bd      	mov	sp, r7
 8104d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104d84:	4770      	bx	lr
	...

08104d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8104d88:	b480      	push	{r7}
 8104d8a:	b089      	sub	sp, #36	@ 0x24
 8104d8c:	af00      	add	r7, sp, #0
 8104d8e:	6078      	str	r0, [r7, #4]
 8104d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8104d92:	2300      	movs	r3, #0
 8104d94:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8104d96:	4b89      	ldr	r3, [pc, #548]	@ (8104fbc <HAL_GPIO_Init+0x234>)
 8104d98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8104d9a:	e194      	b.n	81050c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8104d9c:	683b      	ldr	r3, [r7, #0]
 8104d9e:	681a      	ldr	r2, [r3, #0]
 8104da0:	2101      	movs	r1, #1
 8104da2:	69fb      	ldr	r3, [r7, #28]
 8104da4:	fa01 f303 	lsl.w	r3, r1, r3
 8104da8:	4013      	ands	r3, r2
 8104daa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8104dac:	693b      	ldr	r3, [r7, #16]
 8104dae:	2b00      	cmp	r3, #0
 8104db0:	f000 8186 	beq.w	81050c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8104db4:	683b      	ldr	r3, [r7, #0]
 8104db6:	685b      	ldr	r3, [r3, #4]
 8104db8:	f003 0303 	and.w	r3, r3, #3
 8104dbc:	2b01      	cmp	r3, #1
 8104dbe:	d005      	beq.n	8104dcc <HAL_GPIO_Init+0x44>
 8104dc0:	683b      	ldr	r3, [r7, #0]
 8104dc2:	685b      	ldr	r3, [r3, #4]
 8104dc4:	f003 0303 	and.w	r3, r3, #3
 8104dc8:	2b02      	cmp	r3, #2
 8104dca:	d130      	bne.n	8104e2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8104dcc:	687b      	ldr	r3, [r7, #4]
 8104dce:	689b      	ldr	r3, [r3, #8]
 8104dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8104dd2:	69fb      	ldr	r3, [r7, #28]
 8104dd4:	005b      	lsls	r3, r3, #1
 8104dd6:	2203      	movs	r2, #3
 8104dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8104ddc:	43db      	mvns	r3, r3
 8104dde:	69ba      	ldr	r2, [r7, #24]
 8104de0:	4013      	ands	r3, r2
 8104de2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8104de4:	683b      	ldr	r3, [r7, #0]
 8104de6:	68da      	ldr	r2, [r3, #12]
 8104de8:	69fb      	ldr	r3, [r7, #28]
 8104dea:	005b      	lsls	r3, r3, #1
 8104dec:	fa02 f303 	lsl.w	r3, r2, r3
 8104df0:	69ba      	ldr	r2, [r7, #24]
 8104df2:	4313      	orrs	r3, r2
 8104df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8104df6:	687b      	ldr	r3, [r7, #4]
 8104df8:	69ba      	ldr	r2, [r7, #24]
 8104dfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8104dfc:	687b      	ldr	r3, [r7, #4]
 8104dfe:	685b      	ldr	r3, [r3, #4]
 8104e00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8104e02:	2201      	movs	r2, #1
 8104e04:	69fb      	ldr	r3, [r7, #28]
 8104e06:	fa02 f303 	lsl.w	r3, r2, r3
 8104e0a:	43db      	mvns	r3, r3
 8104e0c:	69ba      	ldr	r2, [r7, #24]
 8104e0e:	4013      	ands	r3, r2
 8104e10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8104e12:	683b      	ldr	r3, [r7, #0]
 8104e14:	685b      	ldr	r3, [r3, #4]
 8104e16:	091b      	lsrs	r3, r3, #4
 8104e18:	f003 0201 	and.w	r2, r3, #1
 8104e1c:	69fb      	ldr	r3, [r7, #28]
 8104e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8104e22:	69ba      	ldr	r2, [r7, #24]
 8104e24:	4313      	orrs	r3, r2
 8104e26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8104e28:	687b      	ldr	r3, [r7, #4]
 8104e2a:	69ba      	ldr	r2, [r7, #24]
 8104e2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8104e2e:	683b      	ldr	r3, [r7, #0]
 8104e30:	685b      	ldr	r3, [r3, #4]
 8104e32:	f003 0303 	and.w	r3, r3, #3
 8104e36:	2b03      	cmp	r3, #3
 8104e38:	d017      	beq.n	8104e6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8104e3a:	687b      	ldr	r3, [r7, #4]
 8104e3c:	68db      	ldr	r3, [r3, #12]
 8104e3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8104e40:	69fb      	ldr	r3, [r7, #28]
 8104e42:	005b      	lsls	r3, r3, #1
 8104e44:	2203      	movs	r2, #3
 8104e46:	fa02 f303 	lsl.w	r3, r2, r3
 8104e4a:	43db      	mvns	r3, r3
 8104e4c:	69ba      	ldr	r2, [r7, #24]
 8104e4e:	4013      	ands	r3, r2
 8104e50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8104e52:	683b      	ldr	r3, [r7, #0]
 8104e54:	689a      	ldr	r2, [r3, #8]
 8104e56:	69fb      	ldr	r3, [r7, #28]
 8104e58:	005b      	lsls	r3, r3, #1
 8104e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8104e5e:	69ba      	ldr	r2, [r7, #24]
 8104e60:	4313      	orrs	r3, r2
 8104e62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8104e64:	687b      	ldr	r3, [r7, #4]
 8104e66:	69ba      	ldr	r2, [r7, #24]
 8104e68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8104e6a:	683b      	ldr	r3, [r7, #0]
 8104e6c:	685b      	ldr	r3, [r3, #4]
 8104e6e:	f003 0303 	and.w	r3, r3, #3
 8104e72:	2b02      	cmp	r3, #2
 8104e74:	d123      	bne.n	8104ebe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8104e76:	69fb      	ldr	r3, [r7, #28]
 8104e78:	08da      	lsrs	r2, r3, #3
 8104e7a:	687b      	ldr	r3, [r7, #4]
 8104e7c:	3208      	adds	r2, #8
 8104e7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8104e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8104e84:	69fb      	ldr	r3, [r7, #28]
 8104e86:	f003 0307 	and.w	r3, r3, #7
 8104e8a:	009b      	lsls	r3, r3, #2
 8104e8c:	220f      	movs	r2, #15
 8104e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8104e92:	43db      	mvns	r3, r3
 8104e94:	69ba      	ldr	r2, [r7, #24]
 8104e96:	4013      	ands	r3, r2
 8104e98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8104e9a:	683b      	ldr	r3, [r7, #0]
 8104e9c:	691a      	ldr	r2, [r3, #16]
 8104e9e:	69fb      	ldr	r3, [r7, #28]
 8104ea0:	f003 0307 	and.w	r3, r3, #7
 8104ea4:	009b      	lsls	r3, r3, #2
 8104ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8104eaa:	69ba      	ldr	r2, [r7, #24]
 8104eac:	4313      	orrs	r3, r2
 8104eae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8104eb0:	69fb      	ldr	r3, [r7, #28]
 8104eb2:	08da      	lsrs	r2, r3, #3
 8104eb4:	687b      	ldr	r3, [r7, #4]
 8104eb6:	3208      	adds	r2, #8
 8104eb8:	69b9      	ldr	r1, [r7, #24]
 8104eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8104ebe:	687b      	ldr	r3, [r7, #4]
 8104ec0:	681b      	ldr	r3, [r3, #0]
 8104ec2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8104ec4:	69fb      	ldr	r3, [r7, #28]
 8104ec6:	005b      	lsls	r3, r3, #1
 8104ec8:	2203      	movs	r2, #3
 8104eca:	fa02 f303 	lsl.w	r3, r2, r3
 8104ece:	43db      	mvns	r3, r3
 8104ed0:	69ba      	ldr	r2, [r7, #24]
 8104ed2:	4013      	ands	r3, r2
 8104ed4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8104ed6:	683b      	ldr	r3, [r7, #0]
 8104ed8:	685b      	ldr	r3, [r3, #4]
 8104eda:	f003 0203 	and.w	r2, r3, #3
 8104ede:	69fb      	ldr	r3, [r7, #28]
 8104ee0:	005b      	lsls	r3, r3, #1
 8104ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8104ee6:	69ba      	ldr	r2, [r7, #24]
 8104ee8:	4313      	orrs	r3, r2
 8104eea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8104eec:	687b      	ldr	r3, [r7, #4]
 8104eee:	69ba      	ldr	r2, [r7, #24]
 8104ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8104ef2:	683b      	ldr	r3, [r7, #0]
 8104ef4:	685b      	ldr	r3, [r3, #4]
 8104ef6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8104efa:	2b00      	cmp	r3, #0
 8104efc:	f000 80e0 	beq.w	81050c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8104f00:	4b2f      	ldr	r3, [pc, #188]	@ (8104fc0 <HAL_GPIO_Init+0x238>)
 8104f02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8104f06:	4a2e      	ldr	r2, [pc, #184]	@ (8104fc0 <HAL_GPIO_Init+0x238>)
 8104f08:	f043 0302 	orr.w	r3, r3, #2
 8104f0c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8104f10:	4b2b      	ldr	r3, [pc, #172]	@ (8104fc0 <HAL_GPIO_Init+0x238>)
 8104f12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8104f16:	f003 0302 	and.w	r3, r3, #2
 8104f1a:	60fb      	str	r3, [r7, #12]
 8104f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8104f1e:	4a29      	ldr	r2, [pc, #164]	@ (8104fc4 <HAL_GPIO_Init+0x23c>)
 8104f20:	69fb      	ldr	r3, [r7, #28]
 8104f22:	089b      	lsrs	r3, r3, #2
 8104f24:	3302      	adds	r3, #2
 8104f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8104f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8104f2c:	69fb      	ldr	r3, [r7, #28]
 8104f2e:	f003 0303 	and.w	r3, r3, #3
 8104f32:	009b      	lsls	r3, r3, #2
 8104f34:	220f      	movs	r2, #15
 8104f36:	fa02 f303 	lsl.w	r3, r2, r3
 8104f3a:	43db      	mvns	r3, r3
 8104f3c:	69ba      	ldr	r2, [r7, #24]
 8104f3e:	4013      	ands	r3, r2
 8104f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8104f42:	687b      	ldr	r3, [r7, #4]
 8104f44:	4a20      	ldr	r2, [pc, #128]	@ (8104fc8 <HAL_GPIO_Init+0x240>)
 8104f46:	4293      	cmp	r3, r2
 8104f48:	d052      	beq.n	8104ff0 <HAL_GPIO_Init+0x268>
 8104f4a:	687b      	ldr	r3, [r7, #4]
 8104f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8104fcc <HAL_GPIO_Init+0x244>)
 8104f4e:	4293      	cmp	r3, r2
 8104f50:	d031      	beq.n	8104fb6 <HAL_GPIO_Init+0x22e>
 8104f52:	687b      	ldr	r3, [r7, #4]
 8104f54:	4a1e      	ldr	r2, [pc, #120]	@ (8104fd0 <HAL_GPIO_Init+0x248>)
 8104f56:	4293      	cmp	r3, r2
 8104f58:	d02b      	beq.n	8104fb2 <HAL_GPIO_Init+0x22a>
 8104f5a:	687b      	ldr	r3, [r7, #4]
 8104f5c:	4a1d      	ldr	r2, [pc, #116]	@ (8104fd4 <HAL_GPIO_Init+0x24c>)
 8104f5e:	4293      	cmp	r3, r2
 8104f60:	d025      	beq.n	8104fae <HAL_GPIO_Init+0x226>
 8104f62:	687b      	ldr	r3, [r7, #4]
 8104f64:	4a1c      	ldr	r2, [pc, #112]	@ (8104fd8 <HAL_GPIO_Init+0x250>)
 8104f66:	4293      	cmp	r3, r2
 8104f68:	d01f      	beq.n	8104faa <HAL_GPIO_Init+0x222>
 8104f6a:	687b      	ldr	r3, [r7, #4]
 8104f6c:	4a1b      	ldr	r2, [pc, #108]	@ (8104fdc <HAL_GPIO_Init+0x254>)
 8104f6e:	4293      	cmp	r3, r2
 8104f70:	d019      	beq.n	8104fa6 <HAL_GPIO_Init+0x21e>
 8104f72:	687b      	ldr	r3, [r7, #4]
 8104f74:	4a1a      	ldr	r2, [pc, #104]	@ (8104fe0 <HAL_GPIO_Init+0x258>)
 8104f76:	4293      	cmp	r3, r2
 8104f78:	d013      	beq.n	8104fa2 <HAL_GPIO_Init+0x21a>
 8104f7a:	687b      	ldr	r3, [r7, #4]
 8104f7c:	4a19      	ldr	r2, [pc, #100]	@ (8104fe4 <HAL_GPIO_Init+0x25c>)
 8104f7e:	4293      	cmp	r3, r2
 8104f80:	d00d      	beq.n	8104f9e <HAL_GPIO_Init+0x216>
 8104f82:	687b      	ldr	r3, [r7, #4]
 8104f84:	4a18      	ldr	r2, [pc, #96]	@ (8104fe8 <HAL_GPIO_Init+0x260>)
 8104f86:	4293      	cmp	r3, r2
 8104f88:	d007      	beq.n	8104f9a <HAL_GPIO_Init+0x212>
 8104f8a:	687b      	ldr	r3, [r7, #4]
 8104f8c:	4a17      	ldr	r2, [pc, #92]	@ (8104fec <HAL_GPIO_Init+0x264>)
 8104f8e:	4293      	cmp	r3, r2
 8104f90:	d101      	bne.n	8104f96 <HAL_GPIO_Init+0x20e>
 8104f92:	2309      	movs	r3, #9
 8104f94:	e02d      	b.n	8104ff2 <HAL_GPIO_Init+0x26a>
 8104f96:	230a      	movs	r3, #10
 8104f98:	e02b      	b.n	8104ff2 <HAL_GPIO_Init+0x26a>
 8104f9a:	2308      	movs	r3, #8
 8104f9c:	e029      	b.n	8104ff2 <HAL_GPIO_Init+0x26a>
 8104f9e:	2307      	movs	r3, #7
 8104fa0:	e027      	b.n	8104ff2 <HAL_GPIO_Init+0x26a>
 8104fa2:	2306      	movs	r3, #6
 8104fa4:	e025      	b.n	8104ff2 <HAL_GPIO_Init+0x26a>
 8104fa6:	2305      	movs	r3, #5
 8104fa8:	e023      	b.n	8104ff2 <HAL_GPIO_Init+0x26a>
 8104faa:	2304      	movs	r3, #4
 8104fac:	e021      	b.n	8104ff2 <HAL_GPIO_Init+0x26a>
 8104fae:	2303      	movs	r3, #3
 8104fb0:	e01f      	b.n	8104ff2 <HAL_GPIO_Init+0x26a>
 8104fb2:	2302      	movs	r3, #2
 8104fb4:	e01d      	b.n	8104ff2 <HAL_GPIO_Init+0x26a>
 8104fb6:	2301      	movs	r3, #1
 8104fb8:	e01b      	b.n	8104ff2 <HAL_GPIO_Init+0x26a>
 8104fba:	bf00      	nop
 8104fbc:	580000c0 	.word	0x580000c0
 8104fc0:	58024400 	.word	0x58024400
 8104fc4:	58000400 	.word	0x58000400
 8104fc8:	58020000 	.word	0x58020000
 8104fcc:	58020400 	.word	0x58020400
 8104fd0:	58020800 	.word	0x58020800
 8104fd4:	58020c00 	.word	0x58020c00
 8104fd8:	58021000 	.word	0x58021000
 8104fdc:	58021400 	.word	0x58021400
 8104fe0:	58021800 	.word	0x58021800
 8104fe4:	58021c00 	.word	0x58021c00
 8104fe8:	58022000 	.word	0x58022000
 8104fec:	58022400 	.word	0x58022400
 8104ff0:	2300      	movs	r3, #0
 8104ff2:	69fa      	ldr	r2, [r7, #28]
 8104ff4:	f002 0203 	and.w	r2, r2, #3
 8104ff8:	0092      	lsls	r2, r2, #2
 8104ffa:	4093      	lsls	r3, r2
 8104ffc:	69ba      	ldr	r2, [r7, #24]
 8104ffe:	4313      	orrs	r3, r2
 8105000:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8105002:	4938      	ldr	r1, [pc, #224]	@ (81050e4 <HAL_GPIO_Init+0x35c>)
 8105004:	69fb      	ldr	r3, [r7, #28]
 8105006:	089b      	lsrs	r3, r3, #2
 8105008:	3302      	adds	r3, #2
 810500a:	69ba      	ldr	r2, [r7, #24]
 810500c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8105010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8105014:	681b      	ldr	r3, [r3, #0]
 8105016:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105018:	693b      	ldr	r3, [r7, #16]
 810501a:	43db      	mvns	r3, r3
 810501c:	69ba      	ldr	r2, [r7, #24]
 810501e:	4013      	ands	r3, r2
 8105020:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8105022:	683b      	ldr	r3, [r7, #0]
 8105024:	685b      	ldr	r3, [r3, #4]
 8105026:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810502a:	2b00      	cmp	r3, #0
 810502c:	d003      	beq.n	8105036 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810502e:	69ba      	ldr	r2, [r7, #24]
 8105030:	693b      	ldr	r3, [r7, #16]
 8105032:	4313      	orrs	r3, r2
 8105034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8105036:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810503a:	69bb      	ldr	r3, [r7, #24]
 810503c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810503e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8105042:	685b      	ldr	r3, [r3, #4]
 8105044:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105046:	693b      	ldr	r3, [r7, #16]
 8105048:	43db      	mvns	r3, r3
 810504a:	69ba      	ldr	r2, [r7, #24]
 810504c:	4013      	ands	r3, r2
 810504e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8105050:	683b      	ldr	r3, [r7, #0]
 8105052:	685b      	ldr	r3, [r3, #4]
 8105054:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8105058:	2b00      	cmp	r3, #0
 810505a:	d003      	beq.n	8105064 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 810505c:	69ba      	ldr	r2, [r7, #24]
 810505e:	693b      	ldr	r3, [r7, #16]
 8105060:	4313      	orrs	r3, r2
 8105062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8105064:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8105068:	69bb      	ldr	r3, [r7, #24]
 810506a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 810506c:	697b      	ldr	r3, [r7, #20]
 810506e:	685b      	ldr	r3, [r3, #4]
 8105070:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105072:	693b      	ldr	r3, [r7, #16]
 8105074:	43db      	mvns	r3, r3
 8105076:	69ba      	ldr	r2, [r7, #24]
 8105078:	4013      	ands	r3, r2
 810507a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 810507c:	683b      	ldr	r3, [r7, #0]
 810507e:	685b      	ldr	r3, [r3, #4]
 8105080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8105084:	2b00      	cmp	r3, #0
 8105086:	d003      	beq.n	8105090 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8105088:	69ba      	ldr	r2, [r7, #24]
 810508a:	693b      	ldr	r3, [r7, #16]
 810508c:	4313      	orrs	r3, r2
 810508e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8105090:	697b      	ldr	r3, [r7, #20]
 8105092:	69ba      	ldr	r2, [r7, #24]
 8105094:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8105096:	697b      	ldr	r3, [r7, #20]
 8105098:	681b      	ldr	r3, [r3, #0]
 810509a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810509c:	693b      	ldr	r3, [r7, #16]
 810509e:	43db      	mvns	r3, r3
 81050a0:	69ba      	ldr	r2, [r7, #24]
 81050a2:	4013      	ands	r3, r2
 81050a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81050a6:	683b      	ldr	r3, [r7, #0]
 81050a8:	685b      	ldr	r3, [r3, #4]
 81050aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81050ae:	2b00      	cmp	r3, #0
 81050b0:	d003      	beq.n	81050ba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 81050b2:	69ba      	ldr	r2, [r7, #24]
 81050b4:	693b      	ldr	r3, [r7, #16]
 81050b6:	4313      	orrs	r3, r2
 81050b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 81050ba:	697b      	ldr	r3, [r7, #20]
 81050bc:	69ba      	ldr	r2, [r7, #24]
 81050be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 81050c0:	69fb      	ldr	r3, [r7, #28]
 81050c2:	3301      	adds	r3, #1
 81050c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81050c6:	683b      	ldr	r3, [r7, #0]
 81050c8:	681a      	ldr	r2, [r3, #0]
 81050ca:	69fb      	ldr	r3, [r7, #28]
 81050cc:	fa22 f303 	lsr.w	r3, r2, r3
 81050d0:	2b00      	cmp	r3, #0
 81050d2:	f47f ae63 	bne.w	8104d9c <HAL_GPIO_Init+0x14>
  }
}
 81050d6:	bf00      	nop
 81050d8:	bf00      	nop
 81050da:	3724      	adds	r7, #36	@ 0x24
 81050dc:	46bd      	mov	sp, r7
 81050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81050e2:	4770      	bx	lr
 81050e4:	58000400 	.word	0x58000400

081050e8 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 81050e8:	b480      	push	{r7}
 81050ea:	b083      	sub	sp, #12
 81050ec:	af00      	add	r7, sp, #0
 81050ee:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 81050f0:	4b05      	ldr	r3, [pc, #20]	@ (8105108 <HAL_HSEM_ActivateNotification+0x20>)
 81050f2:	681a      	ldr	r2, [r3, #0]
 81050f4:	4904      	ldr	r1, [pc, #16]	@ (8105108 <HAL_HSEM_ActivateNotification+0x20>)
 81050f6:	687b      	ldr	r3, [r7, #4]
 81050f8:	4313      	orrs	r3, r2
 81050fa:	600b      	str	r3, [r1, #0]
#endif
}
 81050fc:	bf00      	nop
 81050fe:	370c      	adds	r7, #12
 8105100:	46bd      	mov	sp, r7
 8105102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105106:	4770      	bx	lr
 8105108:	58026510 	.word	0x58026510

0810510c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 810510c:	b580      	push	{r7, lr}
 810510e:	b086      	sub	sp, #24
 8105110:	af02      	add	r7, sp, #8
 8105112:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8105114:	687b      	ldr	r3, [r7, #4]
 8105116:	2b00      	cmp	r3, #0
 8105118:	d101      	bne.n	810511e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 810511a:	2301      	movs	r3, #1
 810511c:	e0fe      	b.n	810531c <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 810511e:	687b      	ldr	r3, [r7, #4]
 8105120:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8105124:	b2db      	uxtb	r3, r3
 8105126:	2b00      	cmp	r3, #0
 8105128:	d106      	bne.n	8105138 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 810512a:	687b      	ldr	r3, [r7, #4]
 810512c:	2200      	movs	r2, #0
 810512e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8105132:	6878      	ldr	r0, [r7, #4]
 8105134:	f7fd f9d4 	bl	81024e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8105138:	687b      	ldr	r3, [r7, #4]
 810513a:	2203      	movs	r2, #3
 810513c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8105140:	687b      	ldr	r3, [r7, #4]
 8105142:	681b      	ldr	r3, [r3, #0]
 8105144:	4618      	mov	r0, r3
 8105146:	f007 ff7c 	bl	810d042 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 810514a:	687b      	ldr	r3, [r7, #4]
 810514c:	6818      	ldr	r0, [r3, #0]
 810514e:	687b      	ldr	r3, [r7, #4]
 8105150:	7c1a      	ldrb	r2, [r3, #16]
 8105152:	f88d 2000 	strb.w	r2, [sp]
 8105156:	3304      	adds	r3, #4
 8105158:	cb0e      	ldmia	r3, {r1, r2, r3}
 810515a:	f007 ff01 	bl	810cf60 <USB_CoreInit>
 810515e:	4603      	mov	r3, r0
 8105160:	2b00      	cmp	r3, #0
 8105162:	d005      	beq.n	8105170 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8105164:	687b      	ldr	r3, [r7, #4]
 8105166:	2202      	movs	r2, #2
 8105168:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 810516c:	2301      	movs	r3, #1
 810516e:	e0d5      	b.n	810531c <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8105170:	687b      	ldr	r3, [r7, #4]
 8105172:	681b      	ldr	r3, [r3, #0]
 8105174:	2100      	movs	r1, #0
 8105176:	4618      	mov	r0, r3
 8105178:	f007 ff74 	bl	810d064 <USB_SetCurrentMode>
 810517c:	4603      	mov	r3, r0
 810517e:	2b00      	cmp	r3, #0
 8105180:	d005      	beq.n	810518e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8105182:	687b      	ldr	r3, [r7, #4]
 8105184:	2202      	movs	r2, #2
 8105186:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 810518a:	2301      	movs	r3, #1
 810518c:	e0c6      	b.n	810531c <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810518e:	2300      	movs	r3, #0
 8105190:	73fb      	strb	r3, [r7, #15]
 8105192:	e04a      	b.n	810522a <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8105194:	7bfa      	ldrb	r2, [r7, #15]
 8105196:	6879      	ldr	r1, [r7, #4]
 8105198:	4613      	mov	r3, r2
 810519a:	00db      	lsls	r3, r3, #3
 810519c:	4413      	add	r3, r2
 810519e:	009b      	lsls	r3, r3, #2
 81051a0:	440b      	add	r3, r1
 81051a2:	3315      	adds	r3, #21
 81051a4:	2201      	movs	r2, #1
 81051a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 81051a8:	7bfa      	ldrb	r2, [r7, #15]
 81051aa:	6879      	ldr	r1, [r7, #4]
 81051ac:	4613      	mov	r3, r2
 81051ae:	00db      	lsls	r3, r3, #3
 81051b0:	4413      	add	r3, r2
 81051b2:	009b      	lsls	r3, r3, #2
 81051b4:	440b      	add	r3, r1
 81051b6:	3314      	adds	r3, #20
 81051b8:	7bfa      	ldrb	r2, [r7, #15]
 81051ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 81051bc:	7bfa      	ldrb	r2, [r7, #15]
 81051be:	7bfb      	ldrb	r3, [r7, #15]
 81051c0:	b298      	uxth	r0, r3
 81051c2:	6879      	ldr	r1, [r7, #4]
 81051c4:	4613      	mov	r3, r2
 81051c6:	00db      	lsls	r3, r3, #3
 81051c8:	4413      	add	r3, r2
 81051ca:	009b      	lsls	r3, r3, #2
 81051cc:	440b      	add	r3, r1
 81051ce:	332e      	adds	r3, #46	@ 0x2e
 81051d0:	4602      	mov	r2, r0
 81051d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 81051d4:	7bfa      	ldrb	r2, [r7, #15]
 81051d6:	6879      	ldr	r1, [r7, #4]
 81051d8:	4613      	mov	r3, r2
 81051da:	00db      	lsls	r3, r3, #3
 81051dc:	4413      	add	r3, r2
 81051de:	009b      	lsls	r3, r3, #2
 81051e0:	440b      	add	r3, r1
 81051e2:	3318      	adds	r3, #24
 81051e4:	2200      	movs	r2, #0
 81051e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 81051e8:	7bfa      	ldrb	r2, [r7, #15]
 81051ea:	6879      	ldr	r1, [r7, #4]
 81051ec:	4613      	mov	r3, r2
 81051ee:	00db      	lsls	r3, r3, #3
 81051f0:	4413      	add	r3, r2
 81051f2:	009b      	lsls	r3, r3, #2
 81051f4:	440b      	add	r3, r1
 81051f6:	331c      	adds	r3, #28
 81051f8:	2200      	movs	r2, #0
 81051fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 81051fc:	7bfa      	ldrb	r2, [r7, #15]
 81051fe:	6879      	ldr	r1, [r7, #4]
 8105200:	4613      	mov	r3, r2
 8105202:	00db      	lsls	r3, r3, #3
 8105204:	4413      	add	r3, r2
 8105206:	009b      	lsls	r3, r3, #2
 8105208:	440b      	add	r3, r1
 810520a:	3320      	adds	r3, #32
 810520c:	2200      	movs	r2, #0
 810520e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8105210:	7bfa      	ldrb	r2, [r7, #15]
 8105212:	6879      	ldr	r1, [r7, #4]
 8105214:	4613      	mov	r3, r2
 8105216:	00db      	lsls	r3, r3, #3
 8105218:	4413      	add	r3, r2
 810521a:	009b      	lsls	r3, r3, #2
 810521c:	440b      	add	r3, r1
 810521e:	3324      	adds	r3, #36	@ 0x24
 8105220:	2200      	movs	r2, #0
 8105222:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8105224:	7bfb      	ldrb	r3, [r7, #15]
 8105226:	3301      	adds	r3, #1
 8105228:	73fb      	strb	r3, [r7, #15]
 810522a:	687b      	ldr	r3, [r7, #4]
 810522c:	791b      	ldrb	r3, [r3, #4]
 810522e:	7bfa      	ldrb	r2, [r7, #15]
 8105230:	429a      	cmp	r2, r3
 8105232:	d3af      	bcc.n	8105194 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8105234:	2300      	movs	r3, #0
 8105236:	73fb      	strb	r3, [r7, #15]
 8105238:	e044      	b.n	81052c4 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 810523a:	7bfa      	ldrb	r2, [r7, #15]
 810523c:	6879      	ldr	r1, [r7, #4]
 810523e:	4613      	mov	r3, r2
 8105240:	00db      	lsls	r3, r3, #3
 8105242:	4413      	add	r3, r2
 8105244:	009b      	lsls	r3, r3, #2
 8105246:	440b      	add	r3, r1
 8105248:	f203 2355 	addw	r3, r3, #597	@ 0x255
 810524c:	2200      	movs	r2, #0
 810524e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8105250:	7bfa      	ldrb	r2, [r7, #15]
 8105252:	6879      	ldr	r1, [r7, #4]
 8105254:	4613      	mov	r3, r2
 8105256:	00db      	lsls	r3, r3, #3
 8105258:	4413      	add	r3, r2
 810525a:	009b      	lsls	r3, r3, #2
 810525c:	440b      	add	r3, r1
 810525e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8105262:	7bfa      	ldrb	r2, [r7, #15]
 8105264:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8105266:	7bfa      	ldrb	r2, [r7, #15]
 8105268:	6879      	ldr	r1, [r7, #4]
 810526a:	4613      	mov	r3, r2
 810526c:	00db      	lsls	r3, r3, #3
 810526e:	4413      	add	r3, r2
 8105270:	009b      	lsls	r3, r3, #2
 8105272:	440b      	add	r3, r1
 8105274:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8105278:	2200      	movs	r2, #0
 810527a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 810527c:	7bfa      	ldrb	r2, [r7, #15]
 810527e:	6879      	ldr	r1, [r7, #4]
 8105280:	4613      	mov	r3, r2
 8105282:	00db      	lsls	r3, r3, #3
 8105284:	4413      	add	r3, r2
 8105286:	009b      	lsls	r3, r3, #2
 8105288:	440b      	add	r3, r1
 810528a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 810528e:	2200      	movs	r2, #0
 8105290:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8105292:	7bfa      	ldrb	r2, [r7, #15]
 8105294:	6879      	ldr	r1, [r7, #4]
 8105296:	4613      	mov	r3, r2
 8105298:	00db      	lsls	r3, r3, #3
 810529a:	4413      	add	r3, r2
 810529c:	009b      	lsls	r3, r3, #2
 810529e:	440b      	add	r3, r1
 81052a0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 81052a4:	2200      	movs	r2, #0
 81052a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 81052a8:	7bfa      	ldrb	r2, [r7, #15]
 81052aa:	6879      	ldr	r1, [r7, #4]
 81052ac:	4613      	mov	r3, r2
 81052ae:	00db      	lsls	r3, r3, #3
 81052b0:	4413      	add	r3, r2
 81052b2:	009b      	lsls	r3, r3, #2
 81052b4:	440b      	add	r3, r1
 81052b6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 81052ba:	2200      	movs	r2, #0
 81052bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 81052be:	7bfb      	ldrb	r3, [r7, #15]
 81052c0:	3301      	adds	r3, #1
 81052c2:	73fb      	strb	r3, [r7, #15]
 81052c4:	687b      	ldr	r3, [r7, #4]
 81052c6:	791b      	ldrb	r3, [r3, #4]
 81052c8:	7bfa      	ldrb	r2, [r7, #15]
 81052ca:	429a      	cmp	r2, r3
 81052cc:	d3b5      	bcc.n	810523a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 81052ce:	687b      	ldr	r3, [r7, #4]
 81052d0:	6818      	ldr	r0, [r3, #0]
 81052d2:	687b      	ldr	r3, [r7, #4]
 81052d4:	7c1a      	ldrb	r2, [r3, #16]
 81052d6:	f88d 2000 	strb.w	r2, [sp]
 81052da:	3304      	adds	r3, #4
 81052dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 81052de:	f007 ff0d 	bl	810d0fc <USB_DevInit>
 81052e2:	4603      	mov	r3, r0
 81052e4:	2b00      	cmp	r3, #0
 81052e6:	d005      	beq.n	81052f4 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81052e8:	687b      	ldr	r3, [r7, #4]
 81052ea:	2202      	movs	r2, #2
 81052ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 81052f0:	2301      	movs	r3, #1
 81052f2:	e013      	b.n	810531c <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 81052f4:	687b      	ldr	r3, [r7, #4]
 81052f6:	2200      	movs	r2, #0
 81052f8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 81052fa:	687b      	ldr	r3, [r7, #4]
 81052fc:	2201      	movs	r2, #1
 81052fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8105302:	687b      	ldr	r3, [r7, #4]
 8105304:	7b1b      	ldrb	r3, [r3, #12]
 8105306:	2b01      	cmp	r3, #1
 8105308:	d102      	bne.n	8105310 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 810530a:	6878      	ldr	r0, [r7, #4]
 810530c:	f000 f80a 	bl	8105324 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8105310:	687b      	ldr	r3, [r7, #4]
 8105312:	681b      	ldr	r3, [r3, #0]
 8105314:	4618      	mov	r0, r3
 8105316:	f008 f8c8 	bl	810d4aa <USB_DevDisconnect>

  return HAL_OK;
 810531a:	2300      	movs	r3, #0
}
 810531c:	4618      	mov	r0, r3
 810531e:	3710      	adds	r7, #16
 8105320:	46bd      	mov	sp, r7
 8105322:	bd80      	pop	{r7, pc}

08105324 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8105324:	b480      	push	{r7}
 8105326:	b085      	sub	sp, #20
 8105328:	af00      	add	r7, sp, #0
 810532a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 810532c:	687b      	ldr	r3, [r7, #4]
 810532e:	681b      	ldr	r3, [r3, #0]
 8105330:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8105332:	687b      	ldr	r3, [r7, #4]
 8105334:	2201      	movs	r2, #1
 8105336:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 810533a:	687b      	ldr	r3, [r7, #4]
 810533c:	2200      	movs	r2, #0
 810533e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8105342:	68fb      	ldr	r3, [r7, #12]
 8105344:	699b      	ldr	r3, [r3, #24]
 8105346:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 810534a:	68fb      	ldr	r3, [r7, #12]
 810534c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 810534e:	68fb      	ldr	r3, [r7, #12]
 8105350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8105352:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8105356:	f043 0303 	orr.w	r3, r3, #3
 810535a:	68fa      	ldr	r2, [r7, #12]
 810535c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 810535e:	2300      	movs	r3, #0
}
 8105360:	4618      	mov	r0, r3
 8105362:	3714      	adds	r7, #20
 8105364:	46bd      	mov	sp, r7
 8105366:	f85d 7b04 	ldr.w	r7, [sp], #4
 810536a:	4770      	bx	lr

0810536c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810536c:	b580      	push	{r7, lr}
 810536e:	b084      	sub	sp, #16
 8105370:	af00      	add	r7, sp, #0
 8105372:	60f8      	str	r0, [r7, #12]
 8105374:	460b      	mov	r3, r1
 8105376:	607a      	str	r2, [r7, #4]
 8105378:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810537a:	4b37      	ldr	r3, [pc, #220]	@ (8105458 <HAL_PWREx_EnterSTOPMode+0xec>)
 810537c:	681b      	ldr	r3, [r3, #0]
 810537e:	f023 0201 	bic.w	r2, r3, #1
 8105382:	4935      	ldr	r1, [pc, #212]	@ (8105458 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105384:	68fb      	ldr	r3, [r7, #12]
 8105386:	4313      	orrs	r3, r2
 8105388:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810538a:	687b      	ldr	r3, [r7, #4]
 810538c:	2b00      	cmp	r3, #0
 810538e:	d123      	bne.n	81053d8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8105390:	f7fe ffa0 	bl	81042d4 <HAL_GetCurrentCPUID>
 8105394:	4603      	mov	r3, r0
 8105396:	2b03      	cmp	r3, #3
 8105398:	d158      	bne.n	810544c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810539a:	4b2f      	ldr	r3, [pc, #188]	@ (8105458 <HAL_PWREx_EnterSTOPMode+0xec>)
 810539c:	691b      	ldr	r3, [r3, #16]
 810539e:	4a2e      	ldr	r2, [pc, #184]	@ (8105458 <HAL_PWREx_EnterSTOPMode+0xec>)
 81053a0:	f023 0301 	bic.w	r3, r3, #1
 81053a4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81053a6:	4b2d      	ldr	r3, [pc, #180]	@ (810545c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81053a8:	691b      	ldr	r3, [r3, #16]
 81053aa:	4a2c      	ldr	r2, [pc, #176]	@ (810545c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81053ac:	f043 0304 	orr.w	r3, r3, #4
 81053b0:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81053b2:	f3bf 8f4f 	dsb	sy
}
 81053b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81053b8:	f3bf 8f6f 	isb	sy
}
 81053bc:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81053be:	7afb      	ldrb	r3, [r7, #11]
 81053c0:	2b01      	cmp	r3, #1
 81053c2:	d101      	bne.n	81053c8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81053c4:	bf30      	wfi
 81053c6:	e000      	b.n	81053ca <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81053c8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81053ca:	4b24      	ldr	r3, [pc, #144]	@ (810545c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81053cc:	691b      	ldr	r3, [r3, #16]
 81053ce:	4a23      	ldr	r2, [pc, #140]	@ (810545c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81053d0:	f023 0304 	bic.w	r3, r3, #4
 81053d4:	6113      	str	r3, [r2, #16]
 81053d6:	e03c      	b.n	8105452 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81053d8:	687b      	ldr	r3, [r7, #4]
 81053da:	2b01      	cmp	r3, #1
 81053dc:	d123      	bne.n	8105426 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81053de:	f7fe ff79 	bl	81042d4 <HAL_GetCurrentCPUID>
 81053e2:	4603      	mov	r3, r0
 81053e4:	2b01      	cmp	r3, #1
 81053e6:	d133      	bne.n	8105450 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81053e8:	4b1b      	ldr	r3, [pc, #108]	@ (8105458 <HAL_PWREx_EnterSTOPMode+0xec>)
 81053ea:	695b      	ldr	r3, [r3, #20]
 81053ec:	4a1a      	ldr	r2, [pc, #104]	@ (8105458 <HAL_PWREx_EnterSTOPMode+0xec>)
 81053ee:	f023 0302 	bic.w	r3, r3, #2
 81053f2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81053f4:	4b19      	ldr	r3, [pc, #100]	@ (810545c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81053f6:	691b      	ldr	r3, [r3, #16]
 81053f8:	4a18      	ldr	r2, [pc, #96]	@ (810545c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81053fa:	f043 0304 	orr.w	r3, r3, #4
 81053fe:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105400:	f3bf 8f4f 	dsb	sy
}
 8105404:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105406:	f3bf 8f6f 	isb	sy
}
 810540a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810540c:	7afb      	ldrb	r3, [r7, #11]
 810540e:	2b01      	cmp	r3, #1
 8105410:	d101      	bne.n	8105416 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105412:	bf30      	wfi
 8105414:	e000      	b.n	8105418 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105416:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105418:	4b10      	ldr	r3, [pc, #64]	@ (810545c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810541a:	691b      	ldr	r3, [r3, #16]
 810541c:	4a0f      	ldr	r2, [pc, #60]	@ (810545c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810541e:	f023 0304 	bic.w	r3, r3, #4
 8105422:	6113      	str	r3, [r2, #16]
 8105424:	e015      	b.n	8105452 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105426:	f7fe ff55 	bl	81042d4 <HAL_GetCurrentCPUID>
 810542a:	4603      	mov	r3, r0
 810542c:	2b03      	cmp	r3, #3
 810542e:	d106      	bne.n	810543e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8105430:	4b09      	ldr	r3, [pc, #36]	@ (8105458 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105432:	691b      	ldr	r3, [r3, #16]
 8105434:	4a08      	ldr	r2, [pc, #32]	@ (8105458 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105436:	f023 0304 	bic.w	r3, r3, #4
 810543a:	6113      	str	r3, [r2, #16]
 810543c:	e009      	b.n	8105452 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810543e:	4b06      	ldr	r3, [pc, #24]	@ (8105458 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105440:	695b      	ldr	r3, [r3, #20]
 8105442:	4a05      	ldr	r2, [pc, #20]	@ (8105458 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105444:	f023 0304 	bic.w	r3, r3, #4
 8105448:	6153      	str	r3, [r2, #20]
 810544a:	e002      	b.n	8105452 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810544c:	bf00      	nop
 810544e:	e000      	b.n	8105452 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105450:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8105452:	3710      	adds	r7, #16
 8105454:	46bd      	mov	sp, r7
 8105456:	bd80      	pop	{r7, pc}
 8105458:	58024800 	.word	0x58024800
 810545c:	e000ed00 	.word	0xe000ed00

08105460 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8105460:	b580      	push	{r7, lr}
 8105462:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105464:	f7fe ff36 	bl	81042d4 <HAL_GetCurrentCPUID>
 8105468:	4603      	mov	r3, r0
 810546a:	2b03      	cmp	r3, #3
 810546c:	d101      	bne.n	8105472 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810546e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8105470:	e001      	b.n	8105476 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8105472:	bf40      	sev
    __WFE ();
 8105474:	bf20      	wfe
}
 8105476:	bf00      	nop
 8105478:	bd80      	pop	{r7, pc}
	...

0810547c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 810547c:	b480      	push	{r7}
 810547e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8105480:	4b05      	ldr	r3, [pc, #20]	@ (8105498 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8105482:	68db      	ldr	r3, [r3, #12]
 8105484:	4a04      	ldr	r2, [pc, #16]	@ (8105498 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8105486:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810548a:	60d3      	str	r3, [r2, #12]
}
 810548c:	bf00      	nop
 810548e:	46bd      	mov	sp, r7
 8105490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105494:	4770      	bx	lr
 8105496:	bf00      	nop
 8105498:	58024800 	.word	0x58024800

0810549c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 810549c:	b580      	push	{r7, lr}
 810549e:	b086      	sub	sp, #24
 81054a0:	af02      	add	r7, sp, #8
 81054a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 81054a4:	f7fd fbde 	bl	8102c64 <HAL_GetTick>
 81054a8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 81054aa:	687b      	ldr	r3, [r7, #4]
 81054ac:	2b00      	cmp	r3, #0
 81054ae:	d101      	bne.n	81054b4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 81054b0:	2301      	movs	r3, #1
 81054b2:	e061      	b.n	8105578 <HAL_QSPI_Init+0xdc>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 81054b4:	687b      	ldr	r3, [r7, #4]
 81054b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81054ba:	b2db      	uxtb	r3, r3
 81054bc:	2b00      	cmp	r3, #0
 81054be:	d107      	bne.n	81054d0 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 81054c0:	6878      	ldr	r0, [r7, #4]
 81054c2:	f7fc facb 	bl	8101a5c <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 81054c6:	f241 3188 	movw	r1, #5000	@ 0x1388
 81054ca:	6878      	ldr	r0, [r7, #4]
 81054cc:	f000 f85a 	bl	8105584 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 81054d0:	687b      	ldr	r3, [r7, #4]
 81054d2:	681b      	ldr	r3, [r3, #0]
 81054d4:	681b      	ldr	r3, [r3, #0]
 81054d6:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 81054da:	687b      	ldr	r3, [r7, #4]
 81054dc:	689b      	ldr	r3, [r3, #8]
 81054de:	3b01      	subs	r3, #1
 81054e0:	021a      	lsls	r2, r3, #8
 81054e2:	687b      	ldr	r3, [r7, #4]
 81054e4:	681b      	ldr	r3, [r3, #0]
 81054e6:	430a      	orrs	r2, r1
 81054e8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 81054ea:	687b      	ldr	r3, [r7, #4]
 81054ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81054ee:	9300      	str	r3, [sp, #0]
 81054f0:	68fb      	ldr	r3, [r7, #12]
 81054f2:	2200      	movs	r2, #0
 81054f4:	2120      	movs	r1, #32
 81054f6:	6878      	ldr	r0, [r7, #4]
 81054f8:	f000 f852 	bl	81055a0 <QSPI_WaitFlagStateUntilTimeout>
 81054fc:	4603      	mov	r3, r0
 81054fe:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8105500:	7afb      	ldrb	r3, [r7, #11]
 8105502:	2b00      	cmp	r3, #0
 8105504:	d137      	bne.n	8105576 <HAL_QSPI_Init+0xda>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8105506:	687b      	ldr	r3, [r7, #4]
 8105508:	681b      	ldr	r3, [r3, #0]
 810550a:	681b      	ldr	r3, [r3, #0]
 810550c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8105510:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8105514:	687a      	ldr	r2, [r7, #4]
 8105516:	6852      	ldr	r2, [r2, #4]
 8105518:	0611      	lsls	r1, r2, #24
 810551a:	687a      	ldr	r2, [r7, #4]
 810551c:	68d2      	ldr	r2, [r2, #12]
 810551e:	4311      	orrs	r1, r2
 8105520:	687a      	ldr	r2, [r7, #4]
 8105522:	69d2      	ldr	r2, [r2, #28]
 8105524:	4311      	orrs	r1, r2
 8105526:	687a      	ldr	r2, [r7, #4]
 8105528:	6a12      	ldr	r2, [r2, #32]
 810552a:	4311      	orrs	r1, r2
 810552c:	687a      	ldr	r2, [r7, #4]
 810552e:	6812      	ldr	r2, [r2, #0]
 8105530:	430b      	orrs	r3, r1
 8105532:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8105534:	687b      	ldr	r3, [r7, #4]
 8105536:	681b      	ldr	r3, [r3, #0]
 8105538:	685a      	ldr	r2, [r3, #4]
 810553a:	4b11      	ldr	r3, [pc, #68]	@ (8105580 <HAL_QSPI_Init+0xe4>)
 810553c:	4013      	ands	r3, r2
 810553e:	687a      	ldr	r2, [r7, #4]
 8105540:	6912      	ldr	r2, [r2, #16]
 8105542:	0411      	lsls	r1, r2, #16
 8105544:	687a      	ldr	r2, [r7, #4]
 8105546:	6952      	ldr	r2, [r2, #20]
 8105548:	4311      	orrs	r1, r2
 810554a:	687a      	ldr	r2, [r7, #4]
 810554c:	6992      	ldr	r2, [r2, #24]
 810554e:	4311      	orrs	r1, r2
 8105550:	687a      	ldr	r2, [r7, #4]
 8105552:	6812      	ldr	r2, [r2, #0]
 8105554:	430b      	orrs	r3, r1
 8105556:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8105558:	687b      	ldr	r3, [r7, #4]
 810555a:	681b      	ldr	r3, [r3, #0]
 810555c:	681a      	ldr	r2, [r3, #0]
 810555e:	687b      	ldr	r3, [r7, #4]
 8105560:	681b      	ldr	r3, [r3, #0]
 8105562:	f042 0201 	orr.w	r2, r2, #1
 8105566:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8105568:	687b      	ldr	r3, [r7, #4]
 810556a:	2200      	movs	r2, #0
 810556c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 810556e:	687b      	ldr	r3, [r7, #4]
 8105570:	2201      	movs	r2, #1
 8105572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8105576:	7afb      	ldrb	r3, [r7, #11]
}
 8105578:	4618      	mov	r0, r3
 810557a:	3710      	adds	r7, #16
 810557c:	46bd      	mov	sp, r7
 810557e:	bd80      	pop	{r7, pc}
 8105580:	ffe0f8fe 	.word	0xffe0f8fe

08105584 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8105584:	b480      	push	{r7}
 8105586:	b083      	sub	sp, #12
 8105588:	af00      	add	r7, sp, #0
 810558a:	6078      	str	r0, [r7, #4]
 810558c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 810558e:	687b      	ldr	r3, [r7, #4]
 8105590:	683a      	ldr	r2, [r7, #0]
 8105592:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8105594:	bf00      	nop
 8105596:	370c      	adds	r7, #12
 8105598:	46bd      	mov	sp, r7
 810559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810559e:	4770      	bx	lr

081055a0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 81055a0:	b580      	push	{r7, lr}
 81055a2:	b084      	sub	sp, #16
 81055a4:	af00      	add	r7, sp, #0
 81055a6:	60f8      	str	r0, [r7, #12]
 81055a8:	60b9      	str	r1, [r7, #8]
 81055aa:	603b      	str	r3, [r7, #0]
 81055ac:	4613      	mov	r3, r2
 81055ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 81055b0:	e01a      	b.n	81055e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 81055b2:	69bb      	ldr	r3, [r7, #24]
 81055b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 81055b8:	d016      	beq.n	81055e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 81055ba:	f7fd fb53 	bl	8102c64 <HAL_GetTick>
 81055be:	4602      	mov	r2, r0
 81055c0:	683b      	ldr	r3, [r7, #0]
 81055c2:	1ad3      	subs	r3, r2, r3
 81055c4:	69ba      	ldr	r2, [r7, #24]
 81055c6:	429a      	cmp	r2, r3
 81055c8:	d302      	bcc.n	81055d0 <QSPI_WaitFlagStateUntilTimeout+0x30>
 81055ca:	69bb      	ldr	r3, [r7, #24]
 81055cc:	2b00      	cmp	r3, #0
 81055ce:	d10b      	bne.n	81055e8 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 81055d0:	68fb      	ldr	r3, [r7, #12]
 81055d2:	2204      	movs	r2, #4
 81055d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 81055d8:	68fb      	ldr	r3, [r7, #12]
 81055da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81055dc:	f043 0201 	orr.w	r2, r3, #1
 81055e0:	68fb      	ldr	r3, [r7, #12]
 81055e2:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 81055e4:	2301      	movs	r3, #1
 81055e6:	e00e      	b.n	8105606 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 81055e8:	68fb      	ldr	r3, [r7, #12]
 81055ea:	681b      	ldr	r3, [r3, #0]
 81055ec:	689a      	ldr	r2, [r3, #8]
 81055ee:	68bb      	ldr	r3, [r7, #8]
 81055f0:	4013      	ands	r3, r2
 81055f2:	2b00      	cmp	r3, #0
 81055f4:	bf14      	ite	ne
 81055f6:	2301      	movne	r3, #1
 81055f8:	2300      	moveq	r3, #0
 81055fa:	b2db      	uxtb	r3, r3
 81055fc:	461a      	mov	r2, r3
 81055fe:	79fb      	ldrb	r3, [r7, #7]
 8105600:	429a      	cmp	r2, r3
 8105602:	d1d6      	bne.n	81055b2 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8105604:	2300      	movs	r3, #0
}
 8105606:	4618      	mov	r0, r3
 8105608:	3710      	adds	r7, #16
 810560a:	46bd      	mov	sp, r7
 810560c:	bd80      	pop	{r7, pc}
	...

08105610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8105610:	b480      	push	{r7}
 8105612:	b089      	sub	sp, #36	@ 0x24
 8105614:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105616:	4bb3      	ldr	r3, [pc, #716]	@ (81058e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105618:	691b      	ldr	r3, [r3, #16]
 810561a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810561e:	2b18      	cmp	r3, #24
 8105620:	f200 8155 	bhi.w	81058ce <HAL_RCC_GetSysClockFreq+0x2be>
 8105624:	a201      	add	r2, pc, #4	@ (adr r2, 810562c <HAL_RCC_GetSysClockFreq+0x1c>)
 8105626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810562a:	bf00      	nop
 810562c:	08105691 	.word	0x08105691
 8105630:	081058cf 	.word	0x081058cf
 8105634:	081058cf 	.word	0x081058cf
 8105638:	081058cf 	.word	0x081058cf
 810563c:	081058cf 	.word	0x081058cf
 8105640:	081058cf 	.word	0x081058cf
 8105644:	081058cf 	.word	0x081058cf
 8105648:	081058cf 	.word	0x081058cf
 810564c:	081056b7 	.word	0x081056b7
 8105650:	081058cf 	.word	0x081058cf
 8105654:	081058cf 	.word	0x081058cf
 8105658:	081058cf 	.word	0x081058cf
 810565c:	081058cf 	.word	0x081058cf
 8105660:	081058cf 	.word	0x081058cf
 8105664:	081058cf 	.word	0x081058cf
 8105668:	081058cf 	.word	0x081058cf
 810566c:	081056bd 	.word	0x081056bd
 8105670:	081058cf 	.word	0x081058cf
 8105674:	081058cf 	.word	0x081058cf
 8105678:	081058cf 	.word	0x081058cf
 810567c:	081058cf 	.word	0x081058cf
 8105680:	081058cf 	.word	0x081058cf
 8105684:	081058cf 	.word	0x081058cf
 8105688:	081058cf 	.word	0x081058cf
 810568c:	081056c3 	.word	0x081056c3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105690:	4b94      	ldr	r3, [pc, #592]	@ (81058e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105692:	681b      	ldr	r3, [r3, #0]
 8105694:	f003 0320 	and.w	r3, r3, #32
 8105698:	2b00      	cmp	r3, #0
 810569a:	d009      	beq.n	81056b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810569c:	4b91      	ldr	r3, [pc, #580]	@ (81058e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810569e:	681b      	ldr	r3, [r3, #0]
 81056a0:	08db      	lsrs	r3, r3, #3
 81056a2:	f003 0303 	and.w	r3, r3, #3
 81056a6:	4a90      	ldr	r2, [pc, #576]	@ (81058e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81056a8:	fa22 f303 	lsr.w	r3, r2, r3
 81056ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81056ae:	e111      	b.n	81058d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81056b0:	4b8d      	ldr	r3, [pc, #564]	@ (81058e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81056b2:	61bb      	str	r3, [r7, #24]
      break;
 81056b4:	e10e      	b.n	81058d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81056b6:	4b8d      	ldr	r3, [pc, #564]	@ (81058ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 81056b8:	61bb      	str	r3, [r7, #24]
      break;
 81056ba:	e10b      	b.n	81058d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81056bc:	4b8c      	ldr	r3, [pc, #560]	@ (81058f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81056be:	61bb      	str	r3, [r7, #24]
      break;
 81056c0:	e108      	b.n	81058d4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81056c2:	4b88      	ldr	r3, [pc, #544]	@ (81058e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81056c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81056c6:	f003 0303 	and.w	r3, r3, #3
 81056ca:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81056cc:	4b85      	ldr	r3, [pc, #532]	@ (81058e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81056ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81056d0:	091b      	lsrs	r3, r3, #4
 81056d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81056d6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81056d8:	4b82      	ldr	r3, [pc, #520]	@ (81058e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81056da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81056dc:	f003 0301 	and.w	r3, r3, #1
 81056e0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81056e2:	4b80      	ldr	r3, [pc, #512]	@ (81058e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81056e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81056e6:	08db      	lsrs	r3, r3, #3
 81056e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81056ec:	68fa      	ldr	r2, [r7, #12]
 81056ee:	fb02 f303 	mul.w	r3, r2, r3
 81056f2:	ee07 3a90 	vmov	s15, r3
 81056f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056fa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 81056fe:	693b      	ldr	r3, [r7, #16]
 8105700:	2b00      	cmp	r3, #0
 8105702:	f000 80e1 	beq.w	81058c8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8105706:	697b      	ldr	r3, [r7, #20]
 8105708:	2b02      	cmp	r3, #2
 810570a:	f000 8083 	beq.w	8105814 <HAL_RCC_GetSysClockFreq+0x204>
 810570e:	697b      	ldr	r3, [r7, #20]
 8105710:	2b02      	cmp	r3, #2
 8105712:	f200 80a1 	bhi.w	8105858 <HAL_RCC_GetSysClockFreq+0x248>
 8105716:	697b      	ldr	r3, [r7, #20]
 8105718:	2b00      	cmp	r3, #0
 810571a:	d003      	beq.n	8105724 <HAL_RCC_GetSysClockFreq+0x114>
 810571c:	697b      	ldr	r3, [r7, #20]
 810571e:	2b01      	cmp	r3, #1
 8105720:	d056      	beq.n	81057d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8105722:	e099      	b.n	8105858 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105724:	4b6f      	ldr	r3, [pc, #444]	@ (81058e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105726:	681b      	ldr	r3, [r3, #0]
 8105728:	f003 0320 	and.w	r3, r3, #32
 810572c:	2b00      	cmp	r3, #0
 810572e:	d02d      	beq.n	810578c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105730:	4b6c      	ldr	r3, [pc, #432]	@ (81058e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105732:	681b      	ldr	r3, [r3, #0]
 8105734:	08db      	lsrs	r3, r3, #3
 8105736:	f003 0303 	and.w	r3, r3, #3
 810573a:	4a6b      	ldr	r2, [pc, #428]	@ (81058e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810573c:	fa22 f303 	lsr.w	r3, r2, r3
 8105740:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105742:	687b      	ldr	r3, [r7, #4]
 8105744:	ee07 3a90 	vmov	s15, r3
 8105748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810574c:	693b      	ldr	r3, [r7, #16]
 810574e:	ee07 3a90 	vmov	s15, r3
 8105752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105756:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810575a:	4b62      	ldr	r3, [pc, #392]	@ (81058e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810575c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810575e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105762:	ee07 3a90 	vmov	s15, r3
 8105766:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810576a:	ed97 6a02 	vldr	s12, [r7, #8]
 810576e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81058f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105772:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105776:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810577a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810577e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105786:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810578a:	e087      	b.n	810589c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810578c:	693b      	ldr	r3, [r7, #16]
 810578e:	ee07 3a90 	vmov	s15, r3
 8105792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105796:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81058f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 810579a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810579e:	4b51      	ldr	r3, [pc, #324]	@ (81058e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81057a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81057a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81057a6:	ee07 3a90 	vmov	s15, r3
 81057aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057ae:	ed97 6a02 	vldr	s12, [r7, #8]
 81057b2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81058f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81057b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81057ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81057be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81057c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81057c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81057ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81057ce:	e065      	b.n	810589c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81057d0:	693b      	ldr	r3, [r7, #16]
 81057d2:	ee07 3a90 	vmov	s15, r3
 81057d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057da:	eddf 6a48 	vldr	s13, [pc, #288]	@ 81058fc <HAL_RCC_GetSysClockFreq+0x2ec>
 81057de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81057e2:	4b40      	ldr	r3, [pc, #256]	@ (81058e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81057e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81057e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81057ea:	ee07 3a90 	vmov	s15, r3
 81057ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81057f2:	ed97 6a02 	vldr	s12, [r7, #8]
 81057f6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81058f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 81057fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81057fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105802:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105806:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810580a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810580e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105812:	e043      	b.n	810589c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105814:	693b      	ldr	r3, [r7, #16]
 8105816:	ee07 3a90 	vmov	s15, r3
 810581a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810581e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8105900 <HAL_RCC_GetSysClockFreq+0x2f0>
 8105822:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105826:	4b2f      	ldr	r3, [pc, #188]	@ (81058e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810582a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810582e:	ee07 3a90 	vmov	s15, r3
 8105832:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105836:	ed97 6a02 	vldr	s12, [r7, #8]
 810583a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81058f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 810583e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105842:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105846:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810584a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810584e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105852:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105856:	e021      	b.n	810589c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105858:	693b      	ldr	r3, [r7, #16]
 810585a:	ee07 3a90 	vmov	s15, r3
 810585e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105862:	eddf 6a26 	vldr	s13, [pc, #152]	@ 81058fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8105866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810586a:	4b1e      	ldr	r3, [pc, #120]	@ (81058e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810586c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810586e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105872:	ee07 3a90 	vmov	s15, r3
 8105876:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810587a:	ed97 6a02 	vldr	s12, [r7, #8]
 810587e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81058f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105882:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810588a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810588e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105892:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105896:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810589a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 810589c:	4b11      	ldr	r3, [pc, #68]	@ (81058e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810589e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81058a0:	0a5b      	lsrs	r3, r3, #9
 81058a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81058a6:	3301      	adds	r3, #1
 81058a8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81058aa:	683b      	ldr	r3, [r7, #0]
 81058ac:	ee07 3a90 	vmov	s15, r3
 81058b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81058b4:	edd7 6a07 	vldr	s13, [r7, #28]
 81058b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81058bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81058c0:	ee17 3a90 	vmov	r3, s15
 81058c4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81058c6:	e005      	b.n	81058d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81058c8:	2300      	movs	r3, #0
 81058ca:	61bb      	str	r3, [r7, #24]
      break;
 81058cc:	e002      	b.n	81058d4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81058ce:	4b07      	ldr	r3, [pc, #28]	@ (81058ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 81058d0:	61bb      	str	r3, [r7, #24]
      break;
 81058d2:	bf00      	nop
  }

  return sysclockfreq;
 81058d4:	69bb      	ldr	r3, [r7, #24]
}
 81058d6:	4618      	mov	r0, r3
 81058d8:	3724      	adds	r7, #36	@ 0x24
 81058da:	46bd      	mov	sp, r7
 81058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058e0:	4770      	bx	lr
 81058e2:	bf00      	nop
 81058e4:	58024400 	.word	0x58024400
 81058e8:	03d09000 	.word	0x03d09000
 81058ec:	003d0900 	.word	0x003d0900
 81058f0:	017d7840 	.word	0x017d7840
 81058f4:	46000000 	.word	0x46000000
 81058f8:	4c742400 	.word	0x4c742400
 81058fc:	4a742400 	.word	0x4a742400
 8105900:	4bbebc20 	.word	0x4bbebc20

08105904 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8105904:	b580      	push	{r7, lr}
 8105906:	b082      	sub	sp, #8
 8105908:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810590a:	f7ff fe81 	bl	8105610 <HAL_RCC_GetSysClockFreq>
 810590e:	4602      	mov	r2, r0
 8105910:	4b11      	ldr	r3, [pc, #68]	@ (8105958 <HAL_RCC_GetHCLKFreq+0x54>)
 8105912:	699b      	ldr	r3, [r3, #24]
 8105914:	0a1b      	lsrs	r3, r3, #8
 8105916:	f003 030f 	and.w	r3, r3, #15
 810591a:	4910      	ldr	r1, [pc, #64]	@ (810595c <HAL_RCC_GetHCLKFreq+0x58>)
 810591c:	5ccb      	ldrb	r3, [r1, r3]
 810591e:	f003 031f 	and.w	r3, r3, #31
 8105922:	fa22 f303 	lsr.w	r3, r2, r3
 8105926:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105928:	4b0b      	ldr	r3, [pc, #44]	@ (8105958 <HAL_RCC_GetHCLKFreq+0x54>)
 810592a:	699b      	ldr	r3, [r3, #24]
 810592c:	f003 030f 	and.w	r3, r3, #15
 8105930:	4a0a      	ldr	r2, [pc, #40]	@ (810595c <HAL_RCC_GetHCLKFreq+0x58>)
 8105932:	5cd3      	ldrb	r3, [r2, r3]
 8105934:	f003 031f 	and.w	r3, r3, #31
 8105938:	687a      	ldr	r2, [r7, #4]
 810593a:	fa22 f303 	lsr.w	r3, r2, r3
 810593e:	4a08      	ldr	r2, [pc, #32]	@ (8105960 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105940:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8105942:	4b07      	ldr	r3, [pc, #28]	@ (8105960 <HAL_RCC_GetHCLKFreq+0x5c>)
 8105944:	681b      	ldr	r3, [r3, #0]
 8105946:	4a07      	ldr	r2, [pc, #28]	@ (8105964 <HAL_RCC_GetHCLKFreq+0x60>)
 8105948:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 810594a:	4b05      	ldr	r3, [pc, #20]	@ (8105960 <HAL_RCC_GetHCLKFreq+0x5c>)
 810594c:	681b      	ldr	r3, [r3, #0]
}
 810594e:	4618      	mov	r0, r3
 8105950:	3708      	adds	r7, #8
 8105952:	46bd      	mov	sp, r7
 8105954:	bd80      	pop	{r7, pc}
 8105956:	bf00      	nop
 8105958:	58024400 	.word	0x58024400
 810595c:	0810d5dc 	.word	0x0810d5dc
 8105960:	10000004 	.word	0x10000004
 8105964:	10000000 	.word	0x10000000

08105968 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8105968:	b580      	push	{r7, lr}
 810596a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 810596c:	f7ff ffca 	bl	8105904 <HAL_RCC_GetHCLKFreq>
 8105970:	4602      	mov	r2, r0
 8105972:	4b06      	ldr	r3, [pc, #24]	@ (810598c <HAL_RCC_GetPCLK1Freq+0x24>)
 8105974:	69db      	ldr	r3, [r3, #28]
 8105976:	091b      	lsrs	r3, r3, #4
 8105978:	f003 0307 	and.w	r3, r3, #7
 810597c:	4904      	ldr	r1, [pc, #16]	@ (8105990 <HAL_RCC_GetPCLK1Freq+0x28>)
 810597e:	5ccb      	ldrb	r3, [r1, r3]
 8105980:	f003 031f 	and.w	r3, r3, #31
 8105984:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8105988:	4618      	mov	r0, r3
 810598a:	bd80      	pop	{r7, pc}
 810598c:	58024400 	.word	0x58024400
 8105990:	0810d5dc 	.word	0x0810d5dc

08105994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8105994:	b580      	push	{r7, lr}
 8105996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8105998:	f7ff ffb4 	bl	8105904 <HAL_RCC_GetHCLKFreq>
 810599c:	4602      	mov	r2, r0
 810599e:	4b06      	ldr	r3, [pc, #24]	@ (81059b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 81059a0:	69db      	ldr	r3, [r3, #28]
 81059a2:	0a1b      	lsrs	r3, r3, #8
 81059a4:	f003 0307 	and.w	r3, r3, #7
 81059a8:	4904      	ldr	r1, [pc, #16]	@ (81059bc <HAL_RCC_GetPCLK2Freq+0x28>)
 81059aa:	5ccb      	ldrb	r3, [r1, r3]
 81059ac:	f003 031f 	and.w	r3, r3, #31
 81059b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 81059b4:	4618      	mov	r0, r3
 81059b6:	bd80      	pop	{r7, pc}
 81059b8:	58024400 	.word	0x58024400
 81059bc:	0810d5dc 	.word	0x0810d5dc

081059c0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 81059c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81059c4:	b0cc      	sub	sp, #304	@ 0x130
 81059c6:	af00      	add	r7, sp, #0
 81059c8:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 81059cc:	2300      	movs	r3, #0
 81059ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 81059d2:	2300      	movs	r3, #0
 81059d4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 81059d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81059dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81059e0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 81059e4:	2500      	movs	r5, #0
 81059e6:	ea54 0305 	orrs.w	r3, r4, r5
 81059ea:	d049      	beq.n	8105a80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 81059ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81059f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81059f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81059f6:	d02f      	beq.n	8105a58 <HAL_RCCEx_PeriphCLKConfig+0x98>
 81059f8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81059fc:	d828      	bhi.n	8105a50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 81059fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105a02:	d01a      	beq.n	8105a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8105a04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105a08:	d822      	bhi.n	8105a50 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8105a0a:	2b00      	cmp	r3, #0
 8105a0c:	d003      	beq.n	8105a16 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8105a0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105a12:	d007      	beq.n	8105a24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8105a14:	e01c      	b.n	8105a50 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105a16:	4bb8      	ldr	r3, [pc, #736]	@ (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105a1a:	4ab7      	ldr	r2, [pc, #732]	@ (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105a1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105a20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105a22:	e01a      	b.n	8105a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105a24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105a28:	3308      	adds	r3, #8
 8105a2a:	2102      	movs	r1, #2
 8105a2c:	4618      	mov	r0, r3
 8105a2e:	f002 fba1 	bl	8108174 <RCCEx_PLL2_Config>
 8105a32:	4603      	mov	r3, r0
 8105a34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105a38:	e00f      	b.n	8105a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105a3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105a3e:	3328      	adds	r3, #40	@ 0x28
 8105a40:	2102      	movs	r1, #2
 8105a42:	4618      	mov	r0, r3
 8105a44:	f002 fc48 	bl	81082d8 <RCCEx_PLL3_Config>
 8105a48:	4603      	mov	r3, r0
 8105a4a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105a4e:	e004      	b.n	8105a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105a50:	2301      	movs	r3, #1
 8105a52:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105a56:	e000      	b.n	8105a5a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8105a58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105a5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105a5e:	2b00      	cmp	r3, #0
 8105a60:	d10a      	bne.n	8105a78 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8105a62:	4ba5      	ldr	r3, [pc, #660]	@ (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105a64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105a66:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8105a6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105a6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105a70:	4aa1      	ldr	r2, [pc, #644]	@ (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105a72:	430b      	orrs	r3, r1
 8105a74:	6513      	str	r3, [r2, #80]	@ 0x50
 8105a76:	e003      	b.n	8105a80 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105a78:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105a7c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8105a80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a88:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8105a8c:	f04f 0900 	mov.w	r9, #0
 8105a90:	ea58 0309 	orrs.w	r3, r8, r9
 8105a94:	d047      	beq.n	8105b26 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8105a96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105a9c:	2b04      	cmp	r3, #4
 8105a9e:	d82a      	bhi.n	8105af6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8105aa0:	a201      	add	r2, pc, #4	@ (adr r2, 8105aa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8105aa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105aa6:	bf00      	nop
 8105aa8:	08105abd 	.word	0x08105abd
 8105aac:	08105acb 	.word	0x08105acb
 8105ab0:	08105ae1 	.word	0x08105ae1
 8105ab4:	08105aff 	.word	0x08105aff
 8105ab8:	08105aff 	.word	0x08105aff
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105abc:	4b8e      	ldr	r3, [pc, #568]	@ (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105abe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105ac0:	4a8d      	ldr	r2, [pc, #564]	@ (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105ac2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105ac6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105ac8:	e01a      	b.n	8105b00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105aca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105ace:	3308      	adds	r3, #8
 8105ad0:	2100      	movs	r1, #0
 8105ad2:	4618      	mov	r0, r3
 8105ad4:	f002 fb4e 	bl	8108174 <RCCEx_PLL2_Config>
 8105ad8:	4603      	mov	r3, r0
 8105ada:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105ade:	e00f      	b.n	8105b00 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105ae0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105ae4:	3328      	adds	r3, #40	@ 0x28
 8105ae6:	2100      	movs	r1, #0
 8105ae8:	4618      	mov	r0, r3
 8105aea:	f002 fbf5 	bl	81082d8 <RCCEx_PLL3_Config>
 8105aee:	4603      	mov	r3, r0
 8105af0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105af4:	e004      	b.n	8105b00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105af6:	2301      	movs	r3, #1
 8105af8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105afc:	e000      	b.n	8105b00 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8105afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105b00:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105b04:	2b00      	cmp	r3, #0
 8105b06:	d10a      	bne.n	8105b1e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8105b08:	4b7b      	ldr	r3, [pc, #492]	@ (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105b0c:	f023 0107 	bic.w	r1, r3, #7
 8105b10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105b16:	4a78      	ldr	r2, [pc, #480]	@ (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105b18:	430b      	orrs	r3, r1
 8105b1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8105b1c:	e003      	b.n	8105b26 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105b1e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105b22:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105b26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105b2e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8105b32:	f04f 0b00 	mov.w	fp, #0
 8105b36:	ea5a 030b 	orrs.w	r3, sl, fp
 8105b3a:	d04c      	beq.n	8105bd6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8105b3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105b40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105b46:	d030      	beq.n	8105baa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8105b48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105b4c:	d829      	bhi.n	8105ba2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105b4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8105b50:	d02d      	beq.n	8105bae <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8105b52:	2bc0      	cmp	r3, #192	@ 0xc0
 8105b54:	d825      	bhi.n	8105ba2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105b56:	2b80      	cmp	r3, #128	@ 0x80
 8105b58:	d018      	beq.n	8105b8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8105b5a:	2b80      	cmp	r3, #128	@ 0x80
 8105b5c:	d821      	bhi.n	8105ba2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105b5e:	2b00      	cmp	r3, #0
 8105b60:	d002      	beq.n	8105b68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8105b62:	2b40      	cmp	r3, #64	@ 0x40
 8105b64:	d007      	beq.n	8105b76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8105b66:	e01c      	b.n	8105ba2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105b68:	4b63      	ldr	r3, [pc, #396]	@ (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105b6c:	4a62      	ldr	r2, [pc, #392]	@ (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105b72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105b74:	e01c      	b.n	8105bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105b76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105b7a:	3308      	adds	r3, #8
 8105b7c:	2100      	movs	r1, #0
 8105b7e:	4618      	mov	r0, r3
 8105b80:	f002 faf8 	bl	8108174 <RCCEx_PLL2_Config>
 8105b84:	4603      	mov	r3, r0
 8105b86:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105b8a:	e011      	b.n	8105bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105b8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105b90:	3328      	adds	r3, #40	@ 0x28
 8105b92:	2100      	movs	r1, #0
 8105b94:	4618      	mov	r0, r3
 8105b96:	f002 fb9f 	bl	81082d8 <RCCEx_PLL3_Config>
 8105b9a:	4603      	mov	r3, r0
 8105b9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105ba0:	e006      	b.n	8105bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105ba2:	2301      	movs	r3, #1
 8105ba4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105ba8:	e002      	b.n	8105bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8105baa:	bf00      	nop
 8105bac:	e000      	b.n	8105bb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8105bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105bb0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105bb4:	2b00      	cmp	r3, #0
 8105bb6:	d10a      	bne.n	8105bce <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8105bb8:	4b4f      	ldr	r3, [pc, #316]	@ (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105bbc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8105bc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8105bc6:	4a4c      	ldr	r2, [pc, #304]	@ (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105bc8:	430b      	orrs	r3, r1
 8105bca:	6513      	str	r3, [r2, #80]	@ 0x50
 8105bcc:	e003      	b.n	8105bd6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105bce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105bd2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8105bd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105bde:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8105be2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8105be6:	2300      	movs	r3, #0
 8105be8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8105bec:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8105bf0:	460b      	mov	r3, r1
 8105bf2:	4313      	orrs	r3, r2
 8105bf4:	d053      	beq.n	8105c9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8105bf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105bfa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8105bfe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8105c02:	d035      	beq.n	8105c70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8105c04:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8105c08:	d82e      	bhi.n	8105c68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105c0a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8105c0e:	d031      	beq.n	8105c74 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8105c10:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8105c14:	d828      	bhi.n	8105c68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105c16:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8105c1a:	d01a      	beq.n	8105c52 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8105c1c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8105c20:	d822      	bhi.n	8105c68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105c22:	2b00      	cmp	r3, #0
 8105c24:	d003      	beq.n	8105c2e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8105c26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105c2a:	d007      	beq.n	8105c3c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8105c2c:	e01c      	b.n	8105c68 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105c2e:	4b32      	ldr	r3, [pc, #200]	@ (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105c32:	4a31      	ldr	r2, [pc, #196]	@ (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105c38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105c3a:	e01c      	b.n	8105c76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105c3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105c40:	3308      	adds	r3, #8
 8105c42:	2100      	movs	r1, #0
 8105c44:	4618      	mov	r0, r3
 8105c46:	f002 fa95 	bl	8108174 <RCCEx_PLL2_Config>
 8105c4a:	4603      	mov	r3, r0
 8105c4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8105c50:	e011      	b.n	8105c76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105c52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105c56:	3328      	adds	r3, #40	@ 0x28
 8105c58:	2100      	movs	r1, #0
 8105c5a:	4618      	mov	r0, r3
 8105c5c:	f002 fb3c 	bl	81082d8 <RCCEx_PLL3_Config>
 8105c60:	4603      	mov	r3, r0
 8105c62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105c66:	e006      	b.n	8105c76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8105c68:	2301      	movs	r3, #1
 8105c6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105c6e:	e002      	b.n	8105c76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8105c70:	bf00      	nop
 8105c72:	e000      	b.n	8105c76 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8105c74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105c76:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105c7a:	2b00      	cmp	r3, #0
 8105c7c:	d10b      	bne.n	8105c96 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8105c7e:	4b1e      	ldr	r3, [pc, #120]	@ (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105c82:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8105c86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105c8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8105c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8105cf8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105c90:	430b      	orrs	r3, r1
 8105c92:	6593      	str	r3, [r2, #88]	@ 0x58
 8105c94:	e003      	b.n	8105c9e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105c96:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105c9a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8105c9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ca6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8105caa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8105cae:	2300      	movs	r3, #0
 8105cb0:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8105cb4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8105cb8:	460b      	mov	r3, r1
 8105cba:	4313      	orrs	r3, r2
 8105cbc:	d056      	beq.n	8105d6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8105cbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105cc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8105cc6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8105cca:	d038      	beq.n	8105d3e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8105ccc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8105cd0:	d831      	bhi.n	8105d36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105cd2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8105cd6:	d034      	beq.n	8105d42 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8105cd8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8105cdc:	d82b      	bhi.n	8105d36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105cde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105ce2:	d01d      	beq.n	8105d20 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8105ce4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8105ce8:	d825      	bhi.n	8105d36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105cea:	2b00      	cmp	r3, #0
 8105cec:	d006      	beq.n	8105cfc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8105cee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8105cf2:	d00a      	beq.n	8105d0a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8105cf4:	e01f      	b.n	8105d36 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8105cf6:	bf00      	nop
 8105cf8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105cfc:	4ba2      	ldr	r3, [pc, #648]	@ (8105f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105d00:	4aa1      	ldr	r2, [pc, #644]	@ (8105f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105d02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105d06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105d08:	e01c      	b.n	8105d44 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105d0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105d0e:	3308      	adds	r3, #8
 8105d10:	2100      	movs	r1, #0
 8105d12:	4618      	mov	r0, r3
 8105d14:	f002 fa2e 	bl	8108174 <RCCEx_PLL2_Config>
 8105d18:	4603      	mov	r3, r0
 8105d1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8105d1e:	e011      	b.n	8105d44 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105d20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105d24:	3328      	adds	r3, #40	@ 0x28
 8105d26:	2100      	movs	r1, #0
 8105d28:	4618      	mov	r0, r3
 8105d2a:	f002 fad5 	bl	81082d8 <RCCEx_PLL3_Config>
 8105d2e:	4603      	mov	r3, r0
 8105d30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105d34:	e006      	b.n	8105d44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8105d36:	2301      	movs	r3, #1
 8105d38:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105d3c:	e002      	b.n	8105d44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8105d3e:	bf00      	nop
 8105d40:	e000      	b.n	8105d44 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8105d42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105d44:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105d48:	2b00      	cmp	r3, #0
 8105d4a:	d10b      	bne.n	8105d64 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8105d4c:	4b8e      	ldr	r3, [pc, #568]	@ (8105f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105d50:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8105d54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105d58:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8105d5c:	4a8a      	ldr	r2, [pc, #552]	@ (8105f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105d5e:	430b      	orrs	r3, r1
 8105d60:	6593      	str	r3, [r2, #88]	@ 0x58
 8105d62:	e003      	b.n	8105d6c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105d64:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105d68:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8105d6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105d74:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8105d78:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8105d7c:	2300      	movs	r3, #0
 8105d7e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8105d82:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8105d86:	460b      	mov	r3, r1
 8105d88:	4313      	orrs	r3, r2
 8105d8a:	d03a      	beq.n	8105e02 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8105d8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105d92:	2b30      	cmp	r3, #48	@ 0x30
 8105d94:	d01f      	beq.n	8105dd6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8105d96:	2b30      	cmp	r3, #48	@ 0x30
 8105d98:	d819      	bhi.n	8105dce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8105d9a:	2b20      	cmp	r3, #32
 8105d9c:	d00c      	beq.n	8105db8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8105d9e:	2b20      	cmp	r3, #32
 8105da0:	d815      	bhi.n	8105dce <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8105da2:	2b00      	cmp	r3, #0
 8105da4:	d019      	beq.n	8105dda <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8105da6:	2b10      	cmp	r3, #16
 8105da8:	d111      	bne.n	8105dce <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105daa:	4b77      	ldr	r3, [pc, #476]	@ (8105f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105dae:	4a76      	ldr	r2, [pc, #472]	@ (8105f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105db0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105db4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8105db6:	e011      	b.n	8105ddc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105db8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105dbc:	3308      	adds	r3, #8
 8105dbe:	2102      	movs	r1, #2
 8105dc0:	4618      	mov	r0, r3
 8105dc2:	f002 f9d7 	bl	8108174 <RCCEx_PLL2_Config>
 8105dc6:	4603      	mov	r3, r0
 8105dc8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8105dcc:	e006      	b.n	8105ddc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8105dce:	2301      	movs	r3, #1
 8105dd0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105dd4:	e002      	b.n	8105ddc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8105dd6:	bf00      	nop
 8105dd8:	e000      	b.n	8105ddc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8105dda:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105ddc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105de0:	2b00      	cmp	r3, #0
 8105de2:	d10a      	bne.n	8105dfa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8105de4:	4b68      	ldr	r3, [pc, #416]	@ (8105f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105de6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105de8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8105dec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8105df2:	4a65      	ldr	r2, [pc, #404]	@ (8105f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105df4:	430b      	orrs	r3, r1
 8105df6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8105df8:	e003      	b.n	8105e02 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105dfa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105dfe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8105e02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105e0a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8105e0e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8105e12:	2300      	movs	r3, #0
 8105e14:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8105e18:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8105e1c:	460b      	mov	r3, r1
 8105e1e:	4313      	orrs	r3, r2
 8105e20:	d051      	beq.n	8105ec6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8105e22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105e26:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105e28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8105e2c:	d035      	beq.n	8105e9a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8105e2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8105e32:	d82e      	bhi.n	8105e92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105e34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8105e38:	d031      	beq.n	8105e9e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8105e3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8105e3e:	d828      	bhi.n	8105e92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105e40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105e44:	d01a      	beq.n	8105e7c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8105e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105e4a:	d822      	bhi.n	8105e92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8105e4c:	2b00      	cmp	r3, #0
 8105e4e:	d003      	beq.n	8105e58 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8105e50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8105e54:	d007      	beq.n	8105e66 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8105e56:	e01c      	b.n	8105e92 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105e58:	4b4b      	ldr	r3, [pc, #300]	@ (8105f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105e5c:	4a4a      	ldr	r2, [pc, #296]	@ (8105f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105e5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105e62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105e64:	e01c      	b.n	8105ea0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105e66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105e6a:	3308      	adds	r3, #8
 8105e6c:	2100      	movs	r1, #0
 8105e6e:	4618      	mov	r0, r3
 8105e70:	f002 f980 	bl	8108174 <RCCEx_PLL2_Config>
 8105e74:	4603      	mov	r3, r0
 8105e76:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105e7a:	e011      	b.n	8105ea0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105e7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105e80:	3328      	adds	r3, #40	@ 0x28
 8105e82:	2100      	movs	r1, #0
 8105e84:	4618      	mov	r0, r3
 8105e86:	f002 fa27 	bl	81082d8 <RCCEx_PLL3_Config>
 8105e8a:	4603      	mov	r3, r0
 8105e8c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8105e90:	e006      	b.n	8105ea0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105e92:	2301      	movs	r3, #1
 8105e94:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105e98:	e002      	b.n	8105ea0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8105e9a:	bf00      	nop
 8105e9c:	e000      	b.n	8105ea0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8105e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105ea0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105ea4:	2b00      	cmp	r3, #0
 8105ea6:	d10a      	bne.n	8105ebe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8105ea8:	4b37      	ldr	r3, [pc, #220]	@ (8105f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105eac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8105eb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105eb4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8105eb6:	4a34      	ldr	r2, [pc, #208]	@ (8105f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105eb8:	430b      	orrs	r3, r1
 8105eba:	6513      	str	r3, [r2, #80]	@ 0x50
 8105ebc:	e003      	b.n	8105ec6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ebe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105ec2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8105ec6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ece:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8105ed2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8105ed6:	2300      	movs	r3, #0
 8105ed8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8105edc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8105ee0:	460b      	mov	r3, r1
 8105ee2:	4313      	orrs	r3, r2
 8105ee4:	d056      	beq.n	8105f94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8105ee6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105eea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8105eec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8105ef0:	d033      	beq.n	8105f5a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8105ef2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8105ef6:	d82c      	bhi.n	8105f52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105ef8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8105efc:	d02f      	beq.n	8105f5e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8105efe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8105f02:	d826      	bhi.n	8105f52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105f04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8105f08:	d02b      	beq.n	8105f62 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8105f0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8105f0e:	d820      	bhi.n	8105f52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105f10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105f14:	d012      	beq.n	8105f3c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8105f16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8105f1a:	d81a      	bhi.n	8105f52 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8105f1c:	2b00      	cmp	r3, #0
 8105f1e:	d022      	beq.n	8105f66 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8105f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8105f24:	d115      	bne.n	8105f52 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105f26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105f2a:	3308      	adds	r3, #8
 8105f2c:	2101      	movs	r1, #1
 8105f2e:	4618      	mov	r0, r3
 8105f30:	f002 f920 	bl	8108174 <RCCEx_PLL2_Config>
 8105f34:	4603      	mov	r3, r0
 8105f36:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8105f3a:	e015      	b.n	8105f68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8105f3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105f40:	3328      	adds	r3, #40	@ 0x28
 8105f42:	2101      	movs	r1, #1
 8105f44:	4618      	mov	r0, r3
 8105f46:	f002 f9c7 	bl	81082d8 <RCCEx_PLL3_Config>
 8105f4a:	4603      	mov	r3, r0
 8105f4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8105f50:	e00a      	b.n	8105f68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105f52:	2301      	movs	r3, #1
 8105f54:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105f58:	e006      	b.n	8105f68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105f5a:	bf00      	nop
 8105f5c:	e004      	b.n	8105f68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105f5e:	bf00      	nop
 8105f60:	e002      	b.n	8105f68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105f62:	bf00      	nop
 8105f64:	e000      	b.n	8105f68 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8105f66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105f68:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105f6c:	2b00      	cmp	r3, #0
 8105f6e:	d10d      	bne.n	8105f8c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8105f70:	4b05      	ldr	r3, [pc, #20]	@ (8105f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105f74:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8105f78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105f7c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8105f7e:	4a02      	ldr	r2, [pc, #8]	@ (8105f88 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8105f80:	430b      	orrs	r3, r1
 8105f82:	6513      	str	r3, [r2, #80]	@ 0x50
 8105f84:	e006      	b.n	8105f94 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8105f86:	bf00      	nop
 8105f88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f8c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105f90:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8105f94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f9c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8105fa0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8105fa4:	2300      	movs	r3, #0
 8105fa6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8105faa:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8105fae:	460b      	mov	r3, r1
 8105fb0:	4313      	orrs	r3, r2
 8105fb2:	d055      	beq.n	8106060 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8105fb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105fb8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8105fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105fc0:	d033      	beq.n	810602a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8105fc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8105fc6:	d82c      	bhi.n	8106022 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105fcc:	d02f      	beq.n	810602e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8105fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8105fd2:	d826      	bhi.n	8106022 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105fd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105fd8:	d02b      	beq.n	8106032 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8105fda:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8105fde:	d820      	bhi.n	8106022 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105fe0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105fe4:	d012      	beq.n	810600c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8105fe6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8105fea:	d81a      	bhi.n	8106022 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8105fec:	2b00      	cmp	r3, #0
 8105fee:	d022      	beq.n	8106036 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8105ff0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8105ff4:	d115      	bne.n	8106022 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8105ff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105ffa:	3308      	adds	r3, #8
 8105ffc:	2101      	movs	r1, #1
 8105ffe:	4618      	mov	r0, r3
 8106000:	f002 f8b8 	bl	8108174 <RCCEx_PLL2_Config>
 8106004:	4603      	mov	r3, r0
 8106006:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810600a:	e015      	b.n	8106038 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810600c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106010:	3328      	adds	r3, #40	@ 0x28
 8106012:	2101      	movs	r1, #1
 8106014:	4618      	mov	r0, r3
 8106016:	f002 f95f 	bl	81082d8 <RCCEx_PLL3_Config>
 810601a:	4603      	mov	r3, r0
 810601c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8106020:	e00a      	b.n	8106038 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8106022:	2301      	movs	r3, #1
 8106024:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106028:	e006      	b.n	8106038 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810602a:	bf00      	nop
 810602c:	e004      	b.n	8106038 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810602e:	bf00      	nop
 8106030:	e002      	b.n	8106038 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106032:	bf00      	nop
 8106034:	e000      	b.n	8106038 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106036:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106038:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810603c:	2b00      	cmp	r3, #0
 810603e:	d10b      	bne.n	8106058 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8106040:	4bb7      	ldr	r3, [pc, #732]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106044:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8106048:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810604c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106050:	4ab3      	ldr	r2, [pc, #716]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106052:	430b      	orrs	r3, r1
 8106054:	6593      	str	r3, [r2, #88]	@ 0x58
 8106056:	e003      	b.n	8106060 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106058:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810605c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8106060:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106068:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 810606c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8106070:	2300      	movs	r3, #0
 8106072:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8106076:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 810607a:	460b      	mov	r3, r1
 810607c:	4313      	orrs	r3, r2
 810607e:	d02a      	beq.n	81060d6 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8106080:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106086:	2b00      	cmp	r3, #0
 8106088:	d011      	beq.n	81060ae <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 810608a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810608e:	d10a      	bne.n	81060a6 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106090:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106094:	3308      	adds	r3, #8
 8106096:	2101      	movs	r1, #1
 8106098:	4618      	mov	r0, r3
 810609a:	f002 f86b 	bl	8108174 <RCCEx_PLL2_Config>
 810609e:	4603      	mov	r3, r0
 81060a0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 81060a4:	e004      	b.n	81060b0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81060a6:	2301      	movs	r3, #1
 81060a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81060ac:	e000      	b.n	81060b0 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 81060ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 81060b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81060b4:	2b00      	cmp	r3, #0
 81060b6:	d10a      	bne.n	81060ce <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 81060b8:	4b99      	ldr	r3, [pc, #612]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81060ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81060bc:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 81060c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81060c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81060c6:	4a96      	ldr	r2, [pc, #600]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81060c8:	430b      	orrs	r3, r1
 81060ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81060cc:	e003      	b.n	81060d6 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81060ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81060d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81060d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81060de:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 81060e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 81060e6:	2300      	movs	r3, #0
 81060e8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 81060ec:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 81060f0:	460b      	mov	r3, r1
 81060f2:	4313      	orrs	r3, r2
 81060f4:	d037      	beq.n	8106166 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81060f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81060fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81060fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106100:	d00e      	beq.n	8106120 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8106102:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106106:	d816      	bhi.n	8106136 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8106108:	2b00      	cmp	r3, #0
 810610a:	d018      	beq.n	810613e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 810610c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106110:	d111      	bne.n	8106136 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106112:	4b83      	ldr	r3, [pc, #524]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106116:	4a82      	ldr	r2, [pc, #520]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106118:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810611c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810611e:	e00f      	b.n	8106140 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106120:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106124:	3308      	adds	r3, #8
 8106126:	2101      	movs	r1, #1
 8106128:	4618      	mov	r0, r3
 810612a:	f002 f823 	bl	8108174 <RCCEx_PLL2_Config>
 810612e:	4603      	mov	r3, r0
 8106130:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106134:	e004      	b.n	8106140 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106136:	2301      	movs	r3, #1
 8106138:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810613c:	e000      	b.n	8106140 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 810613e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106140:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106144:	2b00      	cmp	r3, #0
 8106146:	d10a      	bne.n	810615e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8106148:	4b75      	ldr	r3, [pc, #468]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810614a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810614c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8106150:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8106156:	4a72      	ldr	r2, [pc, #456]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106158:	430b      	orrs	r3, r1
 810615a:	6513      	str	r3, [r2, #80]	@ 0x50
 810615c:	e003      	b.n	8106166 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810615e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106162:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8106166:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810616e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8106172:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8106176:	2300      	movs	r3, #0
 8106178:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810617c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8106180:	460b      	mov	r3, r1
 8106182:	4313      	orrs	r3, r2
 8106184:	d03a      	beq.n	81061fc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8106186:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810618a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810618c:	2b03      	cmp	r3, #3
 810618e:	d81d      	bhi.n	81061cc <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8106190:	a201      	add	r2, pc, #4	@ (adr r2, 8106198 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8106192:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106196:	bf00      	nop
 8106198:	081061d5 	.word	0x081061d5
 810619c:	081061a9 	.word	0x081061a9
 81061a0:	081061b7 	.word	0x081061b7
 81061a4:	081061d5 	.word	0x081061d5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81061a8:	4b5d      	ldr	r3, [pc, #372]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81061aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81061ac:	4a5c      	ldr	r2, [pc, #368]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81061ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81061b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81061b4:	e00f      	b.n	81061d6 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81061b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81061ba:	3308      	adds	r3, #8
 81061bc:	2102      	movs	r1, #2
 81061be:	4618      	mov	r0, r3
 81061c0:	f001 ffd8 	bl	8108174 <RCCEx_PLL2_Config>
 81061c4:	4603      	mov	r3, r0
 81061c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 81061ca:	e004      	b.n	81061d6 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81061cc:	2301      	movs	r3, #1
 81061ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81061d2:	e000      	b.n	81061d6 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 81061d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81061d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81061da:	2b00      	cmp	r3, #0
 81061dc:	d10a      	bne.n	81061f4 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81061de:	4b50      	ldr	r3, [pc, #320]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81061e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81061e2:	f023 0103 	bic.w	r1, r3, #3
 81061e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81061ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81061ec:	4a4c      	ldr	r2, [pc, #304]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81061ee:	430b      	orrs	r3, r1
 81061f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81061f2:	e003      	b.n	81061fc <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81061f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81061f8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81061fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106204:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8106208:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810620c:	2300      	movs	r3, #0
 810620e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8106212:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8106216:	460b      	mov	r3, r1
 8106218:	4313      	orrs	r3, r2
 810621a:	f000 80a0 	beq.w	810635e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810621e:	4b41      	ldr	r3, [pc, #260]	@ (8106324 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106220:	681b      	ldr	r3, [r3, #0]
 8106222:	4a40      	ldr	r2, [pc, #256]	@ (8106324 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8106228:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810622a:	f7fc fd1b 	bl	8102c64 <HAL_GetTick>
 810622e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106232:	e00b      	b.n	810624c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8106234:	f7fc fd16 	bl	8102c64 <HAL_GetTick>
 8106238:	4602      	mov	r2, r0
 810623a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 810623e:	1ad3      	subs	r3, r2, r3
 8106240:	2b64      	cmp	r3, #100	@ 0x64
 8106242:	d903      	bls.n	810624c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8106244:	2303      	movs	r3, #3
 8106246:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810624a:	e005      	b.n	8106258 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810624c:	4b35      	ldr	r3, [pc, #212]	@ (8106324 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810624e:	681b      	ldr	r3, [r3, #0]
 8106250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106254:	2b00      	cmp	r3, #0
 8106256:	d0ed      	beq.n	8106234 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8106258:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810625c:	2b00      	cmp	r3, #0
 810625e:	d17a      	bne.n	8106356 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8106260:	4b2f      	ldr	r3, [pc, #188]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106262:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8106264:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106268:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810626c:	4053      	eors	r3, r2
 810626e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106272:	2b00      	cmp	r3, #0
 8106274:	d015      	beq.n	81062a2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8106276:	4b2a      	ldr	r3, [pc, #168]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810627a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810627e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8106282:	4b27      	ldr	r3, [pc, #156]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106286:	4a26      	ldr	r2, [pc, #152]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810628c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810628e:	4b24      	ldr	r3, [pc, #144]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106292:	4a23      	ldr	r2, [pc, #140]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106294:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8106298:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810629a:	4a21      	ldr	r2, [pc, #132]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810629c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 81062a0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81062a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81062a6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81062aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81062ae:	d118      	bne.n	81062e2 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81062b0:	f7fc fcd8 	bl	8102c64 <HAL_GetTick>
 81062b4:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81062b8:	e00d      	b.n	81062d6 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81062ba:	f7fc fcd3 	bl	8102c64 <HAL_GetTick>
 81062be:	4602      	mov	r2, r0
 81062c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 81062c4:	1ad2      	subs	r2, r2, r3
 81062c6:	f241 3388 	movw	r3, #5000	@ 0x1388
 81062ca:	429a      	cmp	r2, r3
 81062cc:	d903      	bls.n	81062d6 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 81062ce:	2303      	movs	r3, #3
 81062d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 81062d4:	e005      	b.n	81062e2 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81062d6:	4b12      	ldr	r3, [pc, #72]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81062d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81062da:	f003 0302 	and.w	r3, r3, #2
 81062de:	2b00      	cmp	r3, #0
 81062e0:	d0eb      	beq.n	81062ba <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 81062e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81062e6:	2b00      	cmp	r3, #0
 81062e8:	d130      	bne.n	810634c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81062ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81062ee:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81062f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81062f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81062fa:	d115      	bne.n	8106328 <HAL_RCCEx_PeriphCLKConfig+0x968>
 81062fc:	4b08      	ldr	r3, [pc, #32]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81062fe:	691b      	ldr	r3, [r3, #16]
 8106300:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8106304:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106308:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810630c:	091b      	lsrs	r3, r3, #4
 810630e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8106312:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8106316:	4a02      	ldr	r2, [pc, #8]	@ (8106320 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106318:	430b      	orrs	r3, r1
 810631a:	6113      	str	r3, [r2, #16]
 810631c:	e00a      	b.n	8106334 <HAL_RCCEx_PeriphCLKConfig+0x974>
 810631e:	bf00      	nop
 8106320:	58024400 	.word	0x58024400
 8106324:	58024800 	.word	0x58024800
 8106328:	4bd4      	ldr	r3, [pc, #848]	@ (810667c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810632a:	691b      	ldr	r3, [r3, #16]
 810632c:	4ad3      	ldr	r2, [pc, #844]	@ (810667c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810632e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8106332:	6113      	str	r3, [r2, #16]
 8106334:	4bd1      	ldr	r3, [pc, #836]	@ (810667c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106336:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8106338:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810633c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106344:	4acd      	ldr	r2, [pc, #820]	@ (810667c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106346:	430b      	orrs	r3, r1
 8106348:	6713      	str	r3, [r2, #112]	@ 0x70
 810634a:	e008      	b.n	810635e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810634c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106350:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8106354:	e003      	b.n	810635e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106356:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810635a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810635e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106366:	f002 0301 	and.w	r3, r2, #1
 810636a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810636e:	2300      	movs	r3, #0
 8106370:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8106374:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8106378:	460b      	mov	r3, r1
 810637a:	4313      	orrs	r3, r2
 810637c:	f000 808b 	beq.w	8106496 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8106380:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106384:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8106388:	2b28      	cmp	r3, #40	@ 0x28
 810638a:	d86b      	bhi.n	8106464 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 810638c:	a201      	add	r2, pc, #4	@ (adr r2, 8106394 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 810638e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106392:	bf00      	nop
 8106394:	0810646d 	.word	0x0810646d
 8106398:	08106465 	.word	0x08106465
 810639c:	08106465 	.word	0x08106465
 81063a0:	08106465 	.word	0x08106465
 81063a4:	08106465 	.word	0x08106465
 81063a8:	08106465 	.word	0x08106465
 81063ac:	08106465 	.word	0x08106465
 81063b0:	08106465 	.word	0x08106465
 81063b4:	08106439 	.word	0x08106439
 81063b8:	08106465 	.word	0x08106465
 81063bc:	08106465 	.word	0x08106465
 81063c0:	08106465 	.word	0x08106465
 81063c4:	08106465 	.word	0x08106465
 81063c8:	08106465 	.word	0x08106465
 81063cc:	08106465 	.word	0x08106465
 81063d0:	08106465 	.word	0x08106465
 81063d4:	0810644f 	.word	0x0810644f
 81063d8:	08106465 	.word	0x08106465
 81063dc:	08106465 	.word	0x08106465
 81063e0:	08106465 	.word	0x08106465
 81063e4:	08106465 	.word	0x08106465
 81063e8:	08106465 	.word	0x08106465
 81063ec:	08106465 	.word	0x08106465
 81063f0:	08106465 	.word	0x08106465
 81063f4:	0810646d 	.word	0x0810646d
 81063f8:	08106465 	.word	0x08106465
 81063fc:	08106465 	.word	0x08106465
 8106400:	08106465 	.word	0x08106465
 8106404:	08106465 	.word	0x08106465
 8106408:	08106465 	.word	0x08106465
 810640c:	08106465 	.word	0x08106465
 8106410:	08106465 	.word	0x08106465
 8106414:	0810646d 	.word	0x0810646d
 8106418:	08106465 	.word	0x08106465
 810641c:	08106465 	.word	0x08106465
 8106420:	08106465 	.word	0x08106465
 8106424:	08106465 	.word	0x08106465
 8106428:	08106465 	.word	0x08106465
 810642c:	08106465 	.word	0x08106465
 8106430:	08106465 	.word	0x08106465
 8106434:	0810646d 	.word	0x0810646d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106438:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810643c:	3308      	adds	r3, #8
 810643e:	2101      	movs	r1, #1
 8106440:	4618      	mov	r0, r3
 8106442:	f001 fe97 	bl	8108174 <RCCEx_PLL2_Config>
 8106446:	4603      	mov	r3, r0
 8106448:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810644c:	e00f      	b.n	810646e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810644e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106452:	3328      	adds	r3, #40	@ 0x28
 8106454:	2101      	movs	r1, #1
 8106456:	4618      	mov	r0, r3
 8106458:	f001 ff3e 	bl	81082d8 <RCCEx_PLL3_Config>
 810645c:	4603      	mov	r3, r0
 810645e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106462:	e004      	b.n	810646e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106464:	2301      	movs	r3, #1
 8106466:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810646a:	e000      	b.n	810646e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 810646c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810646e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106472:	2b00      	cmp	r3, #0
 8106474:	d10b      	bne.n	810648e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8106476:	4b81      	ldr	r3, [pc, #516]	@ (810667c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810647a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 810647e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106482:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8106486:	4a7d      	ldr	r2, [pc, #500]	@ (810667c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106488:	430b      	orrs	r3, r1
 810648a:	6553      	str	r3, [r2, #84]	@ 0x54
 810648c:	e003      	b.n	8106496 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810648e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106492:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8106496:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810649a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810649e:	f002 0302 	and.w	r3, r2, #2
 81064a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 81064a6:	2300      	movs	r3, #0
 81064a8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 81064ac:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 81064b0:	460b      	mov	r3, r1
 81064b2:	4313      	orrs	r3, r2
 81064b4:	d042      	beq.n	810653c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81064b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81064ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81064bc:	2b05      	cmp	r3, #5
 81064be:	d825      	bhi.n	810650c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 81064c0:	a201      	add	r2, pc, #4	@ (adr r2, 81064c8 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 81064c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81064c6:	bf00      	nop
 81064c8:	08106515 	.word	0x08106515
 81064cc:	081064e1 	.word	0x081064e1
 81064d0:	081064f7 	.word	0x081064f7
 81064d4:	08106515 	.word	0x08106515
 81064d8:	08106515 	.word	0x08106515
 81064dc:	08106515 	.word	0x08106515
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81064e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81064e4:	3308      	adds	r3, #8
 81064e6:	2101      	movs	r1, #1
 81064e8:	4618      	mov	r0, r3
 81064ea:	f001 fe43 	bl	8108174 <RCCEx_PLL2_Config>
 81064ee:	4603      	mov	r3, r0
 81064f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81064f4:	e00f      	b.n	8106516 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81064f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81064fa:	3328      	adds	r3, #40	@ 0x28
 81064fc:	2101      	movs	r1, #1
 81064fe:	4618      	mov	r0, r3
 8106500:	f001 feea 	bl	81082d8 <RCCEx_PLL3_Config>
 8106504:	4603      	mov	r3, r0
 8106506:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810650a:	e004      	b.n	8106516 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810650c:	2301      	movs	r3, #1
 810650e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106512:	e000      	b.n	8106516 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8106514:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106516:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810651a:	2b00      	cmp	r3, #0
 810651c:	d10a      	bne.n	8106534 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810651e:	4b57      	ldr	r3, [pc, #348]	@ (810667c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106522:	f023 0107 	bic.w	r1, r3, #7
 8106526:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810652a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810652c:	4a53      	ldr	r2, [pc, #332]	@ (810667c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810652e:	430b      	orrs	r3, r1
 8106530:	6553      	str	r3, [r2, #84]	@ 0x54
 8106532:	e003      	b.n	810653c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106534:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106538:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 810653c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106544:	f002 0304 	and.w	r3, r2, #4
 8106548:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 810654c:	2300      	movs	r3, #0
 810654e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8106552:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8106556:	460b      	mov	r3, r1
 8106558:	4313      	orrs	r3, r2
 810655a:	d044      	beq.n	81065e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 810655c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106560:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8106564:	2b05      	cmp	r3, #5
 8106566:	d825      	bhi.n	81065b4 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8106568:	a201      	add	r2, pc, #4	@ (adr r2, 8106570 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 810656a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810656e:	bf00      	nop
 8106570:	081065bd 	.word	0x081065bd
 8106574:	08106589 	.word	0x08106589
 8106578:	0810659f 	.word	0x0810659f
 810657c:	081065bd 	.word	0x081065bd
 8106580:	081065bd 	.word	0x081065bd
 8106584:	081065bd 	.word	0x081065bd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106588:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810658c:	3308      	adds	r3, #8
 810658e:	2101      	movs	r1, #1
 8106590:	4618      	mov	r0, r3
 8106592:	f001 fdef 	bl	8108174 <RCCEx_PLL2_Config>
 8106596:	4603      	mov	r3, r0
 8106598:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810659c:	e00f      	b.n	81065be <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810659e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81065a2:	3328      	adds	r3, #40	@ 0x28
 81065a4:	2101      	movs	r1, #1
 81065a6:	4618      	mov	r0, r3
 81065a8:	f001 fe96 	bl	81082d8 <RCCEx_PLL3_Config>
 81065ac:	4603      	mov	r3, r0
 81065ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81065b2:	e004      	b.n	81065be <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81065b4:	2301      	movs	r3, #1
 81065b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81065ba:	e000      	b.n	81065be <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 81065bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81065be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81065c2:	2b00      	cmp	r3, #0
 81065c4:	d10b      	bne.n	81065de <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81065c6:	4b2d      	ldr	r3, [pc, #180]	@ (810667c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81065c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81065ca:	f023 0107 	bic.w	r1, r3, #7
 81065ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81065d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81065d6:	4a29      	ldr	r2, [pc, #164]	@ (810667c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 81065d8:	430b      	orrs	r3, r1
 81065da:	6593      	str	r3, [r2, #88]	@ 0x58
 81065dc:	e003      	b.n	81065e6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81065de:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81065e2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81065e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81065ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 81065ee:	f002 0320 	and.w	r3, r2, #32
 81065f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 81065f6:	2300      	movs	r3, #0
 81065f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 81065fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8106600:	460b      	mov	r3, r1
 8106602:	4313      	orrs	r3, r2
 8106604:	d057      	beq.n	81066b6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8106606:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810660a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810660e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106612:	d035      	beq.n	8106680 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8106614:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106618:	d82c      	bhi.n	8106674 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810661a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810661e:	d031      	beq.n	8106684 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8106620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106624:	d826      	bhi.n	8106674 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8106626:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810662a:	d02d      	beq.n	8106688 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 810662c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106630:	d820      	bhi.n	8106674 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8106632:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106636:	d012      	beq.n	810665e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8106638:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810663c:	d81a      	bhi.n	8106674 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 810663e:	2b00      	cmp	r3, #0
 8106640:	d024      	beq.n	810668c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8106642:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106646:	d115      	bne.n	8106674 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106648:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810664c:	3308      	adds	r3, #8
 810664e:	2100      	movs	r1, #0
 8106650:	4618      	mov	r0, r3
 8106652:	f001 fd8f 	bl	8108174 <RCCEx_PLL2_Config>
 8106656:	4603      	mov	r3, r0
 8106658:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810665c:	e017      	b.n	810668e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810665e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106662:	3328      	adds	r3, #40	@ 0x28
 8106664:	2102      	movs	r1, #2
 8106666:	4618      	mov	r0, r3
 8106668:	f001 fe36 	bl	81082d8 <RCCEx_PLL3_Config>
 810666c:	4603      	mov	r3, r0
 810666e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106672:	e00c      	b.n	810668e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106674:	2301      	movs	r3, #1
 8106676:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810667a:	e008      	b.n	810668e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 810667c:	58024400 	.word	0x58024400
        break;
 8106680:	bf00      	nop
 8106682:	e004      	b.n	810668e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8106684:	bf00      	nop
 8106686:	e002      	b.n	810668e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8106688:	bf00      	nop
 810668a:	e000      	b.n	810668e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 810668c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810668e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106692:	2b00      	cmp	r3, #0
 8106694:	d10b      	bne.n	81066ae <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8106696:	4bc2      	ldr	r3, [pc, #776]	@ (81069a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810669a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 810669e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81066a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81066a6:	4abe      	ldr	r2, [pc, #760]	@ (81069a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81066a8:	430b      	orrs	r3, r1
 81066aa:	6553      	str	r3, [r2, #84]	@ 0x54
 81066ac:	e003      	b.n	81066b6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81066ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81066b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81066b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81066ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066be:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 81066c2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 81066c6:	2300      	movs	r3, #0
 81066c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 81066cc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 81066d0:	460b      	mov	r3, r1
 81066d2:	4313      	orrs	r3, r2
 81066d4:	d055      	beq.n	8106782 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81066d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81066da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81066de:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81066e2:	d033      	beq.n	810674c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 81066e4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81066e8:	d82c      	bhi.n	8106744 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 81066ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81066ee:	d02f      	beq.n	8106750 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 81066f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81066f4:	d826      	bhi.n	8106744 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 81066f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81066fa:	d02b      	beq.n	8106754 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 81066fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8106700:	d820      	bhi.n	8106744 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8106702:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8106706:	d012      	beq.n	810672e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8106708:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810670c:	d81a      	bhi.n	8106744 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 810670e:	2b00      	cmp	r3, #0
 8106710:	d022      	beq.n	8106758 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8106712:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8106716:	d115      	bne.n	8106744 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106718:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810671c:	3308      	adds	r3, #8
 810671e:	2100      	movs	r1, #0
 8106720:	4618      	mov	r0, r3
 8106722:	f001 fd27 	bl	8108174 <RCCEx_PLL2_Config>
 8106726:	4603      	mov	r3, r0
 8106728:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810672c:	e015      	b.n	810675a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810672e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106732:	3328      	adds	r3, #40	@ 0x28
 8106734:	2102      	movs	r1, #2
 8106736:	4618      	mov	r0, r3
 8106738:	f001 fdce 	bl	81082d8 <RCCEx_PLL3_Config>
 810673c:	4603      	mov	r3, r0
 810673e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8106742:	e00a      	b.n	810675a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106744:	2301      	movs	r3, #1
 8106746:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810674a:	e006      	b.n	810675a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 810674c:	bf00      	nop
 810674e:	e004      	b.n	810675a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8106750:	bf00      	nop
 8106752:	e002      	b.n	810675a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8106754:	bf00      	nop
 8106756:	e000      	b.n	810675a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8106758:	bf00      	nop
    }

    if (ret == HAL_OK)
 810675a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810675e:	2b00      	cmp	r3, #0
 8106760:	d10b      	bne.n	810677a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8106762:	4b8f      	ldr	r3, [pc, #572]	@ (81069a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106766:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 810676a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810676e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8106772:	4a8b      	ldr	r2, [pc, #556]	@ (81069a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106774:	430b      	orrs	r3, r1
 8106776:	6593      	str	r3, [r2, #88]	@ 0x58
 8106778:	e003      	b.n	8106782 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810677a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810677e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8106782:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106786:	e9d3 2300 	ldrd	r2, r3, [r3]
 810678a:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 810678e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8106792:	2300      	movs	r3, #0
 8106794:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8106798:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 810679c:	460b      	mov	r3, r1
 810679e:	4313      	orrs	r3, r2
 81067a0:	d055      	beq.n	810684e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81067a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81067a6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81067aa:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81067ae:	d033      	beq.n	8106818 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 81067b0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81067b4:	d82c      	bhi.n	8106810 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81067b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81067ba:	d02f      	beq.n	810681c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 81067bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81067c0:	d826      	bhi.n	8106810 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81067c2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81067c6:	d02b      	beq.n	8106820 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 81067c8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81067cc:	d820      	bhi.n	8106810 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81067ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81067d2:	d012      	beq.n	81067fa <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 81067d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81067d8:	d81a      	bhi.n	8106810 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 81067da:	2b00      	cmp	r3, #0
 81067dc:	d022      	beq.n	8106824 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 81067de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81067e2:	d115      	bne.n	8106810 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81067e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81067e8:	3308      	adds	r3, #8
 81067ea:	2100      	movs	r1, #0
 81067ec:	4618      	mov	r0, r3
 81067ee:	f001 fcc1 	bl	8108174 <RCCEx_PLL2_Config>
 81067f2:	4603      	mov	r3, r0
 81067f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81067f8:	e015      	b.n	8106826 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81067fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81067fe:	3328      	adds	r3, #40	@ 0x28
 8106800:	2102      	movs	r1, #2
 8106802:	4618      	mov	r0, r3
 8106804:	f001 fd68 	bl	81082d8 <RCCEx_PLL3_Config>
 8106808:	4603      	mov	r3, r0
 810680a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810680e:	e00a      	b.n	8106826 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106810:	2301      	movs	r3, #1
 8106812:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106816:	e006      	b.n	8106826 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8106818:	bf00      	nop
 810681a:	e004      	b.n	8106826 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 810681c:	bf00      	nop
 810681e:	e002      	b.n	8106826 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8106820:	bf00      	nop
 8106822:	e000      	b.n	8106826 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8106824:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106826:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810682a:	2b00      	cmp	r3, #0
 810682c:	d10b      	bne.n	8106846 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810682e:	4b5c      	ldr	r3, [pc, #368]	@ (81069a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106830:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106832:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8106836:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810683a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 810683e:	4a58      	ldr	r2, [pc, #352]	@ (81069a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106840:	430b      	orrs	r3, r1
 8106842:	6593      	str	r3, [r2, #88]	@ 0x58
 8106844:	e003      	b.n	810684e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106846:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810684a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810684e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106856:	f002 0308 	and.w	r3, r2, #8
 810685a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810685e:	2300      	movs	r3, #0
 8106860:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8106864:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8106868:	460b      	mov	r3, r1
 810686a:	4313      	orrs	r3, r2
 810686c:	d01e      	beq.n	81068ac <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810686e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106872:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8106876:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810687a:	d10c      	bne.n	8106896 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810687c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106880:	3328      	adds	r3, #40	@ 0x28
 8106882:	2102      	movs	r1, #2
 8106884:	4618      	mov	r0, r3
 8106886:	f001 fd27 	bl	81082d8 <RCCEx_PLL3_Config>
 810688a:	4603      	mov	r3, r0
 810688c:	2b00      	cmp	r3, #0
 810688e:	d002      	beq.n	8106896 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8106890:	2301      	movs	r3, #1
 8106892:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8106896:	4b42      	ldr	r3, [pc, #264]	@ (81069a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810689a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810689e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81068a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81068a6:	4a3e      	ldr	r2, [pc, #248]	@ (81069a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81068a8:	430b      	orrs	r3, r1
 81068aa:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81068ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81068b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81068b4:	f002 0310 	and.w	r3, r2, #16
 81068b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 81068bc:	2300      	movs	r3, #0
 81068be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 81068c2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 81068c6:	460b      	mov	r3, r1
 81068c8:	4313      	orrs	r3, r2
 81068ca:	d01e      	beq.n	810690a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81068cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81068d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81068d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81068d8:	d10c      	bne.n	81068f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81068da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81068de:	3328      	adds	r3, #40	@ 0x28
 81068e0:	2102      	movs	r1, #2
 81068e2:	4618      	mov	r0, r3
 81068e4:	f001 fcf8 	bl	81082d8 <RCCEx_PLL3_Config>
 81068e8:	4603      	mov	r3, r0
 81068ea:	2b00      	cmp	r3, #0
 81068ec:	d002      	beq.n	81068f4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 81068ee:	2301      	movs	r3, #1
 81068f0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81068f4:	4b2a      	ldr	r3, [pc, #168]	@ (81069a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 81068f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81068f8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81068fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106900:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8106904:	4a26      	ldr	r2, [pc, #152]	@ (81069a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106906:	430b      	orrs	r3, r1
 8106908:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 810690a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810690e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106912:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8106916:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 810691a:	2300      	movs	r3, #0
 810691c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8106920:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8106924:	460b      	mov	r3, r1
 8106926:	4313      	orrs	r3, r2
 8106928:	d040      	beq.n	81069ac <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 810692a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810692e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8106932:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106936:	d022      	beq.n	810697e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8106938:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810693c:	d81b      	bhi.n	8106976 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 810693e:	2b00      	cmp	r3, #0
 8106940:	d003      	beq.n	810694a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8106942:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106946:	d00b      	beq.n	8106960 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8106948:	e015      	b.n	8106976 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810694a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810694e:	3308      	adds	r3, #8
 8106950:	2100      	movs	r1, #0
 8106952:	4618      	mov	r0, r3
 8106954:	f001 fc0e 	bl	8108174 <RCCEx_PLL2_Config>
 8106958:	4603      	mov	r3, r0
 810695a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 810695e:	e00f      	b.n	8106980 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106960:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106964:	3328      	adds	r3, #40	@ 0x28
 8106966:	2102      	movs	r1, #2
 8106968:	4618      	mov	r0, r3
 810696a:	f001 fcb5 	bl	81082d8 <RCCEx_PLL3_Config>
 810696e:	4603      	mov	r3, r0
 8106970:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8106974:	e004      	b.n	8106980 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106976:	2301      	movs	r3, #1
 8106978:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810697c:	e000      	b.n	8106980 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 810697e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106980:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106984:	2b00      	cmp	r3, #0
 8106986:	d10d      	bne.n	81069a4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8106988:	4b05      	ldr	r3, [pc, #20]	@ (81069a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810698a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810698c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8106990:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106994:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8106998:	4a01      	ldr	r2, [pc, #4]	@ (81069a0 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 810699a:	430b      	orrs	r3, r1
 810699c:	6593      	str	r3, [r2, #88]	@ 0x58
 810699e:	e005      	b.n	81069ac <HAL_RCCEx_PeriphCLKConfig+0xfec>
 81069a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81069a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81069a8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81069ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81069b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81069b4:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 81069b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 81069ba:	2300      	movs	r3, #0
 81069bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81069be:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 81069c2:	460b      	mov	r3, r1
 81069c4:	4313      	orrs	r3, r2
 81069c6:	d03b      	beq.n	8106a40 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81069c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81069cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81069d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81069d4:	d01f      	beq.n	8106a16 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 81069d6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81069da:	d818      	bhi.n	8106a0e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 81069dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81069e0:	d003      	beq.n	81069ea <HAL_RCCEx_PeriphCLKConfig+0x102a>
 81069e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81069e6:	d007      	beq.n	81069f8 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 81069e8:	e011      	b.n	8106a0e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81069ea:	4b64      	ldr	r3, [pc, #400]	@ (8106b7c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81069ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81069ee:	4a63      	ldr	r2, [pc, #396]	@ (8106b7c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 81069f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81069f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 81069f6:	e00f      	b.n	8106a18 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81069f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81069fc:	3328      	adds	r3, #40	@ 0x28
 81069fe:	2101      	movs	r1, #1
 8106a00:	4618      	mov	r0, r3
 8106a02:	f001 fc69 	bl	81082d8 <RCCEx_PLL3_Config>
 8106a06:	4603      	mov	r3, r0
 8106a08:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8106a0c:	e004      	b.n	8106a18 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106a0e:	2301      	movs	r3, #1
 8106a10:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106a14:	e000      	b.n	8106a18 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8106a16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106a18:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106a1c:	2b00      	cmp	r3, #0
 8106a1e:	d10b      	bne.n	8106a38 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8106a20:	4b56      	ldr	r3, [pc, #344]	@ (8106b7c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106a24:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8106a28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8106a30:	4a52      	ldr	r2, [pc, #328]	@ (8106b7c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106a32:	430b      	orrs	r3, r1
 8106a34:	6553      	str	r3, [r2, #84]	@ 0x54
 8106a36:	e003      	b.n	8106a40 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106a38:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106a3c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8106a40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106a48:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8106a4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8106a4e:	2300      	movs	r3, #0
 8106a50:	677b      	str	r3, [r7, #116]	@ 0x74
 8106a52:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8106a56:	460b      	mov	r3, r1
 8106a58:	4313      	orrs	r3, r2
 8106a5a:	d031      	beq.n	8106ac0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8106a5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106a62:	2b00      	cmp	r3, #0
 8106a64:	d003      	beq.n	8106a6e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8106a66:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106a6a:	d007      	beq.n	8106a7c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8106a6c:	e011      	b.n	8106a92 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106a6e:	4b43      	ldr	r3, [pc, #268]	@ (8106b7c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106a72:	4a42      	ldr	r2, [pc, #264]	@ (8106b7c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106a74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106a78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8106a7a:	e00e      	b.n	8106a9a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106a7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106a80:	3308      	adds	r3, #8
 8106a82:	2102      	movs	r1, #2
 8106a84:	4618      	mov	r0, r3
 8106a86:	f001 fb75 	bl	8108174 <RCCEx_PLL2_Config>
 8106a8a:	4603      	mov	r3, r0
 8106a8c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8106a90:	e003      	b.n	8106a9a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8106a92:	2301      	movs	r3, #1
 8106a94:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106a98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106a9a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106a9e:	2b00      	cmp	r3, #0
 8106aa0:	d10a      	bne.n	8106ab8 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8106aa2:	4b36      	ldr	r3, [pc, #216]	@ (8106b7c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106aa6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8106aaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106aae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106ab0:	4a32      	ldr	r2, [pc, #200]	@ (8106b7c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106ab2:	430b      	orrs	r3, r1
 8106ab4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106ab6:	e003      	b.n	8106ac0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106ab8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106abc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8106ac0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106ac8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8106acc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8106ace:	2300      	movs	r3, #0
 8106ad0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8106ad2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8106ad6:	460b      	mov	r3, r1
 8106ad8:	4313      	orrs	r3, r2
 8106ada:	d00c      	beq.n	8106af6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106adc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106ae0:	3328      	adds	r3, #40	@ 0x28
 8106ae2:	2102      	movs	r1, #2
 8106ae4:	4618      	mov	r0, r3
 8106ae6:	f001 fbf7 	bl	81082d8 <RCCEx_PLL3_Config>
 8106aea:	4603      	mov	r3, r0
 8106aec:	2b00      	cmp	r3, #0
 8106aee:	d002      	beq.n	8106af6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8106af0:	2301      	movs	r3, #1
 8106af2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8106af6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106afe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8106b02:	663b      	str	r3, [r7, #96]	@ 0x60
 8106b04:	2300      	movs	r3, #0
 8106b06:	667b      	str	r3, [r7, #100]	@ 0x64
 8106b08:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8106b0c:	460b      	mov	r3, r1
 8106b0e:	4313      	orrs	r3, r2
 8106b10:	d03a      	beq.n	8106b88 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8106b12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8106b1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106b1e:	d018      	beq.n	8106b52 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8106b20:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106b24:	d811      	bhi.n	8106b4a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8106b26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8106b2a:	d014      	beq.n	8106b56 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8106b2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8106b30:	d80b      	bhi.n	8106b4a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8106b32:	2b00      	cmp	r3, #0
 8106b34:	d011      	beq.n	8106b5a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8106b36:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106b3a:	d106      	bne.n	8106b4a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8106b7c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106b40:	4a0e      	ldr	r2, [pc, #56]	@ (8106b7c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106b42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106b46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8106b48:	e008      	b.n	8106b5c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106b4a:	2301      	movs	r3, #1
 8106b4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106b50:	e004      	b.n	8106b5c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8106b52:	bf00      	nop
 8106b54:	e002      	b.n	8106b5c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8106b56:	bf00      	nop
 8106b58:	e000      	b.n	8106b5c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8106b5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106b5c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106b60:	2b00      	cmp	r3, #0
 8106b62:	d10d      	bne.n	8106b80 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8106b64:	4b05      	ldr	r3, [pc, #20]	@ (8106b7c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106b66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106b68:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8106b6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106b70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8106b74:	4a01      	ldr	r2, [pc, #4]	@ (8106b7c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106b76:	430b      	orrs	r3, r1
 8106b78:	6553      	str	r3, [r2, #84]	@ 0x54
 8106b7a:	e005      	b.n	8106b88 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8106b7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106b80:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106b84:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8106b88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b90:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8106b94:	65bb      	str	r3, [r7, #88]	@ 0x58
 8106b96:	2300      	movs	r3, #0
 8106b98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8106b9a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8106b9e:	460b      	mov	r3, r1
 8106ba0:	4313      	orrs	r3, r2
 8106ba2:	d009      	beq.n	8106bb8 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8106ba4:	4baa      	ldr	r3, [pc, #680]	@ (8106e50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8106ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106ba8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8106bac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106bb0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8106bb2:	4aa7      	ldr	r2, [pc, #668]	@ (8106e50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8106bb4:	430b      	orrs	r3, r1
 8106bb6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8106bb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106bc0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8106bc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8106bc6:	2300      	movs	r3, #0
 8106bc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8106bca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8106bce:	460b      	mov	r3, r1
 8106bd0:	4313      	orrs	r3, r2
 8106bd2:	d00a      	beq.n	8106bea <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8106bd4:	4b9e      	ldr	r3, [pc, #632]	@ (8106e50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8106bd6:	691b      	ldr	r3, [r3, #16]
 8106bd8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8106bdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106be0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8106be4:	4a9a      	ldr	r2, [pc, #616]	@ (8106e50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8106be6:	430b      	orrs	r3, r1
 8106be8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8106bea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106bf2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8106bf6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8106bf8:	2300      	movs	r3, #0
 8106bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8106bfc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8106c00:	460b      	mov	r3, r1
 8106c02:	4313      	orrs	r3, r2
 8106c04:	d009      	beq.n	8106c1a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8106c06:	4b92      	ldr	r3, [pc, #584]	@ (8106e50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8106c08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106c0a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8106c0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106c14:	4a8e      	ldr	r2, [pc, #568]	@ (8106e50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8106c16:	430b      	orrs	r3, r1
 8106c18:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8106c1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c22:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8106c26:	643b      	str	r3, [r7, #64]	@ 0x40
 8106c28:	2300      	movs	r3, #0
 8106c2a:	647b      	str	r3, [r7, #68]	@ 0x44
 8106c2c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8106c30:	460b      	mov	r3, r1
 8106c32:	4313      	orrs	r3, r2
 8106c34:	d00e      	beq.n	8106c54 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8106c36:	4b86      	ldr	r3, [pc, #536]	@ (8106e50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8106c38:	691b      	ldr	r3, [r3, #16]
 8106c3a:	4a85      	ldr	r2, [pc, #532]	@ (8106e50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8106c3c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8106c40:	6113      	str	r3, [r2, #16]
 8106c42:	4b83      	ldr	r3, [pc, #524]	@ (8106e50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8106c44:	6919      	ldr	r1, [r3, #16]
 8106c46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106c4a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8106c4e:	4a80      	ldr	r2, [pc, #512]	@ (8106e50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8106c50:	430b      	orrs	r3, r1
 8106c52:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8106c54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c5c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8106c60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8106c62:	2300      	movs	r3, #0
 8106c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106c66:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8106c6a:	460b      	mov	r3, r1
 8106c6c:	4313      	orrs	r3, r2
 8106c6e:	d009      	beq.n	8106c84 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8106c70:	4b77      	ldr	r3, [pc, #476]	@ (8106e50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8106c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106c74:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8106c78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106c7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106c7e:	4a74      	ldr	r2, [pc, #464]	@ (8106e50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8106c80:	430b      	orrs	r3, r1
 8106c82:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8106c84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c8c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8106c90:	633b      	str	r3, [r7, #48]	@ 0x30
 8106c92:	2300      	movs	r3, #0
 8106c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8106c96:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8106c9a:	460b      	mov	r3, r1
 8106c9c:	4313      	orrs	r3, r2
 8106c9e:	d00a      	beq.n	8106cb6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8106ca0:	4b6b      	ldr	r3, [pc, #428]	@ (8106e50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8106ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106ca4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8106ca8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8106cb0:	4a67      	ldr	r2, [pc, #412]	@ (8106e50 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8106cb2:	430b      	orrs	r3, r1
 8106cb4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8106cb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106cbe:	2100      	movs	r1, #0
 8106cc0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8106cc2:	f003 0301 	and.w	r3, r3, #1
 8106cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8106cc8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8106ccc:	460b      	mov	r3, r1
 8106cce:	4313      	orrs	r3, r2
 8106cd0:	d011      	beq.n	8106cf6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106cd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106cd6:	3308      	adds	r3, #8
 8106cd8:	2100      	movs	r1, #0
 8106cda:	4618      	mov	r0, r3
 8106cdc:	f001 fa4a 	bl	8108174 <RCCEx_PLL2_Config>
 8106ce0:	4603      	mov	r3, r0
 8106ce2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8106ce6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106cea:	2b00      	cmp	r3, #0
 8106cec:	d003      	beq.n	8106cf6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106cee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106cf2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8106cf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106cfe:	2100      	movs	r1, #0
 8106d00:	6239      	str	r1, [r7, #32]
 8106d02:	f003 0302 	and.w	r3, r3, #2
 8106d06:	627b      	str	r3, [r7, #36]	@ 0x24
 8106d08:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8106d0c:	460b      	mov	r3, r1
 8106d0e:	4313      	orrs	r3, r2
 8106d10:	d011      	beq.n	8106d36 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106d12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106d16:	3308      	adds	r3, #8
 8106d18:	2101      	movs	r1, #1
 8106d1a:	4618      	mov	r0, r3
 8106d1c:	f001 fa2a 	bl	8108174 <RCCEx_PLL2_Config>
 8106d20:	4603      	mov	r3, r0
 8106d22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8106d26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106d2a:	2b00      	cmp	r3, #0
 8106d2c:	d003      	beq.n	8106d36 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106d32:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8106d36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d3e:	2100      	movs	r1, #0
 8106d40:	61b9      	str	r1, [r7, #24]
 8106d42:	f003 0304 	and.w	r3, r3, #4
 8106d46:	61fb      	str	r3, [r7, #28]
 8106d48:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8106d4c:	460b      	mov	r3, r1
 8106d4e:	4313      	orrs	r3, r2
 8106d50:	d011      	beq.n	8106d76 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106d52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106d56:	3308      	adds	r3, #8
 8106d58:	2102      	movs	r1, #2
 8106d5a:	4618      	mov	r0, r3
 8106d5c:	f001 fa0a 	bl	8108174 <RCCEx_PLL2_Config>
 8106d60:	4603      	mov	r3, r0
 8106d62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8106d66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106d6a:	2b00      	cmp	r3, #0
 8106d6c:	d003      	beq.n	8106d76 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106d72:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8106d76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d7e:	2100      	movs	r1, #0
 8106d80:	6139      	str	r1, [r7, #16]
 8106d82:	f003 0308 	and.w	r3, r3, #8
 8106d86:	617b      	str	r3, [r7, #20]
 8106d88:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8106d8c:	460b      	mov	r3, r1
 8106d8e:	4313      	orrs	r3, r2
 8106d90:	d011      	beq.n	8106db6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106d92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106d96:	3328      	adds	r3, #40	@ 0x28
 8106d98:	2100      	movs	r1, #0
 8106d9a:	4618      	mov	r0, r3
 8106d9c:	f001 fa9c 	bl	81082d8 <RCCEx_PLL3_Config>
 8106da0:	4603      	mov	r3, r0
 8106da2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8106da6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106daa:	2b00      	cmp	r3, #0
 8106dac:	d003      	beq.n	8106db6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106dae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106db2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8106db6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106dbe:	2100      	movs	r1, #0
 8106dc0:	60b9      	str	r1, [r7, #8]
 8106dc2:	f003 0310 	and.w	r3, r3, #16
 8106dc6:	60fb      	str	r3, [r7, #12]
 8106dc8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8106dcc:	460b      	mov	r3, r1
 8106dce:	4313      	orrs	r3, r2
 8106dd0:	d011      	beq.n	8106df6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106dd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106dd6:	3328      	adds	r3, #40	@ 0x28
 8106dd8:	2101      	movs	r1, #1
 8106dda:	4618      	mov	r0, r3
 8106ddc:	f001 fa7c 	bl	81082d8 <RCCEx_PLL3_Config>
 8106de0:	4603      	mov	r3, r0
 8106de2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8106de6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106dea:	2b00      	cmp	r3, #0
 8106dec:	d003      	beq.n	8106df6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106dee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106df2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8106df6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106dfe:	2100      	movs	r1, #0
 8106e00:	6039      	str	r1, [r7, #0]
 8106e02:	f003 0320 	and.w	r3, r3, #32
 8106e06:	607b      	str	r3, [r7, #4]
 8106e08:	e9d7 1200 	ldrd	r1, r2, [r7]
 8106e0c:	460b      	mov	r3, r1
 8106e0e:	4313      	orrs	r3, r2
 8106e10:	d011      	beq.n	8106e36 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106e12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106e16:	3328      	adds	r3, #40	@ 0x28
 8106e18:	2102      	movs	r1, #2
 8106e1a:	4618      	mov	r0, r3
 8106e1c:	f001 fa5c 	bl	81082d8 <RCCEx_PLL3_Config>
 8106e20:	4603      	mov	r3, r0
 8106e22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8106e26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106e2a:	2b00      	cmp	r3, #0
 8106e2c:	d003      	beq.n	8106e36 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106e32:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8106e36:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8106e3a:	2b00      	cmp	r3, #0
 8106e3c:	d101      	bne.n	8106e42 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8106e3e:	2300      	movs	r3, #0
 8106e40:	e000      	b.n	8106e44 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8106e42:	2301      	movs	r3, #1
}
 8106e44:	4618      	mov	r0, r3
 8106e46:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8106e4a:	46bd      	mov	sp, r7
 8106e4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8106e50:	58024400 	.word	0x58024400

08106e54 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8106e54:	b580      	push	{r7, lr}
 8106e56:	b090      	sub	sp, #64	@ 0x40
 8106e58:	af00      	add	r7, sp, #0
 8106e5a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8106e5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106e62:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8106e66:	430b      	orrs	r3, r1
 8106e68:	f040 8094 	bne.w	8106f94 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8106e6c:	4b9e      	ldr	r3, [pc, #632]	@ (81070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106e6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106e70:	f003 0307 	and.w	r3, r3, #7
 8106e74:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8106e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106e78:	2b04      	cmp	r3, #4
 8106e7a:	f200 8087 	bhi.w	8106f8c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8106e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8106e84 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8106e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106e84:	08106e99 	.word	0x08106e99
 8106e88:	08106ec1 	.word	0x08106ec1
 8106e8c:	08106ee9 	.word	0x08106ee9
 8106e90:	08106f85 	.word	0x08106f85
 8106e94:	08106f11 	.word	0x08106f11
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106e98:	4b93      	ldr	r3, [pc, #588]	@ (81070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106e9a:	681b      	ldr	r3, [r3, #0]
 8106e9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106ea0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106ea4:	d108      	bne.n	8106eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106ea6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106eaa:	4618      	mov	r0, r3
 8106eac:	f001 f810 	bl	8107ed0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8106eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8106eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106eb4:	f000 bd45 	b.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106eb8:	2300      	movs	r3, #0
 8106eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106ebc:	f000 bd41 	b.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8106ec0:	4b89      	ldr	r3, [pc, #548]	@ (81070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106ec2:	681b      	ldr	r3, [r3, #0]
 8106ec4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8106ec8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8106ecc:	d108      	bne.n	8106ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8106ece:	f107 0318 	add.w	r3, r7, #24
 8106ed2:	4618      	mov	r0, r3
 8106ed4:	f000 fd54 	bl	8107980 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8106ed8:	69bb      	ldr	r3, [r7, #24]
 8106eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106edc:	f000 bd31 	b.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106ee0:	2300      	movs	r3, #0
 8106ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106ee4:	f000 bd2d 	b.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8106ee8:	4b7f      	ldr	r3, [pc, #508]	@ (81070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106eea:	681b      	ldr	r3, [r3, #0]
 8106eec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8106ef0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106ef4:	d108      	bne.n	8106f08 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8106ef6:	f107 030c 	add.w	r3, r7, #12
 8106efa:	4618      	mov	r0, r3
 8106efc:	f000 fe94 	bl	8107c28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8106f00:	68fb      	ldr	r3, [r7, #12]
 8106f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8106f04:	f000 bd1d 	b.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8106f08:	2300      	movs	r3, #0
 8106f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106f0c:	f000 bd19 	b.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8106f10:	4b75      	ldr	r3, [pc, #468]	@ (81070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106f14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8106f18:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8106f1a:	4b73      	ldr	r3, [pc, #460]	@ (81070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f1c:	681b      	ldr	r3, [r3, #0]
 8106f1e:	f003 0304 	and.w	r3, r3, #4
 8106f22:	2b04      	cmp	r3, #4
 8106f24:	d10c      	bne.n	8106f40 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8106f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106f28:	2b00      	cmp	r3, #0
 8106f2a:	d109      	bne.n	8106f40 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8106f2c:	4b6e      	ldr	r3, [pc, #440]	@ (81070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f2e:	681b      	ldr	r3, [r3, #0]
 8106f30:	08db      	lsrs	r3, r3, #3
 8106f32:	f003 0303 	and.w	r3, r3, #3
 8106f36:	4a6d      	ldr	r2, [pc, #436]	@ (81070ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8106f38:	fa22 f303 	lsr.w	r3, r2, r3
 8106f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106f3e:	e01f      	b.n	8106f80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8106f40:	4b69      	ldr	r3, [pc, #420]	@ (81070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f42:	681b      	ldr	r3, [r3, #0]
 8106f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106f48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106f4c:	d106      	bne.n	8106f5c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8106f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106f50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106f54:	d102      	bne.n	8106f5c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8106f56:	4b66      	ldr	r3, [pc, #408]	@ (81070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8106f58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106f5a:	e011      	b.n	8106f80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8106f5c:	4b62      	ldr	r3, [pc, #392]	@ (81070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106f5e:	681b      	ldr	r3, [r3, #0]
 8106f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8106f64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106f68:	d106      	bne.n	8106f78 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8106f6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8106f6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106f70:	d102      	bne.n	8106f78 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8106f72:	4b60      	ldr	r3, [pc, #384]	@ (81070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8106f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106f76:	e003      	b.n	8106f80 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8106f78:	2300      	movs	r3, #0
 8106f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8106f7c:	f000 bce1 	b.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8106f80:	f000 bcdf 	b.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8106f84:	4b5c      	ldr	r3, [pc, #368]	@ (81070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8106f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106f88:	f000 bcdb 	b.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8106f8c:	2300      	movs	r3, #0
 8106f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8106f90:	f000 bcd7 	b.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8106f94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8106f98:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8106f9c:	430b      	orrs	r3, r1
 8106f9e:	f040 80ad 	bne.w	81070fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8106fa2:	4b51      	ldr	r3, [pc, #324]	@ (81070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106fa6:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8106faa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8106fac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106fae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106fb2:	d056      	beq.n	8107062 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8106fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106fb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106fba:	f200 8090 	bhi.w	81070de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8106fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106fc0:	2bc0      	cmp	r3, #192	@ 0xc0
 8106fc2:	f000 8088 	beq.w	81070d6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8106fc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106fc8:	2bc0      	cmp	r3, #192	@ 0xc0
 8106fca:	f200 8088 	bhi.w	81070de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8106fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106fd0:	2b80      	cmp	r3, #128	@ 0x80
 8106fd2:	d032      	beq.n	810703a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8106fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106fd6:	2b80      	cmp	r3, #128	@ 0x80
 8106fd8:	f200 8081 	bhi.w	81070de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8106fdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106fde:	2b00      	cmp	r3, #0
 8106fe0:	d003      	beq.n	8106fea <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8106fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8106fe4:	2b40      	cmp	r3, #64	@ 0x40
 8106fe6:	d014      	beq.n	8107012 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8106fe8:	e079      	b.n	81070de <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8106fea:	4b3f      	ldr	r3, [pc, #252]	@ (81070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8106fec:	681b      	ldr	r3, [r3, #0]
 8106fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8106ff2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106ff6:	d108      	bne.n	810700a <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8106ff8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8106ffc:	4618      	mov	r0, r3
 8106ffe:	f000 ff67 	bl	8107ed0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107004:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107006:	f000 bc9c 	b.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810700a:	2300      	movs	r3, #0
 810700c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810700e:	f000 bc98 	b.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107012:	4b35      	ldr	r3, [pc, #212]	@ (81070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107014:	681b      	ldr	r3, [r3, #0]
 8107016:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810701a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810701e:	d108      	bne.n	8107032 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107020:	f107 0318 	add.w	r3, r7, #24
 8107024:	4618      	mov	r0, r3
 8107026:	f000 fcab 	bl	8107980 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810702a:	69bb      	ldr	r3, [r7, #24]
 810702c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810702e:	f000 bc88 	b.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107032:	2300      	movs	r3, #0
 8107034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107036:	f000 bc84 	b.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810703a:	4b2b      	ldr	r3, [pc, #172]	@ (81070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810703c:	681b      	ldr	r3, [r3, #0]
 810703e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107042:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107046:	d108      	bne.n	810705a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107048:	f107 030c 	add.w	r3, r7, #12
 810704c:	4618      	mov	r0, r3
 810704e:	f000 fdeb 	bl	8107c28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107052:	68fb      	ldr	r3, [r7, #12]
 8107054:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107056:	f000 bc74 	b.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810705a:	2300      	movs	r3, #0
 810705c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810705e:	f000 bc70 	b.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107062:	4b21      	ldr	r3, [pc, #132]	@ (81070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107064:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107066:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810706a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810706c:	4b1e      	ldr	r3, [pc, #120]	@ (81070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810706e:	681b      	ldr	r3, [r3, #0]
 8107070:	f003 0304 	and.w	r3, r3, #4
 8107074:	2b04      	cmp	r3, #4
 8107076:	d10c      	bne.n	8107092 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8107078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810707a:	2b00      	cmp	r3, #0
 810707c:	d109      	bne.n	8107092 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810707e:	4b1a      	ldr	r3, [pc, #104]	@ (81070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107080:	681b      	ldr	r3, [r3, #0]
 8107082:	08db      	lsrs	r3, r3, #3
 8107084:	f003 0303 	and.w	r3, r3, #3
 8107088:	4a18      	ldr	r2, [pc, #96]	@ (81070ec <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810708a:	fa22 f303 	lsr.w	r3, r2, r3
 810708e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107090:	e01f      	b.n	81070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107092:	4b15      	ldr	r3, [pc, #84]	@ (81070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107094:	681b      	ldr	r3, [r3, #0]
 8107096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810709a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810709e:	d106      	bne.n	81070ae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 81070a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81070a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81070a6:	d102      	bne.n	81070ae <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81070a8:	4b11      	ldr	r3, [pc, #68]	@ (81070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81070aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81070ac:	e011      	b.n	81070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81070ae:	4b0e      	ldr	r3, [pc, #56]	@ (81070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81070b0:	681b      	ldr	r3, [r3, #0]
 81070b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81070b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81070ba:	d106      	bne.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 81070bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81070be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81070c2:	d102      	bne.n	81070ca <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81070c4:	4b0b      	ldr	r3, [pc, #44]	@ (81070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81070c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81070c8:	e003      	b.n	81070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81070ca:	2300      	movs	r3, #0
 81070cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81070ce:	f000 bc38 	b.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81070d2:	f000 bc36 	b.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81070d6:	4b08      	ldr	r3, [pc, #32]	@ (81070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81070d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81070da:	f000 bc32 	b.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81070de:	2300      	movs	r3, #0
 81070e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81070e2:	f000 bc2e 	b.w	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81070e6:	bf00      	nop
 81070e8:	58024400 	.word	0x58024400
 81070ec:	03d09000 	.word	0x03d09000
 81070f0:	003d0900 	.word	0x003d0900
 81070f4:	017d7840 	.word	0x017d7840
 81070f8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 81070fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107100:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8107104:	430b      	orrs	r3, r1
 8107106:	f040 809c 	bne.w	8107242 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 810710a:	4b9e      	ldr	r3, [pc, #632]	@ (8107384 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810710c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810710e:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8107112:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107116:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810711a:	d054      	beq.n	81071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 810711c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810711e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8107122:	f200 808b 	bhi.w	810723c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8107126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107128:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810712c:	f000 8083 	beq.w	8107236 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8107130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107132:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8107136:	f200 8081 	bhi.w	810723c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810713a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810713c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107140:	d02f      	beq.n	81071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8107142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107144:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107148:	d878      	bhi.n	810723c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810714a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810714c:	2b00      	cmp	r3, #0
 810714e:	d004      	beq.n	810715a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8107150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107152:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8107156:	d012      	beq.n	810717e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8107158:	e070      	b.n	810723c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810715a:	4b8a      	ldr	r3, [pc, #552]	@ (8107384 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810715c:	681b      	ldr	r3, [r3, #0]
 810715e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107162:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107166:	d107      	bne.n	8107178 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107168:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810716c:	4618      	mov	r0, r3
 810716e:	f000 feaf 	bl	8107ed0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107174:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107176:	e3e4      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107178:	2300      	movs	r3, #0
 810717a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810717c:	e3e1      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810717e:	4b81      	ldr	r3, [pc, #516]	@ (8107384 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107180:	681b      	ldr	r3, [r3, #0]
 8107182:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107186:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810718a:	d107      	bne.n	810719c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810718c:	f107 0318 	add.w	r3, r7, #24
 8107190:	4618      	mov	r0, r3
 8107192:	f000 fbf5 	bl	8107980 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107196:	69bb      	ldr	r3, [r7, #24]
 8107198:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810719a:	e3d2      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810719c:	2300      	movs	r3, #0
 810719e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81071a0:	e3cf      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81071a2:	4b78      	ldr	r3, [pc, #480]	@ (8107384 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81071a4:	681b      	ldr	r3, [r3, #0]
 81071a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81071aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81071ae:	d107      	bne.n	81071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81071b0:	f107 030c 	add.w	r3, r7, #12
 81071b4:	4618      	mov	r0, r3
 81071b6:	f000 fd37 	bl	8107c28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81071ba:	68fb      	ldr	r3, [r7, #12]
 81071bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81071be:	e3c0      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81071c0:	2300      	movs	r3, #0
 81071c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81071c4:	e3bd      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81071c6:	4b6f      	ldr	r3, [pc, #444]	@ (8107384 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81071c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81071ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81071ce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81071d0:	4b6c      	ldr	r3, [pc, #432]	@ (8107384 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81071d2:	681b      	ldr	r3, [r3, #0]
 81071d4:	f003 0304 	and.w	r3, r3, #4
 81071d8:	2b04      	cmp	r3, #4
 81071da:	d10c      	bne.n	81071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 81071dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81071de:	2b00      	cmp	r3, #0
 81071e0:	d109      	bne.n	81071f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81071e2:	4b68      	ldr	r3, [pc, #416]	@ (8107384 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81071e4:	681b      	ldr	r3, [r3, #0]
 81071e6:	08db      	lsrs	r3, r3, #3
 81071e8:	f003 0303 	and.w	r3, r3, #3
 81071ec:	4a66      	ldr	r2, [pc, #408]	@ (8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 81071ee:	fa22 f303 	lsr.w	r3, r2, r3
 81071f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81071f4:	e01e      	b.n	8107234 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81071f6:	4b63      	ldr	r3, [pc, #396]	@ (8107384 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81071f8:	681b      	ldr	r3, [r3, #0]
 81071fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81071fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107202:	d106      	bne.n	8107212 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8107204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107206:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810720a:	d102      	bne.n	8107212 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810720c:	4b5f      	ldr	r3, [pc, #380]	@ (810738c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810720e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107210:	e010      	b.n	8107234 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107212:	4b5c      	ldr	r3, [pc, #368]	@ (8107384 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107214:	681b      	ldr	r3, [r3, #0]
 8107216:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810721a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810721e:	d106      	bne.n	810722e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8107220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107222:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107226:	d102      	bne.n	810722e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107228:	4b59      	ldr	r3, [pc, #356]	@ (8107390 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810722a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810722c:	e002      	b.n	8107234 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810722e:	2300      	movs	r3, #0
 8107230:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107232:	e386      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107234:	e385      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8107236:	4b57      	ldr	r3, [pc, #348]	@ (8107394 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8107238:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810723a:	e382      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 810723c:	2300      	movs	r3, #0
 810723e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107240:	e37f      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8107242:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107246:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 810724a:	430b      	orrs	r3, r1
 810724c:	f040 80a7 	bne.w	810739e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8107250:	4b4c      	ldr	r3, [pc, #304]	@ (8107384 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107254:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8107258:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810725a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810725c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107260:	d055      	beq.n	810730e <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8107262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107264:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107268:	f200 8096 	bhi.w	8107398 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 810726c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810726e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107272:	f000 8084 	beq.w	810737e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8107276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107278:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810727c:	f200 808c 	bhi.w	8107398 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107282:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107286:	d030      	beq.n	81072ea <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8107288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810728a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810728e:	f200 8083 	bhi.w	8107398 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107294:	2b00      	cmp	r3, #0
 8107296:	d004      	beq.n	81072a2 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8107298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810729a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810729e:	d012      	beq.n	81072c6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 81072a0:	e07a      	b.n	8107398 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81072a2:	4b38      	ldr	r3, [pc, #224]	@ (8107384 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81072a4:	681b      	ldr	r3, [r3, #0]
 81072a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81072aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81072ae:	d107      	bne.n	81072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81072b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81072b4:	4618      	mov	r0, r3
 81072b6:	f000 fe0b 	bl	8107ed0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81072ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81072bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81072be:	e340      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81072c0:	2300      	movs	r3, #0
 81072c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81072c4:	e33d      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81072c6:	4b2f      	ldr	r3, [pc, #188]	@ (8107384 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81072c8:	681b      	ldr	r3, [r3, #0]
 81072ca:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81072ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81072d2:	d107      	bne.n	81072e4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81072d4:	f107 0318 	add.w	r3, r7, #24
 81072d8:	4618      	mov	r0, r3
 81072da:	f000 fb51 	bl	8107980 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81072de:	69bb      	ldr	r3, [r7, #24]
 81072e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81072e2:	e32e      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81072e4:	2300      	movs	r3, #0
 81072e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81072e8:	e32b      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81072ea:	4b26      	ldr	r3, [pc, #152]	@ (8107384 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81072ec:	681b      	ldr	r3, [r3, #0]
 81072ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81072f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81072f6:	d107      	bne.n	8107308 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81072f8:	f107 030c 	add.w	r3, r7, #12
 81072fc:	4618      	mov	r0, r3
 81072fe:	f000 fc93 	bl	8107c28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107302:	68fb      	ldr	r3, [r7, #12]
 8107304:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107306:	e31c      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107308:	2300      	movs	r3, #0
 810730a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810730c:	e319      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810730e:	4b1d      	ldr	r3, [pc, #116]	@ (8107384 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107312:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107316:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107318:	4b1a      	ldr	r3, [pc, #104]	@ (8107384 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810731a:	681b      	ldr	r3, [r3, #0]
 810731c:	f003 0304 	and.w	r3, r3, #4
 8107320:	2b04      	cmp	r3, #4
 8107322:	d10c      	bne.n	810733e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8107324:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107326:	2b00      	cmp	r3, #0
 8107328:	d109      	bne.n	810733e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810732a:	4b16      	ldr	r3, [pc, #88]	@ (8107384 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810732c:	681b      	ldr	r3, [r3, #0]
 810732e:	08db      	lsrs	r3, r3, #3
 8107330:	f003 0303 	and.w	r3, r3, #3
 8107334:	4a14      	ldr	r2, [pc, #80]	@ (8107388 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8107336:	fa22 f303 	lsr.w	r3, r2, r3
 810733a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810733c:	e01e      	b.n	810737c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810733e:	4b11      	ldr	r3, [pc, #68]	@ (8107384 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107340:	681b      	ldr	r3, [r3, #0]
 8107342:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107346:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810734a:	d106      	bne.n	810735a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 810734c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810734e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107352:	d102      	bne.n	810735a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107354:	4b0d      	ldr	r3, [pc, #52]	@ (810738c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8107356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107358:	e010      	b.n	810737c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810735a:	4b0a      	ldr	r3, [pc, #40]	@ (8107384 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810735c:	681b      	ldr	r3, [r3, #0]
 810735e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107362:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107366:	d106      	bne.n	8107376 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8107368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810736a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810736e:	d102      	bne.n	8107376 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107370:	4b07      	ldr	r3, [pc, #28]	@ (8107390 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8107372:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107374:	e002      	b.n	810737c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107376:	2300      	movs	r3, #0
 8107378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810737a:	e2e2      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810737c:	e2e1      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810737e:	4b05      	ldr	r3, [pc, #20]	@ (8107394 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8107380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107382:	e2de      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107384:	58024400 	.word	0x58024400
 8107388:	03d09000 	.word	0x03d09000
 810738c:	003d0900 	.word	0x003d0900
 8107390:	017d7840 	.word	0x017d7840
 8107394:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8107398:	2300      	movs	r3, #0
 810739a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810739c:	e2d1      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810739e:	e9d7 2300 	ldrd	r2, r3, [r7]
 81073a2:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 81073a6:	430b      	orrs	r3, r1
 81073a8:	f040 809c 	bne.w	81074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 81073ac:	4b93      	ldr	r3, [pc, #588]	@ (81075fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81073ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81073b0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 81073b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81073b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81073b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81073bc:	d054      	beq.n	8107468 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 81073be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81073c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81073c4:	f200 808b 	bhi.w	81074de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81073c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81073ca:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81073ce:	f000 8083 	beq.w	81074d8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 81073d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81073d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81073d8:	f200 8081 	bhi.w	81074de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81073dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81073de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81073e2:	d02f      	beq.n	8107444 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 81073e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81073e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81073ea:	d878      	bhi.n	81074de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81073ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81073ee:	2b00      	cmp	r3, #0
 81073f0:	d004      	beq.n	81073fc <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 81073f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81073f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81073f8:	d012      	beq.n	8107420 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 81073fa:	e070      	b.n	81074de <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81073fc:	4b7f      	ldr	r3, [pc, #508]	@ (81075fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81073fe:	681b      	ldr	r3, [r3, #0]
 8107400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107404:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107408:	d107      	bne.n	810741a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810740a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810740e:	4618      	mov	r0, r3
 8107410:	f000 fd5e 	bl	8107ed0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107414:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107416:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107418:	e293      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810741a:	2300      	movs	r3, #0
 810741c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810741e:	e290      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107420:	4b76      	ldr	r3, [pc, #472]	@ (81075fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107422:	681b      	ldr	r3, [r3, #0]
 8107424:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107428:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810742c:	d107      	bne.n	810743e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810742e:	f107 0318 	add.w	r3, r7, #24
 8107432:	4618      	mov	r0, r3
 8107434:	f000 faa4 	bl	8107980 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107438:	69bb      	ldr	r3, [r7, #24]
 810743a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810743c:	e281      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810743e:	2300      	movs	r3, #0
 8107440:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107442:	e27e      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107444:	4b6d      	ldr	r3, [pc, #436]	@ (81075fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107446:	681b      	ldr	r3, [r3, #0]
 8107448:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810744c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107450:	d107      	bne.n	8107462 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107452:	f107 030c 	add.w	r3, r7, #12
 8107456:	4618      	mov	r0, r3
 8107458:	f000 fbe6 	bl	8107c28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 810745c:	68fb      	ldr	r3, [r7, #12]
 810745e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107460:	e26f      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107462:	2300      	movs	r3, #0
 8107464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107466:	e26c      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107468:	4b64      	ldr	r3, [pc, #400]	@ (81075fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810746a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810746c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107470:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107472:	4b62      	ldr	r3, [pc, #392]	@ (81075fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107474:	681b      	ldr	r3, [r3, #0]
 8107476:	f003 0304 	and.w	r3, r3, #4
 810747a:	2b04      	cmp	r3, #4
 810747c:	d10c      	bne.n	8107498 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 810747e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107480:	2b00      	cmp	r3, #0
 8107482:	d109      	bne.n	8107498 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107484:	4b5d      	ldr	r3, [pc, #372]	@ (81075fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107486:	681b      	ldr	r3, [r3, #0]
 8107488:	08db      	lsrs	r3, r3, #3
 810748a:	f003 0303 	and.w	r3, r3, #3
 810748e:	4a5c      	ldr	r2, [pc, #368]	@ (8107600 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8107490:	fa22 f303 	lsr.w	r3, r2, r3
 8107494:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107496:	e01e      	b.n	81074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107498:	4b58      	ldr	r3, [pc, #352]	@ (81075fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810749a:	681b      	ldr	r3, [r3, #0]
 810749c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81074a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81074a4:	d106      	bne.n	81074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 81074a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81074a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81074ac:	d102      	bne.n	81074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81074ae:	4b55      	ldr	r3, [pc, #340]	@ (8107604 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81074b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81074b2:	e010      	b.n	81074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81074b4:	4b51      	ldr	r3, [pc, #324]	@ (81075fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81074b6:	681b      	ldr	r3, [r3, #0]
 81074b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81074bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81074c0:	d106      	bne.n	81074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 81074c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81074c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81074c8:	d102      	bne.n	81074d0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81074ca:	4b4f      	ldr	r3, [pc, #316]	@ (8107608 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81074cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81074ce:	e002      	b.n	81074d6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81074d0:	2300      	movs	r3, #0
 81074d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81074d4:	e235      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81074d6:	e234      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81074d8:	4b4c      	ldr	r3, [pc, #304]	@ (810760c <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 81074da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81074dc:	e231      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81074de:	2300      	movs	r3, #0
 81074e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81074e2:	e22e      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 81074e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 81074e8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 81074ec:	430b      	orrs	r3, r1
 81074ee:	f040 808f 	bne.w	8107610 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 81074f2:	4b42      	ldr	r3, [pc, #264]	@ (81075fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81074f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81074f6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 81074fa:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 81074fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81074fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8107502:	d06b      	beq.n	81075dc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8107504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107506:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810750a:	d874      	bhi.n	81075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810750c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810750e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8107512:	d056      	beq.n	81075c2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8107514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107516:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810751a:	d86c      	bhi.n	81075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810751c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810751e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8107522:	d03b      	beq.n	810759c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8107524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107526:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810752a:	d864      	bhi.n	81075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810752c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810752e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107532:	d021      	beq.n	8107578 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8107534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107536:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810753a:	d85c      	bhi.n	81075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 810753c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810753e:	2b00      	cmp	r3, #0
 8107540:	d004      	beq.n	810754c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8107542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107544:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107548:	d004      	beq.n	8107554 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 810754a:	e054      	b.n	81075f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 810754c:	f7fe fa0c 	bl	8105968 <HAL_RCC_GetPCLK1Freq>
 8107550:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8107552:	e1f6      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107554:	4b29      	ldr	r3, [pc, #164]	@ (81075fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107556:	681b      	ldr	r3, [r3, #0]
 8107558:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810755c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107560:	d107      	bne.n	8107572 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107562:	f107 0318 	add.w	r3, r7, #24
 8107566:	4618      	mov	r0, r3
 8107568:	f000 fa0a 	bl	8107980 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810756c:	69fb      	ldr	r3, [r7, #28]
 810756e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107570:	e1e7      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107572:	2300      	movs	r3, #0
 8107574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107576:	e1e4      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107578:	4b20      	ldr	r3, [pc, #128]	@ (81075fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810757a:	681b      	ldr	r3, [r3, #0]
 810757c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107580:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107584:	d107      	bne.n	8107596 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107586:	f107 030c 	add.w	r3, r7, #12
 810758a:	4618      	mov	r0, r3
 810758c:	f000 fb4c 	bl	8107c28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107590:	693b      	ldr	r3, [r7, #16]
 8107592:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107594:	e1d5      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107596:	2300      	movs	r3, #0
 8107598:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810759a:	e1d2      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 810759c:	4b17      	ldr	r3, [pc, #92]	@ (81075fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810759e:	681b      	ldr	r3, [r3, #0]
 81075a0:	f003 0304 	and.w	r3, r3, #4
 81075a4:	2b04      	cmp	r3, #4
 81075a6:	d109      	bne.n	81075bc <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81075a8:	4b14      	ldr	r3, [pc, #80]	@ (81075fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81075aa:	681b      	ldr	r3, [r3, #0]
 81075ac:	08db      	lsrs	r3, r3, #3
 81075ae:	f003 0303 	and.w	r3, r3, #3
 81075b2:	4a13      	ldr	r2, [pc, #76]	@ (8107600 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81075b4:	fa22 f303 	lsr.w	r3, r2, r3
 81075b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81075ba:	e1c2      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81075bc:	2300      	movs	r3, #0
 81075be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81075c0:	e1bf      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81075c2:	4b0e      	ldr	r3, [pc, #56]	@ (81075fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81075c4:	681b      	ldr	r3, [r3, #0]
 81075c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81075ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81075ce:	d102      	bne.n	81075d6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 81075d0:	4b0c      	ldr	r3, [pc, #48]	@ (8107604 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81075d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81075d4:	e1b5      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81075d6:	2300      	movs	r3, #0
 81075d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81075da:	e1b2      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81075dc:	4b07      	ldr	r3, [pc, #28]	@ (81075fc <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81075de:	681b      	ldr	r3, [r3, #0]
 81075e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81075e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81075e8:	d102      	bne.n	81075f0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 81075ea:	4b07      	ldr	r3, [pc, #28]	@ (8107608 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81075ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81075ee:	e1a8      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81075f0:	2300      	movs	r3, #0
 81075f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81075f4:	e1a5      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81075f6:	2300      	movs	r3, #0
 81075f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81075fa:	e1a2      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81075fc:	58024400 	.word	0x58024400
 8107600:	03d09000 	.word	0x03d09000
 8107604:	003d0900 	.word	0x003d0900
 8107608:	017d7840 	.word	0x017d7840
 810760c:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8107610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107614:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8107618:	430b      	orrs	r3, r1
 810761a:	d173      	bne.n	8107704 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 810761c:	4b9c      	ldr	r3, [pc, #624]	@ (8107890 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810761e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107620:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8107624:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8107626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107628:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810762c:	d02f      	beq.n	810768e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 810762e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107630:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107634:	d863      	bhi.n	81076fe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8107636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107638:	2b00      	cmp	r3, #0
 810763a:	d004      	beq.n	8107646 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 810763c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810763e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107642:	d012      	beq.n	810766a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8107644:	e05b      	b.n	81076fe <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107646:	4b92      	ldr	r3, [pc, #584]	@ (8107890 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107648:	681b      	ldr	r3, [r3, #0]
 810764a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810764e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107652:	d107      	bne.n	8107664 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107654:	f107 0318 	add.w	r3, r7, #24
 8107658:	4618      	mov	r0, r3
 810765a:	f000 f991 	bl	8107980 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810765e:	69bb      	ldr	r3, [r7, #24]
 8107660:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107662:	e16e      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107664:	2300      	movs	r3, #0
 8107666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107668:	e16b      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810766a:	4b89      	ldr	r3, [pc, #548]	@ (8107890 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810766c:	681b      	ldr	r3, [r3, #0]
 810766e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107672:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107676:	d107      	bne.n	8107688 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107678:	f107 030c 	add.w	r3, r7, #12
 810767c:	4618      	mov	r0, r3
 810767e:	f000 fad3 	bl	8107c28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8107682:	697b      	ldr	r3, [r7, #20]
 8107684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107686:	e15c      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107688:	2300      	movs	r3, #0
 810768a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810768c:	e159      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810768e:	4b80      	ldr	r3, [pc, #512]	@ (8107890 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107692:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107696:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107698:	4b7d      	ldr	r3, [pc, #500]	@ (8107890 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810769a:	681b      	ldr	r3, [r3, #0]
 810769c:	f003 0304 	and.w	r3, r3, #4
 81076a0:	2b04      	cmp	r3, #4
 81076a2:	d10c      	bne.n	81076be <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 81076a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81076a6:	2b00      	cmp	r3, #0
 81076a8:	d109      	bne.n	81076be <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81076aa:	4b79      	ldr	r3, [pc, #484]	@ (8107890 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81076ac:	681b      	ldr	r3, [r3, #0]
 81076ae:	08db      	lsrs	r3, r3, #3
 81076b0:	f003 0303 	and.w	r3, r3, #3
 81076b4:	4a77      	ldr	r2, [pc, #476]	@ (8107894 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81076b6:	fa22 f303 	lsr.w	r3, r2, r3
 81076ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81076bc:	e01e      	b.n	81076fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81076be:	4b74      	ldr	r3, [pc, #464]	@ (8107890 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81076c0:	681b      	ldr	r3, [r3, #0]
 81076c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81076c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81076ca:	d106      	bne.n	81076da <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 81076cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81076ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81076d2:	d102      	bne.n	81076da <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81076d4:	4b70      	ldr	r3, [pc, #448]	@ (8107898 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81076d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81076d8:	e010      	b.n	81076fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81076da:	4b6d      	ldr	r3, [pc, #436]	@ (8107890 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81076dc:	681b      	ldr	r3, [r3, #0]
 81076de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81076e2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81076e6:	d106      	bne.n	81076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 81076e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81076ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81076ee:	d102      	bne.n	81076f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81076f0:	4b6a      	ldr	r3, [pc, #424]	@ (810789c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 81076f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81076f4:	e002      	b.n	81076fc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81076f6:	2300      	movs	r3, #0
 81076f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81076fa:	e122      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81076fc:	e121      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 81076fe:	2300      	movs	r3, #0
 8107700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107702:	e11e      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8107704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107708:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 810770c:	430b      	orrs	r3, r1
 810770e:	d133      	bne.n	8107778 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8107710:	4b5f      	ldr	r3, [pc, #380]	@ (8107890 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107714:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8107718:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810771a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810771c:	2b00      	cmp	r3, #0
 810771e:	d004      	beq.n	810772a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8107720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107722:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107726:	d012      	beq.n	810774e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8107728:	e023      	b.n	8107772 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810772a:	4b59      	ldr	r3, [pc, #356]	@ (8107890 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810772c:	681b      	ldr	r3, [r3, #0]
 810772e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107732:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107736:	d107      	bne.n	8107748 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107738:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810773c:	4618      	mov	r0, r3
 810773e:	f000 fbc7 	bl	8107ed0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107746:	e0fc      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107748:	2300      	movs	r3, #0
 810774a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810774c:	e0f9      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810774e:	4b50      	ldr	r3, [pc, #320]	@ (8107890 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107750:	681b      	ldr	r3, [r3, #0]
 8107752:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107756:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 810775a:	d107      	bne.n	810776c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810775c:	f107 0318 	add.w	r3, r7, #24
 8107760:	4618      	mov	r0, r3
 8107762:	f000 f90d 	bl	8107980 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8107766:	6a3b      	ldr	r3, [r7, #32]
 8107768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810776a:	e0ea      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810776c:	2300      	movs	r3, #0
 810776e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107770:	e0e7      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107772:	2300      	movs	r3, #0
 8107774:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107776:	e0e4      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8107778:	e9d7 2300 	ldrd	r2, r3, [r7]
 810777c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8107780:	430b      	orrs	r3, r1
 8107782:	f040 808d 	bne.w	81078a0 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8107786:	4b42      	ldr	r3, [pc, #264]	@ (8107890 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107788:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810778a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 810778e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8107790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107792:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107796:	d06b      	beq.n	8107870 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8107798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810779a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810779e:	d874      	bhi.n	810788a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81077a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81077a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81077a6:	d056      	beq.n	8107856 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 81077a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81077aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81077ae:	d86c      	bhi.n	810788a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81077b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81077b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81077b6:	d03b      	beq.n	8107830 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 81077b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81077ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81077be:	d864      	bhi.n	810788a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81077c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81077c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81077c6:	d021      	beq.n	810780c <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 81077c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81077ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81077ce:	d85c      	bhi.n	810788a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 81077d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81077d2:	2b00      	cmp	r3, #0
 81077d4:	d004      	beq.n	81077e0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 81077d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81077d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81077dc:	d004      	beq.n	81077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 81077de:	e054      	b.n	810788a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 81077e0:	f000 f8b8 	bl	8107954 <HAL_RCCEx_GetD3PCLK1Freq>
 81077e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 81077e6:	e0ac      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81077e8:	4b29      	ldr	r3, [pc, #164]	@ (8107890 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81077ea:	681b      	ldr	r3, [r3, #0]
 81077ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81077f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81077f4:	d107      	bne.n	8107806 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81077f6:	f107 0318 	add.w	r3, r7, #24
 81077fa:	4618      	mov	r0, r3
 81077fc:	f000 f8c0 	bl	8107980 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107800:	69fb      	ldr	r3, [r7, #28]
 8107802:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107804:	e09d      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107806:	2300      	movs	r3, #0
 8107808:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810780a:	e09a      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810780c:	4b20      	ldr	r3, [pc, #128]	@ (8107890 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810780e:	681b      	ldr	r3, [r3, #0]
 8107810:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107814:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107818:	d107      	bne.n	810782a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810781a:	f107 030c 	add.w	r3, r7, #12
 810781e:	4618      	mov	r0, r3
 8107820:	f000 fa02 	bl	8107c28 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107824:	693b      	ldr	r3, [r7, #16]
 8107826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107828:	e08b      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810782a:	2300      	movs	r3, #0
 810782c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810782e:	e088      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8107830:	4b17      	ldr	r3, [pc, #92]	@ (8107890 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107832:	681b      	ldr	r3, [r3, #0]
 8107834:	f003 0304 	and.w	r3, r3, #4
 8107838:	2b04      	cmp	r3, #4
 810783a:	d109      	bne.n	8107850 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810783c:	4b14      	ldr	r3, [pc, #80]	@ (8107890 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810783e:	681b      	ldr	r3, [r3, #0]
 8107840:	08db      	lsrs	r3, r3, #3
 8107842:	f003 0303 	and.w	r3, r3, #3
 8107846:	4a13      	ldr	r2, [pc, #76]	@ (8107894 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8107848:	fa22 f303 	lsr.w	r3, r2, r3
 810784c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810784e:	e078      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107850:	2300      	movs	r3, #0
 8107852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107854:	e075      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8107856:	4b0e      	ldr	r3, [pc, #56]	@ (8107890 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107858:	681b      	ldr	r3, [r3, #0]
 810785a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810785e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107862:	d102      	bne.n	810786a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8107864:	4b0c      	ldr	r3, [pc, #48]	@ (8107898 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8107866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107868:	e06b      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810786a:	2300      	movs	r3, #0
 810786c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810786e:	e068      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8107870:	4b07      	ldr	r3, [pc, #28]	@ (8107890 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107872:	681b      	ldr	r3, [r3, #0]
 8107874:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107878:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810787c:	d102      	bne.n	8107884 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 810787e:	4b07      	ldr	r3, [pc, #28]	@ (810789c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8107880:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107882:	e05e      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107884:	2300      	movs	r3, #0
 8107886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107888:	e05b      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 810788a:	2300      	movs	r3, #0
 810788c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810788e:	e058      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107890:	58024400 	.word	0x58024400
 8107894:	03d09000 	.word	0x03d09000
 8107898:	003d0900 	.word	0x003d0900
 810789c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 81078a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 81078a4:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 81078a8:	430b      	orrs	r3, r1
 81078aa:	d148      	bne.n	810793e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 81078ac:	4b27      	ldr	r3, [pc, #156]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81078ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81078b0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81078b4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81078b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81078b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81078bc:	d02a      	beq.n	8107914 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 81078be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81078c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81078c4:	d838      	bhi.n	8107938 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 81078c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81078c8:	2b00      	cmp	r3, #0
 81078ca:	d004      	beq.n	81078d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 81078cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81078ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81078d2:	d00d      	beq.n	81078f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 81078d4:	e030      	b.n	8107938 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 81078d6:	4b1d      	ldr	r3, [pc, #116]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81078d8:	681b      	ldr	r3, [r3, #0]
 81078da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81078de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81078e2:	d102      	bne.n	81078ea <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 81078e4:	4b1a      	ldr	r3, [pc, #104]	@ (8107950 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 81078e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81078e8:	e02b      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81078ea:	2300      	movs	r3, #0
 81078ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81078ee:	e028      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81078f0:	4b16      	ldr	r3, [pc, #88]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 81078f2:	681b      	ldr	r3, [r3, #0]
 81078f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81078f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81078fc:	d107      	bne.n	810790e <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81078fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107902:	4618      	mov	r0, r3
 8107904:	f000 fae4 	bl	8107ed0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810790a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810790c:	e019      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810790e:	2300      	movs	r3, #0
 8107910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107912:	e016      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107914:	4b0d      	ldr	r3, [pc, #52]	@ (810794c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8107916:	681b      	ldr	r3, [r3, #0]
 8107918:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810791c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107920:	d107      	bne.n	8107932 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107922:	f107 0318 	add.w	r3, r7, #24
 8107926:	4618      	mov	r0, r3
 8107928:	f000 f82a 	bl	8107980 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 810792c:	69fb      	ldr	r3, [r7, #28]
 810792e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107930:	e007      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107932:	2300      	movs	r3, #0
 8107934:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107936:	e004      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107938:	2300      	movs	r3, #0
 810793a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810793c:	e001      	b.n	8107942 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 810793e:	2300      	movs	r3, #0
 8107940:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8107942:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8107944:	4618      	mov	r0, r3
 8107946:	3740      	adds	r7, #64	@ 0x40
 8107948:	46bd      	mov	sp, r7
 810794a:	bd80      	pop	{r7, pc}
 810794c:	58024400 	.word	0x58024400
 8107950:	017d7840 	.word	0x017d7840

08107954 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8107954:	b580      	push	{r7, lr}
 8107956:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8107958:	f7fd ffd4 	bl	8105904 <HAL_RCC_GetHCLKFreq>
 810795c:	4602      	mov	r2, r0
 810795e:	4b06      	ldr	r3, [pc, #24]	@ (8107978 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8107960:	6a1b      	ldr	r3, [r3, #32]
 8107962:	091b      	lsrs	r3, r3, #4
 8107964:	f003 0307 	and.w	r3, r3, #7
 8107968:	4904      	ldr	r1, [pc, #16]	@ (810797c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810796a:	5ccb      	ldrb	r3, [r1, r3]
 810796c:	f003 031f 	and.w	r3, r3, #31
 8107970:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8107974:	4618      	mov	r0, r3
 8107976:	bd80      	pop	{r7, pc}
 8107978:	58024400 	.word	0x58024400
 810797c:	0810d5dc 	.word	0x0810d5dc

08107980 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8107980:	b480      	push	{r7}
 8107982:	b089      	sub	sp, #36	@ 0x24
 8107984:	af00      	add	r7, sp, #0
 8107986:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107988:	4ba1      	ldr	r3, [pc, #644]	@ (8107c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810798a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810798c:	f003 0303 	and.w	r3, r3, #3
 8107990:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8107992:	4b9f      	ldr	r3, [pc, #636]	@ (8107c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107996:	0b1b      	lsrs	r3, r3, #12
 8107998:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810799c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810799e:	4b9c      	ldr	r3, [pc, #624]	@ (8107c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81079a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81079a2:	091b      	lsrs	r3, r3, #4
 81079a4:	f003 0301 	and.w	r3, r3, #1
 81079a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81079aa:	4b99      	ldr	r3, [pc, #612]	@ (8107c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81079ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81079ae:	08db      	lsrs	r3, r3, #3
 81079b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81079b4:	693a      	ldr	r2, [r7, #16]
 81079b6:	fb02 f303 	mul.w	r3, r2, r3
 81079ba:	ee07 3a90 	vmov	s15, r3
 81079be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81079c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81079c6:	697b      	ldr	r3, [r7, #20]
 81079c8:	2b00      	cmp	r3, #0
 81079ca:	f000 8111 	beq.w	8107bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81079ce:	69bb      	ldr	r3, [r7, #24]
 81079d0:	2b02      	cmp	r3, #2
 81079d2:	f000 8083 	beq.w	8107adc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81079d6:	69bb      	ldr	r3, [r7, #24]
 81079d8:	2b02      	cmp	r3, #2
 81079da:	f200 80a1 	bhi.w	8107b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81079de:	69bb      	ldr	r3, [r7, #24]
 81079e0:	2b00      	cmp	r3, #0
 81079e2:	d003      	beq.n	81079ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81079e4:	69bb      	ldr	r3, [r7, #24]
 81079e6:	2b01      	cmp	r3, #1
 81079e8:	d056      	beq.n	8107a98 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81079ea:	e099      	b.n	8107b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81079ec:	4b88      	ldr	r3, [pc, #544]	@ (8107c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81079ee:	681b      	ldr	r3, [r3, #0]
 81079f0:	f003 0320 	and.w	r3, r3, #32
 81079f4:	2b00      	cmp	r3, #0
 81079f6:	d02d      	beq.n	8107a54 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81079f8:	4b85      	ldr	r3, [pc, #532]	@ (8107c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81079fa:	681b      	ldr	r3, [r3, #0]
 81079fc:	08db      	lsrs	r3, r3, #3
 81079fe:	f003 0303 	and.w	r3, r3, #3
 8107a02:	4a84      	ldr	r2, [pc, #528]	@ (8107c14 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8107a04:	fa22 f303 	lsr.w	r3, r2, r3
 8107a08:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107a0a:	68bb      	ldr	r3, [r7, #8]
 8107a0c:	ee07 3a90 	vmov	s15, r3
 8107a10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a14:	697b      	ldr	r3, [r7, #20]
 8107a16:	ee07 3a90 	vmov	s15, r3
 8107a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107a22:	4b7b      	ldr	r3, [pc, #492]	@ (8107c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107a2a:	ee07 3a90 	vmov	s15, r3
 8107a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8107a36:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8107c18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107a52:	e087      	b.n	8107b64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107a54:	697b      	ldr	r3, [r7, #20]
 8107a56:	ee07 3a90 	vmov	s15, r3
 8107a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107a5e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8107c1c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8107a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107a66:	4b6a      	ldr	r3, [pc, #424]	@ (8107c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107a6e:	ee07 3a90 	vmov	s15, r3
 8107a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8107a7a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8107c18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107a96:	e065      	b.n	8107b64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107a98:	697b      	ldr	r3, [r7, #20]
 8107a9a:	ee07 3a90 	vmov	s15, r3
 8107a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107aa2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8107c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107aaa:	4b59      	ldr	r3, [pc, #356]	@ (8107c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107ab2:	ee07 3a90 	vmov	s15, r3
 8107ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8107abe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8107c18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107ada:	e043      	b.n	8107b64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107adc:	697b      	ldr	r3, [r7, #20]
 8107ade:	ee07 3a90 	vmov	s15, r3
 8107ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107ae6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8107c24 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8107aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107aee:	4b48      	ldr	r3, [pc, #288]	@ (8107c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107af6:	ee07 3a90 	vmov	s15, r3
 8107afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8107b02:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8107c18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107b0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107b1e:	e021      	b.n	8107b64 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107b20:	697b      	ldr	r3, [r7, #20]
 8107b22:	ee07 3a90 	vmov	s15, r3
 8107b26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107b2a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8107c20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107b2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107b32:	4b37      	ldr	r3, [pc, #220]	@ (8107c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107b36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107b3a:	ee07 3a90 	vmov	s15, r3
 8107b3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107b42:	ed97 6a03 	vldr	s12, [r7, #12]
 8107b46:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8107c18 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107b4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107b4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107b52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107b56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107b5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107b5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107b62:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8107b64:	4b2a      	ldr	r3, [pc, #168]	@ (8107c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107b68:	0a5b      	lsrs	r3, r3, #9
 8107b6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107b6e:	ee07 3a90 	vmov	s15, r3
 8107b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107b76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107b7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107b7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8107b82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107b86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107b8a:	ee17 2a90 	vmov	r2, s15
 8107b8e:	687b      	ldr	r3, [r7, #4]
 8107b90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8107b92:	4b1f      	ldr	r3, [pc, #124]	@ (8107c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107b96:	0c1b      	lsrs	r3, r3, #16
 8107b98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107b9c:	ee07 3a90 	vmov	s15, r3
 8107ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107ba4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107ba8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107bac:	edd7 6a07 	vldr	s13, [r7, #28]
 8107bb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107bb4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107bb8:	ee17 2a90 	vmov	r2, s15
 8107bbc:	687b      	ldr	r3, [r7, #4]
 8107bbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8107bc0:	4b13      	ldr	r3, [pc, #76]	@ (8107c10 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107bc4:	0e1b      	lsrs	r3, r3, #24
 8107bc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107bca:	ee07 3a90 	vmov	s15, r3
 8107bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107bd2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107bd6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107bda:	edd7 6a07 	vldr	s13, [r7, #28]
 8107bde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107be2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107be6:	ee17 2a90 	vmov	r2, s15
 8107bea:	687b      	ldr	r3, [r7, #4]
 8107bec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8107bee:	e008      	b.n	8107c02 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8107bf0:	687b      	ldr	r3, [r7, #4]
 8107bf2:	2200      	movs	r2, #0
 8107bf4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8107bf6:	687b      	ldr	r3, [r7, #4]
 8107bf8:	2200      	movs	r2, #0
 8107bfa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8107bfc:	687b      	ldr	r3, [r7, #4]
 8107bfe:	2200      	movs	r2, #0
 8107c00:	609a      	str	r2, [r3, #8]
}
 8107c02:	bf00      	nop
 8107c04:	3724      	adds	r7, #36	@ 0x24
 8107c06:	46bd      	mov	sp, r7
 8107c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107c0c:	4770      	bx	lr
 8107c0e:	bf00      	nop
 8107c10:	58024400 	.word	0x58024400
 8107c14:	03d09000 	.word	0x03d09000
 8107c18:	46000000 	.word	0x46000000
 8107c1c:	4c742400 	.word	0x4c742400
 8107c20:	4a742400 	.word	0x4a742400
 8107c24:	4bbebc20 	.word	0x4bbebc20

08107c28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8107c28:	b480      	push	{r7}
 8107c2a:	b089      	sub	sp, #36	@ 0x24
 8107c2c:	af00      	add	r7, sp, #0
 8107c2e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107c30:	4ba1      	ldr	r3, [pc, #644]	@ (8107eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107c34:	f003 0303 	and.w	r3, r3, #3
 8107c38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8107c3a:	4b9f      	ldr	r3, [pc, #636]	@ (8107eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107c3e:	0d1b      	lsrs	r3, r3, #20
 8107c40:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8107c44:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8107c46:	4b9c      	ldr	r3, [pc, #624]	@ (8107eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107c4a:	0a1b      	lsrs	r3, r3, #8
 8107c4c:	f003 0301 	and.w	r3, r3, #1
 8107c50:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8107c52:	4b99      	ldr	r3, [pc, #612]	@ (8107eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107c56:	08db      	lsrs	r3, r3, #3
 8107c58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107c5c:	693a      	ldr	r2, [r7, #16]
 8107c5e:	fb02 f303 	mul.w	r3, r2, r3
 8107c62:	ee07 3a90 	vmov	s15, r3
 8107c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107c6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8107c6e:	697b      	ldr	r3, [r7, #20]
 8107c70:	2b00      	cmp	r3, #0
 8107c72:	f000 8111 	beq.w	8107e98 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8107c76:	69bb      	ldr	r3, [r7, #24]
 8107c78:	2b02      	cmp	r3, #2
 8107c7a:	f000 8083 	beq.w	8107d84 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8107c7e:	69bb      	ldr	r3, [r7, #24]
 8107c80:	2b02      	cmp	r3, #2
 8107c82:	f200 80a1 	bhi.w	8107dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8107c86:	69bb      	ldr	r3, [r7, #24]
 8107c88:	2b00      	cmp	r3, #0
 8107c8a:	d003      	beq.n	8107c94 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8107c8c:	69bb      	ldr	r3, [r7, #24]
 8107c8e:	2b01      	cmp	r3, #1
 8107c90:	d056      	beq.n	8107d40 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8107c92:	e099      	b.n	8107dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107c94:	4b88      	ldr	r3, [pc, #544]	@ (8107eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107c96:	681b      	ldr	r3, [r3, #0]
 8107c98:	f003 0320 	and.w	r3, r3, #32
 8107c9c:	2b00      	cmp	r3, #0
 8107c9e:	d02d      	beq.n	8107cfc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107ca0:	4b85      	ldr	r3, [pc, #532]	@ (8107eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107ca2:	681b      	ldr	r3, [r3, #0]
 8107ca4:	08db      	lsrs	r3, r3, #3
 8107ca6:	f003 0303 	and.w	r3, r3, #3
 8107caa:	4a84      	ldr	r2, [pc, #528]	@ (8107ebc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8107cac:	fa22 f303 	lsr.w	r3, r2, r3
 8107cb0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107cb2:	68bb      	ldr	r3, [r7, #8]
 8107cb4:	ee07 3a90 	vmov	s15, r3
 8107cb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107cbc:	697b      	ldr	r3, [r7, #20]
 8107cbe:	ee07 3a90 	vmov	s15, r3
 8107cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107cca:	4b7b      	ldr	r3, [pc, #492]	@ (8107eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107cd2:	ee07 3a90 	vmov	s15, r3
 8107cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8107cde:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8107ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107cfa:	e087      	b.n	8107e0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107cfc:	697b      	ldr	r3, [r7, #20]
 8107cfe:	ee07 3a90 	vmov	s15, r3
 8107d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d06:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8107ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8107d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107d0e:	4b6a      	ldr	r3, [pc, #424]	@ (8107eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d16:	ee07 3a90 	vmov	s15, r3
 8107d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8107d22:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8107ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107d2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107d3e:	e065      	b.n	8107e0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107d40:	697b      	ldr	r3, [r7, #20]
 8107d42:	ee07 3a90 	vmov	s15, r3
 8107d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d4a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8107ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8107d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107d52:	4b59      	ldr	r3, [pc, #356]	@ (8107eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d5a:	ee07 3a90 	vmov	s15, r3
 8107d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8107d66:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8107ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107d82:	e043      	b.n	8107e0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107d84:	697b      	ldr	r3, [r7, #20]
 8107d86:	ee07 3a90 	vmov	s15, r3
 8107d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d8e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8107ecc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8107d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107d96:	4b48      	ldr	r3, [pc, #288]	@ (8107eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d9e:	ee07 3a90 	vmov	s15, r3
 8107da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8107daa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8107ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107dc6:	e021      	b.n	8107e0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107dc8:	697b      	ldr	r3, [r7, #20]
 8107dca:	ee07 3a90 	vmov	s15, r3
 8107dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107dd2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8107ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8107dd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107dda:	4b37      	ldr	r3, [pc, #220]	@ (8107eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107dde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107de2:	ee07 3a90 	vmov	s15, r3
 8107de6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107dea:	ed97 6a03 	vldr	s12, [r7, #12]
 8107dee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8107ec0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107df2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107df6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107dfa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107dfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107e06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107e0a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8107e0c:	4b2a      	ldr	r3, [pc, #168]	@ (8107eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107e10:	0a5b      	lsrs	r3, r3, #9
 8107e12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107e16:	ee07 3a90 	vmov	s15, r3
 8107e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107e22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107e26:	edd7 6a07 	vldr	s13, [r7, #28]
 8107e2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107e2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107e32:	ee17 2a90 	vmov	r2, s15
 8107e36:	687b      	ldr	r3, [r7, #4]
 8107e38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8107e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8107eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107e3e:	0c1b      	lsrs	r3, r3, #16
 8107e40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107e44:	ee07 3a90 	vmov	s15, r3
 8107e48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107e50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107e54:	edd7 6a07 	vldr	s13, [r7, #28]
 8107e58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107e60:	ee17 2a90 	vmov	r2, s15
 8107e64:	687b      	ldr	r3, [r7, #4]
 8107e66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8107e68:	4b13      	ldr	r3, [pc, #76]	@ (8107eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107e6c:	0e1b      	lsrs	r3, r3, #24
 8107e6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107e72:	ee07 3a90 	vmov	s15, r3
 8107e76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107e7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107e82:	edd7 6a07 	vldr	s13, [r7, #28]
 8107e86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107e8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107e8e:	ee17 2a90 	vmov	r2, s15
 8107e92:	687b      	ldr	r3, [r7, #4]
 8107e94:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8107e96:	e008      	b.n	8107eaa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8107e98:	687b      	ldr	r3, [r7, #4]
 8107e9a:	2200      	movs	r2, #0
 8107e9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8107e9e:	687b      	ldr	r3, [r7, #4]
 8107ea0:	2200      	movs	r2, #0
 8107ea2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8107ea4:	687b      	ldr	r3, [r7, #4]
 8107ea6:	2200      	movs	r2, #0
 8107ea8:	609a      	str	r2, [r3, #8]
}
 8107eaa:	bf00      	nop
 8107eac:	3724      	adds	r7, #36	@ 0x24
 8107eae:	46bd      	mov	sp, r7
 8107eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107eb4:	4770      	bx	lr
 8107eb6:	bf00      	nop
 8107eb8:	58024400 	.word	0x58024400
 8107ebc:	03d09000 	.word	0x03d09000
 8107ec0:	46000000 	.word	0x46000000
 8107ec4:	4c742400 	.word	0x4c742400
 8107ec8:	4a742400 	.word	0x4a742400
 8107ecc:	4bbebc20 	.word	0x4bbebc20

08107ed0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8107ed0:	b480      	push	{r7}
 8107ed2:	b089      	sub	sp, #36	@ 0x24
 8107ed4:	af00      	add	r7, sp, #0
 8107ed6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107ed8:	4ba0      	ldr	r3, [pc, #640]	@ (810815c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107edc:	f003 0303 	and.w	r3, r3, #3
 8107ee0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8107ee2:	4b9e      	ldr	r3, [pc, #632]	@ (810815c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107ee6:	091b      	lsrs	r3, r3, #4
 8107ee8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8107eec:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8107eee:	4b9b      	ldr	r3, [pc, #620]	@ (810815c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107ef2:	f003 0301 	and.w	r3, r3, #1
 8107ef6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8107ef8:	4b98      	ldr	r3, [pc, #608]	@ (810815c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8107efc:	08db      	lsrs	r3, r3, #3
 8107efe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107f02:	693a      	ldr	r2, [r7, #16]
 8107f04:	fb02 f303 	mul.w	r3, r2, r3
 8107f08:	ee07 3a90 	vmov	s15, r3
 8107f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107f10:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8107f14:	697b      	ldr	r3, [r7, #20]
 8107f16:	2b00      	cmp	r3, #0
 8107f18:	f000 8111 	beq.w	810813e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8107f1c:	69bb      	ldr	r3, [r7, #24]
 8107f1e:	2b02      	cmp	r3, #2
 8107f20:	f000 8083 	beq.w	810802a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8107f24:	69bb      	ldr	r3, [r7, #24]
 8107f26:	2b02      	cmp	r3, #2
 8107f28:	f200 80a1 	bhi.w	810806e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8107f2c:	69bb      	ldr	r3, [r7, #24]
 8107f2e:	2b00      	cmp	r3, #0
 8107f30:	d003      	beq.n	8107f3a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8107f32:	69bb      	ldr	r3, [r7, #24]
 8107f34:	2b01      	cmp	r3, #1
 8107f36:	d056      	beq.n	8107fe6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8107f38:	e099      	b.n	810806e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107f3a:	4b88      	ldr	r3, [pc, #544]	@ (810815c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f3c:	681b      	ldr	r3, [r3, #0]
 8107f3e:	f003 0320 	and.w	r3, r3, #32
 8107f42:	2b00      	cmp	r3, #0
 8107f44:	d02d      	beq.n	8107fa2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107f46:	4b85      	ldr	r3, [pc, #532]	@ (810815c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f48:	681b      	ldr	r3, [r3, #0]
 8107f4a:	08db      	lsrs	r3, r3, #3
 8107f4c:	f003 0303 	and.w	r3, r3, #3
 8107f50:	4a83      	ldr	r2, [pc, #524]	@ (8108160 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8107f52:	fa22 f303 	lsr.w	r3, r2, r3
 8107f56:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107f58:	68bb      	ldr	r3, [r7, #8]
 8107f5a:	ee07 3a90 	vmov	s15, r3
 8107f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107f62:	697b      	ldr	r3, [r7, #20]
 8107f64:	ee07 3a90 	vmov	s15, r3
 8107f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107f6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107f70:	4b7a      	ldr	r3, [pc, #488]	@ (810815c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107f78:	ee07 3a90 	vmov	s15, r3
 8107f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107f80:	ed97 6a03 	vldr	s12, [r7, #12]
 8107f84:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8108164 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107f88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107f8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107f90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107f94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107f9c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107fa0:	e087      	b.n	81080b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107fa2:	697b      	ldr	r3, [r7, #20]
 8107fa4:	ee07 3a90 	vmov	s15, r3
 8107fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107fac:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8108168 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8107fb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107fb4:	4b69      	ldr	r3, [pc, #420]	@ (810815c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107fbc:	ee07 3a90 	vmov	s15, r3
 8107fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107fc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8107fc8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8108164 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8107fcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107fd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107fd4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107fd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107fe0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107fe4:	e065      	b.n	81080b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8107fe6:	697b      	ldr	r3, [r7, #20]
 8107fe8:	ee07 3a90 	vmov	s15, r3
 8107fec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107ff0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 810816c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8107ff4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107ff8:	4b58      	ldr	r3, [pc, #352]	@ (810815c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8107ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8107ffc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108000:	ee07 3a90 	vmov	s15, r3
 8108004:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108008:	ed97 6a03 	vldr	s12, [r7, #12]
 810800c:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8108164 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108010:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108014:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108018:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810801c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108024:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108028:	e043      	b.n	81080b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810802a:	697b      	ldr	r3, [r7, #20]
 810802c:	ee07 3a90 	vmov	s15, r3
 8108030:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108034:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8108170 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8108038:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810803c:	4b47      	ldr	r3, [pc, #284]	@ (810815c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810803e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108040:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108044:	ee07 3a90 	vmov	s15, r3
 8108048:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810804c:	ed97 6a03 	vldr	s12, [r7, #12]
 8108050:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8108164 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108054:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108058:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810805c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108060:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108064:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108068:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810806c:	e021      	b.n	81080b2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810806e:	697b      	ldr	r3, [r7, #20]
 8108070:	ee07 3a90 	vmov	s15, r3
 8108074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108078:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8108168 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 810807c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108080:	4b36      	ldr	r3, [pc, #216]	@ (810815c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108084:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108088:	ee07 3a90 	vmov	s15, r3
 810808c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108090:	ed97 6a03 	vldr	s12, [r7, #12]
 8108094:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8108164 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108098:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810809c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81080a0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81080a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81080a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 81080ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81080b0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 81080b2:	4b2a      	ldr	r3, [pc, #168]	@ (810815c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81080b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81080b6:	0a5b      	lsrs	r3, r3, #9
 81080b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81080bc:	ee07 3a90 	vmov	s15, r3
 81080c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81080c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81080c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 81080cc:	edd7 6a07 	vldr	s13, [r7, #28]
 81080d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81080d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81080d8:	ee17 2a90 	vmov	r2, s15
 81080dc:	687b      	ldr	r3, [r7, #4]
 81080de:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 81080e0:	4b1e      	ldr	r3, [pc, #120]	@ (810815c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81080e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81080e4:	0c1b      	lsrs	r3, r3, #16
 81080e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81080ea:	ee07 3a90 	vmov	s15, r3
 81080ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81080f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81080f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81080fa:	edd7 6a07 	vldr	s13, [r7, #28]
 81080fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108106:	ee17 2a90 	vmov	r2, s15
 810810a:	687b      	ldr	r3, [r7, #4]
 810810c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 810810e:	4b13      	ldr	r3, [pc, #76]	@ (810815c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108112:	0e1b      	lsrs	r3, r3, #24
 8108114:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108118:	ee07 3a90 	vmov	s15, r3
 810811c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108120:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108124:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108128:	edd7 6a07 	vldr	s13, [r7, #28]
 810812c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108134:	ee17 2a90 	vmov	r2, s15
 8108138:	687b      	ldr	r3, [r7, #4]
 810813a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 810813c:	e008      	b.n	8108150 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 810813e:	687b      	ldr	r3, [r7, #4]
 8108140:	2200      	movs	r2, #0
 8108142:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8108144:	687b      	ldr	r3, [r7, #4]
 8108146:	2200      	movs	r2, #0
 8108148:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810814a:	687b      	ldr	r3, [r7, #4]
 810814c:	2200      	movs	r2, #0
 810814e:	609a      	str	r2, [r3, #8]
}
 8108150:	bf00      	nop
 8108152:	3724      	adds	r7, #36	@ 0x24
 8108154:	46bd      	mov	sp, r7
 8108156:	f85d 7b04 	ldr.w	r7, [sp], #4
 810815a:	4770      	bx	lr
 810815c:	58024400 	.word	0x58024400
 8108160:	03d09000 	.word	0x03d09000
 8108164:	46000000 	.word	0x46000000
 8108168:	4c742400 	.word	0x4c742400
 810816c:	4a742400 	.word	0x4a742400
 8108170:	4bbebc20 	.word	0x4bbebc20

08108174 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8108174:	b580      	push	{r7, lr}
 8108176:	b084      	sub	sp, #16
 8108178:	af00      	add	r7, sp, #0
 810817a:	6078      	str	r0, [r7, #4]
 810817c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810817e:	2300      	movs	r3, #0
 8108180:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8108182:	4b54      	ldr	r3, [pc, #336]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 8108184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108186:	f003 0303 	and.w	r3, r3, #3
 810818a:	2b03      	cmp	r3, #3
 810818c:	d101      	bne.n	8108192 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810818e:	2301      	movs	r3, #1
 8108190:	e09b      	b.n	81082ca <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8108192:	4b50      	ldr	r3, [pc, #320]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 8108194:	681b      	ldr	r3, [r3, #0]
 8108196:	4a4f      	ldr	r2, [pc, #316]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 8108198:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 810819c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810819e:	f7fa fd61 	bl	8102c64 <HAL_GetTick>
 81081a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81081a4:	e008      	b.n	81081b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81081a6:	f7fa fd5d 	bl	8102c64 <HAL_GetTick>
 81081aa:	4602      	mov	r2, r0
 81081ac:	68bb      	ldr	r3, [r7, #8]
 81081ae:	1ad3      	subs	r3, r2, r3
 81081b0:	2b02      	cmp	r3, #2
 81081b2:	d901      	bls.n	81081b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81081b4:	2303      	movs	r3, #3
 81081b6:	e088      	b.n	81082ca <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81081b8:	4b46      	ldr	r3, [pc, #280]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 81081ba:	681b      	ldr	r3, [r3, #0]
 81081bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81081c0:	2b00      	cmp	r3, #0
 81081c2:	d1f0      	bne.n	81081a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81081c4:	4b43      	ldr	r3, [pc, #268]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 81081c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81081c8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 81081cc:	687b      	ldr	r3, [r7, #4]
 81081ce:	681b      	ldr	r3, [r3, #0]
 81081d0:	031b      	lsls	r3, r3, #12
 81081d2:	4940      	ldr	r1, [pc, #256]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 81081d4:	4313      	orrs	r3, r2
 81081d6:	628b      	str	r3, [r1, #40]	@ 0x28
 81081d8:	687b      	ldr	r3, [r7, #4]
 81081da:	685b      	ldr	r3, [r3, #4]
 81081dc:	3b01      	subs	r3, #1
 81081de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81081e2:	687b      	ldr	r3, [r7, #4]
 81081e4:	689b      	ldr	r3, [r3, #8]
 81081e6:	3b01      	subs	r3, #1
 81081e8:	025b      	lsls	r3, r3, #9
 81081ea:	b29b      	uxth	r3, r3
 81081ec:	431a      	orrs	r2, r3
 81081ee:	687b      	ldr	r3, [r7, #4]
 81081f0:	68db      	ldr	r3, [r3, #12]
 81081f2:	3b01      	subs	r3, #1
 81081f4:	041b      	lsls	r3, r3, #16
 81081f6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81081fa:	431a      	orrs	r2, r3
 81081fc:	687b      	ldr	r3, [r7, #4]
 81081fe:	691b      	ldr	r3, [r3, #16]
 8108200:	3b01      	subs	r3, #1
 8108202:	061b      	lsls	r3, r3, #24
 8108204:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108208:	4932      	ldr	r1, [pc, #200]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 810820a:	4313      	orrs	r3, r2
 810820c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810820e:	4b31      	ldr	r3, [pc, #196]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 8108210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108212:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8108216:	687b      	ldr	r3, [r7, #4]
 8108218:	695b      	ldr	r3, [r3, #20]
 810821a:	492e      	ldr	r1, [pc, #184]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 810821c:	4313      	orrs	r3, r2
 810821e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8108220:	4b2c      	ldr	r3, [pc, #176]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 8108222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108224:	f023 0220 	bic.w	r2, r3, #32
 8108228:	687b      	ldr	r3, [r7, #4]
 810822a:	699b      	ldr	r3, [r3, #24]
 810822c:	4929      	ldr	r1, [pc, #164]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 810822e:	4313      	orrs	r3, r2
 8108230:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8108232:	4b28      	ldr	r3, [pc, #160]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 8108234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108236:	4a27      	ldr	r2, [pc, #156]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 8108238:	f023 0310 	bic.w	r3, r3, #16
 810823c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810823e:	4b25      	ldr	r3, [pc, #148]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 8108240:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108242:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108246:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810824a:	687a      	ldr	r2, [r7, #4]
 810824c:	69d2      	ldr	r2, [r2, #28]
 810824e:	00d2      	lsls	r2, r2, #3
 8108250:	4920      	ldr	r1, [pc, #128]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 8108252:	4313      	orrs	r3, r2
 8108254:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8108256:	4b1f      	ldr	r3, [pc, #124]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 8108258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810825a:	4a1e      	ldr	r2, [pc, #120]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 810825c:	f043 0310 	orr.w	r3, r3, #16
 8108260:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108262:	683b      	ldr	r3, [r7, #0]
 8108264:	2b00      	cmp	r3, #0
 8108266:	d106      	bne.n	8108276 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8108268:	4b1a      	ldr	r3, [pc, #104]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 810826a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810826c:	4a19      	ldr	r2, [pc, #100]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 810826e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8108272:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108274:	e00f      	b.n	8108296 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8108276:	683b      	ldr	r3, [r7, #0]
 8108278:	2b01      	cmp	r3, #1
 810827a:	d106      	bne.n	810828a <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 810827c:	4b15      	ldr	r3, [pc, #84]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 810827e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108280:	4a14      	ldr	r2, [pc, #80]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 8108282:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8108286:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108288:	e005      	b.n	8108296 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 810828a:	4b12      	ldr	r3, [pc, #72]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 810828c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810828e:	4a11      	ldr	r2, [pc, #68]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 8108290:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8108294:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8108296:	4b0f      	ldr	r3, [pc, #60]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 8108298:	681b      	ldr	r3, [r3, #0]
 810829a:	4a0e      	ldr	r2, [pc, #56]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 810829c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81082a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81082a2:	f7fa fcdf 	bl	8102c64 <HAL_GetTick>
 81082a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81082a8:	e008      	b.n	81082bc <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81082aa:	f7fa fcdb 	bl	8102c64 <HAL_GetTick>
 81082ae:	4602      	mov	r2, r0
 81082b0:	68bb      	ldr	r3, [r7, #8]
 81082b2:	1ad3      	subs	r3, r2, r3
 81082b4:	2b02      	cmp	r3, #2
 81082b6:	d901      	bls.n	81082bc <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81082b8:	2303      	movs	r3, #3
 81082ba:	e006      	b.n	81082ca <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81082bc:	4b05      	ldr	r3, [pc, #20]	@ (81082d4 <RCCEx_PLL2_Config+0x160>)
 81082be:	681b      	ldr	r3, [r3, #0]
 81082c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81082c4:	2b00      	cmp	r3, #0
 81082c6:	d0f0      	beq.n	81082aa <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81082c8:	7bfb      	ldrb	r3, [r7, #15]
}
 81082ca:	4618      	mov	r0, r3
 81082cc:	3710      	adds	r7, #16
 81082ce:	46bd      	mov	sp, r7
 81082d0:	bd80      	pop	{r7, pc}
 81082d2:	bf00      	nop
 81082d4:	58024400 	.word	0x58024400

081082d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81082d8:	b580      	push	{r7, lr}
 81082da:	b084      	sub	sp, #16
 81082dc:	af00      	add	r7, sp, #0
 81082de:	6078      	str	r0, [r7, #4]
 81082e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81082e2:	2300      	movs	r3, #0
 81082e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81082e6:	4b54      	ldr	r3, [pc, #336]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 81082e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81082ea:	f003 0303 	and.w	r3, r3, #3
 81082ee:	2b03      	cmp	r3, #3
 81082f0:	d101      	bne.n	81082f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81082f2:	2301      	movs	r3, #1
 81082f4:	e09b      	b.n	810842e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81082f6:	4b50      	ldr	r3, [pc, #320]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 81082f8:	681b      	ldr	r3, [r3, #0]
 81082fa:	4a4f      	ldr	r2, [pc, #316]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 81082fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8108300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108302:	f7fa fcaf 	bl	8102c64 <HAL_GetTick>
 8108306:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108308:	e008      	b.n	810831c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810830a:	f7fa fcab 	bl	8102c64 <HAL_GetTick>
 810830e:	4602      	mov	r2, r0
 8108310:	68bb      	ldr	r3, [r7, #8]
 8108312:	1ad3      	subs	r3, r2, r3
 8108314:	2b02      	cmp	r3, #2
 8108316:	d901      	bls.n	810831c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8108318:	2303      	movs	r3, #3
 810831a:	e088      	b.n	810842e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810831c:	4b46      	ldr	r3, [pc, #280]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 810831e:	681b      	ldr	r3, [r3, #0]
 8108320:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108324:	2b00      	cmp	r3, #0
 8108326:	d1f0      	bne.n	810830a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8108328:	4b43      	ldr	r3, [pc, #268]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 810832a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810832c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8108330:	687b      	ldr	r3, [r7, #4]
 8108332:	681b      	ldr	r3, [r3, #0]
 8108334:	051b      	lsls	r3, r3, #20
 8108336:	4940      	ldr	r1, [pc, #256]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 8108338:	4313      	orrs	r3, r2
 810833a:	628b      	str	r3, [r1, #40]	@ 0x28
 810833c:	687b      	ldr	r3, [r7, #4]
 810833e:	685b      	ldr	r3, [r3, #4]
 8108340:	3b01      	subs	r3, #1
 8108342:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108346:	687b      	ldr	r3, [r7, #4]
 8108348:	689b      	ldr	r3, [r3, #8]
 810834a:	3b01      	subs	r3, #1
 810834c:	025b      	lsls	r3, r3, #9
 810834e:	b29b      	uxth	r3, r3
 8108350:	431a      	orrs	r2, r3
 8108352:	687b      	ldr	r3, [r7, #4]
 8108354:	68db      	ldr	r3, [r3, #12]
 8108356:	3b01      	subs	r3, #1
 8108358:	041b      	lsls	r3, r3, #16
 810835a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810835e:	431a      	orrs	r2, r3
 8108360:	687b      	ldr	r3, [r7, #4]
 8108362:	691b      	ldr	r3, [r3, #16]
 8108364:	3b01      	subs	r3, #1
 8108366:	061b      	lsls	r3, r3, #24
 8108368:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810836c:	4932      	ldr	r1, [pc, #200]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 810836e:	4313      	orrs	r3, r2
 8108370:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8108372:	4b31      	ldr	r3, [pc, #196]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 8108374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108376:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810837a:	687b      	ldr	r3, [r7, #4]
 810837c:	695b      	ldr	r3, [r3, #20]
 810837e:	492e      	ldr	r1, [pc, #184]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 8108380:	4313      	orrs	r3, r2
 8108382:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8108384:	4b2c      	ldr	r3, [pc, #176]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 8108386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108388:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 810838c:	687b      	ldr	r3, [r7, #4]
 810838e:	699b      	ldr	r3, [r3, #24]
 8108390:	4929      	ldr	r1, [pc, #164]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 8108392:	4313      	orrs	r3, r2
 8108394:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8108396:	4b28      	ldr	r3, [pc, #160]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 8108398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810839a:	4a27      	ldr	r2, [pc, #156]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 810839c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81083a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81083a2:	4b25      	ldr	r3, [pc, #148]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 81083a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81083a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81083aa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81083ae:	687a      	ldr	r2, [r7, #4]
 81083b0:	69d2      	ldr	r2, [r2, #28]
 81083b2:	00d2      	lsls	r2, r2, #3
 81083b4:	4920      	ldr	r1, [pc, #128]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 81083b6:	4313      	orrs	r3, r2
 81083b8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81083ba:	4b1f      	ldr	r3, [pc, #124]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 81083bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81083be:	4a1e      	ldr	r2, [pc, #120]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 81083c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81083c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81083c6:	683b      	ldr	r3, [r7, #0]
 81083c8:	2b00      	cmp	r3, #0
 81083ca:	d106      	bne.n	81083da <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81083cc:	4b1a      	ldr	r3, [pc, #104]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 81083ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81083d0:	4a19      	ldr	r2, [pc, #100]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 81083d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81083d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81083d8:	e00f      	b.n	81083fa <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81083da:	683b      	ldr	r3, [r7, #0]
 81083dc:	2b01      	cmp	r3, #1
 81083de:	d106      	bne.n	81083ee <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81083e0:	4b15      	ldr	r3, [pc, #84]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 81083e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81083e4:	4a14      	ldr	r2, [pc, #80]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 81083e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81083ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81083ec:	e005      	b.n	81083fa <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81083ee:	4b12      	ldr	r3, [pc, #72]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 81083f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81083f2:	4a11      	ldr	r2, [pc, #68]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 81083f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81083f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81083fa:	4b0f      	ldr	r3, [pc, #60]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 81083fc:	681b      	ldr	r3, [r3, #0]
 81083fe:	4a0e      	ldr	r2, [pc, #56]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 8108400:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8108404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108406:	f7fa fc2d 	bl	8102c64 <HAL_GetTick>
 810840a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810840c:	e008      	b.n	8108420 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810840e:	f7fa fc29 	bl	8102c64 <HAL_GetTick>
 8108412:	4602      	mov	r2, r0
 8108414:	68bb      	ldr	r3, [r7, #8]
 8108416:	1ad3      	subs	r3, r2, r3
 8108418:	2b02      	cmp	r3, #2
 810841a:	d901      	bls.n	8108420 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 810841c:	2303      	movs	r3, #3
 810841e:	e006      	b.n	810842e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108420:	4b05      	ldr	r3, [pc, #20]	@ (8108438 <RCCEx_PLL3_Config+0x160>)
 8108422:	681b      	ldr	r3, [r3, #0]
 8108424:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108428:	2b00      	cmp	r3, #0
 810842a:	d0f0      	beq.n	810840e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 810842c:	7bfb      	ldrb	r3, [r7, #15]
}
 810842e:	4618      	mov	r0, r3
 8108430:	3710      	adds	r7, #16
 8108432:	46bd      	mov	sp, r7
 8108434:	bd80      	pop	{r7, pc}
 8108436:	bf00      	nop
 8108438:	58024400 	.word	0x58024400

0810843c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 810843c:	b580      	push	{r7, lr}
 810843e:	b084      	sub	sp, #16
 8108440:	af00      	add	r7, sp, #0
 8108442:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8108444:	2301      	movs	r3, #1
 8108446:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8108448:	687b      	ldr	r3, [r7, #4]
 810844a:	2b00      	cmp	r3, #0
 810844c:	d073      	beq.n	8108536 <HAL_RTC_Init+0xfa>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 810844e:	687b      	ldr	r3, [r7, #4]
 8108450:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8108454:	b2db      	uxtb	r3, r3
 8108456:	2b00      	cmp	r3, #0
 8108458:	d106      	bne.n	8108468 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 810845a:	687b      	ldr	r3, [r7, #4]
 810845c:	2200      	movs	r2, #0
 810845e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8108462:	6878      	ldr	r0, [r7, #4]
 8108464:	f7f9 fc28 	bl	8101cb8 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8108468:	687b      	ldr	r3, [r7, #4]
 810846a:	2202      	movs	r2, #2
 810846c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8108470:	687b      	ldr	r3, [r7, #4]
 8108472:	681b      	ldr	r3, [r3, #0]
 8108474:	68db      	ldr	r3, [r3, #12]
 8108476:	f003 0310 	and.w	r3, r3, #16
 810847a:	2b10      	cmp	r3, #16
 810847c:	d052      	beq.n	8108524 <HAL_RTC_Init+0xe8>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 810847e:	687b      	ldr	r3, [r7, #4]
 8108480:	681b      	ldr	r3, [r3, #0]
 8108482:	22ca      	movs	r2, #202	@ 0xca
 8108484:	625a      	str	r2, [r3, #36]	@ 0x24
 8108486:	687b      	ldr	r3, [r7, #4]
 8108488:	681b      	ldr	r3, [r3, #0]
 810848a:	2253      	movs	r2, #83	@ 0x53
 810848c:	625a      	str	r2, [r3, #36]	@ 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 810848e:	6878      	ldr	r0, [r7, #4]
 8108490:	f000 f87a 	bl	8108588 <RTC_EnterInitMode>
 8108494:	4603      	mov	r3, r0
 8108496:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8108498:	7bfb      	ldrb	r3, [r7, #15]
 810849a:	2b00      	cmp	r3, #0
 810849c:	d126      	bne.n	81084ec <HAL_RTC_Init+0xb0>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 810849e:	687b      	ldr	r3, [r7, #4]
 81084a0:	681b      	ldr	r3, [r3, #0]
 81084a2:	689b      	ldr	r3, [r3, #8]
 81084a4:	687a      	ldr	r2, [r7, #4]
 81084a6:	6812      	ldr	r2, [r2, #0]
 81084a8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 81084ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 81084b0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 81084b2:	687b      	ldr	r3, [r7, #4]
 81084b4:	681b      	ldr	r3, [r3, #0]
 81084b6:	6899      	ldr	r1, [r3, #8]
 81084b8:	687b      	ldr	r3, [r7, #4]
 81084ba:	685a      	ldr	r2, [r3, #4]
 81084bc:	687b      	ldr	r3, [r7, #4]
 81084be:	691b      	ldr	r3, [r3, #16]
 81084c0:	431a      	orrs	r2, r3
 81084c2:	687b      	ldr	r3, [r7, #4]
 81084c4:	699b      	ldr	r3, [r3, #24]
 81084c6:	431a      	orrs	r2, r3
 81084c8:	687b      	ldr	r3, [r7, #4]
 81084ca:	681b      	ldr	r3, [r3, #0]
 81084cc:	430a      	orrs	r2, r1
 81084ce:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 81084d0:	687b      	ldr	r3, [r7, #4]
 81084d2:	689b      	ldr	r3, [r3, #8]
 81084d4:	0419      	lsls	r1, r3, #16
 81084d6:	687b      	ldr	r3, [r7, #4]
 81084d8:	68da      	ldr	r2, [r3, #12]
 81084da:	687b      	ldr	r3, [r7, #4]
 81084dc:	681b      	ldr	r3, [r3, #0]
 81084de:	430a      	orrs	r2, r1
 81084e0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 81084e2:	6878      	ldr	r0, [r7, #4]
 81084e4:	f000 f884 	bl	81085f0 <RTC_ExitInitMode>
 81084e8:	4603      	mov	r3, r0
 81084ea:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 81084ec:	7bfb      	ldrb	r3, [r7, #15]
 81084ee:	2b00      	cmp	r3, #0
 81084f0:	d113      	bne.n	810851a <HAL_RTC_Init+0xde>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 81084f2:	687b      	ldr	r3, [r7, #4]
 81084f4:	681b      	ldr	r3, [r3, #0]
 81084f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 81084f8:	687b      	ldr	r3, [r7, #4]
 81084fa:	681b      	ldr	r3, [r3, #0]
 81084fc:	f022 0203 	bic.w	r2, r2, #3
 8108500:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8108502:	687b      	ldr	r3, [r7, #4]
 8108504:	681b      	ldr	r3, [r3, #0]
 8108506:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8108508:	687b      	ldr	r3, [r7, #4]
 810850a:	69da      	ldr	r2, [r3, #28]
 810850c:	687b      	ldr	r3, [r7, #4]
 810850e:	695b      	ldr	r3, [r3, #20]
 8108510:	431a      	orrs	r2, r3
 8108512:	687b      	ldr	r3, [r7, #4]
 8108514:	681b      	ldr	r3, [r3, #0]
 8108516:	430a      	orrs	r2, r1
 8108518:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 810851a:	687b      	ldr	r3, [r7, #4]
 810851c:	681b      	ldr	r3, [r3, #0]
 810851e:	22ff      	movs	r2, #255	@ 0xff
 8108520:	625a      	str	r2, [r3, #36]	@ 0x24
 8108522:	e001      	b.n	8108528 <HAL_RTC_Init+0xec>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8108524:	2300      	movs	r3, #0
 8108526:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8108528:	7bfb      	ldrb	r3, [r7, #15]
 810852a:	2b00      	cmp	r3, #0
 810852c:	d103      	bne.n	8108536 <HAL_RTC_Init+0xfa>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 810852e:	687b      	ldr	r3, [r7, #4]
 8108530:	2201      	movs	r2, #1
 8108532:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  /* return status */
  return status;
 8108536:	7bfb      	ldrb	r3, [r7, #15]
}
 8108538:	4618      	mov	r0, r3
 810853a:	3710      	adds	r7, #16
 810853c:	46bd      	mov	sp, r7
 810853e:	bd80      	pop	{r7, pc}

08108540 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8108540:	b580      	push	{r7, lr}
 8108542:	b084      	sub	sp, #16
 8108544:	af00      	add	r7, sp, #0
 8108546:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8108548:	687b      	ldr	r3, [r7, #4]
 810854a:	681b      	ldr	r3, [r3, #0]
 810854c:	4a0d      	ldr	r2, [pc, #52]	@ (8108584 <HAL_RTC_WaitForSynchro+0x44>)
 810854e:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8108550:	f7fa fb88 	bl	8102c64 <HAL_GetTick>
 8108554:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8108556:	e009      	b.n	810856c <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8108558:	f7fa fb84 	bl	8102c64 <HAL_GetTick>
 810855c:	4602      	mov	r2, r0
 810855e:	68fb      	ldr	r3, [r7, #12]
 8108560:	1ad3      	subs	r3, r2, r3
 8108562:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8108566:	d901      	bls.n	810856c <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 8108568:	2303      	movs	r3, #3
 810856a:	e007      	b.n	810857c <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 810856c:	687b      	ldr	r3, [r7, #4]
 810856e:	681b      	ldr	r3, [r3, #0]
 8108570:	68db      	ldr	r3, [r3, #12]
 8108572:	f003 0320 	and.w	r3, r3, #32
 8108576:	2b00      	cmp	r3, #0
 8108578:	d0ee      	beq.n	8108558 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 810857a:	2300      	movs	r3, #0
}
 810857c:	4618      	mov	r0, r3
 810857e:	3710      	adds	r7, #16
 8108580:	46bd      	mov	sp, r7
 8108582:	bd80      	pop	{r7, pc}
 8108584:	0003ff5f 	.word	0x0003ff5f

08108588 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8108588:	b580      	push	{r7, lr}
 810858a:	b084      	sub	sp, #16
 810858c:	af00      	add	r7, sp, #0
 810858e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108590:	2300      	movs	r3, #0
 8108592:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8108594:	687b      	ldr	r3, [r7, #4]
 8108596:	681b      	ldr	r3, [r3, #0]
 8108598:	68db      	ldr	r3, [r3, #12]
 810859a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810859e:	2b00      	cmp	r3, #0
 81085a0:	d120      	bne.n	81085e4 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 81085a2:	687b      	ldr	r3, [r7, #4]
 81085a4:	681b      	ldr	r3, [r3, #0]
 81085a6:	f04f 32ff 	mov.w	r2, #4294967295
 81085aa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 81085ac:	f7fa fb5a 	bl	8102c64 <HAL_GetTick>
 81085b0:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 81085b2:	e00d      	b.n	81085d0 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 81085b4:	f7fa fb56 	bl	8102c64 <HAL_GetTick>
 81085b8:	4602      	mov	r2, r0
 81085ba:	68bb      	ldr	r3, [r7, #8]
 81085bc:	1ad3      	subs	r3, r2, r3
 81085be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 81085c2:	d905      	bls.n	81085d0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 81085c4:	2303      	movs	r3, #3
 81085c6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 81085c8:	687b      	ldr	r3, [r7, #4]
 81085ca:	2203      	movs	r2, #3
 81085cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 81085d0:	687b      	ldr	r3, [r7, #4]
 81085d2:	681b      	ldr	r3, [r3, #0]
 81085d4:	68db      	ldr	r3, [r3, #12]
 81085d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81085da:	2b00      	cmp	r3, #0
 81085dc:	d102      	bne.n	81085e4 <RTC_EnterInitMode+0x5c>
 81085de:	7bfb      	ldrb	r3, [r7, #15]
 81085e0:	2b03      	cmp	r3, #3
 81085e2:	d1e7      	bne.n	81085b4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 81085e4:	7bfb      	ldrb	r3, [r7, #15]
}
 81085e6:	4618      	mov	r0, r3
 81085e8:	3710      	adds	r7, #16
 81085ea:	46bd      	mov	sp, r7
 81085ec:	bd80      	pop	{r7, pc}
	...

081085f0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 81085f0:	b580      	push	{r7, lr}
 81085f2:	b084      	sub	sp, #16
 81085f4:	af00      	add	r7, sp, #0
 81085f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81085f8:	2300      	movs	r3, #0
 81085fa:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 81085fc:	4b1a      	ldr	r3, [pc, #104]	@ (8108668 <RTC_ExitInitMode+0x78>)
 81085fe:	68db      	ldr	r3, [r3, #12]
 8108600:	4a19      	ldr	r2, [pc, #100]	@ (8108668 <RTC_ExitInitMode+0x78>)
 8108602:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8108606:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8108608:	4b17      	ldr	r3, [pc, #92]	@ (8108668 <RTC_ExitInitMode+0x78>)
 810860a:	689b      	ldr	r3, [r3, #8]
 810860c:	f003 0320 	and.w	r3, r3, #32
 8108610:	2b00      	cmp	r3, #0
 8108612:	d10c      	bne.n	810862e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8108614:	6878      	ldr	r0, [r7, #4]
 8108616:	f7ff ff93 	bl	8108540 <HAL_RTC_WaitForSynchro>
 810861a:	4603      	mov	r3, r0
 810861c:	2b00      	cmp	r3, #0
 810861e:	d01e      	beq.n	810865e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8108620:	687b      	ldr	r3, [r7, #4]
 8108622:	2203      	movs	r2, #3
 8108624:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8108628:	2303      	movs	r3, #3
 810862a:	73fb      	strb	r3, [r7, #15]
 810862c:	e017      	b.n	810865e <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 810862e:	4b0e      	ldr	r3, [pc, #56]	@ (8108668 <RTC_ExitInitMode+0x78>)
 8108630:	689b      	ldr	r3, [r3, #8]
 8108632:	4a0d      	ldr	r2, [pc, #52]	@ (8108668 <RTC_ExitInitMode+0x78>)
 8108634:	f023 0320 	bic.w	r3, r3, #32
 8108638:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 810863a:	6878      	ldr	r0, [r7, #4]
 810863c:	f7ff ff80 	bl	8108540 <HAL_RTC_WaitForSynchro>
 8108640:	4603      	mov	r3, r0
 8108642:	2b00      	cmp	r3, #0
 8108644:	d005      	beq.n	8108652 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8108646:	687b      	ldr	r3, [r7, #4]
 8108648:	2203      	movs	r2, #3
 810864a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 810864e:	2303      	movs	r3, #3
 8108650:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8108652:	4b05      	ldr	r3, [pc, #20]	@ (8108668 <RTC_ExitInitMode+0x78>)
 8108654:	689b      	ldr	r3, [r3, #8]
 8108656:	4a04      	ldr	r2, [pc, #16]	@ (8108668 <RTC_ExitInitMode+0x78>)
 8108658:	f043 0320 	orr.w	r3, r3, #32
 810865c:	6093      	str	r3, [r2, #8]
  }

  return status;
 810865e:	7bfb      	ldrb	r3, [r7, #15]
}
 8108660:	4618      	mov	r0, r3
 8108662:	3710      	adds	r7, #16
 8108664:	46bd      	mov	sp, r7
 8108666:	bd80      	pop	{r7, pc}
 8108668:	58004000 	.word	0x58004000

0810866c <HAL_RTCEx_SetTamper>:
  * @param  hrtc RTC handle
  * @param  sTamper Pointer to Tamper Structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTamper(RTC_HandleTypeDef * hrtc, const RTC_TamperTypeDef * sTamper)
{
 810866c:	b480      	push	{r7}
 810866e:	b085      	sub	sp, #20
 8108670:	af00      	add	r7, sp, #0
 8108672:	6078      	str	r0, [r7, #4]
 8108674:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_TAMPER_PULLUP_STATE(sTamper->TamperPullUp));
  assert_param(IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(sTamper->TimeStampOnTamperDetection));
  assert_param(IS_RTC_TAMPER_FILTER_CONFIG_CORRECT(sTamper->Filter, sTamper->Trigger));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8108676:	687b      	ldr	r3, [r7, #4]
 8108678:	f893 3020 	ldrb.w	r3, [r3, #32]
 810867c:	2b01      	cmp	r3, #1
 810867e:	d101      	bne.n	8108684 <HAL_RTCEx_SetTamper+0x18>
 8108680:	2302      	movs	r3, #2
 8108682:	e0cc      	b.n	810881e <HAL_RTCEx_SetTamper+0x1b2>
 8108684:	687b      	ldr	r3, [r7, #4]
 8108686:	2201      	movs	r2, #1
 8108688:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 810868c:	687b      	ldr	r3, [r7, #4]
 810868e:	2202      	movs	r2, #2
 8108690:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Copy control register into temporary variable */
  tmpreg = hrtc->Instance->TAMPCR;
 8108694:	687b      	ldr	r3, [r7, #4]
 8108696:	681b      	ldr	r3, [r3, #0]
 8108698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810869a:	60fb      	str	r3, [r7, #12]

  /* Enable selected tamper */
  tmpreg |= (sTamper->Tamper);
 810869c:	683b      	ldr	r3, [r7, #0]
 810869e:	681b      	ldr	r3, [r3, #0]
 81086a0:	68fa      	ldr	r2, [r7, #12]
 81086a2:	4313      	orrs	r3, r2
 81086a4:	60fb      	str	r3, [r7, #12]

  /* Configure the bit (located just next to the tamper enable bit) */
  if ((sTamper->Trigger == RTC_TAMPERTRIGGER_HIGHLEVEL) || (sTamper->Trigger == RTC_TAMPERTRIGGER_FALLINGEDGE))
 81086a6:	683b      	ldr	r3, [r7, #0]
 81086a8:	689b      	ldr	r3, [r3, #8]
 81086aa:	2b08      	cmp	r3, #8
 81086ac:	d003      	beq.n	81086b6 <HAL_RTCEx_SetTamper+0x4a>
 81086ae:	683b      	ldr	r3, [r7, #0]
 81086b0:	689b      	ldr	r3, [r3, #8]
 81086b2:	2b02      	cmp	r3, #2
 81086b4:	d106      	bne.n	81086c4 <HAL_RTCEx_SetTamper+0x58>
  {
    /* Set the tamper trigger bit */
    tmpreg |= (uint32_t)(sTamper->Tamper << 1U);
 81086b6:	683b      	ldr	r3, [r7, #0]
 81086b8:	681b      	ldr	r3, [r3, #0]
 81086ba:	005b      	lsls	r3, r3, #1
 81086bc:	68fa      	ldr	r2, [r7, #12]
 81086be:	4313      	orrs	r3, r2
 81086c0:	60fb      	str	r3, [r7, #12]
 81086c2:	e006      	b.n	81086d2 <HAL_RTCEx_SetTamper+0x66>
  }
  else
  {
    /* Clear the tamper trigger bit */
    tmpreg &= (uint32_t)~(sTamper->Tamper << 1U);
 81086c4:	683b      	ldr	r3, [r7, #0]
 81086c6:	681b      	ldr	r3, [r3, #0]
 81086c8:	005b      	lsls	r3, r3, #1
 81086ca:	43db      	mvns	r3, r3
 81086cc:	68fa      	ldr	r2, [r7, #12]
 81086ce:	4013      	ands	r3, r2
 81086d0:	60fb      	str	r3, [r7, #12]
  }

#if defined(RTC_TAMPNOERASE_SUPPORT)
  /* Configure the tamper backup registers erasure bit */
  if (sTamper->NoErase != RTC_TAMPER_ERASE_BACKUP_ENABLE)
 81086d2:	683b      	ldr	r3, [r7, #0]
 81086d4:	68db      	ldr	r3, [r3, #12]
 81086d6:	2b00      	cmp	r3, #0
 81086d8:	d01e      	beq.n	8108718 <HAL_RTCEx_SetTamper+0xac>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 81086da:	683b      	ldr	r3, [r7, #0]
 81086dc:	681b      	ldr	r3, [r3, #0]
 81086de:	f003 0301 	and.w	r3, r3, #1
 81086e2:	2b00      	cmp	r3, #0
 81086e4:	d003      	beq.n	81086ee <HAL_RTCEx_SetTamper+0x82>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1NOERASE);
 81086e6:	68fb      	ldr	r3, [r7, #12]
 81086e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81086ec:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 81086ee:	683b      	ldr	r3, [r7, #0]
 81086f0:	681b      	ldr	r3, [r3, #0]
 81086f2:	f003 0308 	and.w	r3, r3, #8
 81086f6:	2b00      	cmp	r3, #0
 81086f8:	d003      	beq.n	8108702 <HAL_RTCEx_SetTamper+0x96>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2NOERASE);
 81086fa:	68fb      	ldr	r3, [r7, #12]
 81086fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8108700:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8108702:	683b      	ldr	r3, [r7, #0]
 8108704:	681b      	ldr	r3, [r3, #0]
 8108706:	f003 0320 	and.w	r3, r3, #32
 810870a:	2b00      	cmp	r3, #0
 810870c:	d022      	beq.n	8108754 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3NOERASE);
 810870e:	68fb      	ldr	r3, [r7, #12]
 8108710:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8108714:	60fb      	str	r3, [r7, #12]
 8108716:	e01d      	b.n	8108754 <HAL_RTCEx_SetTamper+0xe8>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 8108718:	683b      	ldr	r3, [r7, #0]
 810871a:	681b      	ldr	r3, [r3, #0]
 810871c:	f003 0301 	and.w	r3, r3, #1
 8108720:	2b00      	cmp	r3, #0
 8108722:	d003      	beq.n	810872c <HAL_RTCEx_SetTamper+0xc0>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1NOERASE);
 8108724:	68fb      	ldr	r3, [r7, #12]
 8108726:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 810872a:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 810872c:	683b      	ldr	r3, [r7, #0]
 810872e:	681b      	ldr	r3, [r3, #0]
 8108730:	f003 0308 	and.w	r3, r3, #8
 8108734:	2b00      	cmp	r3, #0
 8108736:	d003      	beq.n	8108740 <HAL_RTCEx_SetTamper+0xd4>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2NOERASE);
 8108738:	68fb      	ldr	r3, [r7, #12]
 810873a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 810873e:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8108740:	683b      	ldr	r3, [r7, #0]
 8108742:	681b      	ldr	r3, [r3, #0]
 8108744:	f003 0320 	and.w	r3, r3, #32
 8108748:	2b00      	cmp	r3, #0
 810874a:	d003      	beq.n	8108754 <HAL_RTCEx_SetTamper+0xe8>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3NOERASE);
 810874c:	68fb      	ldr	r3, [r7, #12]
 810874e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8108752:	60fb      	str	r3, [r7, #12]
  }
#endif /* RTC_TAMPNOERASE_SUPPORT */

#if defined(RTC_TAMPMASKFLAG_SUPPORT)  
  /* Configure the tamper flags masking bit */
  if (sTamper->MaskFlag != RTC_TAMPERMASK_FLAG_DISABLE)
 8108754:	683b      	ldr	r3, [r7, #0]
 8108756:	691b      	ldr	r3, [r3, #16]
 8108758:	2b00      	cmp	r3, #0
 810875a:	d01e      	beq.n	810879a <HAL_RTCEx_SetTamper+0x12e>
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 810875c:	683b      	ldr	r3, [r7, #0]
 810875e:	681b      	ldr	r3, [r3, #0]
 8108760:	f003 0301 	and.w	r3, r3, #1
 8108764:	2b00      	cmp	r3, #0
 8108766:	d003      	beq.n	8108770 <HAL_RTCEx_SetTamper+0x104>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP1MF);
 8108768:	68fb      	ldr	r3, [r7, #12]
 810876a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 810876e:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 8108770:	683b      	ldr	r3, [r7, #0]
 8108772:	681b      	ldr	r3, [r3, #0]
 8108774:	f003 0308 	and.w	r3, r3, #8
 8108778:	2b00      	cmp	r3, #0
 810877a:	d003      	beq.n	8108784 <HAL_RTCEx_SetTamper+0x118>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP2MF);
 810877c:	68fb      	ldr	r3, [r7, #12]
 810877e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8108782:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 8108784:	683b      	ldr	r3, [r7, #0]
 8108786:	681b      	ldr	r3, [r3, #0]
 8108788:	f003 0320 	and.w	r3, r3, #32
 810878c:	2b00      	cmp	r3, #0
 810878e:	d022      	beq.n	81087d6 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg |= (uint32_t)(RTC_TAMPCR_TAMP3MF);
 8108790:	68fb      	ldr	r3, [r7, #12]
 8108792:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8108796:	60fb      	str	r3, [r7, #12]
 8108798:	e01d      	b.n	81087d6 <HAL_RTCEx_SetTamper+0x16a>
    }
  }
  else
  {
    if ((sTamper->Tamper & RTC_TAMPER_1) != 0U)
 810879a:	683b      	ldr	r3, [r7, #0]
 810879c:	681b      	ldr	r3, [r3, #0]
 810879e:	f003 0301 	and.w	r3, r3, #1
 81087a2:	2b00      	cmp	r3, #0
 81087a4:	d003      	beq.n	81087ae <HAL_RTCEx_SetTamper+0x142>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP1MF);
 81087a6:	68fb      	ldr	r3, [r7, #12]
 81087a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 81087ac:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_2) != 0U)
 81087ae:	683b      	ldr	r3, [r7, #0]
 81087b0:	681b      	ldr	r3, [r3, #0]
 81087b2:	f003 0308 	and.w	r3, r3, #8
 81087b6:	2b00      	cmp	r3, #0
 81087b8:	d003      	beq.n	81087c2 <HAL_RTCEx_SetTamper+0x156>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP2MF);
 81087ba:	68fb      	ldr	r3, [r7, #12]
 81087bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 81087c0:	60fb      	str	r3, [r7, #12]
    }
    if ((sTamper->Tamper & RTC_TAMPER_3) != 0U)
 81087c2:	683b      	ldr	r3, [r7, #0]
 81087c4:	681b      	ldr	r3, [r3, #0]
 81087c6:	f003 0320 	and.w	r3, r3, #32
 81087ca:	2b00      	cmp	r3, #0
 81087cc:	d003      	beq.n	81087d6 <HAL_RTCEx_SetTamper+0x16a>
    {
      tmpreg &= (uint32_t)~(RTC_TAMPCR_TAMP3MF);
 81087ce:	68fb      	ldr	r3, [r7, #12]
 81087d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 81087d4:	60fb      	str	r3, [r7, #12]
    }
  }
#endif /* RTC_TAMPMASKFLAG_SUPPORT */

  /* Clearing remaining fields before setting them */
  tmpreg &= ~(RTC_TAMPERFILTER_MASK            | RTC_TAMPERSAMPLINGFREQ_RTCCLK_MASK | \
 81087d6:	68fb      	ldr	r3, [r7, #12]
 81087d8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81087dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81087e0:	60fb      	str	r3, [r7, #12]
              RTC_TAMPERPRECHARGEDURATION_MASK | RTC_TAMPER_PULLUP_MASK             | \
              RTC_TIMESTAMPONTAMPERDETECTION_MASK);

  /* Set remaining parameters of desired configuration into temporary variable */
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 81087e2:	683b      	ldr	r3, [r7, #0]
 81087e4:	695a      	ldr	r2, [r3, #20]
             (uint32_t)sTamper->SamplingFrequency | \
 81087e6:	683b      	ldr	r3, [r7, #0]
 81087e8:	699b      	ldr	r3, [r3, #24]
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 81087ea:	431a      	orrs	r2, r3
             (uint32_t)sTamper->PrechargeDuration | \
 81087ec:	683b      	ldr	r3, [r7, #0]
 81087ee:	69db      	ldr	r3, [r3, #28]
             (uint32_t)sTamper->SamplingFrequency | \
 81087f0:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TamperPullUp      | \
 81087f2:	683b      	ldr	r3, [r7, #0]
 81087f4:	6a1b      	ldr	r3, [r3, #32]
             (uint32_t)sTamper->PrechargeDuration | \
 81087f6:	431a      	orrs	r2, r3
             (uint32_t)sTamper->TimeStampOnTamperDetection);
 81087f8:	683b      	ldr	r3, [r7, #0]
 81087fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             (uint32_t)sTamper->TamperPullUp      | \
 81087fc:	4313      	orrs	r3, r2
  tmpreg |= ((uint32_t)sTamper->Filter            | \
 81087fe:	68fa      	ldr	r2, [r7, #12]
 8108800:	4313      	orrs	r3, r2
 8108802:	60fb      	str	r3, [r7, #12]

  /* Copy desired configuration into configuration register */
  hrtc->Instance->TAMPCR = tmpreg;
 8108804:	687b      	ldr	r3, [r7, #4]
 8108806:	681b      	ldr	r3, [r3, #0]
 8108808:	68fa      	ldr	r2, [r7, #12]
 810880a:	641a      	str	r2, [r3, #64]	@ 0x40

  hrtc->State = HAL_RTC_STATE_READY;
 810880c:	687b      	ldr	r3, [r7, #4]
 810880e:	2201      	movs	r2, #1
 8108810:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8108814:	687b      	ldr	r3, [r7, #4]
 8108816:	2200      	movs	r2, #0
 8108818:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 810881c:	2300      	movs	r3, #0
}
 810881e:	4618      	mov	r0, r3
 8108820:	3714      	adds	r7, #20
 8108822:	46bd      	mov	sp, r7
 8108824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108828:	4770      	bx	lr
	...

0810882c <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 810882c:	b580      	push	{r7, lr}
 810882e:	b08a      	sub	sp, #40	@ 0x28
 8108830:	af00      	add	r7, sp, #0
 8108832:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8108834:	687b      	ldr	r3, [r7, #4]
 8108836:	2b00      	cmp	r3, #0
 8108838:	d101      	bne.n	810883e <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 810883a:	2301      	movs	r3, #1
 810883c:	e290      	b.n	8108d60 <HAL_SAI_Init+0x534>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 810883e:	f7fa fa41 	bl	8102cc4 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8108842:	687b      	ldr	r3, [r7, #4]
 8108844:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8108848:	2b01      	cmp	r3, #1
 810884a:	d113      	bne.n	8108874 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 810884c:	687b      	ldr	r3, [r7, #4]
 810884e:	681b      	ldr	r3, [r3, #0]
 8108850:	4a96      	ldr	r2, [pc, #600]	@ (8108aac <HAL_SAI_Init+0x280>)
 8108852:	4293      	cmp	r3, r2
 8108854:	d004      	beq.n	8108860 <HAL_SAI_Init+0x34>
 8108856:	687b      	ldr	r3, [r7, #4]
 8108858:	681b      	ldr	r3, [r3, #0]
 810885a:	4a95      	ldr	r2, [pc, #596]	@ (8108ab0 <HAL_SAI_Init+0x284>)
 810885c:	4293      	cmp	r3, r2
 810885e:	d107      	bne.n	8108870 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8108860:	687b      	ldr	r3, [r7, #4]
 8108862:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 8108864:	2b01      	cmp	r3, #1
 8108866:	d103      	bne.n	8108870 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8108868:	687b      	ldr	r3, [r7, #4]
 810886a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 810886c:	2b00      	cmp	r3, #0
 810886e:	d001      	beq.n	8108874 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8108870:	2301      	movs	r3, #1
 8108872:	e275      	b.n	8108d60 <HAL_SAI_Init+0x534>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8108874:	687b      	ldr	r3, [r7, #4]
 8108876:	681b      	ldr	r3, [r3, #0]
 8108878:	4a8c      	ldr	r2, [pc, #560]	@ (8108aac <HAL_SAI_Init+0x280>)
 810887a:	4293      	cmp	r3, r2
 810887c:	d004      	beq.n	8108888 <HAL_SAI_Init+0x5c>
 810887e:	687b      	ldr	r3, [r7, #4]
 8108880:	681b      	ldr	r3, [r3, #0]
 8108882:	4a8c      	ldr	r2, [pc, #560]	@ (8108ab4 <HAL_SAI_Init+0x288>)
 8108884:	4293      	cmp	r3, r2
 8108886:	d102      	bne.n	810888e <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8108888:	4b8b      	ldr	r3, [pc, #556]	@ (8108ab8 <HAL_SAI_Init+0x28c>)
 810888a:	61bb      	str	r3, [r7, #24]
 810888c:	e028      	b.n	81088e0 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 810888e:	687b      	ldr	r3, [r7, #4]
 8108890:	681b      	ldr	r3, [r3, #0]
 8108892:	4a8a      	ldr	r2, [pc, #552]	@ (8108abc <HAL_SAI_Init+0x290>)
 8108894:	4293      	cmp	r3, r2
 8108896:	d004      	beq.n	81088a2 <HAL_SAI_Init+0x76>
 8108898:	687b      	ldr	r3, [r7, #4]
 810889a:	681b      	ldr	r3, [r3, #0]
 810889c:	4a88      	ldr	r2, [pc, #544]	@ (8108ac0 <HAL_SAI_Init+0x294>)
 810889e:	4293      	cmp	r3, r2
 81088a0:	d102      	bne.n	81088a8 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 81088a2:	4b88      	ldr	r3, [pc, #544]	@ (8108ac4 <HAL_SAI_Init+0x298>)
 81088a4:	61bb      	str	r3, [r7, #24]
 81088a6:	e01b      	b.n	81088e0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 81088a8:	687b      	ldr	r3, [r7, #4]
 81088aa:	681b      	ldr	r3, [r3, #0]
 81088ac:	4a86      	ldr	r2, [pc, #536]	@ (8108ac8 <HAL_SAI_Init+0x29c>)
 81088ae:	4293      	cmp	r3, r2
 81088b0:	d004      	beq.n	81088bc <HAL_SAI_Init+0x90>
 81088b2:	687b      	ldr	r3, [r7, #4]
 81088b4:	681b      	ldr	r3, [r3, #0]
 81088b6:	4a85      	ldr	r2, [pc, #532]	@ (8108acc <HAL_SAI_Init+0x2a0>)
 81088b8:	4293      	cmp	r3, r2
 81088ba:	d102      	bne.n	81088c2 <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 81088bc:	4b84      	ldr	r3, [pc, #528]	@ (8108ad0 <HAL_SAI_Init+0x2a4>)
 81088be:	61bb      	str	r3, [r7, #24]
 81088c0:	e00e      	b.n	81088e0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 81088c2:	687b      	ldr	r3, [r7, #4]
 81088c4:	681b      	ldr	r3, [r3, #0]
 81088c6:	4a7a      	ldr	r2, [pc, #488]	@ (8108ab0 <HAL_SAI_Init+0x284>)
 81088c8:	4293      	cmp	r3, r2
 81088ca:	d004      	beq.n	81088d6 <HAL_SAI_Init+0xaa>
 81088cc:	687b      	ldr	r3, [r7, #4]
 81088ce:	681b      	ldr	r3, [r3, #0]
 81088d0:	4a80      	ldr	r2, [pc, #512]	@ (8108ad4 <HAL_SAI_Init+0x2a8>)
 81088d2:	4293      	cmp	r3, r2
 81088d4:	d102      	bne.n	81088dc <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 81088d6:	4b80      	ldr	r3, [pc, #512]	@ (8108ad8 <HAL_SAI_Init+0x2ac>)
 81088d8:	61bb      	str	r3, [r7, #24]
 81088da:	e001      	b.n	81088e0 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 81088dc:	2301      	movs	r3, #1
 81088de:	e23f      	b.n	8108d60 <HAL_SAI_Init+0x534>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 81088e0:	687b      	ldr	r3, [r7, #4]
 81088e2:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 81088e6:	b2db      	uxtb	r3, r3
 81088e8:	2b00      	cmp	r3, #0
 81088ea:	d106      	bne.n	81088fa <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 81088ec:	687b      	ldr	r3, [r7, #4]
 81088ee:	2200      	movs	r2, #0
 81088f0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 81088f4:	6878      	ldr	r0, [r7, #4]
 81088f6:	f7f9 ffef 	bl	81028d8 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 81088fa:	6878      	ldr	r0, [r7, #4]
 81088fc:	f000 fa40 	bl	8108d80 <SAI_Disable>
 8108900:	4603      	mov	r3, r0
 8108902:	2b00      	cmp	r3, #0
 8108904:	d001      	beq.n	810890a <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 8108906:	2301      	movs	r3, #1
 8108908:	e22a      	b.n	8108d60 <HAL_SAI_Init+0x534>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 810890a:	687b      	ldr	r3, [r7, #4]
 810890c:	2202      	movs	r2, #2
 810890e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8108912:	687b      	ldr	r3, [r7, #4]
 8108914:	68db      	ldr	r3, [r3, #12]
 8108916:	2b02      	cmp	r3, #2
 8108918:	d00c      	beq.n	8108934 <HAL_SAI_Init+0x108>
 810891a:	2b02      	cmp	r3, #2
 810891c:	d80d      	bhi.n	810893a <HAL_SAI_Init+0x10e>
 810891e:	2b00      	cmp	r3, #0
 8108920:	d002      	beq.n	8108928 <HAL_SAI_Init+0xfc>
 8108922:	2b01      	cmp	r3, #1
 8108924:	d003      	beq.n	810892e <HAL_SAI_Init+0x102>
 8108926:	e008      	b.n	810893a <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8108928:	2300      	movs	r3, #0
 810892a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 810892c:	e008      	b.n	8108940 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 810892e:	2310      	movs	r3, #16
 8108930:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8108932:	e005      	b.n	8108940 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8108934:	2320      	movs	r3, #32
 8108936:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8108938:	e002      	b.n	8108940 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 810893a:	2300      	movs	r3, #0
 810893c:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 810893e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8108940:	687b      	ldr	r3, [r7, #4]
 8108942:	689b      	ldr	r3, [r3, #8]
 8108944:	2b05      	cmp	r3, #5
 8108946:	d832      	bhi.n	81089ae <HAL_SAI_Init+0x182>
 8108948:	a201      	add	r2, pc, #4	@ (adr r2, 8108950 <HAL_SAI_Init+0x124>)
 810894a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810894e:	bf00      	nop
 8108950:	08108969 	.word	0x08108969
 8108954:	0810896f 	.word	0x0810896f
 8108958:	08108977 	.word	0x08108977
 810895c:	0810897f 	.word	0x0810897f
 8108960:	0810898f 	.word	0x0810898f
 8108964:	0810899f 	.word	0x0810899f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8108968:	2300      	movs	r3, #0
 810896a:	61fb      	str	r3, [r7, #28]
      break;
 810896c:	e022      	b.n	81089b4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 810896e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8108972:	61fb      	str	r3, [r7, #28]
      break;
 8108974:	e01e      	b.n	81089b4 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8108976:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810897a:	61fb      	str	r3, [r7, #28]
      break;
 810897c:	e01a      	b.n	81089b4 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810897e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8108982:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8108984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108986:	f043 0301 	orr.w	r3, r3, #1
 810898a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 810898c:	e012      	b.n	81089b4 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810898e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8108992:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 8108994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108996:	f043 0302 	orr.w	r3, r3, #2
 810899a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 810899c:	e00a      	b.n	81089b4 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 810899e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81089a2:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 81089a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81089a6:	f043 0303 	orr.w	r3, r3, #3
 81089aa:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 81089ac:	e002      	b.n	81089b4 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 81089ae:	2300      	movs	r3, #0
 81089b0:	61fb      	str	r3, [r7, #28]
      break;
 81089b2:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 81089b4:	69bb      	ldr	r3, [r7, #24]
 81089b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81089b8:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 81089ba:	687b      	ldr	r3, [r7, #4]
 81089bc:	6a1b      	ldr	r3, [r3, #32]
 81089be:	2b00      	cmp	r3, #0
 81089c0:	f000 80c5 	beq.w	8108b4e <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 81089c4:	2300      	movs	r3, #0
 81089c6:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 81089c8:	687b      	ldr	r3, [r7, #4]
 81089ca:	681b      	ldr	r3, [r3, #0]
 81089cc:	4a37      	ldr	r2, [pc, #220]	@ (8108aac <HAL_SAI_Init+0x280>)
 81089ce:	4293      	cmp	r3, r2
 81089d0:	d004      	beq.n	81089dc <HAL_SAI_Init+0x1b0>
 81089d2:	687b      	ldr	r3, [r7, #4]
 81089d4:	681b      	ldr	r3, [r3, #0]
 81089d6:	4a37      	ldr	r2, [pc, #220]	@ (8108ab4 <HAL_SAI_Init+0x288>)
 81089d8:	4293      	cmp	r3, r2
 81089da:	d106      	bne.n	81089ea <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 81089dc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 81089e0:	f04f 0100 	mov.w	r1, #0
 81089e4:	f7fe fa36 	bl	8106e54 <HAL_RCCEx_GetPeriphCLKFreq>
 81089e8:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 81089ea:	687b      	ldr	r3, [r7, #4]
 81089ec:	681b      	ldr	r3, [r3, #0]
 81089ee:	4a33      	ldr	r2, [pc, #204]	@ (8108abc <HAL_SAI_Init+0x290>)
 81089f0:	4293      	cmp	r3, r2
 81089f2:	d004      	beq.n	81089fe <HAL_SAI_Init+0x1d2>
 81089f4:	687b      	ldr	r3, [r7, #4]
 81089f6:	681b      	ldr	r3, [r3, #0]
 81089f8:	4a31      	ldr	r2, [pc, #196]	@ (8108ac0 <HAL_SAI_Init+0x294>)
 81089fa:	4293      	cmp	r3, r2
 81089fc:	d106      	bne.n	8108a0c <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 81089fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8108a02:	f04f 0100 	mov.w	r1, #0
 8108a06:	f7fe fa25 	bl	8106e54 <HAL_RCCEx_GetPeriphCLKFreq>
 8108a0a:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8108a0c:	687b      	ldr	r3, [r7, #4]
 8108a0e:	681b      	ldr	r3, [r3, #0]
 8108a10:	4a2d      	ldr	r2, [pc, #180]	@ (8108ac8 <HAL_SAI_Init+0x29c>)
 8108a12:	4293      	cmp	r3, r2
 8108a14:	d004      	beq.n	8108a20 <HAL_SAI_Init+0x1f4>
 8108a16:	687b      	ldr	r3, [r7, #4]
 8108a18:	681b      	ldr	r3, [r3, #0]
 8108a1a:	4a2c      	ldr	r2, [pc, #176]	@ (8108acc <HAL_SAI_Init+0x2a0>)
 8108a1c:	4293      	cmp	r3, r2
 8108a1e:	d106      	bne.n	8108a2e <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8108a20:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8108a24:	f04f 0100 	mov.w	r1, #0
 8108a28:	f7fe fa14 	bl	8106e54 <HAL_RCCEx_GetPeriphCLKFreq>
 8108a2c:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 8108a2e:	687b      	ldr	r3, [r7, #4]
 8108a30:	681b      	ldr	r3, [r3, #0]
 8108a32:	4a1f      	ldr	r2, [pc, #124]	@ (8108ab0 <HAL_SAI_Init+0x284>)
 8108a34:	4293      	cmp	r3, r2
 8108a36:	d106      	bne.n	8108a46 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8108a38:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8108a3c:	f04f 0100 	mov.w	r1, #0
 8108a40:	f7fe fa08 	bl	8106e54 <HAL_RCCEx_GetPeriphCLKFreq>
 8108a44:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 8108a46:	687b      	ldr	r3, [r7, #4]
 8108a48:	681b      	ldr	r3, [r3, #0]
 8108a4a:	4a22      	ldr	r2, [pc, #136]	@ (8108ad4 <HAL_SAI_Init+0x2a8>)
 8108a4c:	4293      	cmp	r3, r2
 8108a4e:	d106      	bne.n	8108a5e <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 8108a50:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8108a54:	f04f 0100 	mov.w	r1, #0
 8108a58:	f7fe f9fc 	bl	8106e54 <HAL_RCCEx_GetPeriphCLKFreq>
 8108a5c:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8108a5e:	687b      	ldr	r3, [r7, #4]
 8108a60:	699b      	ldr	r3, [r3, #24]
 8108a62:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8108a66:	d139      	bne.n	8108adc <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8108a68:	687b      	ldr	r3, [r7, #4]
 8108a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108a6c:	2b04      	cmp	r3, #4
 8108a6e:	d102      	bne.n	8108a76 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8108a70:	2340      	movs	r3, #64	@ 0x40
 8108a72:	60fb      	str	r3, [r7, #12]
 8108a74:	e00a      	b.n	8108a8c <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8108a76:	687b      	ldr	r3, [r7, #4]
 8108a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108a7a:	2b08      	cmp	r3, #8
 8108a7c:	d103      	bne.n	8108a86 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8108a7e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8108a82:	60fb      	str	r3, [r7, #12]
 8108a84:	e002      	b.n	8108a8c <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8108a86:	687b      	ldr	r3, [r7, #4]
 8108a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108a8a:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8108a8c:	697a      	ldr	r2, [r7, #20]
 8108a8e:	4613      	mov	r3, r2
 8108a90:	009b      	lsls	r3, r3, #2
 8108a92:	4413      	add	r3, r2
 8108a94:	005b      	lsls	r3, r3, #1
 8108a96:	4619      	mov	r1, r3
 8108a98:	687b      	ldr	r3, [r7, #4]
 8108a9a:	6a1b      	ldr	r3, [r3, #32]
 8108a9c:	68fa      	ldr	r2, [r7, #12]
 8108a9e:	fb02 f303 	mul.w	r3, r2, r3
 8108aa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8108aa6:	613b      	str	r3, [r7, #16]
 8108aa8:	e030      	b.n	8108b0c <HAL_SAI_Init+0x2e0>
 8108aaa:	bf00      	nop
 8108aac:	40015804 	.word	0x40015804
 8108ab0:	58005404 	.word	0x58005404
 8108ab4:	40015824 	.word	0x40015824
 8108ab8:	40015800 	.word	0x40015800
 8108abc:	40015c04 	.word	0x40015c04
 8108ac0:	40015c24 	.word	0x40015c24
 8108ac4:	40015c00 	.word	0x40015c00
 8108ac8:	40016004 	.word	0x40016004
 8108acc:	40016024 	.word	0x40016024
 8108ad0:	40016000 	.word	0x40016000
 8108ad4:	58005424 	.word	0x58005424
 8108ad8:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8108adc:	687b      	ldr	r3, [r7, #4]
 8108ade:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108ae0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8108ae4:	d101      	bne.n	8108aea <HAL_SAI_Init+0x2be>
 8108ae6:	2302      	movs	r3, #2
 8108ae8:	e000      	b.n	8108aec <HAL_SAI_Init+0x2c0>
 8108aea:	2301      	movs	r3, #1
 8108aec:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8108aee:	697a      	ldr	r2, [r7, #20]
 8108af0:	4613      	mov	r3, r2
 8108af2:	009b      	lsls	r3, r3, #2
 8108af4:	4413      	add	r3, r2
 8108af6:	005b      	lsls	r3, r3, #1
 8108af8:	4619      	mov	r1, r3
 8108afa:	687b      	ldr	r3, [r7, #4]
 8108afc:	6a1b      	ldr	r3, [r3, #32]
 8108afe:	68ba      	ldr	r2, [r7, #8]
 8108b00:	fb02 f303 	mul.w	r3, r2, r3
 8108b04:	021b      	lsls	r3, r3, #8
 8108b06:	fbb1 f3f3 	udiv	r3, r1, r3
 8108b0a:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8108b0c:	693b      	ldr	r3, [r7, #16]
 8108b0e:	4a96      	ldr	r2, [pc, #600]	@ (8108d68 <HAL_SAI_Init+0x53c>)
 8108b10:	fba2 2303 	umull	r2, r3, r2, r3
 8108b14:	08da      	lsrs	r2, r3, #3
 8108b16:	687b      	ldr	r3, [r7, #4]
 8108b18:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8108b1a:	6939      	ldr	r1, [r7, #16]
 8108b1c:	4b92      	ldr	r3, [pc, #584]	@ (8108d68 <HAL_SAI_Init+0x53c>)
 8108b1e:	fba3 2301 	umull	r2, r3, r3, r1
 8108b22:	08da      	lsrs	r2, r3, #3
 8108b24:	4613      	mov	r3, r2
 8108b26:	009b      	lsls	r3, r3, #2
 8108b28:	4413      	add	r3, r2
 8108b2a:	005b      	lsls	r3, r3, #1
 8108b2c:	1aca      	subs	r2, r1, r3
 8108b2e:	2a08      	cmp	r2, #8
 8108b30:	d904      	bls.n	8108b3c <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 8108b32:	687b      	ldr	r3, [r7, #4]
 8108b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108b36:	1c5a      	adds	r2, r3, #1
 8108b38:	687b      	ldr	r3, [r7, #4]
 8108b3a:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8108b3c:	687b      	ldr	r3, [r7, #4]
 8108b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108b40:	2b04      	cmp	r3, #4
 8108b42:	d104      	bne.n	8108b4e <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8108b44:	687b      	ldr	r3, [r7, #4]
 8108b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108b48:	085a      	lsrs	r2, r3, #1
 8108b4a:	687b      	ldr	r3, [r7, #4]
 8108b4c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8108b4e:	687b      	ldr	r3, [r7, #4]
 8108b50:	685b      	ldr	r3, [r3, #4]
 8108b52:	2b00      	cmp	r3, #0
 8108b54:	d003      	beq.n	8108b5e <HAL_SAI_Init+0x332>
 8108b56:	687b      	ldr	r3, [r7, #4]
 8108b58:	685b      	ldr	r3, [r3, #4]
 8108b5a:	2b02      	cmp	r3, #2
 8108b5c:	d109      	bne.n	8108b72 <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8108b5e:	687b      	ldr	r3, [r7, #4]
 8108b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108b62:	2b01      	cmp	r3, #1
 8108b64:	d101      	bne.n	8108b6a <HAL_SAI_Init+0x33e>
 8108b66:	2300      	movs	r3, #0
 8108b68:	e001      	b.n	8108b6e <HAL_SAI_Init+0x342>
 8108b6a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8108b6e:	623b      	str	r3, [r7, #32]
 8108b70:	e008      	b.n	8108b84 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8108b72:	687b      	ldr	r3, [r7, #4]
 8108b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8108b76:	2b01      	cmp	r3, #1
 8108b78:	d102      	bne.n	8108b80 <HAL_SAI_Init+0x354>
 8108b7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8108b7e:	e000      	b.n	8108b82 <HAL_SAI_Init+0x356>
 8108b80:	2300      	movs	r3, #0
 8108b82:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8108b84:	f7fa f89e 	bl	8102cc4 <HAL_GetREVID>
 8108b88:	4603      	mov	r3, r0
 8108b8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8108b8e:	d331      	bcc.n	8108bf4 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8108b90:	687b      	ldr	r3, [r7, #4]
 8108b92:	681b      	ldr	r3, [r3, #0]
 8108b94:	6819      	ldr	r1, [r3, #0]
 8108b96:	687b      	ldr	r3, [r7, #4]
 8108b98:	681a      	ldr	r2, [r3, #0]
 8108b9a:	4b74      	ldr	r3, [pc, #464]	@ (8108d6c <HAL_SAI_Init+0x540>)
 8108b9c:	400b      	ands	r3, r1
 8108b9e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8108ba0:	687b      	ldr	r3, [r7, #4]
 8108ba2:	681b      	ldr	r3, [r3, #0]
 8108ba4:	6819      	ldr	r1, [r3, #0]
 8108ba6:	687b      	ldr	r3, [r7, #4]
 8108ba8:	685a      	ldr	r2, [r3, #4]
 8108baa:	687b      	ldr	r3, [r7, #4]
 8108bac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108bae:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8108bb0:	687b      	ldr	r3, [r7, #4]
 8108bb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8108bb4:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8108bb6:	687b      	ldr	r3, [r7, #4]
 8108bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108bba:	431a      	orrs	r2, r3
 8108bbc:	6a3b      	ldr	r3, [r7, #32]
 8108bbe:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8108bc0:	69fb      	ldr	r3, [r7, #28]
 8108bc2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8108bc4:	687b      	ldr	r3, [r7, #4]
 8108bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8108bc8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8108bca:	687b      	ldr	r3, [r7, #4]
 8108bcc:	695b      	ldr	r3, [r3, #20]
 8108bce:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8108bd0:	687b      	ldr	r3, [r7, #4]
 8108bd2:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8108bd4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8108bd6:	687b      	ldr	r3, [r7, #4]
 8108bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108bda:	051b      	lsls	r3, r3, #20
 8108bdc:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8108bde:	687b      	ldr	r3, [r7, #4]
 8108be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8108be2:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8108be4:	687b      	ldr	r3, [r7, #4]
 8108be6:	691b      	ldr	r3, [r3, #16]
 8108be8:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8108bea:	687b      	ldr	r3, [r7, #4]
 8108bec:	681b      	ldr	r3, [r3, #0]
 8108bee:	430a      	orrs	r2, r1
 8108bf0:	601a      	str	r2, [r3, #0]
 8108bf2:	e02d      	b.n	8108c50 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8108bf4:	687b      	ldr	r3, [r7, #4]
 8108bf6:	681b      	ldr	r3, [r3, #0]
 8108bf8:	6819      	ldr	r1, [r3, #0]
 8108bfa:	687b      	ldr	r3, [r7, #4]
 8108bfc:	681a      	ldr	r2, [r3, #0]
 8108bfe:	4b5c      	ldr	r3, [pc, #368]	@ (8108d70 <HAL_SAI_Init+0x544>)
 8108c00:	400b      	ands	r3, r1
 8108c02:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8108c04:	687b      	ldr	r3, [r7, #4]
 8108c06:	681b      	ldr	r3, [r3, #0]
 8108c08:	6819      	ldr	r1, [r3, #0]
 8108c0a:	687b      	ldr	r3, [r7, #4]
 8108c0c:	685a      	ldr	r2, [r3, #4]
 8108c0e:	687b      	ldr	r3, [r7, #4]
 8108c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108c12:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8108c14:	687b      	ldr	r3, [r7, #4]
 8108c16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8108c18:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8108c1a:	687b      	ldr	r3, [r7, #4]
 8108c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8108c1e:	431a      	orrs	r2, r3
 8108c20:	6a3b      	ldr	r3, [r7, #32]
 8108c22:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8108c24:	69fb      	ldr	r3, [r7, #28]
 8108c26:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8108c28:	687b      	ldr	r3, [r7, #4]
 8108c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8108c2c:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8108c2e:	687b      	ldr	r3, [r7, #4]
 8108c30:	695b      	ldr	r3, [r3, #20]
 8108c32:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8108c34:	687b      	ldr	r3, [r7, #4]
 8108c36:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8108c38:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8108c3a:	687b      	ldr	r3, [r7, #4]
 8108c3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8108c3e:	051b      	lsls	r3, r3, #20
 8108c40:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 8108c42:	687b      	ldr	r3, [r7, #4]
 8108c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8108c46:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8108c48:	687b      	ldr	r3, [r7, #4]
 8108c4a:	681b      	ldr	r3, [r3, #0]
 8108c4c:	430a      	orrs	r2, r1
 8108c4e:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8108c50:	687b      	ldr	r3, [r7, #4]
 8108c52:	681b      	ldr	r3, [r3, #0]
 8108c54:	685b      	ldr	r3, [r3, #4]
 8108c56:	687a      	ldr	r2, [r7, #4]
 8108c58:	6812      	ldr	r2, [r2, #0]
 8108c5a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8108c5e:	f023 030f 	bic.w	r3, r3, #15
 8108c62:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8108c64:	687b      	ldr	r3, [r7, #4]
 8108c66:	681b      	ldr	r3, [r3, #0]
 8108c68:	6859      	ldr	r1, [r3, #4]
 8108c6a:	687b      	ldr	r3, [r7, #4]
 8108c6c:	69da      	ldr	r2, [r3, #28]
 8108c6e:	687b      	ldr	r3, [r7, #4]
 8108c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108c72:	431a      	orrs	r2, r3
 8108c74:	687b      	ldr	r3, [r7, #4]
 8108c76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108c78:	431a      	orrs	r2, r3
 8108c7a:	687b      	ldr	r3, [r7, #4]
 8108c7c:	681b      	ldr	r3, [r3, #0]
 8108c7e:	430a      	orrs	r2, r1
 8108c80:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8108c82:	687b      	ldr	r3, [r7, #4]
 8108c84:	681b      	ldr	r3, [r3, #0]
 8108c86:	6899      	ldr	r1, [r3, #8]
 8108c88:	687b      	ldr	r3, [r7, #4]
 8108c8a:	681a      	ldr	r2, [r3, #0]
 8108c8c:	4b39      	ldr	r3, [pc, #228]	@ (8108d74 <HAL_SAI_Init+0x548>)
 8108c8e:	400b      	ands	r3, r1
 8108c90:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8108c92:	687b      	ldr	r3, [r7, #4]
 8108c94:	681b      	ldr	r3, [r3, #0]
 8108c96:	6899      	ldr	r1, [r3, #8]
 8108c98:	687b      	ldr	r3, [r7, #4]
 8108c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108c9c:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8108c9e:	687b      	ldr	r3, [r7, #4]
 8108ca0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8108ca2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8108ca4:	687b      	ldr	r3, [r7, #4]
 8108ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 8108ca8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8108caa:	687b      	ldr	r3, [r7, #4]
 8108cac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8108cae:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8108cb0:	687b      	ldr	r3, [r7, #4]
 8108cb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8108cb4:	3b01      	subs	r3, #1
 8108cb6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8108cb8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8108cba:	687b      	ldr	r3, [r7, #4]
 8108cbc:	681b      	ldr	r3, [r3, #0]
 8108cbe:	430a      	orrs	r2, r1
 8108cc0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8108cc2:	687b      	ldr	r3, [r7, #4]
 8108cc4:	681b      	ldr	r3, [r3, #0]
 8108cc6:	68d9      	ldr	r1, [r3, #12]
 8108cc8:	687b      	ldr	r3, [r7, #4]
 8108cca:	681a      	ldr	r2, [r3, #0]
 8108ccc:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8108cd0:	400b      	ands	r3, r1
 8108cd2:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8108cd4:	687b      	ldr	r3, [r7, #4]
 8108cd6:	681b      	ldr	r3, [r3, #0]
 8108cd8:	68d9      	ldr	r1, [r3, #12]
 8108cda:	687b      	ldr	r3, [r7, #4]
 8108cdc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8108cde:	687b      	ldr	r3, [r7, #4]
 8108ce0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8108ce2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8108ce4:	687b      	ldr	r3, [r7, #4]
 8108ce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8108ce8:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8108cea:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8108cec:	687b      	ldr	r3, [r7, #4]
 8108cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8108cf0:	3b01      	subs	r3, #1
 8108cf2:	021b      	lsls	r3, r3, #8
 8108cf4:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8108cf6:	687b      	ldr	r3, [r7, #4]
 8108cf8:	681b      	ldr	r3, [r3, #0]
 8108cfa:	430a      	orrs	r2, r1
 8108cfc:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8108cfe:	687b      	ldr	r3, [r7, #4]
 8108d00:	681b      	ldr	r3, [r3, #0]
 8108d02:	4a1d      	ldr	r2, [pc, #116]	@ (8108d78 <HAL_SAI_Init+0x54c>)
 8108d04:	4293      	cmp	r3, r2
 8108d06:	d004      	beq.n	8108d12 <HAL_SAI_Init+0x4e6>
 8108d08:	687b      	ldr	r3, [r7, #4]
 8108d0a:	681b      	ldr	r3, [r3, #0]
 8108d0c:	4a1b      	ldr	r2, [pc, #108]	@ (8108d7c <HAL_SAI_Init+0x550>)
 8108d0e:	4293      	cmp	r3, r2
 8108d10:	d119      	bne.n	8108d46 <HAL_SAI_Init+0x51a>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8108d12:	69bb      	ldr	r3, [r7, #24]
 8108d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108d16:	f023 0201 	bic.w	r2, r3, #1
 8108d1a:	69bb      	ldr	r3, [r7, #24]
 8108d1c:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8108d1e:	687b      	ldr	r3, [r7, #4]
 8108d20:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8108d24:	2b01      	cmp	r3, #1
 8108d26:	d10e      	bne.n	8108d46 <HAL_SAI_Init+0x51a>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8108d28:	687b      	ldr	r3, [r7, #4]
 8108d2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8108d2c:	687b      	ldr	r3, [r7, #4]
 8108d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108d30:	3b01      	subs	r3, #1
 8108d32:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8108d34:	431a      	orrs	r2, r3
 8108d36:	69bb      	ldr	r3, [r7, #24]
 8108d38:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 8108d3a:	69bb      	ldr	r3, [r7, #24]
 8108d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8108d3e:	f043 0201 	orr.w	r2, r3, #1
 8108d42:	69bb      	ldr	r3, [r7, #24]
 8108d44:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8108d46:	687b      	ldr	r3, [r7, #4]
 8108d48:	2200      	movs	r2, #0
 8108d4a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8108d4e:	687b      	ldr	r3, [r7, #4]
 8108d50:	2201      	movs	r2, #1
 8108d52:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8108d56:	687b      	ldr	r3, [r7, #4]
 8108d58:	2200      	movs	r2, #0
 8108d5a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8108d5e:	2300      	movs	r3, #0
}
 8108d60:	4618      	mov	r0, r3
 8108d62:	3728      	adds	r7, #40	@ 0x28
 8108d64:	46bd      	mov	sp, r7
 8108d66:	bd80      	pop	{r7, pc}
 8108d68:	cccccccd 	.word	0xcccccccd
 8108d6c:	f005c010 	.word	0xf005c010
 8108d70:	f805c010 	.word	0xf805c010
 8108d74:	fff88000 	.word	0xfff88000
 8108d78:	40015804 	.word	0x40015804
 8108d7c:	58005404 	.word	0x58005404

08108d80 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8108d80:	b480      	push	{r7}
 8108d82:	b085      	sub	sp, #20
 8108d84:	af00      	add	r7, sp, #0
 8108d86:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8108d88:	4b18      	ldr	r3, [pc, #96]	@ (8108dec <SAI_Disable+0x6c>)
 8108d8a:	681b      	ldr	r3, [r3, #0]
 8108d8c:	4a18      	ldr	r2, [pc, #96]	@ (8108df0 <SAI_Disable+0x70>)
 8108d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8108d92:	0b1b      	lsrs	r3, r3, #12
 8108d94:	009b      	lsls	r3, r3, #2
 8108d96:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8108d98:	2300      	movs	r3, #0
 8108d9a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8108d9c:	687b      	ldr	r3, [r7, #4]
 8108d9e:	681b      	ldr	r3, [r3, #0]
 8108da0:	681a      	ldr	r2, [r3, #0]
 8108da2:	687b      	ldr	r3, [r7, #4]
 8108da4:	681b      	ldr	r3, [r3, #0]
 8108da6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8108daa:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8108dac:	68fb      	ldr	r3, [r7, #12]
 8108dae:	2b00      	cmp	r3, #0
 8108db0:	d10a      	bne.n	8108dc8 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8108db2:	687b      	ldr	r3, [r7, #4]
 8108db4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8108db8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8108dbc:	687b      	ldr	r3, [r7, #4]
 8108dbe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8108dc2:	2303      	movs	r3, #3
 8108dc4:	72fb      	strb	r3, [r7, #11]
      break;
 8108dc6:	e009      	b.n	8108ddc <SAI_Disable+0x5c>
    }
    count--;
 8108dc8:	68fb      	ldr	r3, [r7, #12]
 8108dca:	3b01      	subs	r3, #1
 8108dcc:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8108dce:	687b      	ldr	r3, [r7, #4]
 8108dd0:	681b      	ldr	r3, [r3, #0]
 8108dd2:	681b      	ldr	r3, [r3, #0]
 8108dd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8108dd8:	2b00      	cmp	r3, #0
 8108dda:	d1e7      	bne.n	8108dac <SAI_Disable+0x2c>

  return status;
 8108ddc:	7afb      	ldrb	r3, [r7, #11]
}
 8108dde:	4618      	mov	r0, r3
 8108de0:	3714      	adds	r7, #20
 8108de2:	46bd      	mov	sp, r7
 8108de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108de8:	4770      	bx	lr
 8108dea:	bf00      	nop
 8108dec:	10000000 	.word	0x10000000
 8108df0:	95cbec1b 	.word	0x95cbec1b

08108df4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8108df4:	b580      	push	{r7, lr}
 8108df6:	b08a      	sub	sp, #40	@ 0x28
 8108df8:	af00      	add	r7, sp, #0
 8108dfa:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8108dfc:	687b      	ldr	r3, [r7, #4]
 8108dfe:	2b00      	cmp	r3, #0
 8108e00:	d101      	bne.n	8108e06 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8108e02:	2301      	movs	r3, #1
 8108e04:	e075      	b.n	8108ef2 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8108e06:	687b      	ldr	r3, [r7, #4]
 8108e08:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8108e0c:	b2db      	uxtb	r3, r3
 8108e0e:	2b00      	cmp	r3, #0
 8108e10:	d105      	bne.n	8108e1e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8108e12:	687b      	ldr	r3, [r7, #4]
 8108e14:	2200      	movs	r2, #0
 8108e16:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8108e18:	6878      	ldr	r0, [r7, #4]
 8108e1a:	f7f8 ff7f 	bl	8101d1c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8108e1e:	687b      	ldr	r3, [r7, #4]
 8108e20:	2204      	movs	r2, #4
 8108e22:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8108e26:	6878      	ldr	r0, [r7, #4]
 8108e28:	f000 f868 	bl	8108efc <HAL_SD_InitCard>
 8108e2c:	4603      	mov	r3, r0
 8108e2e:	2b00      	cmp	r3, #0
 8108e30:	d001      	beq.n	8108e36 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8108e32:	2301      	movs	r3, #1
 8108e34:	e05d      	b.n	8108ef2 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8108e36:	f107 0308 	add.w	r3, r7, #8
 8108e3a:	4619      	mov	r1, r3
 8108e3c:	6878      	ldr	r0, [r7, #4]
 8108e3e:	f000 fa9d 	bl	810937c <HAL_SD_GetCardStatus>
 8108e42:	4603      	mov	r3, r0
 8108e44:	2b00      	cmp	r3, #0
 8108e46:	d001      	beq.n	8108e4c <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8108e48:	2301      	movs	r3, #1
 8108e4a:	e052      	b.n	8108ef2 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8108e4c:	7e3b      	ldrb	r3, [r7, #24]
 8108e4e:	b2db      	uxtb	r3, r3
 8108e50:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8108e52:	7e7b      	ldrb	r3, [r7, #25]
 8108e54:	b2db      	uxtb	r3, r3
 8108e56:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8108e58:	687b      	ldr	r3, [r7, #4]
 8108e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108e5c:	2b01      	cmp	r3, #1
 8108e5e:	d10a      	bne.n	8108e76 <HAL_SD_Init+0x82>
 8108e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108e62:	2b00      	cmp	r3, #0
 8108e64:	d102      	bne.n	8108e6c <HAL_SD_Init+0x78>
 8108e66:	6a3b      	ldr	r3, [r7, #32]
 8108e68:	2b00      	cmp	r3, #0
 8108e6a:	d004      	beq.n	8108e76 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8108e6c:	687b      	ldr	r3, [r7, #4]
 8108e6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8108e72:	659a      	str	r2, [r3, #88]	@ 0x58
 8108e74:	e00b      	b.n	8108e8e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8108e76:	687b      	ldr	r3, [r7, #4]
 8108e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8108e7a:	2b01      	cmp	r3, #1
 8108e7c:	d104      	bne.n	8108e88 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8108e7e:	687b      	ldr	r3, [r7, #4]
 8108e80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8108e84:	659a      	str	r2, [r3, #88]	@ 0x58
 8108e86:	e002      	b.n	8108e8e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8108e88:	687b      	ldr	r3, [r7, #4]
 8108e8a:	2200      	movs	r2, #0
 8108e8c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8108e8e:	687b      	ldr	r3, [r7, #4]
 8108e90:	68db      	ldr	r3, [r3, #12]
 8108e92:	4619      	mov	r1, r3
 8108e94:	6878      	ldr	r0, [r7, #4]
 8108e96:	f000 fb2f 	bl	81094f8 <HAL_SD_ConfigWideBusOperation>
 8108e9a:	4603      	mov	r3, r0
 8108e9c:	2b00      	cmp	r3, #0
 8108e9e:	d001      	beq.n	8108ea4 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8108ea0:	2301      	movs	r3, #1
 8108ea2:	e026      	b.n	8108ef2 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8108ea4:	f7f9 fede 	bl	8102c64 <HAL_GetTick>
 8108ea8:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8108eaa:	e011      	b.n	8108ed0 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8108eac:	f7f9 feda 	bl	8102c64 <HAL_GetTick>
 8108eb0:	4602      	mov	r2, r0
 8108eb2:	69fb      	ldr	r3, [r7, #28]
 8108eb4:	1ad3      	subs	r3, r2, r3
 8108eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8108eba:	d109      	bne.n	8108ed0 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8108ebc:	687b      	ldr	r3, [r7, #4]
 8108ebe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8108ec2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8108ec4:	687b      	ldr	r3, [r7, #4]
 8108ec6:	2201      	movs	r2, #1
 8108ec8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8108ecc:	2303      	movs	r3, #3
 8108ece:	e010      	b.n	8108ef2 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8108ed0:	6878      	ldr	r0, [r7, #4]
 8108ed2:	f000 fc23 	bl	810971c <HAL_SD_GetCardState>
 8108ed6:	4603      	mov	r3, r0
 8108ed8:	2b04      	cmp	r3, #4
 8108eda:	d1e7      	bne.n	8108eac <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8108edc:	687b      	ldr	r3, [r7, #4]
 8108ede:	2200      	movs	r2, #0
 8108ee0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8108ee2:	687b      	ldr	r3, [r7, #4]
 8108ee4:	2200      	movs	r2, #0
 8108ee6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8108ee8:	687b      	ldr	r3, [r7, #4]
 8108eea:	2201      	movs	r2, #1
 8108eec:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8108ef0:	2300      	movs	r3, #0
}
 8108ef2:	4618      	mov	r0, r3
 8108ef4:	3728      	adds	r7, #40	@ 0x28
 8108ef6:	46bd      	mov	sp, r7
 8108ef8:	bd80      	pop	{r7, pc}
	...

08108efc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8108efc:	b590      	push	{r4, r7, lr}
 8108efe:	b08d      	sub	sp, #52	@ 0x34
 8108f00:	af02      	add	r7, sp, #8
 8108f02:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8108f04:	2300      	movs	r3, #0
 8108f06:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8108f08:	2300      	movs	r3, #0
 8108f0a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8108f0c:	2300      	movs	r3, #0
 8108f0e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8108f10:	2300      	movs	r3, #0
 8108f12:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8108f14:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8108f18:	f04f 0100 	mov.w	r1, #0
 8108f1c:	f7fd ff9a 	bl	8106e54 <HAL_RCCEx_GetPeriphCLKFreq>
 8108f20:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8108f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108f24:	2b00      	cmp	r3, #0
 8108f26:	d109      	bne.n	8108f3c <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8108f28:	687b      	ldr	r3, [r7, #4]
 8108f2a:	2201      	movs	r2, #1
 8108f2c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8108f30:	687b      	ldr	r3, [r7, #4]
 8108f32:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8108f36:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8108f38:	2301      	movs	r3, #1
 8108f3a:	e070      	b.n	810901e <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8108f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108f3e:	0a1b      	lsrs	r3, r3, #8
 8108f40:	4a39      	ldr	r2, [pc, #228]	@ (8109028 <HAL_SD_InitCard+0x12c>)
 8108f42:	fba2 2303 	umull	r2, r3, r2, r3
 8108f46:	091b      	lsrs	r3, r3, #4
 8108f48:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8108f4a:	687b      	ldr	r3, [r7, #4]
 8108f4c:	681c      	ldr	r4, [r3, #0]
 8108f4e:	466a      	mov	r2, sp
 8108f50:	f107 0318 	add.w	r3, r7, #24
 8108f54:	e893 0003 	ldmia.w	r3, {r0, r1}
 8108f58:	e882 0003 	stmia.w	r2, {r0, r1}
 8108f5c:	f107 030c 	add.w	r3, r7, #12
 8108f60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8108f62:	4620      	mov	r0, r4
 8108f64:	f003 fb0e 	bl	810c584 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8108f68:	687b      	ldr	r3, [r7, #4]
 8108f6a:	681b      	ldr	r3, [r3, #0]
 8108f6c:	4618      	mov	r0, r3
 8108f6e:	f003 fb40 	bl	810c5f2 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8108f72:	69fb      	ldr	r3, [r7, #28]
 8108f74:	2b00      	cmp	r3, #0
 8108f76:	d005      	beq.n	8108f84 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8108f78:	69fb      	ldr	r3, [r7, #28]
 8108f7a:	005b      	lsls	r3, r3, #1
 8108f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8108f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8108f82:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8108f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108f86:	2b00      	cmp	r3, #0
 8108f88:	d007      	beq.n	8108f9a <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8108f8a:	4a28      	ldr	r2, [pc, #160]	@ (810902c <HAL_SD_InitCard+0x130>)
 8108f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8108f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8108f92:	3301      	adds	r3, #1
 8108f94:	4618      	mov	r0, r3
 8108f96:	f7f9 fe71 	bl	8102c7c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8108f9a:	6878      	ldr	r0, [r7, #4]
 8108f9c:	f000 fcac 	bl	81098f8 <SD_PowerON>
 8108fa0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108fa2:	6a3b      	ldr	r3, [r7, #32]
 8108fa4:	2b00      	cmp	r3, #0
 8108fa6:	d00b      	beq.n	8108fc0 <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8108fa8:	687b      	ldr	r3, [r7, #4]
 8108faa:	2201      	movs	r2, #1
 8108fac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8108fb0:	687b      	ldr	r3, [r7, #4]
 8108fb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108fb4:	6a3b      	ldr	r3, [r7, #32]
 8108fb6:	431a      	orrs	r2, r3
 8108fb8:	687b      	ldr	r3, [r7, #4]
 8108fba:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8108fbc:	2301      	movs	r3, #1
 8108fbe:	e02e      	b.n	810901e <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8108fc0:	6878      	ldr	r0, [r7, #4]
 8108fc2:	f000 fbcb 	bl	810975c <SD_InitCard>
 8108fc6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108fc8:	6a3b      	ldr	r3, [r7, #32]
 8108fca:	2b00      	cmp	r3, #0
 8108fcc:	d00b      	beq.n	8108fe6 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 8108fce:	687b      	ldr	r3, [r7, #4]
 8108fd0:	2201      	movs	r2, #1
 8108fd2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8108fd6:	687b      	ldr	r3, [r7, #4]
 8108fd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8108fda:	6a3b      	ldr	r3, [r7, #32]
 8108fdc:	431a      	orrs	r2, r3
 8108fde:	687b      	ldr	r3, [r7, #4]
 8108fe0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8108fe2:	2301      	movs	r3, #1
 8108fe4:	e01b      	b.n	810901e <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8108fe6:	687b      	ldr	r3, [r7, #4]
 8108fe8:	681b      	ldr	r3, [r3, #0]
 8108fea:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8108fee:	4618      	mov	r0, r3
 8108ff0:	f003 fb94 	bl	810c71c <SDMMC_CmdBlockLength>
 8108ff4:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8108ff6:	6a3b      	ldr	r3, [r7, #32]
 8108ff8:	2b00      	cmp	r3, #0
 8108ffa:	d00f      	beq.n	810901c <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8108ffc:	687b      	ldr	r3, [r7, #4]
 8108ffe:	681b      	ldr	r3, [r3, #0]
 8109000:	4a0b      	ldr	r2, [pc, #44]	@ (8109030 <HAL_SD_InitCard+0x134>)
 8109002:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8109004:	687b      	ldr	r3, [r7, #4]
 8109006:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109008:	6a3b      	ldr	r3, [r7, #32]
 810900a:	431a      	orrs	r2, r3
 810900c:	687b      	ldr	r3, [r7, #4]
 810900e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8109010:	687b      	ldr	r3, [r7, #4]
 8109012:	2201      	movs	r2, #1
 8109014:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8109018:	2301      	movs	r3, #1
 810901a:	e000      	b.n	810901e <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 810901c:	2300      	movs	r3, #0
}
 810901e:	4618      	mov	r0, r3
 8109020:	372c      	adds	r7, #44	@ 0x2c
 8109022:	46bd      	mov	sp, r7
 8109024:	bd90      	pop	{r4, r7, pc}
 8109026:	bf00      	nop
 8109028:	014f8b59 	.word	0x014f8b59
 810902c:	00012110 	.word	0x00012110
 8109030:	1fe00fff 	.word	0x1fe00fff

08109034 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8109034:	b480      	push	{r7}
 8109036:	b083      	sub	sp, #12
 8109038:	af00      	add	r7, sp, #0
 810903a:	6078      	str	r0, [r7, #4]
 810903c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 810903e:	687b      	ldr	r3, [r7, #4]
 8109040:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8109042:	0f9b      	lsrs	r3, r3, #30
 8109044:	b2da      	uxtb	r2, r3
 8109046:	683b      	ldr	r3, [r7, #0]
 8109048:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 810904a:	687b      	ldr	r3, [r7, #4]
 810904c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810904e:	0e9b      	lsrs	r3, r3, #26
 8109050:	b2db      	uxtb	r3, r3
 8109052:	f003 030f 	and.w	r3, r3, #15
 8109056:	b2da      	uxtb	r2, r3
 8109058:	683b      	ldr	r3, [r7, #0]
 810905a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 810905c:	687b      	ldr	r3, [r7, #4]
 810905e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8109060:	0e1b      	lsrs	r3, r3, #24
 8109062:	b2db      	uxtb	r3, r3
 8109064:	f003 0303 	and.w	r3, r3, #3
 8109068:	b2da      	uxtb	r2, r3
 810906a:	683b      	ldr	r3, [r7, #0]
 810906c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 810906e:	687b      	ldr	r3, [r7, #4]
 8109070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8109072:	0c1b      	lsrs	r3, r3, #16
 8109074:	b2da      	uxtb	r2, r3
 8109076:	683b      	ldr	r3, [r7, #0]
 8109078:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 810907a:	687b      	ldr	r3, [r7, #4]
 810907c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810907e:	0a1b      	lsrs	r3, r3, #8
 8109080:	b2da      	uxtb	r2, r3
 8109082:	683b      	ldr	r3, [r7, #0]
 8109084:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8109086:	687b      	ldr	r3, [r7, #4]
 8109088:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810908a:	b2da      	uxtb	r2, r3
 810908c:	683b      	ldr	r3, [r7, #0]
 810908e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8109090:	687b      	ldr	r3, [r7, #4]
 8109092:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8109094:	0d1b      	lsrs	r3, r3, #20
 8109096:	b29a      	uxth	r2, r3
 8109098:	683b      	ldr	r3, [r7, #0]
 810909a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 810909c:	687b      	ldr	r3, [r7, #4]
 810909e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81090a0:	0c1b      	lsrs	r3, r3, #16
 81090a2:	b2db      	uxtb	r3, r3
 81090a4:	f003 030f 	and.w	r3, r3, #15
 81090a8:	b2da      	uxtb	r2, r3
 81090aa:	683b      	ldr	r3, [r7, #0]
 81090ac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 81090ae:	687b      	ldr	r3, [r7, #4]
 81090b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81090b2:	0bdb      	lsrs	r3, r3, #15
 81090b4:	b2db      	uxtb	r3, r3
 81090b6:	f003 0301 	and.w	r3, r3, #1
 81090ba:	b2da      	uxtb	r2, r3
 81090bc:	683b      	ldr	r3, [r7, #0]
 81090be:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 81090c0:	687b      	ldr	r3, [r7, #4]
 81090c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81090c4:	0b9b      	lsrs	r3, r3, #14
 81090c6:	b2db      	uxtb	r3, r3
 81090c8:	f003 0301 	and.w	r3, r3, #1
 81090cc:	b2da      	uxtb	r2, r3
 81090ce:	683b      	ldr	r3, [r7, #0]
 81090d0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 81090d2:	687b      	ldr	r3, [r7, #4]
 81090d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81090d6:	0b5b      	lsrs	r3, r3, #13
 81090d8:	b2db      	uxtb	r3, r3
 81090da:	f003 0301 	and.w	r3, r3, #1
 81090de:	b2da      	uxtb	r2, r3
 81090e0:	683b      	ldr	r3, [r7, #0]
 81090e2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 81090e4:	687b      	ldr	r3, [r7, #4]
 81090e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81090e8:	0b1b      	lsrs	r3, r3, #12
 81090ea:	b2db      	uxtb	r3, r3
 81090ec:	f003 0301 	and.w	r3, r3, #1
 81090f0:	b2da      	uxtb	r2, r3
 81090f2:	683b      	ldr	r3, [r7, #0]
 81090f4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 81090f6:	683b      	ldr	r3, [r7, #0]
 81090f8:	2200      	movs	r2, #0
 81090fa:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 81090fc:	687b      	ldr	r3, [r7, #4]
 81090fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109100:	2b00      	cmp	r3, #0
 8109102:	d163      	bne.n	81091cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8109104:	687b      	ldr	r3, [r7, #4]
 8109106:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8109108:	009a      	lsls	r2, r3, #2
 810910a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 810910e:	4013      	ands	r3, r2
 8109110:	687a      	ldr	r2, [r7, #4]
 8109112:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8109114:	0f92      	lsrs	r2, r2, #30
 8109116:	431a      	orrs	r2, r3
 8109118:	683b      	ldr	r3, [r7, #0]
 810911a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 810911c:	687b      	ldr	r3, [r7, #4]
 810911e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109120:	0edb      	lsrs	r3, r3, #27
 8109122:	b2db      	uxtb	r3, r3
 8109124:	f003 0307 	and.w	r3, r3, #7
 8109128:	b2da      	uxtb	r2, r3
 810912a:	683b      	ldr	r3, [r7, #0]
 810912c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 810912e:	687b      	ldr	r3, [r7, #4]
 8109130:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109132:	0e1b      	lsrs	r3, r3, #24
 8109134:	b2db      	uxtb	r3, r3
 8109136:	f003 0307 	and.w	r3, r3, #7
 810913a:	b2da      	uxtb	r2, r3
 810913c:	683b      	ldr	r3, [r7, #0]
 810913e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8109140:	687b      	ldr	r3, [r7, #4]
 8109142:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109144:	0d5b      	lsrs	r3, r3, #21
 8109146:	b2db      	uxtb	r3, r3
 8109148:	f003 0307 	and.w	r3, r3, #7
 810914c:	b2da      	uxtb	r2, r3
 810914e:	683b      	ldr	r3, [r7, #0]
 8109150:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8109152:	687b      	ldr	r3, [r7, #4]
 8109154:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109156:	0c9b      	lsrs	r3, r3, #18
 8109158:	b2db      	uxtb	r3, r3
 810915a:	f003 0307 	and.w	r3, r3, #7
 810915e:	b2da      	uxtb	r2, r3
 8109160:	683b      	ldr	r3, [r7, #0]
 8109162:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8109164:	687b      	ldr	r3, [r7, #4]
 8109166:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109168:	0bdb      	lsrs	r3, r3, #15
 810916a:	b2db      	uxtb	r3, r3
 810916c:	f003 0307 	and.w	r3, r3, #7
 8109170:	b2da      	uxtb	r2, r3
 8109172:	683b      	ldr	r3, [r7, #0]
 8109174:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8109176:	683b      	ldr	r3, [r7, #0]
 8109178:	691b      	ldr	r3, [r3, #16]
 810917a:	1c5a      	adds	r2, r3, #1
 810917c:	687b      	ldr	r3, [r7, #4]
 810917e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8109180:	683b      	ldr	r3, [r7, #0]
 8109182:	7e1b      	ldrb	r3, [r3, #24]
 8109184:	b2db      	uxtb	r3, r3
 8109186:	f003 0307 	and.w	r3, r3, #7
 810918a:	3302      	adds	r3, #2
 810918c:	2201      	movs	r2, #1
 810918e:	fa02 f303 	lsl.w	r3, r2, r3
 8109192:	687a      	ldr	r2, [r7, #4]
 8109194:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8109196:	fb03 f202 	mul.w	r2, r3, r2
 810919a:	687b      	ldr	r3, [r7, #4]
 810919c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 810919e:	683b      	ldr	r3, [r7, #0]
 81091a0:	7a1b      	ldrb	r3, [r3, #8]
 81091a2:	b2db      	uxtb	r3, r3
 81091a4:	f003 030f 	and.w	r3, r3, #15
 81091a8:	2201      	movs	r2, #1
 81091aa:	409a      	lsls	r2, r3
 81091ac:	687b      	ldr	r3, [r7, #4]
 81091ae:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 81091b0:	687b      	ldr	r3, [r7, #4]
 81091b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81091b4:	687a      	ldr	r2, [r7, #4]
 81091b6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 81091b8:	0a52      	lsrs	r2, r2, #9
 81091ba:	fb03 f202 	mul.w	r2, r3, r2
 81091be:	687b      	ldr	r3, [r7, #4]
 81091c0:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 81091c2:	687b      	ldr	r3, [r7, #4]
 81091c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81091c8:	655a      	str	r2, [r3, #84]	@ 0x54
 81091ca:	e031      	b.n	8109230 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 81091cc:	687b      	ldr	r3, [r7, #4]
 81091ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81091d0:	2b01      	cmp	r3, #1
 81091d2:	d11d      	bne.n	8109210 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 81091d4:	687b      	ldr	r3, [r7, #4]
 81091d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81091d8:	041b      	lsls	r3, r3, #16
 81091da:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 81091de:	687b      	ldr	r3, [r7, #4]
 81091e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81091e2:	0c1b      	lsrs	r3, r3, #16
 81091e4:	431a      	orrs	r2, r3
 81091e6:	683b      	ldr	r3, [r7, #0]
 81091e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 81091ea:	683b      	ldr	r3, [r7, #0]
 81091ec:	691b      	ldr	r3, [r3, #16]
 81091ee:	3301      	adds	r3, #1
 81091f0:	029a      	lsls	r2, r3, #10
 81091f2:	687b      	ldr	r3, [r7, #4]
 81091f4:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 81091f6:	687b      	ldr	r3, [r7, #4]
 81091f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 81091fa:	687b      	ldr	r3, [r7, #4]
 81091fc:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 81091fe:	687b      	ldr	r3, [r7, #4]
 8109200:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8109204:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8109206:	687b      	ldr	r3, [r7, #4]
 8109208:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810920a:	687b      	ldr	r3, [r7, #4]
 810920c:	655a      	str	r2, [r3, #84]	@ 0x54
 810920e:	e00f      	b.n	8109230 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8109210:	687b      	ldr	r3, [r7, #4]
 8109212:	681b      	ldr	r3, [r3, #0]
 8109214:	4a58      	ldr	r2, [pc, #352]	@ (8109378 <HAL_SD_GetCardCSD+0x344>)
 8109216:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109218:	687b      	ldr	r3, [r7, #4]
 810921a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810921c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8109220:	687b      	ldr	r3, [r7, #4]
 8109222:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8109224:	687b      	ldr	r3, [r7, #4]
 8109226:	2201      	movs	r2, #1
 8109228:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 810922c:	2301      	movs	r3, #1
 810922e:	e09d      	b.n	810936c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8109230:	687b      	ldr	r3, [r7, #4]
 8109232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109234:	0b9b      	lsrs	r3, r3, #14
 8109236:	b2db      	uxtb	r3, r3
 8109238:	f003 0301 	and.w	r3, r3, #1
 810923c:	b2da      	uxtb	r2, r3
 810923e:	683b      	ldr	r3, [r7, #0]
 8109240:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8109242:	687b      	ldr	r3, [r7, #4]
 8109244:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109246:	09db      	lsrs	r3, r3, #7
 8109248:	b2db      	uxtb	r3, r3
 810924a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810924e:	b2da      	uxtb	r2, r3
 8109250:	683b      	ldr	r3, [r7, #0]
 8109252:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8109254:	687b      	ldr	r3, [r7, #4]
 8109256:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109258:	b2db      	uxtb	r3, r3
 810925a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810925e:	b2da      	uxtb	r2, r3
 8109260:	683b      	ldr	r3, [r7, #0]
 8109262:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8109264:	687b      	ldr	r3, [r7, #4]
 8109266:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109268:	0fdb      	lsrs	r3, r3, #31
 810926a:	b2da      	uxtb	r2, r3
 810926c:	683b      	ldr	r3, [r7, #0]
 810926e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8109270:	687b      	ldr	r3, [r7, #4]
 8109272:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109274:	0f5b      	lsrs	r3, r3, #29
 8109276:	b2db      	uxtb	r3, r3
 8109278:	f003 0303 	and.w	r3, r3, #3
 810927c:	b2da      	uxtb	r2, r3
 810927e:	683b      	ldr	r3, [r7, #0]
 8109280:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8109282:	687b      	ldr	r3, [r7, #4]
 8109284:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109286:	0e9b      	lsrs	r3, r3, #26
 8109288:	b2db      	uxtb	r3, r3
 810928a:	f003 0307 	and.w	r3, r3, #7
 810928e:	b2da      	uxtb	r2, r3
 8109290:	683b      	ldr	r3, [r7, #0]
 8109292:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8109294:	687b      	ldr	r3, [r7, #4]
 8109296:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109298:	0d9b      	lsrs	r3, r3, #22
 810929a:	b2db      	uxtb	r3, r3
 810929c:	f003 030f 	and.w	r3, r3, #15
 81092a0:	b2da      	uxtb	r2, r3
 81092a2:	683b      	ldr	r3, [r7, #0]
 81092a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 81092a6:	687b      	ldr	r3, [r7, #4]
 81092a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81092aa:	0d5b      	lsrs	r3, r3, #21
 81092ac:	b2db      	uxtb	r3, r3
 81092ae:	f003 0301 	and.w	r3, r3, #1
 81092b2:	b2da      	uxtb	r2, r3
 81092b4:	683b      	ldr	r3, [r7, #0]
 81092b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 81092ba:	683b      	ldr	r3, [r7, #0]
 81092bc:	2200      	movs	r2, #0
 81092be:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 81092c2:	687b      	ldr	r3, [r7, #4]
 81092c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81092c6:	0c1b      	lsrs	r3, r3, #16
 81092c8:	b2db      	uxtb	r3, r3
 81092ca:	f003 0301 	and.w	r3, r3, #1
 81092ce:	b2da      	uxtb	r2, r3
 81092d0:	683b      	ldr	r3, [r7, #0]
 81092d2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 81092d6:	687b      	ldr	r3, [r7, #4]
 81092d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81092da:	0bdb      	lsrs	r3, r3, #15
 81092dc:	b2db      	uxtb	r3, r3
 81092de:	f003 0301 	and.w	r3, r3, #1
 81092e2:	b2da      	uxtb	r2, r3
 81092e4:	683b      	ldr	r3, [r7, #0]
 81092e6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 81092ea:	687b      	ldr	r3, [r7, #4]
 81092ec:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81092ee:	0b9b      	lsrs	r3, r3, #14
 81092f0:	b2db      	uxtb	r3, r3
 81092f2:	f003 0301 	and.w	r3, r3, #1
 81092f6:	b2da      	uxtb	r2, r3
 81092f8:	683b      	ldr	r3, [r7, #0]
 81092fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 81092fe:	687b      	ldr	r3, [r7, #4]
 8109300:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109302:	0b5b      	lsrs	r3, r3, #13
 8109304:	b2db      	uxtb	r3, r3
 8109306:	f003 0301 	and.w	r3, r3, #1
 810930a:	b2da      	uxtb	r2, r3
 810930c:	683b      	ldr	r3, [r7, #0]
 810930e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8109312:	687b      	ldr	r3, [r7, #4]
 8109314:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109316:	0b1b      	lsrs	r3, r3, #12
 8109318:	b2db      	uxtb	r3, r3
 810931a:	f003 0301 	and.w	r3, r3, #1
 810931e:	b2da      	uxtb	r2, r3
 8109320:	683b      	ldr	r3, [r7, #0]
 8109322:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8109326:	687b      	ldr	r3, [r7, #4]
 8109328:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810932a:	0a9b      	lsrs	r3, r3, #10
 810932c:	b2db      	uxtb	r3, r3
 810932e:	f003 0303 	and.w	r3, r3, #3
 8109332:	b2da      	uxtb	r2, r3
 8109334:	683b      	ldr	r3, [r7, #0]
 8109336:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 810933a:	687b      	ldr	r3, [r7, #4]
 810933c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810933e:	0a1b      	lsrs	r3, r3, #8
 8109340:	b2db      	uxtb	r3, r3
 8109342:	f003 0303 	and.w	r3, r3, #3
 8109346:	b2da      	uxtb	r2, r3
 8109348:	683b      	ldr	r3, [r7, #0]
 810934a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 810934e:	687b      	ldr	r3, [r7, #4]
 8109350:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8109352:	085b      	lsrs	r3, r3, #1
 8109354:	b2db      	uxtb	r3, r3
 8109356:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810935a:	b2da      	uxtb	r2, r3
 810935c:	683b      	ldr	r3, [r7, #0]
 810935e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8109362:	683b      	ldr	r3, [r7, #0]
 8109364:	2201      	movs	r2, #1
 8109366:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 810936a:	2300      	movs	r3, #0
}
 810936c:	4618      	mov	r0, r3
 810936e:	370c      	adds	r7, #12
 8109370:	46bd      	mov	sp, r7
 8109372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109376:	4770      	bx	lr
 8109378:	1fe00fff 	.word	0x1fe00fff

0810937c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 810937c:	b580      	push	{r7, lr}
 810937e:	b094      	sub	sp, #80	@ 0x50
 8109380:	af00      	add	r7, sp, #0
 8109382:	6078      	str	r0, [r7, #4]
 8109384:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8109386:	2300      	movs	r3, #0
 8109388:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 810938c:	687b      	ldr	r3, [r7, #4]
 810938e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8109392:	b2db      	uxtb	r3, r3
 8109394:	2b03      	cmp	r3, #3
 8109396:	d101      	bne.n	810939c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8109398:	2301      	movs	r3, #1
 810939a:	e0a7      	b.n	81094ec <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 810939c:	f107 0308 	add.w	r3, r7, #8
 81093a0:	4619      	mov	r1, r3
 81093a2:	6878      	ldr	r0, [r7, #4]
 81093a4:	f000 fb36 	bl	8109a14 <SD_SendSDStatus>
 81093a8:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 81093aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81093ac:	2b00      	cmp	r3, #0
 81093ae:	d011      	beq.n	81093d4 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81093b0:	687b      	ldr	r3, [r7, #4]
 81093b2:	681b      	ldr	r3, [r3, #0]
 81093b4:	4a4f      	ldr	r2, [pc, #316]	@ (81094f4 <HAL_SD_GetCardStatus+0x178>)
 81093b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 81093b8:	687b      	ldr	r3, [r7, #4]
 81093ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81093bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81093be:	431a      	orrs	r2, r3
 81093c0:	687b      	ldr	r3, [r7, #4]
 81093c2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 81093c4:	687b      	ldr	r3, [r7, #4]
 81093c6:	2201      	movs	r2, #1
 81093c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 81093cc:	2301      	movs	r3, #1
 81093ce:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 81093d2:	e070      	b.n	81094b6 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 81093d4:	68bb      	ldr	r3, [r7, #8]
 81093d6:	099b      	lsrs	r3, r3, #6
 81093d8:	b2db      	uxtb	r3, r3
 81093da:	f003 0303 	and.w	r3, r3, #3
 81093de:	b2da      	uxtb	r2, r3
 81093e0:	683b      	ldr	r3, [r7, #0]
 81093e2:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 81093e4:	68bb      	ldr	r3, [r7, #8]
 81093e6:	095b      	lsrs	r3, r3, #5
 81093e8:	b2db      	uxtb	r3, r3
 81093ea:	f003 0301 	and.w	r3, r3, #1
 81093ee:	b2da      	uxtb	r2, r3
 81093f0:	683b      	ldr	r3, [r7, #0]
 81093f2:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 81093f4:	68bb      	ldr	r3, [r7, #8]
 81093f6:	0a1b      	lsrs	r3, r3, #8
 81093f8:	b29b      	uxth	r3, r3
 81093fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 81093fe:	b29a      	uxth	r2, r3
 8109400:	68bb      	ldr	r3, [r7, #8]
 8109402:	0e1b      	lsrs	r3, r3, #24
 8109404:	b29b      	uxth	r3, r3
 8109406:	4313      	orrs	r3, r2
 8109408:	b29a      	uxth	r2, r3
 810940a:	683b      	ldr	r3, [r7, #0]
 810940c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 810940e:	68fb      	ldr	r3, [r7, #12]
 8109410:	061a      	lsls	r2, r3, #24
 8109412:	68fb      	ldr	r3, [r7, #12]
 8109414:	021b      	lsls	r3, r3, #8
 8109416:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 810941a:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 810941c:	68fb      	ldr	r3, [r7, #12]
 810941e:	0a1b      	lsrs	r3, r3, #8
 8109420:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8109424:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8109426:	68fb      	ldr	r3, [r7, #12]
 8109428:	0e1b      	lsrs	r3, r3, #24
 810942a:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 810942c:	683b      	ldr	r3, [r7, #0]
 810942e:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8109430:	693b      	ldr	r3, [r7, #16]
 8109432:	b2da      	uxtb	r2, r3
 8109434:	683b      	ldr	r3, [r7, #0]
 8109436:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8109438:	693b      	ldr	r3, [r7, #16]
 810943a:	0a1b      	lsrs	r3, r3, #8
 810943c:	b2da      	uxtb	r2, r3
 810943e:	683b      	ldr	r3, [r7, #0]
 8109440:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8109442:	693b      	ldr	r3, [r7, #16]
 8109444:	0d1b      	lsrs	r3, r3, #20
 8109446:	b2db      	uxtb	r3, r3
 8109448:	f003 030f 	and.w	r3, r3, #15
 810944c:	b2da      	uxtb	r2, r3
 810944e:	683b      	ldr	r3, [r7, #0]
 8109450:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8109452:	693b      	ldr	r3, [r7, #16]
 8109454:	0c1b      	lsrs	r3, r3, #16
 8109456:	b29b      	uxth	r3, r3
 8109458:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 810945c:	b29a      	uxth	r2, r3
 810945e:	697b      	ldr	r3, [r7, #20]
 8109460:	b29b      	uxth	r3, r3
 8109462:	b2db      	uxtb	r3, r3
 8109464:	b29b      	uxth	r3, r3
 8109466:	4313      	orrs	r3, r2
 8109468:	b29a      	uxth	r2, r3
 810946a:	683b      	ldr	r3, [r7, #0]
 810946c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 810946e:	697b      	ldr	r3, [r7, #20]
 8109470:	0a9b      	lsrs	r3, r3, #10
 8109472:	b2db      	uxtb	r3, r3
 8109474:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8109478:	b2da      	uxtb	r2, r3
 810947a:	683b      	ldr	r3, [r7, #0]
 810947c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 810947e:	697b      	ldr	r3, [r7, #20]
 8109480:	0a1b      	lsrs	r3, r3, #8
 8109482:	b2db      	uxtb	r3, r3
 8109484:	f003 0303 	and.w	r3, r3, #3
 8109488:	b2da      	uxtb	r2, r3
 810948a:	683b      	ldr	r3, [r7, #0]
 810948c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 810948e:	697b      	ldr	r3, [r7, #20]
 8109490:	091b      	lsrs	r3, r3, #4
 8109492:	b2db      	uxtb	r3, r3
 8109494:	f003 030f 	and.w	r3, r3, #15
 8109498:	b2da      	uxtb	r2, r3
 810949a:	683b      	ldr	r3, [r7, #0]
 810949c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 810949e:	697b      	ldr	r3, [r7, #20]
 81094a0:	b2db      	uxtb	r3, r3
 81094a2:	f003 030f 	and.w	r3, r3, #15
 81094a6:	b2da      	uxtb	r2, r3
 81094a8:	683b      	ldr	r3, [r7, #0]
 81094aa:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 81094ac:	69bb      	ldr	r3, [r7, #24]
 81094ae:	0e1b      	lsrs	r3, r3, #24
 81094b0:	b2da      	uxtb	r2, r3
 81094b2:	683b      	ldr	r3, [r7, #0]
 81094b4:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 81094b6:	687b      	ldr	r3, [r7, #4]
 81094b8:	681b      	ldr	r3, [r3, #0]
 81094ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 81094be:	4618      	mov	r0, r3
 81094c0:	f003 f92c 	bl	810c71c <SDMMC_CmdBlockLength>
 81094c4:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 81094c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81094c8:	2b00      	cmp	r3, #0
 81094ca:	d00d      	beq.n	81094e8 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81094cc:	687b      	ldr	r3, [r7, #4]
 81094ce:	681b      	ldr	r3, [r3, #0]
 81094d0:	4a08      	ldr	r2, [pc, #32]	@ (81094f4 <HAL_SD_GetCardStatus+0x178>)
 81094d2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 81094d4:	687b      	ldr	r3, [r7, #4]
 81094d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81094d8:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 81094da:	687b      	ldr	r3, [r7, #4]
 81094dc:	2201      	movs	r2, #1
 81094de:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 81094e2:	2301      	movs	r3, #1
 81094e4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 81094e8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 81094ec:	4618      	mov	r0, r3
 81094ee:	3750      	adds	r7, #80	@ 0x50
 81094f0:	46bd      	mov	sp, r7
 81094f2:	bd80      	pop	{r7, pc}
 81094f4:	1fe00fff 	.word	0x1fe00fff

081094f8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 81094f8:	b590      	push	{r4, r7, lr}
 81094fa:	b08d      	sub	sp, #52	@ 0x34
 81094fc:	af02      	add	r7, sp, #8
 81094fe:	6078      	str	r0, [r7, #4]
 8109500:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 8109502:	2300      	movs	r3, #0
 8109504:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8109508:	687b      	ldr	r3, [r7, #4]
 810950a:	2203      	movs	r2, #3
 810950c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8109510:	687b      	ldr	r3, [r7, #4]
 8109512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109514:	2b03      	cmp	r3, #3
 8109516:	d02e      	beq.n	8109576 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8109518:	683b      	ldr	r3, [r7, #0]
 810951a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810951e:	d106      	bne.n	810952e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109520:	687b      	ldr	r3, [r7, #4]
 8109522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109524:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8109528:	687b      	ldr	r3, [r7, #4]
 810952a:	635a      	str	r2, [r3, #52]	@ 0x34
 810952c:	e029      	b.n	8109582 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 810952e:	683b      	ldr	r3, [r7, #0]
 8109530:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8109534:	d10a      	bne.n	810954c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8109536:	6878      	ldr	r0, [r7, #4]
 8109538:	f000 fb64 	bl	8109c04 <SD_WideBus_Enable>
 810953c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 810953e:	687b      	ldr	r3, [r7, #4]
 8109540:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109542:	6a3b      	ldr	r3, [r7, #32]
 8109544:	431a      	orrs	r2, r3
 8109546:	687b      	ldr	r3, [r7, #4]
 8109548:	635a      	str	r2, [r3, #52]	@ 0x34
 810954a:	e01a      	b.n	8109582 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 810954c:	683b      	ldr	r3, [r7, #0]
 810954e:	2b00      	cmp	r3, #0
 8109550:	d10a      	bne.n	8109568 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8109552:	6878      	ldr	r0, [r7, #4]
 8109554:	f000 fba1 	bl	8109c9a <SD_WideBus_Disable>
 8109558:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 810955a:	687b      	ldr	r3, [r7, #4]
 810955c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810955e:	6a3b      	ldr	r3, [r7, #32]
 8109560:	431a      	orrs	r2, r3
 8109562:	687b      	ldr	r3, [r7, #4]
 8109564:	635a      	str	r2, [r3, #52]	@ 0x34
 8109566:	e00c      	b.n	8109582 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8109568:	687b      	ldr	r3, [r7, #4]
 810956a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810956c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8109570:	687b      	ldr	r3, [r7, #4]
 8109572:	635a      	str	r2, [r3, #52]	@ 0x34
 8109574:	e005      	b.n	8109582 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109576:	687b      	ldr	r3, [r7, #4]
 8109578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810957a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 810957e:	687b      	ldr	r3, [r7, #4]
 8109580:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8109582:	687b      	ldr	r3, [r7, #4]
 8109584:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109586:	2b00      	cmp	r3, #0
 8109588:	d007      	beq.n	810959a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 810958a:	687b      	ldr	r3, [r7, #4]
 810958c:	681b      	ldr	r3, [r3, #0]
 810958e:	4a5f      	ldr	r2, [pc, #380]	@ (810970c <HAL_SD_ConfigWideBusOperation+0x214>)
 8109590:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8109592:	2301      	movs	r3, #1
 8109594:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8109598:	e096      	b.n	81096c8 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 810959a:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 810959e:	f04f 0100 	mov.w	r1, #0
 81095a2:	f7fd fc57 	bl	8106e54 <HAL_RCCEx_GetPeriphCLKFreq>
 81095a6:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 81095a8:	69fb      	ldr	r3, [r7, #28]
 81095aa:	2b00      	cmp	r3, #0
 81095ac:	f000 8083 	beq.w	81096b6 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 81095b0:	687b      	ldr	r3, [r7, #4]
 81095b2:	685b      	ldr	r3, [r3, #4]
 81095b4:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 81095b6:	687b      	ldr	r3, [r7, #4]
 81095b8:	689b      	ldr	r3, [r3, #8]
 81095ba:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 81095bc:	683b      	ldr	r3, [r7, #0]
 81095be:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 81095c0:	687b      	ldr	r3, [r7, #4]
 81095c2:	691b      	ldr	r3, [r3, #16]
 81095c4:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 81095c6:	687b      	ldr	r3, [r7, #4]
 81095c8:	695a      	ldr	r2, [r3, #20]
 81095ca:	69fb      	ldr	r3, [r7, #28]
 81095cc:	4950      	ldr	r1, [pc, #320]	@ (8109710 <HAL_SD_ConfigWideBusOperation+0x218>)
 81095ce:	fba1 1303 	umull	r1, r3, r1, r3
 81095d2:	0e1b      	lsrs	r3, r3, #24
 81095d4:	429a      	cmp	r2, r3
 81095d6:	d303      	bcc.n	81095e0 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 81095d8:	687b      	ldr	r3, [r7, #4]
 81095da:	695b      	ldr	r3, [r3, #20]
 81095dc:	61bb      	str	r3, [r7, #24]
 81095de:	e05a      	b.n	8109696 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 81095e0:	687b      	ldr	r3, [r7, #4]
 81095e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81095e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81095e8:	d103      	bne.n	81095f2 <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 81095ea:	687b      	ldr	r3, [r7, #4]
 81095ec:	695b      	ldr	r3, [r3, #20]
 81095ee:	61bb      	str	r3, [r7, #24]
 81095f0:	e051      	b.n	8109696 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 81095f2:	687b      	ldr	r3, [r7, #4]
 81095f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81095f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81095fa:	d126      	bne.n	810964a <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 81095fc:	687b      	ldr	r3, [r7, #4]
 81095fe:	695b      	ldr	r3, [r3, #20]
 8109600:	2b00      	cmp	r3, #0
 8109602:	d10e      	bne.n	8109622 <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8109604:	69fb      	ldr	r3, [r7, #28]
 8109606:	4a43      	ldr	r2, [pc, #268]	@ (8109714 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8109608:	4293      	cmp	r3, r2
 810960a:	d906      	bls.n	810961a <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 810960c:	69fb      	ldr	r3, [r7, #28]
 810960e:	4a40      	ldr	r2, [pc, #256]	@ (8109710 <HAL_SD_ConfigWideBusOperation+0x218>)
 8109610:	fba2 2303 	umull	r2, r3, r2, r3
 8109614:	0e5b      	lsrs	r3, r3, #25
 8109616:	61bb      	str	r3, [r7, #24]
 8109618:	e03d      	b.n	8109696 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 810961a:	687b      	ldr	r3, [r7, #4]
 810961c:	695b      	ldr	r3, [r3, #20]
 810961e:	61bb      	str	r3, [r7, #24]
 8109620:	e039      	b.n	8109696 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8109622:	687b      	ldr	r3, [r7, #4]
 8109624:	695b      	ldr	r3, [r3, #20]
 8109626:	005b      	lsls	r3, r3, #1
 8109628:	69fa      	ldr	r2, [r7, #28]
 810962a:	fbb2 f3f3 	udiv	r3, r2, r3
 810962e:	4a39      	ldr	r2, [pc, #228]	@ (8109714 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8109630:	4293      	cmp	r3, r2
 8109632:	d906      	bls.n	8109642 <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8109634:	69fb      	ldr	r3, [r7, #28]
 8109636:	4a36      	ldr	r2, [pc, #216]	@ (8109710 <HAL_SD_ConfigWideBusOperation+0x218>)
 8109638:	fba2 2303 	umull	r2, r3, r2, r3
 810963c:	0e5b      	lsrs	r3, r3, #25
 810963e:	61bb      	str	r3, [r7, #24]
 8109640:	e029      	b.n	8109696 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8109642:	687b      	ldr	r3, [r7, #4]
 8109644:	695b      	ldr	r3, [r3, #20]
 8109646:	61bb      	str	r3, [r7, #24]
 8109648:	e025      	b.n	8109696 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 810964a:	687b      	ldr	r3, [r7, #4]
 810964c:	695b      	ldr	r3, [r3, #20]
 810964e:	2b00      	cmp	r3, #0
 8109650:	d10e      	bne.n	8109670 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8109652:	69fb      	ldr	r3, [r7, #28]
 8109654:	4a30      	ldr	r2, [pc, #192]	@ (8109718 <HAL_SD_ConfigWideBusOperation+0x220>)
 8109656:	4293      	cmp	r3, r2
 8109658:	d906      	bls.n	8109668 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 810965a:	69fb      	ldr	r3, [r7, #28]
 810965c:	4a2c      	ldr	r2, [pc, #176]	@ (8109710 <HAL_SD_ConfigWideBusOperation+0x218>)
 810965e:	fba2 2303 	umull	r2, r3, r2, r3
 8109662:	0e1b      	lsrs	r3, r3, #24
 8109664:	61bb      	str	r3, [r7, #24]
 8109666:	e016      	b.n	8109696 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8109668:	687b      	ldr	r3, [r7, #4]
 810966a:	695b      	ldr	r3, [r3, #20]
 810966c:	61bb      	str	r3, [r7, #24]
 810966e:	e012      	b.n	8109696 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8109670:	687b      	ldr	r3, [r7, #4]
 8109672:	695b      	ldr	r3, [r3, #20]
 8109674:	005b      	lsls	r3, r3, #1
 8109676:	69fa      	ldr	r2, [r7, #28]
 8109678:	fbb2 f3f3 	udiv	r3, r2, r3
 810967c:	4a26      	ldr	r2, [pc, #152]	@ (8109718 <HAL_SD_ConfigWideBusOperation+0x220>)
 810967e:	4293      	cmp	r3, r2
 8109680:	d906      	bls.n	8109690 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8109682:	69fb      	ldr	r3, [r7, #28]
 8109684:	4a22      	ldr	r2, [pc, #136]	@ (8109710 <HAL_SD_ConfigWideBusOperation+0x218>)
 8109686:	fba2 2303 	umull	r2, r3, r2, r3
 810968a:	0e1b      	lsrs	r3, r3, #24
 810968c:	61bb      	str	r3, [r7, #24]
 810968e:	e002      	b.n	8109696 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8109690:	687b      	ldr	r3, [r7, #4]
 8109692:	695b      	ldr	r3, [r3, #20]
 8109694:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8109696:	687b      	ldr	r3, [r7, #4]
 8109698:	681c      	ldr	r4, [r3, #0]
 810969a:	466a      	mov	r2, sp
 810969c:	f107 0314 	add.w	r3, r7, #20
 81096a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 81096a4:	e882 0003 	stmia.w	r2, {r0, r1}
 81096a8:	f107 0308 	add.w	r3, r7, #8
 81096ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 81096ae:	4620      	mov	r0, r4
 81096b0:	f002 ff68 	bl	810c584 <SDMMC_Init>
 81096b4:	e008      	b.n	81096c8 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 81096b6:	687b      	ldr	r3, [r7, #4]
 81096b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81096ba:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 81096be:	687b      	ldr	r3, [r7, #4]
 81096c0:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 81096c2:	2301      	movs	r3, #1
 81096c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 81096c8:	687b      	ldr	r3, [r7, #4]
 81096ca:	681b      	ldr	r3, [r3, #0]
 81096cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 81096d0:	4618      	mov	r0, r3
 81096d2:	f003 f823 	bl	810c71c <SDMMC_CmdBlockLength>
 81096d6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 81096d8:	6a3b      	ldr	r3, [r7, #32]
 81096da:	2b00      	cmp	r3, #0
 81096dc:	d00c      	beq.n	81096f8 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 81096de:	687b      	ldr	r3, [r7, #4]
 81096e0:	681b      	ldr	r3, [r3, #0]
 81096e2:	4a0a      	ldr	r2, [pc, #40]	@ (810970c <HAL_SD_ConfigWideBusOperation+0x214>)
 81096e4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 81096e6:	687b      	ldr	r3, [r7, #4]
 81096e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81096ea:	6a3b      	ldr	r3, [r7, #32]
 81096ec:	431a      	orrs	r2, r3
 81096ee:	687b      	ldr	r3, [r7, #4]
 81096f0:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 81096f2:	2301      	movs	r3, #1
 81096f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 81096f8:	687b      	ldr	r3, [r7, #4]
 81096fa:	2201      	movs	r2, #1
 81096fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8109700:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8109704:	4618      	mov	r0, r3
 8109706:	372c      	adds	r7, #44	@ 0x2c
 8109708:	46bd      	mov	sp, r7
 810970a:	bd90      	pop	{r4, r7, pc}
 810970c:	1fe00fff 	.word	0x1fe00fff
 8109710:	55e63b89 	.word	0x55e63b89
 8109714:	02faf080 	.word	0x02faf080
 8109718:	017d7840 	.word	0x017d7840

0810971c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 810971c:	b580      	push	{r7, lr}
 810971e:	b086      	sub	sp, #24
 8109720:	af00      	add	r7, sp, #0
 8109722:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8109724:	2300      	movs	r3, #0
 8109726:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8109728:	f107 030c 	add.w	r3, r7, #12
 810972c:	4619      	mov	r1, r3
 810972e:	6878      	ldr	r0, [r7, #4]
 8109730:	f000 fa40 	bl	8109bb4 <SD_SendStatus>
 8109734:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109736:	697b      	ldr	r3, [r7, #20]
 8109738:	2b00      	cmp	r3, #0
 810973a:	d005      	beq.n	8109748 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 810973c:	687b      	ldr	r3, [r7, #4]
 810973e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109740:	697b      	ldr	r3, [r7, #20]
 8109742:	431a      	orrs	r2, r3
 8109744:	687b      	ldr	r3, [r7, #4]
 8109746:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8109748:	68fb      	ldr	r3, [r7, #12]
 810974a:	0a5b      	lsrs	r3, r3, #9
 810974c:	f003 030f 	and.w	r3, r3, #15
 8109750:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8109752:	693b      	ldr	r3, [r7, #16]
}
 8109754:	4618      	mov	r0, r3
 8109756:	3718      	adds	r7, #24
 8109758:	46bd      	mov	sp, r7
 810975a:	bd80      	pop	{r7, pc}

0810975c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 810975c:	b580      	push	{r7, lr}
 810975e:	b090      	sub	sp, #64	@ 0x40
 8109760:	af00      	add	r7, sp, #0
 8109762:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8109764:	2300      	movs	r3, #0
 8109766:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8109768:	f7f9 fa7c 	bl	8102c64 <HAL_GetTick>
 810976c:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 810976e:	687b      	ldr	r3, [r7, #4]
 8109770:	681b      	ldr	r3, [r3, #0]
 8109772:	4618      	mov	r0, r3
 8109774:	f002 ff4e 	bl	810c614 <SDMMC_GetPowerState>
 8109778:	4603      	mov	r3, r0
 810977a:	2b00      	cmp	r3, #0
 810977c:	d102      	bne.n	8109784 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 810977e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8109782:	e0b5      	b.n	81098f0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8109784:	687b      	ldr	r3, [r7, #4]
 8109786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109788:	2b03      	cmp	r3, #3
 810978a:	d02e      	beq.n	81097ea <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 810978c:	687b      	ldr	r3, [r7, #4]
 810978e:	681b      	ldr	r3, [r3, #0]
 8109790:	4618      	mov	r0, r3
 8109792:	f003 f8cf 	bl	810c934 <SDMMC_CmdSendCID>
 8109796:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8109798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810979a:	2b00      	cmp	r3, #0
 810979c:	d001      	beq.n	81097a2 <SD_InitCard+0x46>
    {
      return errorstate;
 810979e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81097a0:	e0a6      	b.n	81098f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 81097a2:	687b      	ldr	r3, [r7, #4]
 81097a4:	681b      	ldr	r3, [r3, #0]
 81097a6:	2100      	movs	r1, #0
 81097a8:	4618      	mov	r0, r3
 81097aa:	f002 ff78 	bl	810c69e <SDMMC_GetResponse>
 81097ae:	4602      	mov	r2, r0
 81097b0:	687b      	ldr	r3, [r7, #4]
 81097b2:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 81097b4:	687b      	ldr	r3, [r7, #4]
 81097b6:	681b      	ldr	r3, [r3, #0]
 81097b8:	2104      	movs	r1, #4
 81097ba:	4618      	mov	r0, r3
 81097bc:	f002 ff6f 	bl	810c69e <SDMMC_GetResponse>
 81097c0:	4602      	mov	r2, r0
 81097c2:	687b      	ldr	r3, [r7, #4]
 81097c4:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 81097c6:	687b      	ldr	r3, [r7, #4]
 81097c8:	681b      	ldr	r3, [r3, #0]
 81097ca:	2108      	movs	r1, #8
 81097cc:	4618      	mov	r0, r3
 81097ce:	f002 ff66 	bl	810c69e <SDMMC_GetResponse>
 81097d2:	4602      	mov	r2, r0
 81097d4:	687b      	ldr	r3, [r7, #4]
 81097d6:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 81097d8:	687b      	ldr	r3, [r7, #4]
 81097da:	681b      	ldr	r3, [r3, #0]
 81097dc:	210c      	movs	r1, #12
 81097de:	4618      	mov	r0, r3
 81097e0:	f002 ff5d 	bl	810c69e <SDMMC_GetResponse>
 81097e4:	4602      	mov	r2, r0
 81097e6:	687b      	ldr	r3, [r7, #4]
 81097e8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 81097ea:	687b      	ldr	r3, [r7, #4]
 81097ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81097ee:	2b03      	cmp	r3, #3
 81097f0:	d01d      	beq.n	810982e <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 81097f2:	e019      	b.n	8109828 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 81097f4:	687b      	ldr	r3, [r7, #4]
 81097f6:	681b      	ldr	r3, [r3, #0]
 81097f8:	f107 020a 	add.w	r2, r7, #10
 81097fc:	4611      	mov	r1, r2
 81097fe:	4618      	mov	r0, r3
 8109800:	f003 f8d7 	bl	810c9b2 <SDMMC_CmdSetRelAdd>
 8109804:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8109806:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109808:	2b00      	cmp	r3, #0
 810980a:	d001      	beq.n	8109810 <SD_InitCard+0xb4>
      {
        return errorstate;
 810980c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810980e:	e06f      	b.n	81098f0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8109810:	f7f9 fa28 	bl	8102c64 <HAL_GetTick>
 8109814:	4602      	mov	r2, r0
 8109816:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8109818:	1ad3      	subs	r3, r2, r3
 810981a:	f241 3287 	movw	r2, #4999	@ 0x1387
 810981e:	4293      	cmp	r3, r2
 8109820:	d902      	bls.n	8109828 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8109822:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8109826:	e063      	b.n	81098f0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8109828:	897b      	ldrh	r3, [r7, #10]
 810982a:	2b00      	cmp	r3, #0
 810982c:	d0e2      	beq.n	81097f4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 810982e:	687b      	ldr	r3, [r7, #4]
 8109830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109832:	2b03      	cmp	r3, #3
 8109834:	d036      	beq.n	81098a4 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8109836:	897b      	ldrh	r3, [r7, #10]
 8109838:	461a      	mov	r2, r3
 810983a:	687b      	ldr	r3, [r7, #4]
 810983c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 810983e:	687b      	ldr	r3, [r7, #4]
 8109840:	681a      	ldr	r2, [r3, #0]
 8109842:	687b      	ldr	r3, [r7, #4]
 8109844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109846:	041b      	lsls	r3, r3, #16
 8109848:	4619      	mov	r1, r3
 810984a:	4610      	mov	r0, r2
 810984c:	f003 f891 	bl	810c972 <SDMMC_CmdSendCSD>
 8109850:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8109852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8109854:	2b00      	cmp	r3, #0
 8109856:	d001      	beq.n	810985c <SD_InitCard+0x100>
    {
      return errorstate;
 8109858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810985a:	e049      	b.n	81098f0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 810985c:	687b      	ldr	r3, [r7, #4]
 810985e:	681b      	ldr	r3, [r3, #0]
 8109860:	2100      	movs	r1, #0
 8109862:	4618      	mov	r0, r3
 8109864:	f002 ff1b 	bl	810c69e <SDMMC_GetResponse>
 8109868:	4602      	mov	r2, r0
 810986a:	687b      	ldr	r3, [r7, #4]
 810986c:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 810986e:	687b      	ldr	r3, [r7, #4]
 8109870:	681b      	ldr	r3, [r3, #0]
 8109872:	2104      	movs	r1, #4
 8109874:	4618      	mov	r0, r3
 8109876:	f002 ff12 	bl	810c69e <SDMMC_GetResponse>
 810987a:	4602      	mov	r2, r0
 810987c:	687b      	ldr	r3, [r7, #4]
 810987e:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8109880:	687b      	ldr	r3, [r7, #4]
 8109882:	681b      	ldr	r3, [r3, #0]
 8109884:	2108      	movs	r1, #8
 8109886:	4618      	mov	r0, r3
 8109888:	f002 ff09 	bl	810c69e <SDMMC_GetResponse>
 810988c:	4602      	mov	r2, r0
 810988e:	687b      	ldr	r3, [r7, #4]
 8109890:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8109892:	687b      	ldr	r3, [r7, #4]
 8109894:	681b      	ldr	r3, [r3, #0]
 8109896:	210c      	movs	r1, #12
 8109898:	4618      	mov	r0, r3
 810989a:	f002 ff00 	bl	810c69e <SDMMC_GetResponse>
 810989e:	4602      	mov	r2, r0
 81098a0:	687b      	ldr	r3, [r7, #4]
 81098a2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 81098a4:	687b      	ldr	r3, [r7, #4]
 81098a6:	681b      	ldr	r3, [r3, #0]
 81098a8:	2104      	movs	r1, #4
 81098aa:	4618      	mov	r0, r3
 81098ac:	f002 fef7 	bl	810c69e <SDMMC_GetResponse>
 81098b0:	4603      	mov	r3, r0
 81098b2:	0d1a      	lsrs	r2, r3, #20
 81098b4:	687b      	ldr	r3, [r7, #4]
 81098b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 81098b8:	f107 030c 	add.w	r3, r7, #12
 81098bc:	4619      	mov	r1, r3
 81098be:	6878      	ldr	r0, [r7, #4]
 81098c0:	f7ff fbb8 	bl	8109034 <HAL_SD_GetCardCSD>
 81098c4:	4603      	mov	r3, r0
 81098c6:	2b00      	cmp	r3, #0
 81098c8:	d002      	beq.n	81098d0 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 81098ca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 81098ce:	e00f      	b.n	81098f0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 81098d0:	687b      	ldr	r3, [r7, #4]
 81098d2:	681a      	ldr	r2, [r3, #0]
 81098d4:	687b      	ldr	r3, [r7, #4]
 81098d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81098d8:	041b      	lsls	r3, r3, #16
 81098da:	4619      	mov	r1, r3
 81098dc:	4610      	mov	r0, r2
 81098de:	f002 ff40 	bl	810c762 <SDMMC_CmdSelDesel>
 81098e2:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 81098e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81098e6:	2b00      	cmp	r3, #0
 81098e8:	d001      	beq.n	81098ee <SD_InitCard+0x192>
  {
    return errorstate;
 81098ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81098ec:	e000      	b.n	81098f0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 81098ee:	2300      	movs	r3, #0
}
 81098f0:	4618      	mov	r0, r3
 81098f2:	3740      	adds	r7, #64	@ 0x40
 81098f4:	46bd      	mov	sp, r7
 81098f6:	bd80      	pop	{r7, pc}

081098f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 81098f8:	b580      	push	{r7, lr}
 81098fa:	b086      	sub	sp, #24
 81098fc:	af00      	add	r7, sp, #0
 81098fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8109900:	2300      	movs	r3, #0
 8109902:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8109904:	2300      	movs	r3, #0
 8109906:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8109908:	2300      	movs	r3, #0
 810990a:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 810990c:	687b      	ldr	r3, [r7, #4]
 810990e:	681b      	ldr	r3, [r3, #0]
 8109910:	4618      	mov	r0, r3
 8109912:	f002 ff49 	bl	810c7a8 <SDMMC_CmdGoIdleState>
 8109916:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109918:	68fb      	ldr	r3, [r7, #12]
 810991a:	2b00      	cmp	r3, #0
 810991c:	d001      	beq.n	8109922 <SD_PowerON+0x2a>
  {
    return errorstate;
 810991e:	68fb      	ldr	r3, [r7, #12]
 8109920:	e072      	b.n	8109a08 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8109922:	687b      	ldr	r3, [r7, #4]
 8109924:	681b      	ldr	r3, [r3, #0]
 8109926:	4618      	mov	r0, r3
 8109928:	f002 ff5c 	bl	810c7e4 <SDMMC_CmdOperCond>
 810992c:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 810992e:	68fb      	ldr	r3, [r7, #12]
 8109930:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8109934:	d10d      	bne.n	8109952 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8109936:	687b      	ldr	r3, [r7, #4]
 8109938:	2200      	movs	r2, #0
 810993a:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 810993c:	687b      	ldr	r3, [r7, #4]
 810993e:	681b      	ldr	r3, [r3, #0]
 8109940:	4618      	mov	r0, r3
 8109942:	f002 ff31 	bl	810c7a8 <SDMMC_CmdGoIdleState>
 8109946:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109948:	68fb      	ldr	r3, [r7, #12]
 810994a:	2b00      	cmp	r3, #0
 810994c:	d004      	beq.n	8109958 <SD_PowerON+0x60>
    {
      return errorstate;
 810994e:	68fb      	ldr	r3, [r7, #12]
 8109950:	e05a      	b.n	8109a08 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8109952:	687b      	ldr	r3, [r7, #4]
 8109954:	2201      	movs	r2, #1
 8109956:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8109958:	687b      	ldr	r3, [r7, #4]
 810995a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810995c:	2b01      	cmp	r3, #1
 810995e:	d137      	bne.n	81099d0 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8109960:	687b      	ldr	r3, [r7, #4]
 8109962:	681b      	ldr	r3, [r3, #0]
 8109964:	2100      	movs	r1, #0
 8109966:	4618      	mov	r0, r3
 8109968:	f002 ff5c 	bl	810c824 <SDMMC_CmdAppCommand>
 810996c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 810996e:	68fb      	ldr	r3, [r7, #12]
 8109970:	2b00      	cmp	r3, #0
 8109972:	d02d      	beq.n	81099d0 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8109974:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8109978:	e046      	b.n	8109a08 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 810997a:	687b      	ldr	r3, [r7, #4]
 810997c:	681b      	ldr	r3, [r3, #0]
 810997e:	2100      	movs	r1, #0
 8109980:	4618      	mov	r0, r3
 8109982:	f002 ff4f 	bl	810c824 <SDMMC_CmdAppCommand>
 8109986:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109988:	68fb      	ldr	r3, [r7, #12]
 810998a:	2b00      	cmp	r3, #0
 810998c:	d001      	beq.n	8109992 <SD_PowerON+0x9a>
    {
      return errorstate;
 810998e:	68fb      	ldr	r3, [r7, #12]
 8109990:	e03a      	b.n	8109a08 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8109992:	687b      	ldr	r3, [r7, #4]
 8109994:	681b      	ldr	r3, [r3, #0]
 8109996:	491e      	ldr	r1, [pc, #120]	@ (8109a10 <SD_PowerON+0x118>)
 8109998:	4618      	mov	r0, r3
 810999a:	f002 ff66 	bl	810c86a <SDMMC_CmdAppOperCommand>
 810999e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 81099a0:	68fb      	ldr	r3, [r7, #12]
 81099a2:	2b00      	cmp	r3, #0
 81099a4:	d002      	beq.n	81099ac <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 81099a6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 81099aa:	e02d      	b.n	8109a08 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 81099ac:	687b      	ldr	r3, [r7, #4]
 81099ae:	681b      	ldr	r3, [r3, #0]
 81099b0:	2100      	movs	r1, #0
 81099b2:	4618      	mov	r0, r3
 81099b4:	f002 fe73 	bl	810c69e <SDMMC_GetResponse>
 81099b8:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 81099ba:	697b      	ldr	r3, [r7, #20]
 81099bc:	0fdb      	lsrs	r3, r3, #31
 81099be:	2b01      	cmp	r3, #1
 81099c0:	d101      	bne.n	81099c6 <SD_PowerON+0xce>
 81099c2:	2301      	movs	r3, #1
 81099c4:	e000      	b.n	81099c8 <SD_PowerON+0xd0>
 81099c6:	2300      	movs	r3, #0
 81099c8:	613b      	str	r3, [r7, #16]

    count++;
 81099ca:	68bb      	ldr	r3, [r7, #8]
 81099cc:	3301      	adds	r3, #1
 81099ce:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 81099d0:	68bb      	ldr	r3, [r7, #8]
 81099d2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 81099d6:	4293      	cmp	r3, r2
 81099d8:	d802      	bhi.n	81099e0 <SD_PowerON+0xe8>
 81099da:	693b      	ldr	r3, [r7, #16]
 81099dc:	2b00      	cmp	r3, #0
 81099de:	d0cc      	beq.n	810997a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 81099e0:	68bb      	ldr	r3, [r7, #8]
 81099e2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 81099e6:	4293      	cmp	r3, r2
 81099e8:	d902      	bls.n	81099f0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 81099ea:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81099ee:	e00b      	b.n	8109a08 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 81099f0:	687b      	ldr	r3, [r7, #4]
 81099f2:	2200      	movs	r2, #0
 81099f4:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 81099f6:	697b      	ldr	r3, [r7, #20]
 81099f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 81099fc:	2b00      	cmp	r3, #0
 81099fe:	d002      	beq.n	8109a06 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8109a00:	687b      	ldr	r3, [r7, #4]
 8109a02:	2201      	movs	r2, #1
 8109a04:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8109a06:	2300      	movs	r3, #0
}
 8109a08:	4618      	mov	r0, r3
 8109a0a:	3718      	adds	r7, #24
 8109a0c:	46bd      	mov	sp, r7
 8109a0e:	bd80      	pop	{r7, pc}
 8109a10:	c1100000 	.word	0xc1100000

08109a14 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8109a14:	b580      	push	{r7, lr}
 8109a16:	b08c      	sub	sp, #48	@ 0x30
 8109a18:	af00      	add	r7, sp, #0
 8109a1a:	6078      	str	r0, [r7, #4]
 8109a1c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8109a1e:	f7f9 f921 	bl	8102c64 <HAL_GetTick>
 8109a22:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8109a24:	683b      	ldr	r3, [r7, #0]
 8109a26:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8109a28:	687b      	ldr	r3, [r7, #4]
 8109a2a:	681b      	ldr	r3, [r3, #0]
 8109a2c:	2100      	movs	r1, #0
 8109a2e:	4618      	mov	r0, r3
 8109a30:	f002 fe35 	bl	810c69e <SDMMC_GetResponse>
 8109a34:	4603      	mov	r3, r0
 8109a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8109a3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109a3e:	d102      	bne.n	8109a46 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8109a40:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8109a44:	e0b0      	b.n	8109ba8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8109a46:	687b      	ldr	r3, [r7, #4]
 8109a48:	681b      	ldr	r3, [r3, #0]
 8109a4a:	2140      	movs	r1, #64	@ 0x40
 8109a4c:	4618      	mov	r0, r3
 8109a4e:	f002 fe65 	bl	810c71c <SDMMC_CmdBlockLength>
 8109a52:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109a54:	6a3b      	ldr	r3, [r7, #32]
 8109a56:	2b00      	cmp	r3, #0
 8109a58:	d005      	beq.n	8109a66 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8109a5a:	687b      	ldr	r3, [r7, #4]
 8109a5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109a5e:	687b      	ldr	r3, [r7, #4]
 8109a60:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8109a62:	6a3b      	ldr	r3, [r7, #32]
 8109a64:	e0a0      	b.n	8109ba8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109a66:	687b      	ldr	r3, [r7, #4]
 8109a68:	681a      	ldr	r2, [r3, #0]
 8109a6a:	687b      	ldr	r3, [r7, #4]
 8109a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109a6e:	041b      	lsls	r3, r3, #16
 8109a70:	4619      	mov	r1, r3
 8109a72:	4610      	mov	r0, r2
 8109a74:	f002 fed6 	bl	810c824 <SDMMC_CmdAppCommand>
 8109a78:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109a7a:	6a3b      	ldr	r3, [r7, #32]
 8109a7c:	2b00      	cmp	r3, #0
 8109a7e:	d005      	beq.n	8109a8c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8109a80:	687b      	ldr	r3, [r7, #4]
 8109a82:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109a84:	687b      	ldr	r3, [r7, #4]
 8109a86:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8109a88:	6a3b      	ldr	r3, [r7, #32]
 8109a8a:	e08d      	b.n	8109ba8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8109a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8109a90:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8109a92:	2340      	movs	r3, #64	@ 0x40
 8109a94:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8109a96:	2360      	movs	r3, #96	@ 0x60
 8109a98:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8109a9a:	2302      	movs	r3, #2
 8109a9c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8109a9e:	2300      	movs	r3, #0
 8109aa0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8109aa2:	2301      	movs	r3, #1
 8109aa4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8109aa6:	687b      	ldr	r3, [r7, #4]
 8109aa8:	681b      	ldr	r3, [r3, #0]
 8109aaa:	f107 0208 	add.w	r2, r7, #8
 8109aae:	4611      	mov	r1, r2
 8109ab0:	4618      	mov	r0, r3
 8109ab2:	f002 fe07 	bl	810c6c4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8109ab6:	687b      	ldr	r3, [r7, #4]
 8109ab8:	681b      	ldr	r3, [r3, #0]
 8109aba:	4618      	mov	r0, r3
 8109abc:	f002 ffbe 	bl	810ca3c <SDMMC_CmdStatusRegister>
 8109ac0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109ac2:	6a3b      	ldr	r3, [r7, #32]
 8109ac4:	2b00      	cmp	r3, #0
 8109ac6:	d02b      	beq.n	8109b20 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8109ac8:	687b      	ldr	r3, [r7, #4]
 8109aca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109acc:	687b      	ldr	r3, [r7, #4]
 8109ace:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8109ad0:	6a3b      	ldr	r3, [r7, #32]
 8109ad2:	e069      	b.n	8109ba8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8109ad4:	687b      	ldr	r3, [r7, #4]
 8109ad6:	681b      	ldr	r3, [r3, #0]
 8109ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109ada:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8109ade:	2b00      	cmp	r3, #0
 8109ae0:	d013      	beq.n	8109b0a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8109ae2:	2300      	movs	r3, #0
 8109ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8109ae6:	e00d      	b.n	8109b04 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8109ae8:	687b      	ldr	r3, [r7, #4]
 8109aea:	681b      	ldr	r3, [r3, #0]
 8109aec:	4618      	mov	r0, r3
 8109aee:	f002 fd73 	bl	810c5d8 <SDMMC_ReadFIFO>
 8109af2:	4602      	mov	r2, r0
 8109af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109af6:	601a      	str	r2, [r3, #0]
        pData++;
 8109af8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109afa:	3304      	adds	r3, #4
 8109afc:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8109afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109b00:	3301      	adds	r3, #1
 8109b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8109b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109b06:	2b07      	cmp	r3, #7
 8109b08:	d9ee      	bls.n	8109ae8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8109b0a:	f7f9 f8ab 	bl	8102c64 <HAL_GetTick>
 8109b0e:	4602      	mov	r2, r0
 8109b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109b12:	1ad3      	subs	r3, r2, r3
 8109b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109b18:	d102      	bne.n	8109b20 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8109b1a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8109b1e:	e043      	b.n	8109ba8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8109b20:	687b      	ldr	r3, [r7, #4]
 8109b22:	681b      	ldr	r3, [r3, #0]
 8109b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109b26:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8109b2a:	2b00      	cmp	r3, #0
 8109b2c:	d0d2      	beq.n	8109ad4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8109b2e:	687b      	ldr	r3, [r7, #4]
 8109b30:	681b      	ldr	r3, [r3, #0]
 8109b32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109b34:	f003 0308 	and.w	r3, r3, #8
 8109b38:	2b00      	cmp	r3, #0
 8109b3a:	d001      	beq.n	8109b40 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8109b3c:	2308      	movs	r3, #8
 8109b3e:	e033      	b.n	8109ba8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8109b40:	687b      	ldr	r3, [r7, #4]
 8109b42:	681b      	ldr	r3, [r3, #0]
 8109b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109b46:	f003 0302 	and.w	r3, r3, #2
 8109b4a:	2b00      	cmp	r3, #0
 8109b4c:	d001      	beq.n	8109b52 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8109b4e:	2302      	movs	r3, #2
 8109b50:	e02a      	b.n	8109ba8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8109b52:	687b      	ldr	r3, [r7, #4]
 8109b54:	681b      	ldr	r3, [r3, #0]
 8109b56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109b58:	f003 0320 	and.w	r3, r3, #32
 8109b5c:	2b00      	cmp	r3, #0
 8109b5e:	d017      	beq.n	8109b90 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8109b60:	2320      	movs	r3, #32
 8109b62:	e021      	b.n	8109ba8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8109b64:	687b      	ldr	r3, [r7, #4]
 8109b66:	681b      	ldr	r3, [r3, #0]
 8109b68:	4618      	mov	r0, r3
 8109b6a:	f002 fd35 	bl	810c5d8 <SDMMC_ReadFIFO>
 8109b6e:	4602      	mov	r2, r0
 8109b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109b72:	601a      	str	r2, [r3, #0]
    pData++;
 8109b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109b76:	3304      	adds	r3, #4
 8109b78:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8109b7a:	f7f9 f873 	bl	8102c64 <HAL_GetTick>
 8109b7e:	4602      	mov	r2, r0
 8109b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109b82:	1ad3      	subs	r3, r2, r3
 8109b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109b88:	d102      	bne.n	8109b90 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8109b8a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8109b8e:	e00b      	b.n	8109ba8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8109b90:	687b      	ldr	r3, [r7, #4]
 8109b92:	681b      	ldr	r3, [r3, #0]
 8109b94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109b96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8109b9a:	2b00      	cmp	r3, #0
 8109b9c:	d1e2      	bne.n	8109b64 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8109b9e:	687b      	ldr	r3, [r7, #4]
 8109ba0:	681b      	ldr	r3, [r3, #0]
 8109ba2:	4a03      	ldr	r2, [pc, #12]	@ (8109bb0 <SD_SendSDStatus+0x19c>)
 8109ba4:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8109ba6:	2300      	movs	r3, #0
}
 8109ba8:	4618      	mov	r0, r3
 8109baa:	3730      	adds	r7, #48	@ 0x30
 8109bac:	46bd      	mov	sp, r7
 8109bae:	bd80      	pop	{r7, pc}
 8109bb0:	18000f3a 	.word	0x18000f3a

08109bb4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8109bb4:	b580      	push	{r7, lr}
 8109bb6:	b084      	sub	sp, #16
 8109bb8:	af00      	add	r7, sp, #0
 8109bba:	6078      	str	r0, [r7, #4]
 8109bbc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8109bbe:	683b      	ldr	r3, [r7, #0]
 8109bc0:	2b00      	cmp	r3, #0
 8109bc2:	d102      	bne.n	8109bca <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8109bc4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8109bc8:	e018      	b.n	8109bfc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109bca:	687b      	ldr	r3, [r7, #4]
 8109bcc:	681a      	ldr	r2, [r3, #0]
 8109bce:	687b      	ldr	r3, [r7, #4]
 8109bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109bd2:	041b      	lsls	r3, r3, #16
 8109bd4:	4619      	mov	r1, r3
 8109bd6:	4610      	mov	r0, r2
 8109bd8:	f002 ff0d 	bl	810c9f6 <SDMMC_CmdSendStatus>
 8109bdc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109bde:	68fb      	ldr	r3, [r7, #12]
 8109be0:	2b00      	cmp	r3, #0
 8109be2:	d001      	beq.n	8109be8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8109be4:	68fb      	ldr	r3, [r7, #12]
 8109be6:	e009      	b.n	8109bfc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8109be8:	687b      	ldr	r3, [r7, #4]
 8109bea:	681b      	ldr	r3, [r3, #0]
 8109bec:	2100      	movs	r1, #0
 8109bee:	4618      	mov	r0, r3
 8109bf0:	f002 fd55 	bl	810c69e <SDMMC_GetResponse>
 8109bf4:	4602      	mov	r2, r0
 8109bf6:	683b      	ldr	r3, [r7, #0]
 8109bf8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8109bfa:	2300      	movs	r3, #0
}
 8109bfc:	4618      	mov	r0, r3
 8109bfe:	3710      	adds	r7, #16
 8109c00:	46bd      	mov	sp, r7
 8109c02:	bd80      	pop	{r7, pc}

08109c04 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8109c04:	b580      	push	{r7, lr}
 8109c06:	b086      	sub	sp, #24
 8109c08:	af00      	add	r7, sp, #0
 8109c0a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8109c0c:	2300      	movs	r3, #0
 8109c0e:	60fb      	str	r3, [r7, #12]
 8109c10:	2300      	movs	r3, #0
 8109c12:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8109c14:	687b      	ldr	r3, [r7, #4]
 8109c16:	681b      	ldr	r3, [r3, #0]
 8109c18:	2100      	movs	r1, #0
 8109c1a:	4618      	mov	r0, r3
 8109c1c:	f002 fd3f 	bl	810c69e <SDMMC_GetResponse>
 8109c20:	4603      	mov	r3, r0
 8109c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8109c26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109c2a:	d102      	bne.n	8109c32 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8109c2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8109c30:	e02f      	b.n	8109c92 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8109c32:	f107 030c 	add.w	r3, r7, #12
 8109c36:	4619      	mov	r1, r3
 8109c38:	6878      	ldr	r0, [r7, #4]
 8109c3a:	f000 f879 	bl	8109d30 <SD_FindSCR>
 8109c3e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109c40:	697b      	ldr	r3, [r7, #20]
 8109c42:	2b00      	cmp	r3, #0
 8109c44:	d001      	beq.n	8109c4a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8109c46:	697b      	ldr	r3, [r7, #20]
 8109c48:	e023      	b.n	8109c92 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8109c4a:	693b      	ldr	r3, [r7, #16]
 8109c4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8109c50:	2b00      	cmp	r3, #0
 8109c52:	d01c      	beq.n	8109c8e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109c54:	687b      	ldr	r3, [r7, #4]
 8109c56:	681a      	ldr	r2, [r3, #0]
 8109c58:	687b      	ldr	r3, [r7, #4]
 8109c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109c5c:	041b      	lsls	r3, r3, #16
 8109c5e:	4619      	mov	r1, r3
 8109c60:	4610      	mov	r0, r2
 8109c62:	f002 fddf 	bl	810c824 <SDMMC_CmdAppCommand>
 8109c66:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109c68:	697b      	ldr	r3, [r7, #20]
 8109c6a:	2b00      	cmp	r3, #0
 8109c6c:	d001      	beq.n	8109c72 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8109c6e:	697b      	ldr	r3, [r7, #20]
 8109c70:	e00f      	b.n	8109c92 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8109c72:	687b      	ldr	r3, [r7, #4]
 8109c74:	681b      	ldr	r3, [r3, #0]
 8109c76:	2102      	movs	r1, #2
 8109c78:	4618      	mov	r0, r3
 8109c7a:	f002 fe16 	bl	810c8aa <SDMMC_CmdBusWidth>
 8109c7e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109c80:	697b      	ldr	r3, [r7, #20]
 8109c82:	2b00      	cmp	r3, #0
 8109c84:	d001      	beq.n	8109c8a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8109c86:	697b      	ldr	r3, [r7, #20]
 8109c88:	e003      	b.n	8109c92 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8109c8a:	2300      	movs	r3, #0
 8109c8c:	e001      	b.n	8109c92 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8109c8e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8109c92:	4618      	mov	r0, r3
 8109c94:	3718      	adds	r7, #24
 8109c96:	46bd      	mov	sp, r7
 8109c98:	bd80      	pop	{r7, pc}

08109c9a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8109c9a:	b580      	push	{r7, lr}
 8109c9c:	b086      	sub	sp, #24
 8109c9e:	af00      	add	r7, sp, #0
 8109ca0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8109ca2:	2300      	movs	r3, #0
 8109ca4:	60fb      	str	r3, [r7, #12]
 8109ca6:	2300      	movs	r3, #0
 8109ca8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8109caa:	687b      	ldr	r3, [r7, #4]
 8109cac:	681b      	ldr	r3, [r3, #0]
 8109cae:	2100      	movs	r1, #0
 8109cb0:	4618      	mov	r0, r3
 8109cb2:	f002 fcf4 	bl	810c69e <SDMMC_GetResponse>
 8109cb6:	4603      	mov	r3, r0
 8109cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8109cbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109cc0:	d102      	bne.n	8109cc8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8109cc2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8109cc6:	e02f      	b.n	8109d28 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8109cc8:	f107 030c 	add.w	r3, r7, #12
 8109ccc:	4619      	mov	r1, r3
 8109cce:	6878      	ldr	r0, [r7, #4]
 8109cd0:	f000 f82e 	bl	8109d30 <SD_FindSCR>
 8109cd4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8109cd6:	697b      	ldr	r3, [r7, #20]
 8109cd8:	2b00      	cmp	r3, #0
 8109cda:	d001      	beq.n	8109ce0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8109cdc:	697b      	ldr	r3, [r7, #20]
 8109cde:	e023      	b.n	8109d28 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8109ce0:	693b      	ldr	r3, [r7, #16]
 8109ce2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8109ce6:	2b00      	cmp	r3, #0
 8109ce8:	d01c      	beq.n	8109d24 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8109cea:	687b      	ldr	r3, [r7, #4]
 8109cec:	681a      	ldr	r2, [r3, #0]
 8109cee:	687b      	ldr	r3, [r7, #4]
 8109cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109cf2:	041b      	lsls	r3, r3, #16
 8109cf4:	4619      	mov	r1, r3
 8109cf6:	4610      	mov	r0, r2
 8109cf8:	f002 fd94 	bl	810c824 <SDMMC_CmdAppCommand>
 8109cfc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109cfe:	697b      	ldr	r3, [r7, #20]
 8109d00:	2b00      	cmp	r3, #0
 8109d02:	d001      	beq.n	8109d08 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8109d04:	697b      	ldr	r3, [r7, #20]
 8109d06:	e00f      	b.n	8109d28 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8109d08:	687b      	ldr	r3, [r7, #4]
 8109d0a:	681b      	ldr	r3, [r3, #0]
 8109d0c:	2100      	movs	r1, #0
 8109d0e:	4618      	mov	r0, r3
 8109d10:	f002 fdcb 	bl	810c8aa <SDMMC_CmdBusWidth>
 8109d14:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8109d16:	697b      	ldr	r3, [r7, #20]
 8109d18:	2b00      	cmp	r3, #0
 8109d1a:	d001      	beq.n	8109d20 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8109d1c:	697b      	ldr	r3, [r7, #20]
 8109d1e:	e003      	b.n	8109d28 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8109d20:	2300      	movs	r3, #0
 8109d22:	e001      	b.n	8109d28 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8109d24:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8109d28:	4618      	mov	r0, r3
 8109d2a:	3718      	adds	r7, #24
 8109d2c:	46bd      	mov	sp, r7
 8109d2e:	bd80      	pop	{r7, pc}

08109d30 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8109d30:	b580      	push	{r7, lr}
 8109d32:	b08e      	sub	sp, #56	@ 0x38
 8109d34:	af00      	add	r7, sp, #0
 8109d36:	6078      	str	r0, [r7, #4]
 8109d38:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8109d3a:	f7f8 ff93 	bl	8102c64 <HAL_GetTick>
 8109d3e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8109d40:	2300      	movs	r3, #0
 8109d42:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8109d44:	2300      	movs	r3, #0
 8109d46:	60bb      	str	r3, [r7, #8]
 8109d48:	2300      	movs	r3, #0
 8109d4a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8109d4c:	683b      	ldr	r3, [r7, #0]
 8109d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8109d50:	687b      	ldr	r3, [r7, #4]
 8109d52:	681b      	ldr	r3, [r3, #0]
 8109d54:	2108      	movs	r1, #8
 8109d56:	4618      	mov	r0, r3
 8109d58:	f002 fce0 	bl	810c71c <SDMMC_CmdBlockLength>
 8109d5c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8109d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109d60:	2b00      	cmp	r3, #0
 8109d62:	d001      	beq.n	8109d68 <SD_FindSCR+0x38>
  {
    return errorstate;
 8109d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109d66:	e0ad      	b.n	8109ec4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8109d68:	687b      	ldr	r3, [r7, #4]
 8109d6a:	681a      	ldr	r2, [r3, #0]
 8109d6c:	687b      	ldr	r3, [r7, #4]
 8109d6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109d70:	041b      	lsls	r3, r3, #16
 8109d72:	4619      	mov	r1, r3
 8109d74:	4610      	mov	r0, r2
 8109d76:	f002 fd55 	bl	810c824 <SDMMC_CmdAppCommand>
 8109d7a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8109d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109d7e:	2b00      	cmp	r3, #0
 8109d80:	d001      	beq.n	8109d86 <SD_FindSCR+0x56>
  {
    return errorstate;
 8109d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109d84:	e09e      	b.n	8109ec4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8109d86:	f04f 33ff 	mov.w	r3, #4294967295
 8109d8a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8109d8c:	2308      	movs	r3, #8
 8109d8e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8109d90:	2330      	movs	r3, #48	@ 0x30
 8109d92:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8109d94:	2302      	movs	r3, #2
 8109d96:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8109d98:	2300      	movs	r3, #0
 8109d9a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8109d9c:	2301      	movs	r3, #1
 8109d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8109da0:	687b      	ldr	r3, [r7, #4]
 8109da2:	681b      	ldr	r3, [r3, #0]
 8109da4:	f107 0210 	add.w	r2, r7, #16
 8109da8:	4611      	mov	r1, r2
 8109daa:	4618      	mov	r0, r3
 8109dac:	f002 fc8a 	bl	810c6c4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8109db0:	687b      	ldr	r3, [r7, #4]
 8109db2:	681b      	ldr	r3, [r3, #0]
 8109db4:	4618      	mov	r0, r3
 8109db6:	f002 fd9b 	bl	810c8f0 <SDMMC_CmdSendSCR>
 8109dba:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8109dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109dbe:	2b00      	cmp	r3, #0
 8109dc0:	d027      	beq.n	8109e12 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8109dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8109dc4:	e07e      	b.n	8109ec4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8109dc6:	687b      	ldr	r3, [r7, #4]
 8109dc8:	681b      	ldr	r3, [r3, #0]
 8109dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109dcc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8109dd0:	2b00      	cmp	r3, #0
 8109dd2:	d113      	bne.n	8109dfc <SD_FindSCR+0xcc>
 8109dd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109dd6:	2b00      	cmp	r3, #0
 8109dd8:	d110      	bne.n	8109dfc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8109dda:	687b      	ldr	r3, [r7, #4]
 8109ddc:	681b      	ldr	r3, [r3, #0]
 8109dde:	4618      	mov	r0, r3
 8109de0:	f002 fbfa 	bl	810c5d8 <SDMMC_ReadFIFO>
 8109de4:	4603      	mov	r3, r0
 8109de6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8109de8:	687b      	ldr	r3, [r7, #4]
 8109dea:	681b      	ldr	r3, [r3, #0]
 8109dec:	4618      	mov	r0, r3
 8109dee:	f002 fbf3 	bl	810c5d8 <SDMMC_ReadFIFO>
 8109df2:	4603      	mov	r3, r0
 8109df4:	60fb      	str	r3, [r7, #12]
      index++;
 8109df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8109df8:	3301      	adds	r3, #1
 8109dfa:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8109dfc:	f7f8 ff32 	bl	8102c64 <HAL_GetTick>
 8109e00:	4602      	mov	r2, r0
 8109e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8109e04:	1ad3      	subs	r3, r2, r3
 8109e06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8109e0a:	d102      	bne.n	8109e12 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8109e0c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8109e10:	e058      	b.n	8109ec4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8109e12:	687b      	ldr	r3, [r7, #4]
 8109e14:	681b      	ldr	r3, [r3, #0]
 8109e16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8109e18:	f240 532a 	movw	r3, #1322	@ 0x52a
 8109e1c:	4013      	ands	r3, r2
 8109e1e:	2b00      	cmp	r3, #0
 8109e20:	d0d1      	beq.n	8109dc6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8109e22:	687b      	ldr	r3, [r7, #4]
 8109e24:	681b      	ldr	r3, [r3, #0]
 8109e26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109e28:	f003 0308 	and.w	r3, r3, #8
 8109e2c:	2b00      	cmp	r3, #0
 8109e2e:	d005      	beq.n	8109e3c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8109e30:	687b      	ldr	r3, [r7, #4]
 8109e32:	681b      	ldr	r3, [r3, #0]
 8109e34:	2208      	movs	r2, #8
 8109e36:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8109e38:	2308      	movs	r3, #8
 8109e3a:	e043      	b.n	8109ec4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8109e3c:	687b      	ldr	r3, [r7, #4]
 8109e3e:	681b      	ldr	r3, [r3, #0]
 8109e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109e42:	f003 0302 	and.w	r3, r3, #2
 8109e46:	2b00      	cmp	r3, #0
 8109e48:	d005      	beq.n	8109e56 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8109e4a:	687b      	ldr	r3, [r7, #4]
 8109e4c:	681b      	ldr	r3, [r3, #0]
 8109e4e:	2202      	movs	r2, #2
 8109e50:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8109e52:	2302      	movs	r3, #2
 8109e54:	e036      	b.n	8109ec4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8109e56:	687b      	ldr	r3, [r7, #4]
 8109e58:	681b      	ldr	r3, [r3, #0]
 8109e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8109e5c:	f003 0320 	and.w	r3, r3, #32
 8109e60:	2b00      	cmp	r3, #0
 8109e62:	d005      	beq.n	8109e70 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8109e64:	687b      	ldr	r3, [r7, #4]
 8109e66:	681b      	ldr	r3, [r3, #0]
 8109e68:	2220      	movs	r2, #32
 8109e6a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8109e6c:	2320      	movs	r3, #32
 8109e6e:	e029      	b.n	8109ec4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8109e70:	687b      	ldr	r3, [r7, #4]
 8109e72:	681b      	ldr	r3, [r3, #0]
 8109e74:	4a15      	ldr	r2, [pc, #84]	@ (8109ecc <SD_FindSCR+0x19c>)
 8109e76:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8109e78:	68fb      	ldr	r3, [r7, #12]
 8109e7a:	061a      	lsls	r2, r3, #24
 8109e7c:	68fb      	ldr	r3, [r7, #12]
 8109e7e:	021b      	lsls	r3, r3, #8
 8109e80:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8109e84:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8109e86:	68fb      	ldr	r3, [r7, #12]
 8109e88:	0a1b      	lsrs	r3, r3, #8
 8109e8a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8109e8e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8109e90:	68fb      	ldr	r3, [r7, #12]
 8109e92:	0e1b      	lsrs	r3, r3, #24
 8109e94:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8109e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109e98:	601a      	str	r2, [r3, #0]
    scr++;
 8109e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109e9c:	3304      	adds	r3, #4
 8109e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8109ea0:	68bb      	ldr	r3, [r7, #8]
 8109ea2:	061a      	lsls	r2, r3, #24
 8109ea4:	68bb      	ldr	r3, [r7, #8]
 8109ea6:	021b      	lsls	r3, r3, #8
 8109ea8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8109eac:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8109eae:	68bb      	ldr	r3, [r7, #8]
 8109eb0:	0a1b      	lsrs	r3, r3, #8
 8109eb2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8109eb6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8109eb8:	68bb      	ldr	r3, [r7, #8]
 8109eba:	0e1b      	lsrs	r3, r3, #24
 8109ebc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8109ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8109ec0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8109ec2:	2300      	movs	r3, #0
}
 8109ec4:	4618      	mov	r0, r3
 8109ec6:	3738      	adds	r7, #56	@ 0x38
 8109ec8:	46bd      	mov	sp, r7
 8109eca:	bd80      	pop	{r7, pc}
 8109ecc:	18000f3a 	.word	0x18000f3a

08109ed0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8109ed0:	b580      	push	{r7, lr}
 8109ed2:	b082      	sub	sp, #8
 8109ed4:	af00      	add	r7, sp, #0
 8109ed6:	6078      	str	r0, [r7, #4]
 8109ed8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8109eda:	687b      	ldr	r3, [r7, #4]
 8109edc:	2b00      	cmp	r3, #0
 8109ede:	d101      	bne.n	8109ee4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8109ee0:	2301      	movs	r3, #1
 8109ee2:	e02b      	b.n	8109f3c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8109ee4:	687b      	ldr	r3, [r7, #4]
 8109ee6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8109eea:	b2db      	uxtb	r3, r3
 8109eec:	2b00      	cmp	r3, #0
 8109eee:	d106      	bne.n	8109efe <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8109ef0:	687b      	ldr	r3, [r7, #4]
 8109ef2:	2200      	movs	r2, #0
 8109ef4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8109ef8:	6878      	ldr	r0, [r7, #4]
 8109efa:	f7f8 fce3 	bl	81028c4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8109efe:	687b      	ldr	r3, [r7, #4]
 8109f00:	2202      	movs	r2, #2
 8109f02:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8109f06:	687b      	ldr	r3, [r7, #4]
 8109f08:	681a      	ldr	r2, [r3, #0]
 8109f0a:	687b      	ldr	r3, [r7, #4]
 8109f0c:	3304      	adds	r3, #4
 8109f0e:	4619      	mov	r1, r3
 8109f10:	4610      	mov	r0, r2
 8109f12:	f002 fa71 	bl	810c3f8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8109f16:	687b      	ldr	r3, [r7, #4]
 8109f18:	6818      	ldr	r0, [r3, #0]
 8109f1a:	687b      	ldr	r3, [r7, #4]
 8109f1c:	685b      	ldr	r3, [r3, #4]
 8109f1e:	461a      	mov	r2, r3
 8109f20:	6839      	ldr	r1, [r7, #0]
 8109f22:	f002 fac6 	bl	810c4b2 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8109f26:	4b07      	ldr	r3, [pc, #28]	@ (8109f44 <HAL_SDRAM_Init+0x74>)
 8109f28:	681b      	ldr	r3, [r3, #0]
 8109f2a:	4a06      	ldr	r2, [pc, #24]	@ (8109f44 <HAL_SDRAM_Init+0x74>)
 8109f2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8109f30:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8109f32:	687b      	ldr	r3, [r7, #4]
 8109f34:	2201      	movs	r2, #1
 8109f36:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8109f3a:	2300      	movs	r3, #0
}
 8109f3c:	4618      	mov	r0, r3
 8109f3e:	3708      	adds	r7, #8
 8109f40:	46bd      	mov	sp, r7
 8109f42:	bd80      	pop	{r7, pc}
 8109f44:	52004000 	.word	0x52004000

08109f48 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8109f48:	b580      	push	{r7, lr}
 8109f4a:	b084      	sub	sp, #16
 8109f4c:	af00      	add	r7, sp, #0
 8109f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if (hspdif == NULL)
 8109f50:	687b      	ldr	r3, [r7, #4]
 8109f52:	2b00      	cmp	r3, #0
 8109f54:	d101      	bne.n	8109f5a <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8109f56:	2301      	movs	r3, #1
 8109f58:	e05e      	b.n	810a018 <HAL_SPDIFRX_Init+0xd0>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if (hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8109f5a:	687b      	ldr	r3, [r7, #4]
 8109f5c:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8109f60:	b2db      	uxtb	r3, r3
 8109f62:	2b00      	cmp	r3, #0
 8109f64:	d106      	bne.n	8109f74 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8109f66:	687b      	ldr	r3, [r7, #4]
 8109f68:	2200      	movs	r2, #0
 8109f6a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8109f6e:	6878      	ldr	r0, [r7, #4]
 8109f70:	f7f7 ff62 	bl	8101e38 <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8109f74:	687b      	ldr	r3, [r7, #4]
 8109f76:	2202      	movs	r2, #2
 8109f78:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8109f7c:	687b      	ldr	r3, [r7, #4]
 8109f7e:	681b      	ldr	r3, [r3, #0]
 8109f80:	681a      	ldr	r2, [r3, #0]
 8109f82:	687b      	ldr	r3, [r7, #4]
 8109f84:	681b      	ldr	r3, [r3, #0]
 8109f86:	f022 0203 	bic.w	r2, r2, #3
 8109f8a:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8109f8c:	687b      	ldr	r3, [r7, #4]
 8109f8e:	681b      	ldr	r3, [r3, #0]
 8109f90:	681b      	ldr	r3, [r3, #0]
 8109f92:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8109f94:	68fa      	ldr	r2, [r7, #12]
 8109f96:	4b22      	ldr	r3, [pc, #136]	@ (810a020 <HAL_SPDIFRX_Init+0xd8>)
 8109f98:	4013      	ands	r3, r2
 8109f9a:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_CKSEN | SPDIFRX_CR_CKSBKPEN |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8109f9c:	687b      	ldr	r3, [r7, #4]
 8109f9e:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8109fa0:	687b      	ldr	r3, [r7, #4]
 8109fa2:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8109fa4:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8109fa6:	687b      	ldr	r3, [r7, #4]
 8109fa8:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8109faa:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8109fac:	687b      	ldr	r3, [r7, #4]
 8109fae:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8109fb0:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8109fb2:	687b      	ldr	r3, [r7, #4]
 8109fb4:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8109fb6:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8109fb8:	687b      	ldr	r3, [r7, #4]
 8109fba:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8109fbc:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8109fbe:	687b      	ldr	r3, [r7, #4]
 8109fc0:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8109fc2:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8109fc4:	687b      	ldr	r3, [r7, #4]
 8109fc6:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8109fc8:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8109fca:	687b      	ldr	r3, [r7, #4]
 8109fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
             hspdif->Init.ChannelStatusMask |
 8109fce:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8109fd0:	687b      	ldr	r3, [r7, #4]
 8109fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
             hspdif->Init.ValidityBitMask |
 8109fd4:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8109fd6:	68fa      	ldr	r2, [r7, #12]
 8109fd8:	4313      	orrs	r3, r2
 8109fda:	60fb      	str	r3, [r7, #12]
            );

  if (hspdif->Init.SymbolClockGen == ENABLE)
 8109fdc:	687b      	ldr	r3, [r7, #4]
 8109fde:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8109fe2:	2b01      	cmp	r3, #1
 8109fe4:	d103      	bne.n	8109fee <HAL_SPDIFRX_Init+0xa6>
  {
    tmpreg |= SPDIFRX_CR_CKSEN;
 8109fe6:	68fb      	ldr	r3, [r7, #12]
 8109fe8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8109fec:	60fb      	str	r3, [r7, #12]
  }

  if (hspdif->Init.BackupSymbolClockGen == ENABLE)
 8109fee:	687b      	ldr	r3, [r7, #4]
 8109ff0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8109ff4:	2b01      	cmp	r3, #1
 8109ff6:	d103      	bne.n	810a000 <HAL_SPDIFRX_Init+0xb8>
  {
    tmpreg |= SPDIFRX_CR_CKSBKPEN;
 8109ff8:	68fb      	ldr	r3, [r7, #12]
 8109ffa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8109ffe:	60fb      	str	r3, [r7, #12]
  }

  hspdif->Instance->CR = tmpreg;
 810a000:	687b      	ldr	r3, [r7, #4]
 810a002:	681b      	ldr	r3, [r3, #0]
 810a004:	68fa      	ldr	r2, [r7, #12]
 810a006:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 810a008:	687b      	ldr	r3, [r7, #4]
 810a00a:	2200      	movs	r2, #0
 810a00c:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 810a00e:	687b      	ldr	r3, [r7, #4]
 810a010:	2201      	movs	r2, #1
 810a012:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 810a016:	2300      	movs	r3, #0
}
 810a018:	4618      	mov	r0, r3
 810a01a:	3710      	adds	r7, #16
 810a01c:	46bd      	mov	sp, r7
 810a01e:	bd80      	pop	{r7, pc}
 810a020:	ffc88407 	.word	0xffc88407

0810a024 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 810a024:	b580      	push	{r7, lr}
 810a026:	b084      	sub	sp, #16
 810a028:	af00      	add	r7, sp, #0
 810a02a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 810a02c:	687b      	ldr	r3, [r7, #4]
 810a02e:	2b00      	cmp	r3, #0
 810a030:	d101      	bne.n	810a036 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 810a032:	2301      	movs	r3, #1
 810a034:	e10f      	b.n	810a256 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 810a036:	687b      	ldr	r3, [r7, #4]
 810a038:	2200      	movs	r2, #0
 810a03a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 810a03c:	687b      	ldr	r3, [r7, #4]
 810a03e:	681b      	ldr	r3, [r3, #0]
 810a040:	4a87      	ldr	r2, [pc, #540]	@ (810a260 <HAL_SPI_Init+0x23c>)
 810a042:	4293      	cmp	r3, r2
 810a044:	d00f      	beq.n	810a066 <HAL_SPI_Init+0x42>
 810a046:	687b      	ldr	r3, [r7, #4]
 810a048:	681b      	ldr	r3, [r3, #0]
 810a04a:	4a86      	ldr	r2, [pc, #536]	@ (810a264 <HAL_SPI_Init+0x240>)
 810a04c:	4293      	cmp	r3, r2
 810a04e:	d00a      	beq.n	810a066 <HAL_SPI_Init+0x42>
 810a050:	687b      	ldr	r3, [r7, #4]
 810a052:	681b      	ldr	r3, [r3, #0]
 810a054:	4a84      	ldr	r2, [pc, #528]	@ (810a268 <HAL_SPI_Init+0x244>)
 810a056:	4293      	cmp	r3, r2
 810a058:	d005      	beq.n	810a066 <HAL_SPI_Init+0x42>
 810a05a:	687b      	ldr	r3, [r7, #4]
 810a05c:	68db      	ldr	r3, [r3, #12]
 810a05e:	2b0f      	cmp	r3, #15
 810a060:	d901      	bls.n	810a066 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 810a062:	2301      	movs	r3, #1
 810a064:	e0f7      	b.n	810a256 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 810a066:	6878      	ldr	r0, [r7, #4]
 810a068:	f000 f900 	bl	810a26c <SPI_GetPacketSize>
 810a06c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810a06e:	687b      	ldr	r3, [r7, #4]
 810a070:	681b      	ldr	r3, [r3, #0]
 810a072:	4a7b      	ldr	r2, [pc, #492]	@ (810a260 <HAL_SPI_Init+0x23c>)
 810a074:	4293      	cmp	r3, r2
 810a076:	d00c      	beq.n	810a092 <HAL_SPI_Init+0x6e>
 810a078:	687b      	ldr	r3, [r7, #4]
 810a07a:	681b      	ldr	r3, [r3, #0]
 810a07c:	4a79      	ldr	r2, [pc, #484]	@ (810a264 <HAL_SPI_Init+0x240>)
 810a07e:	4293      	cmp	r3, r2
 810a080:	d007      	beq.n	810a092 <HAL_SPI_Init+0x6e>
 810a082:	687b      	ldr	r3, [r7, #4]
 810a084:	681b      	ldr	r3, [r3, #0]
 810a086:	4a78      	ldr	r2, [pc, #480]	@ (810a268 <HAL_SPI_Init+0x244>)
 810a088:	4293      	cmp	r3, r2
 810a08a:	d002      	beq.n	810a092 <HAL_SPI_Init+0x6e>
 810a08c:	68fb      	ldr	r3, [r7, #12]
 810a08e:	2b08      	cmp	r3, #8
 810a090:	d811      	bhi.n	810a0b6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810a092:	687b      	ldr	r3, [r7, #4]
 810a094:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 810a096:	4a72      	ldr	r2, [pc, #456]	@ (810a260 <HAL_SPI_Init+0x23c>)
 810a098:	4293      	cmp	r3, r2
 810a09a:	d009      	beq.n	810a0b0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 810a09c:	687b      	ldr	r3, [r7, #4]
 810a09e:	681b      	ldr	r3, [r3, #0]
 810a0a0:	4a70      	ldr	r2, [pc, #448]	@ (810a264 <HAL_SPI_Init+0x240>)
 810a0a2:	4293      	cmp	r3, r2
 810a0a4:	d004      	beq.n	810a0b0 <HAL_SPI_Init+0x8c>
 810a0a6:	687b      	ldr	r3, [r7, #4]
 810a0a8:	681b      	ldr	r3, [r3, #0]
 810a0aa:	4a6f      	ldr	r2, [pc, #444]	@ (810a268 <HAL_SPI_Init+0x244>)
 810a0ac:	4293      	cmp	r3, r2
 810a0ae:	d104      	bne.n	810a0ba <HAL_SPI_Init+0x96>
 810a0b0:	68fb      	ldr	r3, [r7, #12]
 810a0b2:	2b10      	cmp	r3, #16
 810a0b4:	d901      	bls.n	810a0ba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 810a0b6:	2301      	movs	r3, #1
 810a0b8:	e0cd      	b.n	810a256 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 810a0ba:	687b      	ldr	r3, [r7, #4]
 810a0bc:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 810a0c0:	b2db      	uxtb	r3, r3
 810a0c2:	2b00      	cmp	r3, #0
 810a0c4:	d106      	bne.n	810a0d4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 810a0c6:	687b      	ldr	r3, [r7, #4]
 810a0c8:	2200      	movs	r2, #0
 810a0ca:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 810a0ce:	6878      	ldr	r0, [r7, #4]
 810a0d0:	f7f7 ff18 	bl	8101f04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 810a0d4:	687b      	ldr	r3, [r7, #4]
 810a0d6:	2202      	movs	r2, #2
 810a0d8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 810a0dc:	687b      	ldr	r3, [r7, #4]
 810a0de:	681b      	ldr	r3, [r3, #0]
 810a0e0:	681a      	ldr	r2, [r3, #0]
 810a0e2:	687b      	ldr	r3, [r7, #4]
 810a0e4:	681b      	ldr	r3, [r3, #0]
 810a0e6:	f022 0201 	bic.w	r2, r2, #1
 810a0ea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 810a0ec:	687b      	ldr	r3, [r7, #4]
 810a0ee:	681b      	ldr	r3, [r3, #0]
 810a0f0:	689b      	ldr	r3, [r3, #8]
 810a0f2:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 810a0f6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810a0f8:	687b      	ldr	r3, [r7, #4]
 810a0fa:	699b      	ldr	r3, [r3, #24]
 810a0fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810a100:	d119      	bne.n	810a136 <HAL_SPI_Init+0x112>
 810a102:	687b      	ldr	r3, [r7, #4]
 810a104:	685b      	ldr	r3, [r3, #4]
 810a106:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810a10a:	d103      	bne.n	810a114 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810a10c:	687b      	ldr	r3, [r7, #4]
 810a10e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 810a110:	2b00      	cmp	r3, #0
 810a112:	d008      	beq.n	810a126 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 810a114:	687b      	ldr	r3, [r7, #4]
 810a116:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 810a118:	2b00      	cmp	r3, #0
 810a11a:	d10c      	bne.n	810a136 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 810a11c:	687b      	ldr	r3, [r7, #4]
 810a11e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 810a120:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810a124:	d107      	bne.n	810a136 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 810a126:	687b      	ldr	r3, [r7, #4]
 810a128:	681b      	ldr	r3, [r3, #0]
 810a12a:	681a      	ldr	r2, [r3, #0]
 810a12c:	687b      	ldr	r3, [r7, #4]
 810a12e:	681b      	ldr	r3, [r3, #0]
 810a130:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 810a134:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 810a136:	687b      	ldr	r3, [r7, #4]
 810a138:	685b      	ldr	r3, [r3, #4]
 810a13a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810a13e:	2b00      	cmp	r3, #0
 810a140:	d00f      	beq.n	810a162 <HAL_SPI_Init+0x13e>
 810a142:	687b      	ldr	r3, [r7, #4]
 810a144:	68db      	ldr	r3, [r3, #12]
 810a146:	2b06      	cmp	r3, #6
 810a148:	d90b      	bls.n	810a162 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 810a14a:	687b      	ldr	r3, [r7, #4]
 810a14c:	681b      	ldr	r3, [r3, #0]
 810a14e:	681b      	ldr	r3, [r3, #0]
 810a150:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 810a154:	687b      	ldr	r3, [r7, #4]
 810a156:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810a158:	687b      	ldr	r3, [r7, #4]
 810a15a:	681b      	ldr	r3, [r3, #0]
 810a15c:	430a      	orrs	r2, r1
 810a15e:	601a      	str	r2, [r3, #0]
 810a160:	e007      	b.n	810a172 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 810a162:	687b      	ldr	r3, [r7, #4]
 810a164:	681b      	ldr	r3, [r3, #0]
 810a166:	681a      	ldr	r2, [r3, #0]
 810a168:	687b      	ldr	r3, [r7, #4]
 810a16a:	681b      	ldr	r3, [r3, #0]
 810a16c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 810a170:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 810a172:	687b      	ldr	r3, [r7, #4]
 810a174:	69da      	ldr	r2, [r3, #28]
 810a176:	687b      	ldr	r3, [r7, #4]
 810a178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810a17a:	431a      	orrs	r2, r3
 810a17c:	68bb      	ldr	r3, [r7, #8]
 810a17e:	431a      	orrs	r2, r3
 810a180:	687b      	ldr	r3, [r7, #4]
 810a182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810a184:	ea42 0103 	orr.w	r1, r2, r3
 810a188:	687b      	ldr	r3, [r7, #4]
 810a18a:	68da      	ldr	r2, [r3, #12]
 810a18c:	687b      	ldr	r3, [r7, #4]
 810a18e:	681b      	ldr	r3, [r3, #0]
 810a190:	430a      	orrs	r2, r1
 810a192:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 810a194:	687b      	ldr	r3, [r7, #4]
 810a196:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810a198:	687b      	ldr	r3, [r7, #4]
 810a19a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a19c:	431a      	orrs	r2, r3
 810a19e:	687b      	ldr	r3, [r7, #4]
 810a1a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a1a2:	431a      	orrs	r2, r3
 810a1a4:	687b      	ldr	r3, [r7, #4]
 810a1a6:	699b      	ldr	r3, [r3, #24]
 810a1a8:	431a      	orrs	r2, r3
 810a1aa:	687b      	ldr	r3, [r7, #4]
 810a1ac:	691b      	ldr	r3, [r3, #16]
 810a1ae:	431a      	orrs	r2, r3
 810a1b0:	687b      	ldr	r3, [r7, #4]
 810a1b2:	695b      	ldr	r3, [r3, #20]
 810a1b4:	431a      	orrs	r2, r3
 810a1b6:	687b      	ldr	r3, [r7, #4]
 810a1b8:	6a1b      	ldr	r3, [r3, #32]
 810a1ba:	431a      	orrs	r2, r3
 810a1bc:	687b      	ldr	r3, [r7, #4]
 810a1be:	685b      	ldr	r3, [r3, #4]
 810a1c0:	431a      	orrs	r2, r3
 810a1c2:	687b      	ldr	r3, [r7, #4]
 810a1c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810a1c6:	431a      	orrs	r2, r3
 810a1c8:	687b      	ldr	r3, [r7, #4]
 810a1ca:	689b      	ldr	r3, [r3, #8]
 810a1cc:	431a      	orrs	r2, r3
 810a1ce:	687b      	ldr	r3, [r7, #4]
 810a1d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810a1d2:	ea42 0103 	orr.w	r1, r2, r3
 810a1d6:	687b      	ldr	r3, [r7, #4]
 810a1d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 810a1da:	687b      	ldr	r3, [r7, #4]
 810a1dc:	681b      	ldr	r3, [r3, #0]
 810a1de:	430a      	orrs	r2, r1
 810a1e0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 810a1e2:	687b      	ldr	r3, [r7, #4]
 810a1e4:	685b      	ldr	r3, [r3, #4]
 810a1e6:	2b00      	cmp	r3, #0
 810a1e8:	d113      	bne.n	810a212 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 810a1ea:	687b      	ldr	r3, [r7, #4]
 810a1ec:	681b      	ldr	r3, [r3, #0]
 810a1ee:	689b      	ldr	r3, [r3, #8]
 810a1f0:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 810a1f4:	687b      	ldr	r3, [r7, #4]
 810a1f6:	681b      	ldr	r3, [r3, #0]
 810a1f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810a1fc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 810a1fe:	687b      	ldr	r3, [r7, #4]
 810a200:	681b      	ldr	r3, [r3, #0]
 810a202:	689b      	ldr	r3, [r3, #8]
 810a204:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 810a208:	687b      	ldr	r3, [r7, #4]
 810a20a:	681b      	ldr	r3, [r3, #0]
 810a20c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 810a210:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 810a212:	687b      	ldr	r3, [r7, #4]
 810a214:	681b      	ldr	r3, [r3, #0]
 810a216:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810a218:	687b      	ldr	r3, [r7, #4]
 810a21a:	681b      	ldr	r3, [r3, #0]
 810a21c:	f022 0201 	bic.w	r2, r2, #1
 810a220:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 810a222:	687b      	ldr	r3, [r7, #4]
 810a224:	685b      	ldr	r3, [r3, #4]
 810a226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810a22a:	2b00      	cmp	r3, #0
 810a22c:	d00a      	beq.n	810a244 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 810a22e:	687b      	ldr	r3, [r7, #4]
 810a230:	681b      	ldr	r3, [r3, #0]
 810a232:	68db      	ldr	r3, [r3, #12]
 810a234:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810a238:	687b      	ldr	r3, [r7, #4]
 810a23a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 810a23c:	687b      	ldr	r3, [r7, #4]
 810a23e:	681b      	ldr	r3, [r3, #0]
 810a240:	430a      	orrs	r2, r1
 810a242:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 810a244:	687b      	ldr	r3, [r7, #4]
 810a246:	2200      	movs	r2, #0
 810a248:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 810a24c:	687b      	ldr	r3, [r7, #4]
 810a24e:	2201      	movs	r2, #1
 810a250:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 810a254:	2300      	movs	r3, #0
}
 810a256:	4618      	mov	r0, r3
 810a258:	3710      	adds	r7, #16
 810a25a:	46bd      	mov	sp, r7
 810a25c:	bd80      	pop	{r7, pc}
 810a25e:	bf00      	nop
 810a260:	40013000 	.word	0x40013000
 810a264:	40003800 	.word	0x40003800
 810a268:	40003c00 	.word	0x40003c00

0810a26c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 810a26c:	b480      	push	{r7}
 810a26e:	b085      	sub	sp, #20
 810a270:	af00      	add	r7, sp, #0
 810a272:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 810a274:	687b      	ldr	r3, [r7, #4]
 810a276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810a278:	095b      	lsrs	r3, r3, #5
 810a27a:	3301      	adds	r3, #1
 810a27c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 810a27e:	687b      	ldr	r3, [r7, #4]
 810a280:	68db      	ldr	r3, [r3, #12]
 810a282:	3301      	adds	r3, #1
 810a284:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 810a286:	68bb      	ldr	r3, [r7, #8]
 810a288:	3307      	adds	r3, #7
 810a28a:	08db      	lsrs	r3, r3, #3
 810a28c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 810a28e:	68bb      	ldr	r3, [r7, #8]
 810a290:	68fa      	ldr	r2, [r7, #12]
 810a292:	fb02 f303 	mul.w	r3, r2, r3
}
 810a296:	4618      	mov	r0, r3
 810a298:	3714      	adds	r7, #20
 810a29a:	46bd      	mov	sp, r7
 810a29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a2a0:	4770      	bx	lr

0810a2a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 810a2a2:	b580      	push	{r7, lr}
 810a2a4:	b082      	sub	sp, #8
 810a2a6:	af00      	add	r7, sp, #0
 810a2a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810a2aa:	687b      	ldr	r3, [r7, #4]
 810a2ac:	2b00      	cmp	r3, #0
 810a2ae:	d101      	bne.n	810a2b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810a2b0:	2301      	movs	r3, #1
 810a2b2:	e049      	b.n	810a348 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810a2b4:	687b      	ldr	r3, [r7, #4]
 810a2b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810a2ba:	b2db      	uxtb	r3, r3
 810a2bc:	2b00      	cmp	r3, #0
 810a2be:	d106      	bne.n	810a2ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810a2c0:	687b      	ldr	r3, [r7, #4]
 810a2c2:	2200      	movs	r2, #0
 810a2c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 810a2c8:	6878      	ldr	r0, [r7, #4]
 810a2ca:	f7f7 ff45 	bl	8102158 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810a2ce:	687b      	ldr	r3, [r7, #4]
 810a2d0:	2202      	movs	r2, #2
 810a2d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810a2d6:	687b      	ldr	r3, [r7, #4]
 810a2d8:	681a      	ldr	r2, [r3, #0]
 810a2da:	687b      	ldr	r3, [r7, #4]
 810a2dc:	3304      	adds	r3, #4
 810a2de:	4619      	mov	r1, r3
 810a2e0:	4610      	mov	r0, r2
 810a2e2:	f000 fa03 	bl	810a6ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810a2e6:	687b      	ldr	r3, [r7, #4]
 810a2e8:	2201      	movs	r2, #1
 810a2ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810a2ee:	687b      	ldr	r3, [r7, #4]
 810a2f0:	2201      	movs	r2, #1
 810a2f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810a2f6:	687b      	ldr	r3, [r7, #4]
 810a2f8:	2201      	movs	r2, #1
 810a2fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810a2fe:	687b      	ldr	r3, [r7, #4]
 810a300:	2201      	movs	r2, #1
 810a302:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810a306:	687b      	ldr	r3, [r7, #4]
 810a308:	2201      	movs	r2, #1
 810a30a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810a30e:	687b      	ldr	r3, [r7, #4]
 810a310:	2201      	movs	r2, #1
 810a312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810a316:	687b      	ldr	r3, [r7, #4]
 810a318:	2201      	movs	r2, #1
 810a31a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810a31e:	687b      	ldr	r3, [r7, #4]
 810a320:	2201      	movs	r2, #1
 810a322:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810a326:	687b      	ldr	r3, [r7, #4]
 810a328:	2201      	movs	r2, #1
 810a32a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810a32e:	687b      	ldr	r3, [r7, #4]
 810a330:	2201      	movs	r2, #1
 810a332:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810a336:	687b      	ldr	r3, [r7, #4]
 810a338:	2201      	movs	r2, #1
 810a33a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810a33e:	687b      	ldr	r3, [r7, #4]
 810a340:	2201      	movs	r2, #1
 810a342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810a346:	2300      	movs	r3, #0
}
 810a348:	4618      	mov	r0, r3
 810a34a:	3708      	adds	r7, #8
 810a34c:	46bd      	mov	sp, r7
 810a34e:	bd80      	pop	{r7, pc}

0810a350 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 810a350:	b580      	push	{r7, lr}
 810a352:	b082      	sub	sp, #8
 810a354:	af00      	add	r7, sp, #0
 810a356:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810a358:	687b      	ldr	r3, [r7, #4]
 810a35a:	2b00      	cmp	r3, #0
 810a35c:	d101      	bne.n	810a362 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 810a35e:	2301      	movs	r3, #1
 810a360:	e049      	b.n	810a3f6 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810a362:	687b      	ldr	r3, [r7, #4]
 810a364:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810a368:	b2db      	uxtb	r3, r3
 810a36a:	2b00      	cmp	r3, #0
 810a36c:	d106      	bne.n	810a37c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810a36e:	687b      	ldr	r3, [r7, #4]
 810a370:	2200      	movs	r2, #0
 810a372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 810a376:	6878      	ldr	r0, [r7, #4]
 810a378:	f7f7 fecc 	bl	8102114 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810a37c:	687b      	ldr	r3, [r7, #4]
 810a37e:	2202      	movs	r2, #2
 810a380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 810a384:	687b      	ldr	r3, [r7, #4]
 810a386:	681a      	ldr	r2, [r3, #0]
 810a388:	687b      	ldr	r3, [r7, #4]
 810a38a:	3304      	adds	r3, #4
 810a38c:	4619      	mov	r1, r3
 810a38e:	4610      	mov	r0, r2
 810a390:	f000 f9ac 	bl	810a6ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810a394:	687b      	ldr	r3, [r7, #4]
 810a396:	2201      	movs	r2, #1
 810a398:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810a39c:	687b      	ldr	r3, [r7, #4]
 810a39e:	2201      	movs	r2, #1
 810a3a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810a3a4:	687b      	ldr	r3, [r7, #4]
 810a3a6:	2201      	movs	r2, #1
 810a3a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810a3ac:	687b      	ldr	r3, [r7, #4]
 810a3ae:	2201      	movs	r2, #1
 810a3b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810a3b4:	687b      	ldr	r3, [r7, #4]
 810a3b6:	2201      	movs	r2, #1
 810a3b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810a3bc:	687b      	ldr	r3, [r7, #4]
 810a3be:	2201      	movs	r2, #1
 810a3c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810a3c4:	687b      	ldr	r3, [r7, #4]
 810a3c6:	2201      	movs	r2, #1
 810a3c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810a3cc:	687b      	ldr	r3, [r7, #4]
 810a3ce:	2201      	movs	r2, #1
 810a3d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810a3d4:	687b      	ldr	r3, [r7, #4]
 810a3d6:	2201      	movs	r2, #1
 810a3d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810a3dc:	687b      	ldr	r3, [r7, #4]
 810a3de:	2201      	movs	r2, #1
 810a3e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810a3e4:	687b      	ldr	r3, [r7, #4]
 810a3e6:	2201      	movs	r2, #1
 810a3e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810a3ec:	687b      	ldr	r3, [r7, #4]
 810a3ee:	2201      	movs	r2, #1
 810a3f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810a3f4:	2300      	movs	r3, #0
}
 810a3f6:	4618      	mov	r0, r3
 810a3f8:	3708      	adds	r7, #8
 810a3fa:	46bd      	mov	sp, r7
 810a3fc:	bd80      	pop	{r7, pc}

0810a3fe <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 810a3fe:	b580      	push	{r7, lr}
 810a400:	b082      	sub	sp, #8
 810a402:	af00      	add	r7, sp, #0
 810a404:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 810a406:	687b      	ldr	r3, [r7, #4]
 810a408:	2b00      	cmp	r3, #0
 810a40a:	d101      	bne.n	810a410 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 810a40c:	2301      	movs	r3, #1
 810a40e:	e049      	b.n	810a4a4 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 810a410:	687b      	ldr	r3, [r7, #4]
 810a412:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 810a416:	b2db      	uxtb	r3, r3
 810a418:	2b00      	cmp	r3, #0
 810a41a:	d106      	bne.n	810a42a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810a41c:	687b      	ldr	r3, [r7, #4]
 810a41e:	2200      	movs	r2, #0
 810a420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 810a424:	6878      	ldr	r0, [r7, #4]
 810a426:	f000 f841 	bl	810a4ac <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810a42a:	687b      	ldr	r3, [r7, #4]
 810a42c:	2202      	movs	r2, #2
 810a42e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 810a432:	687b      	ldr	r3, [r7, #4]
 810a434:	681a      	ldr	r2, [r3, #0]
 810a436:	687b      	ldr	r3, [r7, #4]
 810a438:	3304      	adds	r3, #4
 810a43a:	4619      	mov	r1, r3
 810a43c:	4610      	mov	r0, r2
 810a43e:	f000 f955 	bl	810a6ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 810a442:	687b      	ldr	r3, [r7, #4]
 810a444:	2201      	movs	r2, #1
 810a446:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810a44a:	687b      	ldr	r3, [r7, #4]
 810a44c:	2201      	movs	r2, #1
 810a44e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810a452:	687b      	ldr	r3, [r7, #4]
 810a454:	2201      	movs	r2, #1
 810a456:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810a45a:	687b      	ldr	r3, [r7, #4]
 810a45c:	2201      	movs	r2, #1
 810a45e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810a462:	687b      	ldr	r3, [r7, #4]
 810a464:	2201      	movs	r2, #1
 810a466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 810a46a:	687b      	ldr	r3, [r7, #4]
 810a46c:	2201      	movs	r2, #1
 810a46e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 810a472:	687b      	ldr	r3, [r7, #4]
 810a474:	2201      	movs	r2, #1
 810a476:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810a47a:	687b      	ldr	r3, [r7, #4]
 810a47c:	2201      	movs	r2, #1
 810a47e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810a482:	687b      	ldr	r3, [r7, #4]
 810a484:	2201      	movs	r2, #1
 810a486:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810a48a:	687b      	ldr	r3, [r7, #4]
 810a48c:	2201      	movs	r2, #1
 810a48e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810a492:	687b      	ldr	r3, [r7, #4]
 810a494:	2201      	movs	r2, #1
 810a496:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810a49a:	687b      	ldr	r3, [r7, #4]
 810a49c:	2201      	movs	r2, #1
 810a49e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 810a4a2:	2300      	movs	r3, #0
}
 810a4a4:	4618      	mov	r0, r3
 810a4a6:	3708      	adds	r7, #8
 810a4a8:	46bd      	mov	sp, r7
 810a4aa:	bd80      	pop	{r7, pc}

0810a4ac <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 810a4ac:	b480      	push	{r7}
 810a4ae:	b083      	sub	sp, #12
 810a4b0:	af00      	add	r7, sp, #0
 810a4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 810a4b4:	bf00      	nop
 810a4b6:	370c      	adds	r7, #12
 810a4b8:	46bd      	mov	sp, r7
 810a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a4be:	4770      	bx	lr

0810a4c0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 810a4c0:	b580      	push	{r7, lr}
 810a4c2:	b086      	sub	sp, #24
 810a4c4:	af00      	add	r7, sp, #0
 810a4c6:	60f8      	str	r0, [r7, #12]
 810a4c8:	60b9      	str	r1, [r7, #8]
 810a4ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810a4cc:	2300      	movs	r3, #0
 810a4ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 810a4d0:	68fb      	ldr	r3, [r7, #12]
 810a4d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810a4d6:	2b01      	cmp	r3, #1
 810a4d8:	d101      	bne.n	810a4de <HAL_TIM_OC_ConfigChannel+0x1e>
 810a4da:	2302      	movs	r3, #2
 810a4dc:	e066      	b.n	810a5ac <HAL_TIM_OC_ConfigChannel+0xec>
 810a4de:	68fb      	ldr	r3, [r7, #12]
 810a4e0:	2201      	movs	r2, #1
 810a4e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 810a4e6:	687b      	ldr	r3, [r7, #4]
 810a4e8:	2b14      	cmp	r3, #20
 810a4ea:	d857      	bhi.n	810a59c <HAL_TIM_OC_ConfigChannel+0xdc>
 810a4ec:	a201      	add	r2, pc, #4	@ (adr r2, 810a4f4 <HAL_TIM_OC_ConfigChannel+0x34>)
 810a4ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a4f2:	bf00      	nop
 810a4f4:	0810a549 	.word	0x0810a549
 810a4f8:	0810a59d 	.word	0x0810a59d
 810a4fc:	0810a59d 	.word	0x0810a59d
 810a500:	0810a59d 	.word	0x0810a59d
 810a504:	0810a557 	.word	0x0810a557
 810a508:	0810a59d 	.word	0x0810a59d
 810a50c:	0810a59d 	.word	0x0810a59d
 810a510:	0810a59d 	.word	0x0810a59d
 810a514:	0810a565 	.word	0x0810a565
 810a518:	0810a59d 	.word	0x0810a59d
 810a51c:	0810a59d 	.word	0x0810a59d
 810a520:	0810a59d 	.word	0x0810a59d
 810a524:	0810a573 	.word	0x0810a573
 810a528:	0810a59d 	.word	0x0810a59d
 810a52c:	0810a59d 	.word	0x0810a59d
 810a530:	0810a59d 	.word	0x0810a59d
 810a534:	0810a581 	.word	0x0810a581
 810a538:	0810a59d 	.word	0x0810a59d
 810a53c:	0810a59d 	.word	0x0810a59d
 810a540:	0810a59d 	.word	0x0810a59d
 810a544:	0810a58f 	.word	0x0810a58f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 810a548:	68fb      	ldr	r3, [r7, #12]
 810a54a:	681b      	ldr	r3, [r3, #0]
 810a54c:	68b9      	ldr	r1, [r7, #8]
 810a54e:	4618      	mov	r0, r3
 810a550:	f000 f96c 	bl	810a82c <TIM_OC1_SetConfig>
      break;
 810a554:	e025      	b.n	810a5a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810a556:	68fb      	ldr	r3, [r7, #12]
 810a558:	681b      	ldr	r3, [r3, #0]
 810a55a:	68b9      	ldr	r1, [r7, #8]
 810a55c:	4618      	mov	r0, r3
 810a55e:	f000 f9f5 	bl	810a94c <TIM_OC2_SetConfig>
      break;
 810a562:	e01e      	b.n	810a5a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810a564:	68fb      	ldr	r3, [r7, #12]
 810a566:	681b      	ldr	r3, [r3, #0]
 810a568:	68b9      	ldr	r1, [r7, #8]
 810a56a:	4618      	mov	r0, r3
 810a56c:	f000 fa78 	bl	810aa60 <TIM_OC3_SetConfig>
      break;
 810a570:	e017      	b.n	810a5a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810a572:	68fb      	ldr	r3, [r7, #12]
 810a574:	681b      	ldr	r3, [r3, #0]
 810a576:	68b9      	ldr	r1, [r7, #8]
 810a578:	4618      	mov	r0, r3
 810a57a:	f000 faf9 	bl	810ab70 <TIM_OC4_SetConfig>
      break;
 810a57e:	e010      	b.n	810a5a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 810a580:	68fb      	ldr	r3, [r7, #12]
 810a582:	681b      	ldr	r3, [r3, #0]
 810a584:	68b9      	ldr	r1, [r7, #8]
 810a586:	4618      	mov	r0, r3
 810a588:	f000 fb5c 	bl	810ac44 <TIM_OC5_SetConfig>
      break;
 810a58c:	e009      	b.n	810a5a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810a58e:	68fb      	ldr	r3, [r7, #12]
 810a590:	681b      	ldr	r3, [r3, #0]
 810a592:	68b9      	ldr	r1, [r7, #8]
 810a594:	4618      	mov	r0, r3
 810a596:	f000 fbb9 	bl	810ad0c <TIM_OC6_SetConfig>
      break;
 810a59a:	e002      	b.n	810a5a2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 810a59c:	2301      	movs	r3, #1
 810a59e:	75fb      	strb	r3, [r7, #23]
      break;
 810a5a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 810a5a2:	68fb      	ldr	r3, [r7, #12]
 810a5a4:	2200      	movs	r2, #0
 810a5a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810a5aa:	7dfb      	ldrb	r3, [r7, #23]
}
 810a5ac:	4618      	mov	r0, r3
 810a5ae:	3718      	adds	r7, #24
 810a5b0:	46bd      	mov	sp, r7
 810a5b2:	bd80      	pop	{r7, pc}

0810a5b4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 810a5b4:	b580      	push	{r7, lr}
 810a5b6:	b086      	sub	sp, #24
 810a5b8:	af00      	add	r7, sp, #0
 810a5ba:	60f8      	str	r0, [r7, #12]
 810a5bc:	60b9      	str	r1, [r7, #8]
 810a5be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 810a5c0:	2300      	movs	r3, #0
 810a5c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 810a5c4:	68fb      	ldr	r3, [r7, #12]
 810a5c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810a5ca:	2b01      	cmp	r3, #1
 810a5cc:	d101      	bne.n	810a5d2 <HAL_TIM_IC_ConfigChannel+0x1e>
 810a5ce:	2302      	movs	r3, #2
 810a5d0:	e088      	b.n	810a6e4 <HAL_TIM_IC_ConfigChannel+0x130>
 810a5d2:	68fb      	ldr	r3, [r7, #12]
 810a5d4:	2201      	movs	r2, #1
 810a5d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 810a5da:	687b      	ldr	r3, [r7, #4]
 810a5dc:	2b00      	cmp	r3, #0
 810a5de:	d11b      	bne.n	810a618 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 810a5e0:	68fb      	ldr	r3, [r7, #12]
 810a5e2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810a5e4:	68bb      	ldr	r3, [r7, #8]
 810a5e6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810a5e8:	68bb      	ldr	r3, [r7, #8]
 810a5ea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810a5ec:	68bb      	ldr	r3, [r7, #8]
 810a5ee:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 810a5f0:	f000 fbf2 	bl	810add8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 810a5f4:	68fb      	ldr	r3, [r7, #12]
 810a5f6:	681b      	ldr	r3, [r3, #0]
 810a5f8:	699a      	ldr	r2, [r3, #24]
 810a5fa:	68fb      	ldr	r3, [r7, #12]
 810a5fc:	681b      	ldr	r3, [r3, #0]
 810a5fe:	f022 020c 	bic.w	r2, r2, #12
 810a602:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 810a604:	68fb      	ldr	r3, [r7, #12]
 810a606:	681b      	ldr	r3, [r3, #0]
 810a608:	6999      	ldr	r1, [r3, #24]
 810a60a:	68bb      	ldr	r3, [r7, #8]
 810a60c:	689a      	ldr	r2, [r3, #8]
 810a60e:	68fb      	ldr	r3, [r7, #12]
 810a610:	681b      	ldr	r3, [r3, #0]
 810a612:	430a      	orrs	r2, r1
 810a614:	619a      	str	r2, [r3, #24]
 810a616:	e060      	b.n	810a6da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 810a618:	687b      	ldr	r3, [r7, #4]
 810a61a:	2b04      	cmp	r3, #4
 810a61c:	d11c      	bne.n	810a658 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 810a61e:	68fb      	ldr	r3, [r7, #12]
 810a620:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810a622:	68bb      	ldr	r3, [r7, #8]
 810a624:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810a626:	68bb      	ldr	r3, [r7, #8]
 810a628:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810a62a:	68bb      	ldr	r3, [r7, #8]
 810a62c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 810a62e:	f000 fc47 	bl	810aec0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 810a632:	68fb      	ldr	r3, [r7, #12]
 810a634:	681b      	ldr	r3, [r3, #0]
 810a636:	699a      	ldr	r2, [r3, #24]
 810a638:	68fb      	ldr	r3, [r7, #12]
 810a63a:	681b      	ldr	r3, [r3, #0]
 810a63c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 810a640:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 810a642:	68fb      	ldr	r3, [r7, #12]
 810a644:	681b      	ldr	r3, [r3, #0]
 810a646:	6999      	ldr	r1, [r3, #24]
 810a648:	68bb      	ldr	r3, [r7, #8]
 810a64a:	689b      	ldr	r3, [r3, #8]
 810a64c:	021a      	lsls	r2, r3, #8
 810a64e:	68fb      	ldr	r3, [r7, #12]
 810a650:	681b      	ldr	r3, [r3, #0]
 810a652:	430a      	orrs	r2, r1
 810a654:	619a      	str	r2, [r3, #24]
 810a656:	e040      	b.n	810a6da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 810a658:	687b      	ldr	r3, [r7, #4]
 810a65a:	2b08      	cmp	r3, #8
 810a65c:	d11b      	bne.n	810a696 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 810a65e:	68fb      	ldr	r3, [r7, #12]
 810a660:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810a662:	68bb      	ldr	r3, [r7, #8]
 810a664:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810a666:	68bb      	ldr	r3, [r7, #8]
 810a668:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810a66a:	68bb      	ldr	r3, [r7, #8]
 810a66c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 810a66e:	f000 fc64 	bl	810af3a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 810a672:	68fb      	ldr	r3, [r7, #12]
 810a674:	681b      	ldr	r3, [r3, #0]
 810a676:	69da      	ldr	r2, [r3, #28]
 810a678:	68fb      	ldr	r3, [r7, #12]
 810a67a:	681b      	ldr	r3, [r3, #0]
 810a67c:	f022 020c 	bic.w	r2, r2, #12
 810a680:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 810a682:	68fb      	ldr	r3, [r7, #12]
 810a684:	681b      	ldr	r3, [r3, #0]
 810a686:	69d9      	ldr	r1, [r3, #28]
 810a688:	68bb      	ldr	r3, [r7, #8]
 810a68a:	689a      	ldr	r2, [r3, #8]
 810a68c:	68fb      	ldr	r3, [r7, #12]
 810a68e:	681b      	ldr	r3, [r3, #0]
 810a690:	430a      	orrs	r2, r1
 810a692:	61da      	str	r2, [r3, #28]
 810a694:	e021      	b.n	810a6da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 810a696:	687b      	ldr	r3, [r7, #4]
 810a698:	2b0c      	cmp	r3, #12
 810a69a:	d11c      	bne.n	810a6d6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 810a69c:	68fb      	ldr	r3, [r7, #12]
 810a69e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 810a6a0:	68bb      	ldr	r3, [r7, #8]
 810a6a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 810a6a4:	68bb      	ldr	r3, [r7, #8]
 810a6a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 810a6a8:	68bb      	ldr	r3, [r7, #8]
 810a6aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 810a6ac:	f000 fc81 	bl	810afb2 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 810a6b0:	68fb      	ldr	r3, [r7, #12]
 810a6b2:	681b      	ldr	r3, [r3, #0]
 810a6b4:	69da      	ldr	r2, [r3, #28]
 810a6b6:	68fb      	ldr	r3, [r7, #12]
 810a6b8:	681b      	ldr	r3, [r3, #0]
 810a6ba:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 810a6be:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 810a6c0:	68fb      	ldr	r3, [r7, #12]
 810a6c2:	681b      	ldr	r3, [r3, #0]
 810a6c4:	69d9      	ldr	r1, [r3, #28]
 810a6c6:	68bb      	ldr	r3, [r7, #8]
 810a6c8:	689b      	ldr	r3, [r3, #8]
 810a6ca:	021a      	lsls	r2, r3, #8
 810a6cc:	68fb      	ldr	r3, [r7, #12]
 810a6ce:	681b      	ldr	r3, [r3, #0]
 810a6d0:	430a      	orrs	r2, r1
 810a6d2:	61da      	str	r2, [r3, #28]
 810a6d4:	e001      	b.n	810a6da <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 810a6d6:	2301      	movs	r3, #1
 810a6d8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 810a6da:	68fb      	ldr	r3, [r7, #12]
 810a6dc:	2200      	movs	r2, #0
 810a6de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 810a6e2:	7dfb      	ldrb	r3, [r7, #23]
}
 810a6e4:	4618      	mov	r0, r3
 810a6e6:	3718      	adds	r7, #24
 810a6e8:	46bd      	mov	sp, r7
 810a6ea:	bd80      	pop	{r7, pc}

0810a6ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 810a6ec:	b480      	push	{r7}
 810a6ee:	b085      	sub	sp, #20
 810a6f0:	af00      	add	r7, sp, #0
 810a6f2:	6078      	str	r0, [r7, #4]
 810a6f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810a6f6:	687b      	ldr	r3, [r7, #4]
 810a6f8:	681b      	ldr	r3, [r3, #0]
 810a6fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810a6fc:	687b      	ldr	r3, [r7, #4]
 810a6fe:	4a43      	ldr	r2, [pc, #268]	@ (810a80c <TIM_Base_SetConfig+0x120>)
 810a700:	4293      	cmp	r3, r2
 810a702:	d013      	beq.n	810a72c <TIM_Base_SetConfig+0x40>
 810a704:	687b      	ldr	r3, [r7, #4]
 810a706:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a70a:	d00f      	beq.n	810a72c <TIM_Base_SetConfig+0x40>
 810a70c:	687b      	ldr	r3, [r7, #4]
 810a70e:	4a40      	ldr	r2, [pc, #256]	@ (810a810 <TIM_Base_SetConfig+0x124>)
 810a710:	4293      	cmp	r3, r2
 810a712:	d00b      	beq.n	810a72c <TIM_Base_SetConfig+0x40>
 810a714:	687b      	ldr	r3, [r7, #4]
 810a716:	4a3f      	ldr	r2, [pc, #252]	@ (810a814 <TIM_Base_SetConfig+0x128>)
 810a718:	4293      	cmp	r3, r2
 810a71a:	d007      	beq.n	810a72c <TIM_Base_SetConfig+0x40>
 810a71c:	687b      	ldr	r3, [r7, #4]
 810a71e:	4a3e      	ldr	r2, [pc, #248]	@ (810a818 <TIM_Base_SetConfig+0x12c>)
 810a720:	4293      	cmp	r3, r2
 810a722:	d003      	beq.n	810a72c <TIM_Base_SetConfig+0x40>
 810a724:	687b      	ldr	r3, [r7, #4]
 810a726:	4a3d      	ldr	r2, [pc, #244]	@ (810a81c <TIM_Base_SetConfig+0x130>)
 810a728:	4293      	cmp	r3, r2
 810a72a:	d108      	bne.n	810a73e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 810a72c:	68fb      	ldr	r3, [r7, #12]
 810a72e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810a732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 810a734:	683b      	ldr	r3, [r7, #0]
 810a736:	685b      	ldr	r3, [r3, #4]
 810a738:	68fa      	ldr	r2, [r7, #12]
 810a73a:	4313      	orrs	r3, r2
 810a73c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810a73e:	687b      	ldr	r3, [r7, #4]
 810a740:	4a32      	ldr	r2, [pc, #200]	@ (810a80c <TIM_Base_SetConfig+0x120>)
 810a742:	4293      	cmp	r3, r2
 810a744:	d01f      	beq.n	810a786 <TIM_Base_SetConfig+0x9a>
 810a746:	687b      	ldr	r3, [r7, #4]
 810a748:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a74c:	d01b      	beq.n	810a786 <TIM_Base_SetConfig+0x9a>
 810a74e:	687b      	ldr	r3, [r7, #4]
 810a750:	4a2f      	ldr	r2, [pc, #188]	@ (810a810 <TIM_Base_SetConfig+0x124>)
 810a752:	4293      	cmp	r3, r2
 810a754:	d017      	beq.n	810a786 <TIM_Base_SetConfig+0x9a>
 810a756:	687b      	ldr	r3, [r7, #4]
 810a758:	4a2e      	ldr	r2, [pc, #184]	@ (810a814 <TIM_Base_SetConfig+0x128>)
 810a75a:	4293      	cmp	r3, r2
 810a75c:	d013      	beq.n	810a786 <TIM_Base_SetConfig+0x9a>
 810a75e:	687b      	ldr	r3, [r7, #4]
 810a760:	4a2d      	ldr	r2, [pc, #180]	@ (810a818 <TIM_Base_SetConfig+0x12c>)
 810a762:	4293      	cmp	r3, r2
 810a764:	d00f      	beq.n	810a786 <TIM_Base_SetConfig+0x9a>
 810a766:	687b      	ldr	r3, [r7, #4]
 810a768:	4a2c      	ldr	r2, [pc, #176]	@ (810a81c <TIM_Base_SetConfig+0x130>)
 810a76a:	4293      	cmp	r3, r2
 810a76c:	d00b      	beq.n	810a786 <TIM_Base_SetConfig+0x9a>
 810a76e:	687b      	ldr	r3, [r7, #4]
 810a770:	4a2b      	ldr	r2, [pc, #172]	@ (810a820 <TIM_Base_SetConfig+0x134>)
 810a772:	4293      	cmp	r3, r2
 810a774:	d007      	beq.n	810a786 <TIM_Base_SetConfig+0x9a>
 810a776:	687b      	ldr	r3, [r7, #4]
 810a778:	4a2a      	ldr	r2, [pc, #168]	@ (810a824 <TIM_Base_SetConfig+0x138>)
 810a77a:	4293      	cmp	r3, r2
 810a77c:	d003      	beq.n	810a786 <TIM_Base_SetConfig+0x9a>
 810a77e:	687b      	ldr	r3, [r7, #4]
 810a780:	4a29      	ldr	r2, [pc, #164]	@ (810a828 <TIM_Base_SetConfig+0x13c>)
 810a782:	4293      	cmp	r3, r2
 810a784:	d108      	bne.n	810a798 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 810a786:	68fb      	ldr	r3, [r7, #12]
 810a788:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810a78c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 810a78e:	683b      	ldr	r3, [r7, #0]
 810a790:	68db      	ldr	r3, [r3, #12]
 810a792:	68fa      	ldr	r2, [r7, #12]
 810a794:	4313      	orrs	r3, r2
 810a796:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 810a798:	68fb      	ldr	r3, [r7, #12]
 810a79a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 810a79e:	683b      	ldr	r3, [r7, #0]
 810a7a0:	695b      	ldr	r3, [r3, #20]
 810a7a2:	4313      	orrs	r3, r2
 810a7a4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 810a7a6:	683b      	ldr	r3, [r7, #0]
 810a7a8:	689a      	ldr	r2, [r3, #8]
 810a7aa:	687b      	ldr	r3, [r7, #4]
 810a7ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 810a7ae:	683b      	ldr	r3, [r7, #0]
 810a7b0:	681a      	ldr	r2, [r3, #0]
 810a7b2:	687b      	ldr	r3, [r7, #4]
 810a7b4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810a7b6:	687b      	ldr	r3, [r7, #4]
 810a7b8:	4a14      	ldr	r2, [pc, #80]	@ (810a80c <TIM_Base_SetConfig+0x120>)
 810a7ba:	4293      	cmp	r3, r2
 810a7bc:	d00f      	beq.n	810a7de <TIM_Base_SetConfig+0xf2>
 810a7be:	687b      	ldr	r3, [r7, #4]
 810a7c0:	4a16      	ldr	r2, [pc, #88]	@ (810a81c <TIM_Base_SetConfig+0x130>)
 810a7c2:	4293      	cmp	r3, r2
 810a7c4:	d00b      	beq.n	810a7de <TIM_Base_SetConfig+0xf2>
 810a7c6:	687b      	ldr	r3, [r7, #4]
 810a7c8:	4a15      	ldr	r2, [pc, #84]	@ (810a820 <TIM_Base_SetConfig+0x134>)
 810a7ca:	4293      	cmp	r3, r2
 810a7cc:	d007      	beq.n	810a7de <TIM_Base_SetConfig+0xf2>
 810a7ce:	687b      	ldr	r3, [r7, #4]
 810a7d0:	4a14      	ldr	r2, [pc, #80]	@ (810a824 <TIM_Base_SetConfig+0x138>)
 810a7d2:	4293      	cmp	r3, r2
 810a7d4:	d003      	beq.n	810a7de <TIM_Base_SetConfig+0xf2>
 810a7d6:	687b      	ldr	r3, [r7, #4]
 810a7d8:	4a13      	ldr	r2, [pc, #76]	@ (810a828 <TIM_Base_SetConfig+0x13c>)
 810a7da:	4293      	cmp	r3, r2
 810a7dc:	d103      	bne.n	810a7e6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 810a7de:	683b      	ldr	r3, [r7, #0]
 810a7e0:	691a      	ldr	r2, [r3, #16]
 810a7e2:	687b      	ldr	r3, [r7, #4]
 810a7e4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 810a7e6:	687b      	ldr	r3, [r7, #4]
 810a7e8:	681b      	ldr	r3, [r3, #0]
 810a7ea:	f043 0204 	orr.w	r2, r3, #4
 810a7ee:	687b      	ldr	r3, [r7, #4]
 810a7f0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 810a7f2:	687b      	ldr	r3, [r7, #4]
 810a7f4:	2201      	movs	r2, #1
 810a7f6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 810a7f8:	687b      	ldr	r3, [r7, #4]
 810a7fa:	68fa      	ldr	r2, [r7, #12]
 810a7fc:	601a      	str	r2, [r3, #0]
}
 810a7fe:	bf00      	nop
 810a800:	3714      	adds	r7, #20
 810a802:	46bd      	mov	sp, r7
 810a804:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a808:	4770      	bx	lr
 810a80a:	bf00      	nop
 810a80c:	40010000 	.word	0x40010000
 810a810:	40000400 	.word	0x40000400
 810a814:	40000800 	.word	0x40000800
 810a818:	40000c00 	.word	0x40000c00
 810a81c:	40010400 	.word	0x40010400
 810a820:	40014000 	.word	0x40014000
 810a824:	40014400 	.word	0x40014400
 810a828:	40014800 	.word	0x40014800

0810a82c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810a82c:	b480      	push	{r7}
 810a82e:	b087      	sub	sp, #28
 810a830:	af00      	add	r7, sp, #0
 810a832:	6078      	str	r0, [r7, #4]
 810a834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a836:	687b      	ldr	r3, [r7, #4]
 810a838:	6a1b      	ldr	r3, [r3, #32]
 810a83a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810a83c:	687b      	ldr	r3, [r7, #4]
 810a83e:	6a1b      	ldr	r3, [r3, #32]
 810a840:	f023 0201 	bic.w	r2, r3, #1
 810a844:	687b      	ldr	r3, [r7, #4]
 810a846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a848:	687b      	ldr	r3, [r7, #4]
 810a84a:	685b      	ldr	r3, [r3, #4]
 810a84c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810a84e:	687b      	ldr	r3, [r7, #4]
 810a850:	699b      	ldr	r3, [r3, #24]
 810a852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 810a854:	68fb      	ldr	r3, [r7, #12]
 810a856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810a85a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810a85e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 810a860:	68fb      	ldr	r3, [r7, #12]
 810a862:	f023 0303 	bic.w	r3, r3, #3
 810a866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810a868:	683b      	ldr	r3, [r7, #0]
 810a86a:	681b      	ldr	r3, [r3, #0]
 810a86c:	68fa      	ldr	r2, [r7, #12]
 810a86e:	4313      	orrs	r3, r2
 810a870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 810a872:	697b      	ldr	r3, [r7, #20]
 810a874:	f023 0302 	bic.w	r3, r3, #2
 810a878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 810a87a:	683b      	ldr	r3, [r7, #0]
 810a87c:	689b      	ldr	r3, [r3, #8]
 810a87e:	697a      	ldr	r2, [r7, #20]
 810a880:	4313      	orrs	r3, r2
 810a882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 810a884:	687b      	ldr	r3, [r7, #4]
 810a886:	4a2c      	ldr	r2, [pc, #176]	@ (810a938 <TIM_OC1_SetConfig+0x10c>)
 810a888:	4293      	cmp	r3, r2
 810a88a:	d00f      	beq.n	810a8ac <TIM_OC1_SetConfig+0x80>
 810a88c:	687b      	ldr	r3, [r7, #4]
 810a88e:	4a2b      	ldr	r2, [pc, #172]	@ (810a93c <TIM_OC1_SetConfig+0x110>)
 810a890:	4293      	cmp	r3, r2
 810a892:	d00b      	beq.n	810a8ac <TIM_OC1_SetConfig+0x80>
 810a894:	687b      	ldr	r3, [r7, #4]
 810a896:	4a2a      	ldr	r2, [pc, #168]	@ (810a940 <TIM_OC1_SetConfig+0x114>)
 810a898:	4293      	cmp	r3, r2
 810a89a:	d007      	beq.n	810a8ac <TIM_OC1_SetConfig+0x80>
 810a89c:	687b      	ldr	r3, [r7, #4]
 810a89e:	4a29      	ldr	r2, [pc, #164]	@ (810a944 <TIM_OC1_SetConfig+0x118>)
 810a8a0:	4293      	cmp	r3, r2
 810a8a2:	d003      	beq.n	810a8ac <TIM_OC1_SetConfig+0x80>
 810a8a4:	687b      	ldr	r3, [r7, #4]
 810a8a6:	4a28      	ldr	r2, [pc, #160]	@ (810a948 <TIM_OC1_SetConfig+0x11c>)
 810a8a8:	4293      	cmp	r3, r2
 810a8aa:	d10c      	bne.n	810a8c6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 810a8ac:	697b      	ldr	r3, [r7, #20]
 810a8ae:	f023 0308 	bic.w	r3, r3, #8
 810a8b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 810a8b4:	683b      	ldr	r3, [r7, #0]
 810a8b6:	68db      	ldr	r3, [r3, #12]
 810a8b8:	697a      	ldr	r2, [r7, #20]
 810a8ba:	4313      	orrs	r3, r2
 810a8bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 810a8be:	697b      	ldr	r3, [r7, #20]
 810a8c0:	f023 0304 	bic.w	r3, r3, #4
 810a8c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a8c6:	687b      	ldr	r3, [r7, #4]
 810a8c8:	4a1b      	ldr	r2, [pc, #108]	@ (810a938 <TIM_OC1_SetConfig+0x10c>)
 810a8ca:	4293      	cmp	r3, r2
 810a8cc:	d00f      	beq.n	810a8ee <TIM_OC1_SetConfig+0xc2>
 810a8ce:	687b      	ldr	r3, [r7, #4]
 810a8d0:	4a1a      	ldr	r2, [pc, #104]	@ (810a93c <TIM_OC1_SetConfig+0x110>)
 810a8d2:	4293      	cmp	r3, r2
 810a8d4:	d00b      	beq.n	810a8ee <TIM_OC1_SetConfig+0xc2>
 810a8d6:	687b      	ldr	r3, [r7, #4]
 810a8d8:	4a19      	ldr	r2, [pc, #100]	@ (810a940 <TIM_OC1_SetConfig+0x114>)
 810a8da:	4293      	cmp	r3, r2
 810a8dc:	d007      	beq.n	810a8ee <TIM_OC1_SetConfig+0xc2>
 810a8de:	687b      	ldr	r3, [r7, #4]
 810a8e0:	4a18      	ldr	r2, [pc, #96]	@ (810a944 <TIM_OC1_SetConfig+0x118>)
 810a8e2:	4293      	cmp	r3, r2
 810a8e4:	d003      	beq.n	810a8ee <TIM_OC1_SetConfig+0xc2>
 810a8e6:	687b      	ldr	r3, [r7, #4]
 810a8e8:	4a17      	ldr	r2, [pc, #92]	@ (810a948 <TIM_OC1_SetConfig+0x11c>)
 810a8ea:	4293      	cmp	r3, r2
 810a8ec:	d111      	bne.n	810a912 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 810a8ee:	693b      	ldr	r3, [r7, #16]
 810a8f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810a8f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 810a8f6:	693b      	ldr	r3, [r7, #16]
 810a8f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810a8fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 810a8fe:	683b      	ldr	r3, [r7, #0]
 810a900:	695b      	ldr	r3, [r3, #20]
 810a902:	693a      	ldr	r2, [r7, #16]
 810a904:	4313      	orrs	r3, r2
 810a906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 810a908:	683b      	ldr	r3, [r7, #0]
 810a90a:	699b      	ldr	r3, [r3, #24]
 810a90c:	693a      	ldr	r2, [r7, #16]
 810a90e:	4313      	orrs	r3, r2
 810a910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810a912:	687b      	ldr	r3, [r7, #4]
 810a914:	693a      	ldr	r2, [r7, #16]
 810a916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810a918:	687b      	ldr	r3, [r7, #4]
 810a91a:	68fa      	ldr	r2, [r7, #12]
 810a91c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 810a91e:	683b      	ldr	r3, [r7, #0]
 810a920:	685a      	ldr	r2, [r3, #4]
 810a922:	687b      	ldr	r3, [r7, #4]
 810a924:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810a926:	687b      	ldr	r3, [r7, #4]
 810a928:	697a      	ldr	r2, [r7, #20]
 810a92a:	621a      	str	r2, [r3, #32]
}
 810a92c:	bf00      	nop
 810a92e:	371c      	adds	r7, #28
 810a930:	46bd      	mov	sp, r7
 810a932:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a936:	4770      	bx	lr
 810a938:	40010000 	.word	0x40010000
 810a93c:	40010400 	.word	0x40010400
 810a940:	40014000 	.word	0x40014000
 810a944:	40014400 	.word	0x40014400
 810a948:	40014800 	.word	0x40014800

0810a94c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810a94c:	b480      	push	{r7}
 810a94e:	b087      	sub	sp, #28
 810a950:	af00      	add	r7, sp, #0
 810a952:	6078      	str	r0, [r7, #4]
 810a954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810a956:	687b      	ldr	r3, [r7, #4]
 810a958:	6a1b      	ldr	r3, [r3, #32]
 810a95a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810a95c:	687b      	ldr	r3, [r7, #4]
 810a95e:	6a1b      	ldr	r3, [r3, #32]
 810a960:	f023 0210 	bic.w	r2, r3, #16
 810a964:	687b      	ldr	r3, [r7, #4]
 810a966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810a968:	687b      	ldr	r3, [r7, #4]
 810a96a:	685b      	ldr	r3, [r3, #4]
 810a96c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 810a96e:	687b      	ldr	r3, [r7, #4]
 810a970:	699b      	ldr	r3, [r3, #24]
 810a972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 810a974:	68fb      	ldr	r3, [r7, #12]
 810a976:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810a97a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810a97e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 810a980:	68fb      	ldr	r3, [r7, #12]
 810a982:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810a986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810a988:	683b      	ldr	r3, [r7, #0]
 810a98a:	681b      	ldr	r3, [r3, #0]
 810a98c:	021b      	lsls	r3, r3, #8
 810a98e:	68fa      	ldr	r2, [r7, #12]
 810a990:	4313      	orrs	r3, r2
 810a992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 810a994:	697b      	ldr	r3, [r7, #20]
 810a996:	f023 0320 	bic.w	r3, r3, #32
 810a99a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 810a99c:	683b      	ldr	r3, [r7, #0]
 810a99e:	689b      	ldr	r3, [r3, #8]
 810a9a0:	011b      	lsls	r3, r3, #4
 810a9a2:	697a      	ldr	r2, [r7, #20]
 810a9a4:	4313      	orrs	r3, r2
 810a9a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 810a9a8:	687b      	ldr	r3, [r7, #4]
 810a9aa:	4a28      	ldr	r2, [pc, #160]	@ (810aa4c <TIM_OC2_SetConfig+0x100>)
 810a9ac:	4293      	cmp	r3, r2
 810a9ae:	d003      	beq.n	810a9b8 <TIM_OC2_SetConfig+0x6c>
 810a9b0:	687b      	ldr	r3, [r7, #4]
 810a9b2:	4a27      	ldr	r2, [pc, #156]	@ (810aa50 <TIM_OC2_SetConfig+0x104>)
 810a9b4:	4293      	cmp	r3, r2
 810a9b6:	d10d      	bne.n	810a9d4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 810a9b8:	697b      	ldr	r3, [r7, #20]
 810a9ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810a9be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 810a9c0:	683b      	ldr	r3, [r7, #0]
 810a9c2:	68db      	ldr	r3, [r3, #12]
 810a9c4:	011b      	lsls	r3, r3, #4
 810a9c6:	697a      	ldr	r2, [r7, #20]
 810a9c8:	4313      	orrs	r3, r2
 810a9ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 810a9cc:	697b      	ldr	r3, [r7, #20]
 810a9ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810a9d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810a9d4:	687b      	ldr	r3, [r7, #4]
 810a9d6:	4a1d      	ldr	r2, [pc, #116]	@ (810aa4c <TIM_OC2_SetConfig+0x100>)
 810a9d8:	4293      	cmp	r3, r2
 810a9da:	d00f      	beq.n	810a9fc <TIM_OC2_SetConfig+0xb0>
 810a9dc:	687b      	ldr	r3, [r7, #4]
 810a9de:	4a1c      	ldr	r2, [pc, #112]	@ (810aa50 <TIM_OC2_SetConfig+0x104>)
 810a9e0:	4293      	cmp	r3, r2
 810a9e2:	d00b      	beq.n	810a9fc <TIM_OC2_SetConfig+0xb0>
 810a9e4:	687b      	ldr	r3, [r7, #4]
 810a9e6:	4a1b      	ldr	r2, [pc, #108]	@ (810aa54 <TIM_OC2_SetConfig+0x108>)
 810a9e8:	4293      	cmp	r3, r2
 810a9ea:	d007      	beq.n	810a9fc <TIM_OC2_SetConfig+0xb0>
 810a9ec:	687b      	ldr	r3, [r7, #4]
 810a9ee:	4a1a      	ldr	r2, [pc, #104]	@ (810aa58 <TIM_OC2_SetConfig+0x10c>)
 810a9f0:	4293      	cmp	r3, r2
 810a9f2:	d003      	beq.n	810a9fc <TIM_OC2_SetConfig+0xb0>
 810a9f4:	687b      	ldr	r3, [r7, #4]
 810a9f6:	4a19      	ldr	r2, [pc, #100]	@ (810aa5c <TIM_OC2_SetConfig+0x110>)
 810a9f8:	4293      	cmp	r3, r2
 810a9fa:	d113      	bne.n	810aa24 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 810a9fc:	693b      	ldr	r3, [r7, #16]
 810a9fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810aa02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 810aa04:	693b      	ldr	r3, [r7, #16]
 810aa06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810aa0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 810aa0c:	683b      	ldr	r3, [r7, #0]
 810aa0e:	695b      	ldr	r3, [r3, #20]
 810aa10:	009b      	lsls	r3, r3, #2
 810aa12:	693a      	ldr	r2, [r7, #16]
 810aa14:	4313      	orrs	r3, r2
 810aa16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 810aa18:	683b      	ldr	r3, [r7, #0]
 810aa1a:	699b      	ldr	r3, [r3, #24]
 810aa1c:	009b      	lsls	r3, r3, #2
 810aa1e:	693a      	ldr	r2, [r7, #16]
 810aa20:	4313      	orrs	r3, r2
 810aa22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810aa24:	687b      	ldr	r3, [r7, #4]
 810aa26:	693a      	ldr	r2, [r7, #16]
 810aa28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 810aa2a:	687b      	ldr	r3, [r7, #4]
 810aa2c:	68fa      	ldr	r2, [r7, #12]
 810aa2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 810aa30:	683b      	ldr	r3, [r7, #0]
 810aa32:	685a      	ldr	r2, [r3, #4]
 810aa34:	687b      	ldr	r3, [r7, #4]
 810aa36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810aa38:	687b      	ldr	r3, [r7, #4]
 810aa3a:	697a      	ldr	r2, [r7, #20]
 810aa3c:	621a      	str	r2, [r3, #32]
}
 810aa3e:	bf00      	nop
 810aa40:	371c      	adds	r7, #28
 810aa42:	46bd      	mov	sp, r7
 810aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aa48:	4770      	bx	lr
 810aa4a:	bf00      	nop
 810aa4c:	40010000 	.word	0x40010000
 810aa50:	40010400 	.word	0x40010400
 810aa54:	40014000 	.word	0x40014000
 810aa58:	40014400 	.word	0x40014400
 810aa5c:	40014800 	.word	0x40014800

0810aa60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810aa60:	b480      	push	{r7}
 810aa62:	b087      	sub	sp, #28
 810aa64:	af00      	add	r7, sp, #0
 810aa66:	6078      	str	r0, [r7, #4]
 810aa68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810aa6a:	687b      	ldr	r3, [r7, #4]
 810aa6c:	6a1b      	ldr	r3, [r3, #32]
 810aa6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810aa70:	687b      	ldr	r3, [r7, #4]
 810aa72:	6a1b      	ldr	r3, [r3, #32]
 810aa74:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810aa78:	687b      	ldr	r3, [r7, #4]
 810aa7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810aa7c:	687b      	ldr	r3, [r7, #4]
 810aa7e:	685b      	ldr	r3, [r3, #4]
 810aa80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810aa82:	687b      	ldr	r3, [r7, #4]
 810aa84:	69db      	ldr	r3, [r3, #28]
 810aa86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 810aa88:	68fb      	ldr	r3, [r7, #12]
 810aa8a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810aa8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810aa92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 810aa94:	68fb      	ldr	r3, [r7, #12]
 810aa96:	f023 0303 	bic.w	r3, r3, #3
 810aa9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810aa9c:	683b      	ldr	r3, [r7, #0]
 810aa9e:	681b      	ldr	r3, [r3, #0]
 810aaa0:	68fa      	ldr	r2, [r7, #12]
 810aaa2:	4313      	orrs	r3, r2
 810aaa4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 810aaa6:	697b      	ldr	r3, [r7, #20]
 810aaa8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 810aaac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 810aaae:	683b      	ldr	r3, [r7, #0]
 810aab0:	689b      	ldr	r3, [r3, #8]
 810aab2:	021b      	lsls	r3, r3, #8
 810aab4:	697a      	ldr	r2, [r7, #20]
 810aab6:	4313      	orrs	r3, r2
 810aab8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 810aaba:	687b      	ldr	r3, [r7, #4]
 810aabc:	4a27      	ldr	r2, [pc, #156]	@ (810ab5c <TIM_OC3_SetConfig+0xfc>)
 810aabe:	4293      	cmp	r3, r2
 810aac0:	d003      	beq.n	810aaca <TIM_OC3_SetConfig+0x6a>
 810aac2:	687b      	ldr	r3, [r7, #4]
 810aac4:	4a26      	ldr	r2, [pc, #152]	@ (810ab60 <TIM_OC3_SetConfig+0x100>)
 810aac6:	4293      	cmp	r3, r2
 810aac8:	d10d      	bne.n	810aae6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 810aaca:	697b      	ldr	r3, [r7, #20]
 810aacc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 810aad0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 810aad2:	683b      	ldr	r3, [r7, #0]
 810aad4:	68db      	ldr	r3, [r3, #12]
 810aad6:	021b      	lsls	r3, r3, #8
 810aad8:	697a      	ldr	r2, [r7, #20]
 810aada:	4313      	orrs	r3, r2
 810aadc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 810aade:	697b      	ldr	r3, [r7, #20]
 810aae0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 810aae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810aae6:	687b      	ldr	r3, [r7, #4]
 810aae8:	4a1c      	ldr	r2, [pc, #112]	@ (810ab5c <TIM_OC3_SetConfig+0xfc>)
 810aaea:	4293      	cmp	r3, r2
 810aaec:	d00f      	beq.n	810ab0e <TIM_OC3_SetConfig+0xae>
 810aaee:	687b      	ldr	r3, [r7, #4]
 810aaf0:	4a1b      	ldr	r2, [pc, #108]	@ (810ab60 <TIM_OC3_SetConfig+0x100>)
 810aaf2:	4293      	cmp	r3, r2
 810aaf4:	d00b      	beq.n	810ab0e <TIM_OC3_SetConfig+0xae>
 810aaf6:	687b      	ldr	r3, [r7, #4]
 810aaf8:	4a1a      	ldr	r2, [pc, #104]	@ (810ab64 <TIM_OC3_SetConfig+0x104>)
 810aafa:	4293      	cmp	r3, r2
 810aafc:	d007      	beq.n	810ab0e <TIM_OC3_SetConfig+0xae>
 810aafe:	687b      	ldr	r3, [r7, #4]
 810ab00:	4a19      	ldr	r2, [pc, #100]	@ (810ab68 <TIM_OC3_SetConfig+0x108>)
 810ab02:	4293      	cmp	r3, r2
 810ab04:	d003      	beq.n	810ab0e <TIM_OC3_SetConfig+0xae>
 810ab06:	687b      	ldr	r3, [r7, #4]
 810ab08:	4a18      	ldr	r2, [pc, #96]	@ (810ab6c <TIM_OC3_SetConfig+0x10c>)
 810ab0a:	4293      	cmp	r3, r2
 810ab0c:	d113      	bne.n	810ab36 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 810ab0e:	693b      	ldr	r3, [r7, #16]
 810ab10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810ab14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 810ab16:	693b      	ldr	r3, [r7, #16]
 810ab18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810ab1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 810ab1e:	683b      	ldr	r3, [r7, #0]
 810ab20:	695b      	ldr	r3, [r3, #20]
 810ab22:	011b      	lsls	r3, r3, #4
 810ab24:	693a      	ldr	r2, [r7, #16]
 810ab26:	4313      	orrs	r3, r2
 810ab28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 810ab2a:	683b      	ldr	r3, [r7, #0]
 810ab2c:	699b      	ldr	r3, [r3, #24]
 810ab2e:	011b      	lsls	r3, r3, #4
 810ab30:	693a      	ldr	r2, [r7, #16]
 810ab32:	4313      	orrs	r3, r2
 810ab34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810ab36:	687b      	ldr	r3, [r7, #4]
 810ab38:	693a      	ldr	r2, [r7, #16]
 810ab3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810ab3c:	687b      	ldr	r3, [r7, #4]
 810ab3e:	68fa      	ldr	r2, [r7, #12]
 810ab40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 810ab42:	683b      	ldr	r3, [r7, #0]
 810ab44:	685a      	ldr	r2, [r3, #4]
 810ab46:	687b      	ldr	r3, [r7, #4]
 810ab48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810ab4a:	687b      	ldr	r3, [r7, #4]
 810ab4c:	697a      	ldr	r2, [r7, #20]
 810ab4e:	621a      	str	r2, [r3, #32]
}
 810ab50:	bf00      	nop
 810ab52:	371c      	adds	r7, #28
 810ab54:	46bd      	mov	sp, r7
 810ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab5a:	4770      	bx	lr
 810ab5c:	40010000 	.word	0x40010000
 810ab60:	40010400 	.word	0x40010400
 810ab64:	40014000 	.word	0x40014000
 810ab68:	40014400 	.word	0x40014400
 810ab6c:	40014800 	.word	0x40014800

0810ab70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 810ab70:	b480      	push	{r7}
 810ab72:	b087      	sub	sp, #28
 810ab74:	af00      	add	r7, sp, #0
 810ab76:	6078      	str	r0, [r7, #4]
 810ab78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810ab7a:	687b      	ldr	r3, [r7, #4]
 810ab7c:	6a1b      	ldr	r3, [r3, #32]
 810ab7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810ab80:	687b      	ldr	r3, [r7, #4]
 810ab82:	6a1b      	ldr	r3, [r3, #32]
 810ab84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810ab88:	687b      	ldr	r3, [r7, #4]
 810ab8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810ab8c:	687b      	ldr	r3, [r7, #4]
 810ab8e:	685b      	ldr	r3, [r3, #4]
 810ab90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 810ab92:	687b      	ldr	r3, [r7, #4]
 810ab94:	69db      	ldr	r3, [r3, #28]
 810ab96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 810ab98:	68fb      	ldr	r3, [r7, #12]
 810ab9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810ab9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810aba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 810aba4:	68fb      	ldr	r3, [r7, #12]
 810aba6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810abaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810abac:	683b      	ldr	r3, [r7, #0]
 810abae:	681b      	ldr	r3, [r3, #0]
 810abb0:	021b      	lsls	r3, r3, #8
 810abb2:	68fa      	ldr	r2, [r7, #12]
 810abb4:	4313      	orrs	r3, r2
 810abb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 810abb8:	693b      	ldr	r3, [r7, #16]
 810abba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 810abbe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810abc0:	683b      	ldr	r3, [r7, #0]
 810abc2:	689b      	ldr	r3, [r3, #8]
 810abc4:	031b      	lsls	r3, r3, #12
 810abc6:	693a      	ldr	r2, [r7, #16]
 810abc8:	4313      	orrs	r3, r2
 810abca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810abcc:	687b      	ldr	r3, [r7, #4]
 810abce:	4a18      	ldr	r2, [pc, #96]	@ (810ac30 <TIM_OC4_SetConfig+0xc0>)
 810abd0:	4293      	cmp	r3, r2
 810abd2:	d00f      	beq.n	810abf4 <TIM_OC4_SetConfig+0x84>
 810abd4:	687b      	ldr	r3, [r7, #4]
 810abd6:	4a17      	ldr	r2, [pc, #92]	@ (810ac34 <TIM_OC4_SetConfig+0xc4>)
 810abd8:	4293      	cmp	r3, r2
 810abda:	d00b      	beq.n	810abf4 <TIM_OC4_SetConfig+0x84>
 810abdc:	687b      	ldr	r3, [r7, #4]
 810abde:	4a16      	ldr	r2, [pc, #88]	@ (810ac38 <TIM_OC4_SetConfig+0xc8>)
 810abe0:	4293      	cmp	r3, r2
 810abe2:	d007      	beq.n	810abf4 <TIM_OC4_SetConfig+0x84>
 810abe4:	687b      	ldr	r3, [r7, #4]
 810abe6:	4a15      	ldr	r2, [pc, #84]	@ (810ac3c <TIM_OC4_SetConfig+0xcc>)
 810abe8:	4293      	cmp	r3, r2
 810abea:	d003      	beq.n	810abf4 <TIM_OC4_SetConfig+0x84>
 810abec:	687b      	ldr	r3, [r7, #4]
 810abee:	4a14      	ldr	r2, [pc, #80]	@ (810ac40 <TIM_OC4_SetConfig+0xd0>)
 810abf0:	4293      	cmp	r3, r2
 810abf2:	d109      	bne.n	810ac08 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 810abf4:	697b      	ldr	r3, [r7, #20]
 810abf6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 810abfa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 810abfc:	683b      	ldr	r3, [r7, #0]
 810abfe:	695b      	ldr	r3, [r3, #20]
 810ac00:	019b      	lsls	r3, r3, #6
 810ac02:	697a      	ldr	r2, [r7, #20]
 810ac04:	4313      	orrs	r3, r2
 810ac06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810ac08:	687b      	ldr	r3, [r7, #4]
 810ac0a:	697a      	ldr	r2, [r7, #20]
 810ac0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 810ac0e:	687b      	ldr	r3, [r7, #4]
 810ac10:	68fa      	ldr	r2, [r7, #12]
 810ac12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 810ac14:	683b      	ldr	r3, [r7, #0]
 810ac16:	685a      	ldr	r2, [r3, #4]
 810ac18:	687b      	ldr	r3, [r7, #4]
 810ac1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810ac1c:	687b      	ldr	r3, [r7, #4]
 810ac1e:	693a      	ldr	r2, [r7, #16]
 810ac20:	621a      	str	r2, [r3, #32]
}
 810ac22:	bf00      	nop
 810ac24:	371c      	adds	r7, #28
 810ac26:	46bd      	mov	sp, r7
 810ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ac2c:	4770      	bx	lr
 810ac2e:	bf00      	nop
 810ac30:	40010000 	.word	0x40010000
 810ac34:	40010400 	.word	0x40010400
 810ac38:	40014000 	.word	0x40014000
 810ac3c:	40014400 	.word	0x40014400
 810ac40:	40014800 	.word	0x40014800

0810ac44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810ac44:	b480      	push	{r7}
 810ac46:	b087      	sub	sp, #28
 810ac48:	af00      	add	r7, sp, #0
 810ac4a:	6078      	str	r0, [r7, #4]
 810ac4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810ac4e:	687b      	ldr	r3, [r7, #4]
 810ac50:	6a1b      	ldr	r3, [r3, #32]
 810ac52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 810ac54:	687b      	ldr	r3, [r7, #4]
 810ac56:	6a1b      	ldr	r3, [r3, #32]
 810ac58:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810ac5c:	687b      	ldr	r3, [r7, #4]
 810ac5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810ac60:	687b      	ldr	r3, [r7, #4]
 810ac62:	685b      	ldr	r3, [r3, #4]
 810ac64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810ac66:	687b      	ldr	r3, [r7, #4]
 810ac68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ac6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 810ac6c:	68fb      	ldr	r3, [r7, #12]
 810ac6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810ac72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810ac76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 810ac78:	683b      	ldr	r3, [r7, #0]
 810ac7a:	681b      	ldr	r3, [r3, #0]
 810ac7c:	68fa      	ldr	r2, [r7, #12]
 810ac7e:	4313      	orrs	r3, r2
 810ac80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810ac82:	693b      	ldr	r3, [r7, #16]
 810ac84:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 810ac88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 810ac8a:	683b      	ldr	r3, [r7, #0]
 810ac8c:	689b      	ldr	r3, [r3, #8]
 810ac8e:	041b      	lsls	r3, r3, #16
 810ac90:	693a      	ldr	r2, [r7, #16]
 810ac92:	4313      	orrs	r3, r2
 810ac94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810ac96:	687b      	ldr	r3, [r7, #4]
 810ac98:	4a17      	ldr	r2, [pc, #92]	@ (810acf8 <TIM_OC5_SetConfig+0xb4>)
 810ac9a:	4293      	cmp	r3, r2
 810ac9c:	d00f      	beq.n	810acbe <TIM_OC5_SetConfig+0x7a>
 810ac9e:	687b      	ldr	r3, [r7, #4]
 810aca0:	4a16      	ldr	r2, [pc, #88]	@ (810acfc <TIM_OC5_SetConfig+0xb8>)
 810aca2:	4293      	cmp	r3, r2
 810aca4:	d00b      	beq.n	810acbe <TIM_OC5_SetConfig+0x7a>
 810aca6:	687b      	ldr	r3, [r7, #4]
 810aca8:	4a15      	ldr	r2, [pc, #84]	@ (810ad00 <TIM_OC5_SetConfig+0xbc>)
 810acaa:	4293      	cmp	r3, r2
 810acac:	d007      	beq.n	810acbe <TIM_OC5_SetConfig+0x7a>
 810acae:	687b      	ldr	r3, [r7, #4]
 810acb0:	4a14      	ldr	r2, [pc, #80]	@ (810ad04 <TIM_OC5_SetConfig+0xc0>)
 810acb2:	4293      	cmp	r3, r2
 810acb4:	d003      	beq.n	810acbe <TIM_OC5_SetConfig+0x7a>
 810acb6:	687b      	ldr	r3, [r7, #4]
 810acb8:	4a13      	ldr	r2, [pc, #76]	@ (810ad08 <TIM_OC5_SetConfig+0xc4>)
 810acba:	4293      	cmp	r3, r2
 810acbc:	d109      	bne.n	810acd2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 810acbe:	697b      	ldr	r3, [r7, #20]
 810acc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 810acc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810acc6:	683b      	ldr	r3, [r7, #0]
 810acc8:	695b      	ldr	r3, [r3, #20]
 810acca:	021b      	lsls	r3, r3, #8
 810accc:	697a      	ldr	r2, [r7, #20]
 810acce:	4313      	orrs	r3, r2
 810acd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810acd2:	687b      	ldr	r3, [r7, #4]
 810acd4:	697a      	ldr	r2, [r7, #20]
 810acd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810acd8:	687b      	ldr	r3, [r7, #4]
 810acda:	68fa      	ldr	r2, [r7, #12]
 810acdc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 810acde:	683b      	ldr	r3, [r7, #0]
 810ace0:	685a      	ldr	r2, [r3, #4]
 810ace2:	687b      	ldr	r3, [r7, #4]
 810ace4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810ace6:	687b      	ldr	r3, [r7, #4]
 810ace8:	693a      	ldr	r2, [r7, #16]
 810acea:	621a      	str	r2, [r3, #32]
}
 810acec:	bf00      	nop
 810acee:	371c      	adds	r7, #28
 810acf0:	46bd      	mov	sp, r7
 810acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810acf6:	4770      	bx	lr
 810acf8:	40010000 	.word	0x40010000
 810acfc:	40010400 	.word	0x40010400
 810ad00:	40014000 	.word	0x40014000
 810ad04:	40014400 	.word	0x40014400
 810ad08:	40014800 	.word	0x40014800

0810ad0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 810ad0c:	b480      	push	{r7}
 810ad0e:	b087      	sub	sp, #28
 810ad10:	af00      	add	r7, sp, #0
 810ad12:	6078      	str	r0, [r7, #4]
 810ad14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 810ad16:	687b      	ldr	r3, [r7, #4]
 810ad18:	6a1b      	ldr	r3, [r3, #32]
 810ad1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 810ad1c:	687b      	ldr	r3, [r7, #4]
 810ad1e:	6a1b      	ldr	r3, [r3, #32]
 810ad20:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 810ad24:	687b      	ldr	r3, [r7, #4]
 810ad26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810ad28:	687b      	ldr	r3, [r7, #4]
 810ad2a:	685b      	ldr	r3, [r3, #4]
 810ad2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 810ad2e:	687b      	ldr	r3, [r7, #4]
 810ad30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810ad32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 810ad34:	68fb      	ldr	r3, [r7, #12]
 810ad36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 810ad3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 810ad3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 810ad40:	683b      	ldr	r3, [r7, #0]
 810ad42:	681b      	ldr	r3, [r3, #0]
 810ad44:	021b      	lsls	r3, r3, #8
 810ad46:	68fa      	ldr	r2, [r7, #12]
 810ad48:	4313      	orrs	r3, r2
 810ad4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 810ad4c:	693b      	ldr	r3, [r7, #16]
 810ad4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810ad52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 810ad54:	683b      	ldr	r3, [r7, #0]
 810ad56:	689b      	ldr	r3, [r3, #8]
 810ad58:	051b      	lsls	r3, r3, #20
 810ad5a:	693a      	ldr	r2, [r7, #16]
 810ad5c:	4313      	orrs	r3, r2
 810ad5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810ad60:	687b      	ldr	r3, [r7, #4]
 810ad62:	4a18      	ldr	r2, [pc, #96]	@ (810adc4 <TIM_OC6_SetConfig+0xb8>)
 810ad64:	4293      	cmp	r3, r2
 810ad66:	d00f      	beq.n	810ad88 <TIM_OC6_SetConfig+0x7c>
 810ad68:	687b      	ldr	r3, [r7, #4]
 810ad6a:	4a17      	ldr	r2, [pc, #92]	@ (810adc8 <TIM_OC6_SetConfig+0xbc>)
 810ad6c:	4293      	cmp	r3, r2
 810ad6e:	d00b      	beq.n	810ad88 <TIM_OC6_SetConfig+0x7c>
 810ad70:	687b      	ldr	r3, [r7, #4]
 810ad72:	4a16      	ldr	r2, [pc, #88]	@ (810adcc <TIM_OC6_SetConfig+0xc0>)
 810ad74:	4293      	cmp	r3, r2
 810ad76:	d007      	beq.n	810ad88 <TIM_OC6_SetConfig+0x7c>
 810ad78:	687b      	ldr	r3, [r7, #4]
 810ad7a:	4a15      	ldr	r2, [pc, #84]	@ (810add0 <TIM_OC6_SetConfig+0xc4>)
 810ad7c:	4293      	cmp	r3, r2
 810ad7e:	d003      	beq.n	810ad88 <TIM_OC6_SetConfig+0x7c>
 810ad80:	687b      	ldr	r3, [r7, #4]
 810ad82:	4a14      	ldr	r2, [pc, #80]	@ (810add4 <TIM_OC6_SetConfig+0xc8>)
 810ad84:	4293      	cmp	r3, r2
 810ad86:	d109      	bne.n	810ad9c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810ad88:	697b      	ldr	r3, [r7, #20]
 810ad8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 810ad8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 810ad90:	683b      	ldr	r3, [r7, #0]
 810ad92:	695b      	ldr	r3, [r3, #20]
 810ad94:	029b      	lsls	r3, r3, #10
 810ad96:	697a      	ldr	r2, [r7, #20]
 810ad98:	4313      	orrs	r3, r2
 810ad9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810ad9c:	687b      	ldr	r3, [r7, #4]
 810ad9e:	697a      	ldr	r2, [r7, #20]
 810ada0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 810ada2:	687b      	ldr	r3, [r7, #4]
 810ada4:	68fa      	ldr	r2, [r7, #12]
 810ada6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810ada8:	683b      	ldr	r3, [r7, #0]
 810adaa:	685a      	ldr	r2, [r3, #4]
 810adac:	687b      	ldr	r3, [r7, #4]
 810adae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810adb0:	687b      	ldr	r3, [r7, #4]
 810adb2:	693a      	ldr	r2, [r7, #16]
 810adb4:	621a      	str	r2, [r3, #32]
}
 810adb6:	bf00      	nop
 810adb8:	371c      	adds	r7, #28
 810adba:	46bd      	mov	sp, r7
 810adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810adc0:	4770      	bx	lr
 810adc2:	bf00      	nop
 810adc4:	40010000 	.word	0x40010000
 810adc8:	40010400 	.word	0x40010400
 810adcc:	40014000 	.word	0x40014000
 810add0:	40014400 	.word	0x40014400
 810add4:	40014800 	.word	0x40014800

0810add8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 810add8:	b480      	push	{r7}
 810adda:	b087      	sub	sp, #28
 810addc:	af00      	add	r7, sp, #0
 810adde:	60f8      	str	r0, [r7, #12]
 810ade0:	60b9      	str	r1, [r7, #8]
 810ade2:	607a      	str	r2, [r7, #4]
 810ade4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 810ade6:	68fb      	ldr	r3, [r7, #12]
 810ade8:	6a1b      	ldr	r3, [r3, #32]
 810adea:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810adec:	68fb      	ldr	r3, [r7, #12]
 810adee:	6a1b      	ldr	r3, [r3, #32]
 810adf0:	f023 0201 	bic.w	r2, r3, #1
 810adf4:	68fb      	ldr	r3, [r7, #12]
 810adf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810adf8:	68fb      	ldr	r3, [r7, #12]
 810adfa:	699b      	ldr	r3, [r3, #24]
 810adfc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 810adfe:	68fb      	ldr	r3, [r7, #12]
 810ae00:	4a28      	ldr	r2, [pc, #160]	@ (810aea4 <TIM_TI1_SetConfig+0xcc>)
 810ae02:	4293      	cmp	r3, r2
 810ae04:	d01b      	beq.n	810ae3e <TIM_TI1_SetConfig+0x66>
 810ae06:	68fb      	ldr	r3, [r7, #12]
 810ae08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810ae0c:	d017      	beq.n	810ae3e <TIM_TI1_SetConfig+0x66>
 810ae0e:	68fb      	ldr	r3, [r7, #12]
 810ae10:	4a25      	ldr	r2, [pc, #148]	@ (810aea8 <TIM_TI1_SetConfig+0xd0>)
 810ae12:	4293      	cmp	r3, r2
 810ae14:	d013      	beq.n	810ae3e <TIM_TI1_SetConfig+0x66>
 810ae16:	68fb      	ldr	r3, [r7, #12]
 810ae18:	4a24      	ldr	r2, [pc, #144]	@ (810aeac <TIM_TI1_SetConfig+0xd4>)
 810ae1a:	4293      	cmp	r3, r2
 810ae1c:	d00f      	beq.n	810ae3e <TIM_TI1_SetConfig+0x66>
 810ae1e:	68fb      	ldr	r3, [r7, #12]
 810ae20:	4a23      	ldr	r2, [pc, #140]	@ (810aeb0 <TIM_TI1_SetConfig+0xd8>)
 810ae22:	4293      	cmp	r3, r2
 810ae24:	d00b      	beq.n	810ae3e <TIM_TI1_SetConfig+0x66>
 810ae26:	68fb      	ldr	r3, [r7, #12]
 810ae28:	4a22      	ldr	r2, [pc, #136]	@ (810aeb4 <TIM_TI1_SetConfig+0xdc>)
 810ae2a:	4293      	cmp	r3, r2
 810ae2c:	d007      	beq.n	810ae3e <TIM_TI1_SetConfig+0x66>
 810ae2e:	68fb      	ldr	r3, [r7, #12]
 810ae30:	4a21      	ldr	r2, [pc, #132]	@ (810aeb8 <TIM_TI1_SetConfig+0xe0>)
 810ae32:	4293      	cmp	r3, r2
 810ae34:	d003      	beq.n	810ae3e <TIM_TI1_SetConfig+0x66>
 810ae36:	68fb      	ldr	r3, [r7, #12]
 810ae38:	4a20      	ldr	r2, [pc, #128]	@ (810aebc <TIM_TI1_SetConfig+0xe4>)
 810ae3a:	4293      	cmp	r3, r2
 810ae3c:	d101      	bne.n	810ae42 <TIM_TI1_SetConfig+0x6a>
 810ae3e:	2301      	movs	r3, #1
 810ae40:	e000      	b.n	810ae44 <TIM_TI1_SetConfig+0x6c>
 810ae42:	2300      	movs	r3, #0
 810ae44:	2b00      	cmp	r3, #0
 810ae46:	d008      	beq.n	810ae5a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 810ae48:	697b      	ldr	r3, [r7, #20]
 810ae4a:	f023 0303 	bic.w	r3, r3, #3
 810ae4e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 810ae50:	697a      	ldr	r2, [r7, #20]
 810ae52:	687b      	ldr	r3, [r7, #4]
 810ae54:	4313      	orrs	r3, r2
 810ae56:	617b      	str	r3, [r7, #20]
 810ae58:	e003      	b.n	810ae62 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 810ae5a:	697b      	ldr	r3, [r7, #20]
 810ae5c:	f043 0301 	orr.w	r3, r3, #1
 810ae60:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810ae62:	697b      	ldr	r3, [r7, #20]
 810ae64:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810ae68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 810ae6a:	683b      	ldr	r3, [r7, #0]
 810ae6c:	011b      	lsls	r3, r3, #4
 810ae6e:	b2db      	uxtb	r3, r3
 810ae70:	697a      	ldr	r2, [r7, #20]
 810ae72:	4313      	orrs	r3, r2
 810ae74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810ae76:	693b      	ldr	r3, [r7, #16]
 810ae78:	f023 030a 	bic.w	r3, r3, #10
 810ae7c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 810ae7e:	68bb      	ldr	r3, [r7, #8]
 810ae80:	f003 030a 	and.w	r3, r3, #10
 810ae84:	693a      	ldr	r2, [r7, #16]
 810ae86:	4313      	orrs	r3, r2
 810ae88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810ae8a:	68fb      	ldr	r3, [r7, #12]
 810ae8c:	697a      	ldr	r2, [r7, #20]
 810ae8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810ae90:	68fb      	ldr	r3, [r7, #12]
 810ae92:	693a      	ldr	r2, [r7, #16]
 810ae94:	621a      	str	r2, [r3, #32]
}
 810ae96:	bf00      	nop
 810ae98:	371c      	adds	r7, #28
 810ae9a:	46bd      	mov	sp, r7
 810ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810aea0:	4770      	bx	lr
 810aea2:	bf00      	nop
 810aea4:	40010000 	.word	0x40010000
 810aea8:	40000400 	.word	0x40000400
 810aeac:	40000800 	.word	0x40000800
 810aeb0:	40000c00 	.word	0x40000c00
 810aeb4:	40010400 	.word	0x40010400
 810aeb8:	40001800 	.word	0x40001800
 810aebc:	40014000 	.word	0x40014000

0810aec0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810aec0:	b480      	push	{r7}
 810aec2:	b087      	sub	sp, #28
 810aec4:	af00      	add	r7, sp, #0
 810aec6:	60f8      	str	r0, [r7, #12]
 810aec8:	60b9      	str	r1, [r7, #8]
 810aeca:	607a      	str	r2, [r7, #4]
 810aecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 810aece:	68fb      	ldr	r3, [r7, #12]
 810aed0:	6a1b      	ldr	r3, [r3, #32]
 810aed2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 810aed4:	68fb      	ldr	r3, [r7, #12]
 810aed6:	6a1b      	ldr	r3, [r3, #32]
 810aed8:	f023 0210 	bic.w	r2, r3, #16
 810aedc:	68fb      	ldr	r3, [r7, #12]
 810aede:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810aee0:	68fb      	ldr	r3, [r7, #12]
 810aee2:	699b      	ldr	r3, [r3, #24]
 810aee4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 810aee6:	693b      	ldr	r3, [r7, #16]
 810aee8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810aeec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 810aeee:	687b      	ldr	r3, [r7, #4]
 810aef0:	021b      	lsls	r3, r3, #8
 810aef2:	693a      	ldr	r2, [r7, #16]
 810aef4:	4313      	orrs	r3, r2
 810aef6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 810aef8:	693b      	ldr	r3, [r7, #16]
 810aefa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810aefe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 810af00:	683b      	ldr	r3, [r7, #0]
 810af02:	031b      	lsls	r3, r3, #12
 810af04:	b29b      	uxth	r3, r3
 810af06:	693a      	ldr	r2, [r7, #16]
 810af08:	4313      	orrs	r3, r2
 810af0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 810af0c:	697b      	ldr	r3, [r7, #20]
 810af0e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 810af12:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 810af14:	68bb      	ldr	r3, [r7, #8]
 810af16:	011b      	lsls	r3, r3, #4
 810af18:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 810af1c:	697a      	ldr	r2, [r7, #20]
 810af1e:	4313      	orrs	r3, r2
 810af20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 810af22:	68fb      	ldr	r3, [r7, #12]
 810af24:	693a      	ldr	r2, [r7, #16]
 810af26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 810af28:	68fb      	ldr	r3, [r7, #12]
 810af2a:	697a      	ldr	r2, [r7, #20]
 810af2c:	621a      	str	r2, [r3, #32]
}
 810af2e:	bf00      	nop
 810af30:	371c      	adds	r7, #28
 810af32:	46bd      	mov	sp, r7
 810af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af38:	4770      	bx	lr

0810af3a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810af3a:	b480      	push	{r7}
 810af3c:	b087      	sub	sp, #28
 810af3e:	af00      	add	r7, sp, #0
 810af40:	60f8      	str	r0, [r7, #12]
 810af42:	60b9      	str	r1, [r7, #8]
 810af44:	607a      	str	r2, [r7, #4]
 810af46:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 810af48:	68fb      	ldr	r3, [r7, #12]
 810af4a:	6a1b      	ldr	r3, [r3, #32]
 810af4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 810af4e:	68fb      	ldr	r3, [r7, #12]
 810af50:	6a1b      	ldr	r3, [r3, #32]
 810af52:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 810af56:	68fb      	ldr	r3, [r7, #12]
 810af58:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 810af5a:	68fb      	ldr	r3, [r7, #12]
 810af5c:	69db      	ldr	r3, [r3, #28]
 810af5e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 810af60:	693b      	ldr	r3, [r7, #16]
 810af62:	f023 0303 	bic.w	r3, r3, #3
 810af66:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 810af68:	693a      	ldr	r2, [r7, #16]
 810af6a:	687b      	ldr	r3, [r7, #4]
 810af6c:	4313      	orrs	r3, r2
 810af6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 810af70:	693b      	ldr	r3, [r7, #16]
 810af72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 810af76:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 810af78:	683b      	ldr	r3, [r7, #0]
 810af7a:	011b      	lsls	r3, r3, #4
 810af7c:	b2db      	uxtb	r3, r3
 810af7e:	693a      	ldr	r2, [r7, #16]
 810af80:	4313      	orrs	r3, r2
 810af82:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 810af84:	697b      	ldr	r3, [r7, #20]
 810af86:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 810af8a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 810af8c:	68bb      	ldr	r3, [r7, #8]
 810af8e:	021b      	lsls	r3, r3, #8
 810af90:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 810af94:	697a      	ldr	r2, [r7, #20]
 810af96:	4313      	orrs	r3, r2
 810af98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 810af9a:	68fb      	ldr	r3, [r7, #12]
 810af9c:	693a      	ldr	r2, [r7, #16]
 810af9e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 810afa0:	68fb      	ldr	r3, [r7, #12]
 810afa2:	697a      	ldr	r2, [r7, #20]
 810afa4:	621a      	str	r2, [r3, #32]
}
 810afa6:	bf00      	nop
 810afa8:	371c      	adds	r7, #28
 810afaa:	46bd      	mov	sp, r7
 810afac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810afb0:	4770      	bx	lr

0810afb2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 810afb2:	b480      	push	{r7}
 810afb4:	b087      	sub	sp, #28
 810afb6:	af00      	add	r7, sp, #0
 810afb8:	60f8      	str	r0, [r7, #12]
 810afba:	60b9      	str	r1, [r7, #8]
 810afbc:	607a      	str	r2, [r7, #4]
 810afbe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 810afc0:	68fb      	ldr	r3, [r7, #12]
 810afc2:	6a1b      	ldr	r3, [r3, #32]
 810afc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810afc6:	68fb      	ldr	r3, [r7, #12]
 810afc8:	6a1b      	ldr	r3, [r3, #32]
 810afca:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810afce:	68fb      	ldr	r3, [r7, #12]
 810afd0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 810afd2:	68fb      	ldr	r3, [r7, #12]
 810afd4:	69db      	ldr	r3, [r3, #28]
 810afd6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 810afd8:	693b      	ldr	r3, [r7, #16]
 810afda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810afde:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 810afe0:	687b      	ldr	r3, [r7, #4]
 810afe2:	021b      	lsls	r3, r3, #8
 810afe4:	693a      	ldr	r2, [r7, #16]
 810afe6:	4313      	orrs	r3, r2
 810afe8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 810afea:	693b      	ldr	r3, [r7, #16]
 810afec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810aff0:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 810aff2:	683b      	ldr	r3, [r7, #0]
 810aff4:	031b      	lsls	r3, r3, #12
 810aff6:	b29b      	uxth	r3, r3
 810aff8:	693a      	ldr	r2, [r7, #16]
 810affa:	4313      	orrs	r3, r2
 810affc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 810affe:	697b      	ldr	r3, [r7, #20]
 810b000:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 810b004:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 810b006:	68bb      	ldr	r3, [r7, #8]
 810b008:	031b      	lsls	r3, r3, #12
 810b00a:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 810b00e:	697a      	ldr	r2, [r7, #20]
 810b010:	4313      	orrs	r3, r2
 810b012:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 810b014:	68fb      	ldr	r3, [r7, #12]
 810b016:	693a      	ldr	r2, [r7, #16]
 810b018:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 810b01a:	68fb      	ldr	r3, [r7, #12]
 810b01c:	697a      	ldr	r2, [r7, #20]
 810b01e:	621a      	str	r2, [r3, #32]
}
 810b020:	bf00      	nop
 810b022:	371c      	adds	r7, #28
 810b024:	46bd      	mov	sp, r7
 810b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b02a:	4770      	bx	lr

0810b02c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810b02c:	b480      	push	{r7}
 810b02e:	b085      	sub	sp, #20
 810b030:	af00      	add	r7, sp, #0
 810b032:	6078      	str	r0, [r7, #4]
 810b034:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 810b036:	687b      	ldr	r3, [r7, #4]
 810b038:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810b03c:	2b01      	cmp	r3, #1
 810b03e:	d101      	bne.n	810b044 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 810b040:	2302      	movs	r3, #2
 810b042:	e06d      	b.n	810b120 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 810b044:	687b      	ldr	r3, [r7, #4]
 810b046:	2201      	movs	r2, #1
 810b048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810b04c:	687b      	ldr	r3, [r7, #4]
 810b04e:	2202      	movs	r2, #2
 810b050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 810b054:	687b      	ldr	r3, [r7, #4]
 810b056:	681b      	ldr	r3, [r3, #0]
 810b058:	685b      	ldr	r3, [r3, #4]
 810b05a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810b05c:	687b      	ldr	r3, [r7, #4]
 810b05e:	681b      	ldr	r3, [r3, #0]
 810b060:	689b      	ldr	r3, [r3, #8]
 810b062:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 810b064:	687b      	ldr	r3, [r7, #4]
 810b066:	681b      	ldr	r3, [r3, #0]
 810b068:	4a30      	ldr	r2, [pc, #192]	@ (810b12c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810b06a:	4293      	cmp	r3, r2
 810b06c:	d004      	beq.n	810b078 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810b06e:	687b      	ldr	r3, [r7, #4]
 810b070:	681b      	ldr	r3, [r3, #0]
 810b072:	4a2f      	ldr	r2, [pc, #188]	@ (810b130 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810b074:	4293      	cmp	r3, r2
 810b076:	d108      	bne.n	810b08a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810b078:	68fb      	ldr	r3, [r7, #12]
 810b07a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810b07e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 810b080:	683b      	ldr	r3, [r7, #0]
 810b082:	685b      	ldr	r3, [r3, #4]
 810b084:	68fa      	ldr	r2, [r7, #12]
 810b086:	4313      	orrs	r3, r2
 810b088:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810b08a:	68fb      	ldr	r3, [r7, #12]
 810b08c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 810b090:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 810b092:	683b      	ldr	r3, [r7, #0]
 810b094:	681b      	ldr	r3, [r3, #0]
 810b096:	68fa      	ldr	r2, [r7, #12]
 810b098:	4313      	orrs	r3, r2
 810b09a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810b09c:	687b      	ldr	r3, [r7, #4]
 810b09e:	681b      	ldr	r3, [r3, #0]
 810b0a0:	68fa      	ldr	r2, [r7, #12]
 810b0a2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810b0a4:	687b      	ldr	r3, [r7, #4]
 810b0a6:	681b      	ldr	r3, [r3, #0]
 810b0a8:	4a20      	ldr	r2, [pc, #128]	@ (810b12c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810b0aa:	4293      	cmp	r3, r2
 810b0ac:	d022      	beq.n	810b0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810b0ae:	687b      	ldr	r3, [r7, #4]
 810b0b0:	681b      	ldr	r3, [r3, #0]
 810b0b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810b0b6:	d01d      	beq.n	810b0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810b0b8:	687b      	ldr	r3, [r7, #4]
 810b0ba:	681b      	ldr	r3, [r3, #0]
 810b0bc:	4a1d      	ldr	r2, [pc, #116]	@ (810b134 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810b0be:	4293      	cmp	r3, r2
 810b0c0:	d018      	beq.n	810b0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810b0c2:	687b      	ldr	r3, [r7, #4]
 810b0c4:	681b      	ldr	r3, [r3, #0]
 810b0c6:	4a1c      	ldr	r2, [pc, #112]	@ (810b138 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 810b0c8:	4293      	cmp	r3, r2
 810b0ca:	d013      	beq.n	810b0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810b0cc:	687b      	ldr	r3, [r7, #4]
 810b0ce:	681b      	ldr	r3, [r3, #0]
 810b0d0:	4a1a      	ldr	r2, [pc, #104]	@ (810b13c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 810b0d2:	4293      	cmp	r3, r2
 810b0d4:	d00e      	beq.n	810b0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810b0d6:	687b      	ldr	r3, [r7, #4]
 810b0d8:	681b      	ldr	r3, [r3, #0]
 810b0da:	4a15      	ldr	r2, [pc, #84]	@ (810b130 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810b0dc:	4293      	cmp	r3, r2
 810b0de:	d009      	beq.n	810b0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810b0e0:	687b      	ldr	r3, [r7, #4]
 810b0e2:	681b      	ldr	r3, [r3, #0]
 810b0e4:	4a16      	ldr	r2, [pc, #88]	@ (810b140 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 810b0e6:	4293      	cmp	r3, r2
 810b0e8:	d004      	beq.n	810b0f4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810b0ea:	687b      	ldr	r3, [r7, #4]
 810b0ec:	681b      	ldr	r3, [r3, #0]
 810b0ee:	4a15      	ldr	r2, [pc, #84]	@ (810b144 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 810b0f0:	4293      	cmp	r3, r2
 810b0f2:	d10c      	bne.n	810b10e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 810b0f4:	68bb      	ldr	r3, [r7, #8]
 810b0f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810b0fa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 810b0fc:	683b      	ldr	r3, [r7, #0]
 810b0fe:	689b      	ldr	r3, [r3, #8]
 810b100:	68ba      	ldr	r2, [r7, #8]
 810b102:	4313      	orrs	r3, r2
 810b104:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 810b106:	687b      	ldr	r3, [r7, #4]
 810b108:	681b      	ldr	r3, [r3, #0]
 810b10a:	68ba      	ldr	r2, [r7, #8]
 810b10c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 810b10e:	687b      	ldr	r3, [r7, #4]
 810b110:	2201      	movs	r2, #1
 810b112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 810b116:	687b      	ldr	r3, [r7, #4]
 810b118:	2200      	movs	r2, #0
 810b11a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810b11e:	2300      	movs	r3, #0
}
 810b120:	4618      	mov	r0, r3
 810b122:	3714      	adds	r7, #20
 810b124:	46bd      	mov	sp, r7
 810b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b12a:	4770      	bx	lr
 810b12c:	40010000 	.word	0x40010000
 810b130:	40010400 	.word	0x40010400
 810b134:	40000400 	.word	0x40000400
 810b138:	40000800 	.word	0x40000800
 810b13c:	40000c00 	.word	0x40000c00
 810b140:	40001800 	.word	0x40001800
 810b144:	40014000 	.word	0x40014000

0810b148 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 810b148:	b480      	push	{r7}
 810b14a:	b085      	sub	sp, #20
 810b14c:	af00      	add	r7, sp, #0
 810b14e:	6078      	str	r0, [r7, #4]
 810b150:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810b152:	2300      	movs	r3, #0
 810b154:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 810b156:	687b      	ldr	r3, [r7, #4]
 810b158:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810b15c:	2b01      	cmp	r3, #1
 810b15e:	d101      	bne.n	810b164 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 810b160:	2302      	movs	r3, #2
 810b162:	e065      	b.n	810b230 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810b164:	687b      	ldr	r3, [r7, #4]
 810b166:	2201      	movs	r2, #1
 810b168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810b16c:	68fb      	ldr	r3, [r7, #12]
 810b16e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810b172:	683b      	ldr	r3, [r7, #0]
 810b174:	68db      	ldr	r3, [r3, #12]
 810b176:	4313      	orrs	r3, r2
 810b178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810b17a:	68fb      	ldr	r3, [r7, #12]
 810b17c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 810b180:	683b      	ldr	r3, [r7, #0]
 810b182:	689b      	ldr	r3, [r3, #8]
 810b184:	4313      	orrs	r3, r2
 810b186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 810b188:	68fb      	ldr	r3, [r7, #12]
 810b18a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 810b18e:	683b      	ldr	r3, [r7, #0]
 810b190:	685b      	ldr	r3, [r3, #4]
 810b192:	4313      	orrs	r3, r2
 810b194:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810b196:	68fb      	ldr	r3, [r7, #12]
 810b198:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 810b19c:	683b      	ldr	r3, [r7, #0]
 810b19e:	681b      	ldr	r3, [r3, #0]
 810b1a0:	4313      	orrs	r3, r2
 810b1a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810b1a4:	68fb      	ldr	r3, [r7, #12]
 810b1a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810b1aa:	683b      	ldr	r3, [r7, #0]
 810b1ac:	691b      	ldr	r3, [r3, #16]
 810b1ae:	4313      	orrs	r3, r2
 810b1b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810b1b2:	68fb      	ldr	r3, [r7, #12]
 810b1b4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 810b1b8:	683b      	ldr	r3, [r7, #0]
 810b1ba:	695b      	ldr	r3, [r3, #20]
 810b1bc:	4313      	orrs	r3, r2
 810b1be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 810b1c0:	68fb      	ldr	r3, [r7, #12]
 810b1c2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 810b1c6:	683b      	ldr	r3, [r7, #0]
 810b1c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b1ca:	4313      	orrs	r3, r2
 810b1cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 810b1ce:	68fb      	ldr	r3, [r7, #12]
 810b1d0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 810b1d4:	683b      	ldr	r3, [r7, #0]
 810b1d6:	699b      	ldr	r3, [r3, #24]
 810b1d8:	041b      	lsls	r3, r3, #16
 810b1da:	4313      	orrs	r3, r2
 810b1dc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 810b1de:	687b      	ldr	r3, [r7, #4]
 810b1e0:	681b      	ldr	r3, [r3, #0]
 810b1e2:	4a16      	ldr	r2, [pc, #88]	@ (810b23c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810b1e4:	4293      	cmp	r3, r2
 810b1e6:	d004      	beq.n	810b1f2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 810b1e8:	687b      	ldr	r3, [r7, #4]
 810b1ea:	681b      	ldr	r3, [r3, #0]
 810b1ec:	4a14      	ldr	r2, [pc, #80]	@ (810b240 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 810b1ee:	4293      	cmp	r3, r2
 810b1f0:	d115      	bne.n	810b21e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 810b1f2:	68fb      	ldr	r3, [r7, #12]
 810b1f4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 810b1f8:	683b      	ldr	r3, [r7, #0]
 810b1fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b1fc:	051b      	lsls	r3, r3, #20
 810b1fe:	4313      	orrs	r3, r2
 810b200:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 810b202:	68fb      	ldr	r3, [r7, #12]
 810b204:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 810b208:	683b      	ldr	r3, [r7, #0]
 810b20a:	69db      	ldr	r3, [r3, #28]
 810b20c:	4313      	orrs	r3, r2
 810b20e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 810b210:	68fb      	ldr	r3, [r7, #12]
 810b212:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 810b216:	683b      	ldr	r3, [r7, #0]
 810b218:	6a1b      	ldr	r3, [r3, #32]
 810b21a:	4313      	orrs	r3, r2
 810b21c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 810b21e:	687b      	ldr	r3, [r7, #4]
 810b220:	681b      	ldr	r3, [r3, #0]
 810b222:	68fa      	ldr	r2, [r7, #12]
 810b224:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 810b226:	687b      	ldr	r3, [r7, #4]
 810b228:	2200      	movs	r2, #0
 810b22a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810b22e:	2300      	movs	r3, #0
}
 810b230:	4618      	mov	r0, r3
 810b232:	3714      	adds	r7, #20
 810b234:	46bd      	mov	sp, r7
 810b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b23a:	4770      	bx	lr
 810b23c:	40010000 	.word	0x40010000
 810b240:	40010400 	.word	0x40010400

0810b244 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 810b244:	b580      	push	{r7, lr}
 810b246:	b082      	sub	sp, #8
 810b248:	af00      	add	r7, sp, #0
 810b24a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 810b24c:	687b      	ldr	r3, [r7, #4]
 810b24e:	2b00      	cmp	r3, #0
 810b250:	d101      	bne.n	810b256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 810b252:	2301      	movs	r3, #1
 810b254:	e042      	b.n	810b2dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 810b256:	687b      	ldr	r3, [r7, #4]
 810b258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810b25c:	2b00      	cmp	r3, #0
 810b25e:	d106      	bne.n	810b26e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 810b260:	687b      	ldr	r3, [r7, #4]
 810b262:	2200      	movs	r2, #0
 810b264:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 810b268:	6878      	ldr	r0, [r7, #4]
 810b26a:	f7f6 fff9 	bl	8102260 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 810b26e:	687b      	ldr	r3, [r7, #4]
 810b270:	2224      	movs	r2, #36	@ 0x24
 810b272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 810b276:	687b      	ldr	r3, [r7, #4]
 810b278:	681b      	ldr	r3, [r3, #0]
 810b27a:	681a      	ldr	r2, [r3, #0]
 810b27c:	687b      	ldr	r3, [r7, #4]
 810b27e:	681b      	ldr	r3, [r3, #0]
 810b280:	f022 0201 	bic.w	r2, r2, #1
 810b284:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 810b286:	687b      	ldr	r3, [r7, #4]
 810b288:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810b28a:	2b00      	cmp	r3, #0
 810b28c:	d002      	beq.n	810b294 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 810b28e:	6878      	ldr	r0, [r7, #4]
 810b290:	f000 fd90 	bl	810bdb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 810b294:	6878      	ldr	r0, [r7, #4]
 810b296:	f000 f825 	bl	810b2e4 <UART_SetConfig>
 810b29a:	4603      	mov	r3, r0
 810b29c:	2b01      	cmp	r3, #1
 810b29e:	d101      	bne.n	810b2a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 810b2a0:	2301      	movs	r3, #1
 810b2a2:	e01b      	b.n	810b2dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810b2a4:	687b      	ldr	r3, [r7, #4]
 810b2a6:	681b      	ldr	r3, [r3, #0]
 810b2a8:	685a      	ldr	r2, [r3, #4]
 810b2aa:	687b      	ldr	r3, [r7, #4]
 810b2ac:	681b      	ldr	r3, [r3, #0]
 810b2ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 810b2b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810b2b4:	687b      	ldr	r3, [r7, #4]
 810b2b6:	681b      	ldr	r3, [r3, #0]
 810b2b8:	689a      	ldr	r2, [r3, #8]
 810b2ba:	687b      	ldr	r3, [r7, #4]
 810b2bc:	681b      	ldr	r3, [r3, #0]
 810b2be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 810b2c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810b2c4:	687b      	ldr	r3, [r7, #4]
 810b2c6:	681b      	ldr	r3, [r3, #0]
 810b2c8:	681a      	ldr	r2, [r3, #0]
 810b2ca:	687b      	ldr	r3, [r7, #4]
 810b2cc:	681b      	ldr	r3, [r3, #0]
 810b2ce:	f042 0201 	orr.w	r2, r2, #1
 810b2d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810b2d4:	6878      	ldr	r0, [r7, #4]
 810b2d6:	f000 fe0f 	bl	810bef8 <UART_CheckIdleState>
 810b2da:	4603      	mov	r3, r0
}
 810b2dc:	4618      	mov	r0, r3
 810b2de:	3708      	adds	r7, #8
 810b2e0:	46bd      	mov	sp, r7
 810b2e2:	bd80      	pop	{r7, pc}

0810b2e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810b2e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810b2e8:	b092      	sub	sp, #72	@ 0x48
 810b2ea:	af00      	add	r7, sp, #0
 810b2ec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810b2ee:	2300      	movs	r3, #0
 810b2f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810b2f4:	697b      	ldr	r3, [r7, #20]
 810b2f6:	689a      	ldr	r2, [r3, #8]
 810b2f8:	697b      	ldr	r3, [r7, #20]
 810b2fa:	691b      	ldr	r3, [r3, #16]
 810b2fc:	431a      	orrs	r2, r3
 810b2fe:	697b      	ldr	r3, [r7, #20]
 810b300:	695b      	ldr	r3, [r3, #20]
 810b302:	431a      	orrs	r2, r3
 810b304:	697b      	ldr	r3, [r7, #20]
 810b306:	69db      	ldr	r3, [r3, #28]
 810b308:	4313      	orrs	r3, r2
 810b30a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810b30c:	697b      	ldr	r3, [r7, #20]
 810b30e:	681b      	ldr	r3, [r3, #0]
 810b310:	681a      	ldr	r2, [r3, #0]
 810b312:	4bbd      	ldr	r3, [pc, #756]	@ (810b608 <UART_SetConfig+0x324>)
 810b314:	4013      	ands	r3, r2
 810b316:	697a      	ldr	r2, [r7, #20]
 810b318:	6812      	ldr	r2, [r2, #0]
 810b31a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810b31c:	430b      	orrs	r3, r1
 810b31e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810b320:	697b      	ldr	r3, [r7, #20]
 810b322:	681b      	ldr	r3, [r3, #0]
 810b324:	685b      	ldr	r3, [r3, #4]
 810b326:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810b32a:	697b      	ldr	r3, [r7, #20]
 810b32c:	68da      	ldr	r2, [r3, #12]
 810b32e:	697b      	ldr	r3, [r7, #20]
 810b330:	681b      	ldr	r3, [r3, #0]
 810b332:	430a      	orrs	r2, r1
 810b334:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810b336:	697b      	ldr	r3, [r7, #20]
 810b338:	699b      	ldr	r3, [r3, #24]
 810b33a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810b33c:	697b      	ldr	r3, [r7, #20]
 810b33e:	681b      	ldr	r3, [r3, #0]
 810b340:	4ab2      	ldr	r2, [pc, #712]	@ (810b60c <UART_SetConfig+0x328>)
 810b342:	4293      	cmp	r3, r2
 810b344:	d004      	beq.n	810b350 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810b346:	697b      	ldr	r3, [r7, #20]
 810b348:	6a1b      	ldr	r3, [r3, #32]
 810b34a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810b34c:	4313      	orrs	r3, r2
 810b34e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810b350:	697b      	ldr	r3, [r7, #20]
 810b352:	681b      	ldr	r3, [r3, #0]
 810b354:	689b      	ldr	r3, [r3, #8]
 810b356:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810b35a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810b35e:	697a      	ldr	r2, [r7, #20]
 810b360:	6812      	ldr	r2, [r2, #0]
 810b362:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810b364:	430b      	orrs	r3, r1
 810b366:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810b368:	697b      	ldr	r3, [r7, #20]
 810b36a:	681b      	ldr	r3, [r3, #0]
 810b36c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810b36e:	f023 010f 	bic.w	r1, r3, #15
 810b372:	697b      	ldr	r3, [r7, #20]
 810b374:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810b376:	697b      	ldr	r3, [r7, #20]
 810b378:	681b      	ldr	r3, [r3, #0]
 810b37a:	430a      	orrs	r2, r1
 810b37c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810b37e:	697b      	ldr	r3, [r7, #20]
 810b380:	681b      	ldr	r3, [r3, #0]
 810b382:	4aa3      	ldr	r2, [pc, #652]	@ (810b610 <UART_SetConfig+0x32c>)
 810b384:	4293      	cmp	r3, r2
 810b386:	d177      	bne.n	810b478 <UART_SetConfig+0x194>
 810b388:	4ba2      	ldr	r3, [pc, #648]	@ (810b614 <UART_SetConfig+0x330>)
 810b38a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b38c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810b390:	2b28      	cmp	r3, #40	@ 0x28
 810b392:	d86d      	bhi.n	810b470 <UART_SetConfig+0x18c>
 810b394:	a201      	add	r2, pc, #4	@ (adr r2, 810b39c <UART_SetConfig+0xb8>)
 810b396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b39a:	bf00      	nop
 810b39c:	0810b441 	.word	0x0810b441
 810b3a0:	0810b471 	.word	0x0810b471
 810b3a4:	0810b471 	.word	0x0810b471
 810b3a8:	0810b471 	.word	0x0810b471
 810b3ac:	0810b471 	.word	0x0810b471
 810b3b0:	0810b471 	.word	0x0810b471
 810b3b4:	0810b471 	.word	0x0810b471
 810b3b8:	0810b471 	.word	0x0810b471
 810b3bc:	0810b449 	.word	0x0810b449
 810b3c0:	0810b471 	.word	0x0810b471
 810b3c4:	0810b471 	.word	0x0810b471
 810b3c8:	0810b471 	.word	0x0810b471
 810b3cc:	0810b471 	.word	0x0810b471
 810b3d0:	0810b471 	.word	0x0810b471
 810b3d4:	0810b471 	.word	0x0810b471
 810b3d8:	0810b471 	.word	0x0810b471
 810b3dc:	0810b451 	.word	0x0810b451
 810b3e0:	0810b471 	.word	0x0810b471
 810b3e4:	0810b471 	.word	0x0810b471
 810b3e8:	0810b471 	.word	0x0810b471
 810b3ec:	0810b471 	.word	0x0810b471
 810b3f0:	0810b471 	.word	0x0810b471
 810b3f4:	0810b471 	.word	0x0810b471
 810b3f8:	0810b471 	.word	0x0810b471
 810b3fc:	0810b459 	.word	0x0810b459
 810b400:	0810b471 	.word	0x0810b471
 810b404:	0810b471 	.word	0x0810b471
 810b408:	0810b471 	.word	0x0810b471
 810b40c:	0810b471 	.word	0x0810b471
 810b410:	0810b471 	.word	0x0810b471
 810b414:	0810b471 	.word	0x0810b471
 810b418:	0810b471 	.word	0x0810b471
 810b41c:	0810b461 	.word	0x0810b461
 810b420:	0810b471 	.word	0x0810b471
 810b424:	0810b471 	.word	0x0810b471
 810b428:	0810b471 	.word	0x0810b471
 810b42c:	0810b471 	.word	0x0810b471
 810b430:	0810b471 	.word	0x0810b471
 810b434:	0810b471 	.word	0x0810b471
 810b438:	0810b471 	.word	0x0810b471
 810b43c:	0810b469 	.word	0x0810b469
 810b440:	2301      	movs	r3, #1
 810b442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b446:	e220      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b448:	2304      	movs	r3, #4
 810b44a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b44e:	e21c      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b450:	2308      	movs	r3, #8
 810b452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b456:	e218      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b458:	2310      	movs	r3, #16
 810b45a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b45e:	e214      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b460:	2320      	movs	r3, #32
 810b462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b466:	e210      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b468:	2340      	movs	r3, #64	@ 0x40
 810b46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b46e:	e20c      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b470:	2380      	movs	r3, #128	@ 0x80
 810b472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b476:	e208      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b478:	697b      	ldr	r3, [r7, #20]
 810b47a:	681b      	ldr	r3, [r3, #0]
 810b47c:	4a66      	ldr	r2, [pc, #408]	@ (810b618 <UART_SetConfig+0x334>)
 810b47e:	4293      	cmp	r3, r2
 810b480:	d130      	bne.n	810b4e4 <UART_SetConfig+0x200>
 810b482:	4b64      	ldr	r3, [pc, #400]	@ (810b614 <UART_SetConfig+0x330>)
 810b484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b486:	f003 0307 	and.w	r3, r3, #7
 810b48a:	2b05      	cmp	r3, #5
 810b48c:	d826      	bhi.n	810b4dc <UART_SetConfig+0x1f8>
 810b48e:	a201      	add	r2, pc, #4	@ (adr r2, 810b494 <UART_SetConfig+0x1b0>)
 810b490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b494:	0810b4ad 	.word	0x0810b4ad
 810b498:	0810b4b5 	.word	0x0810b4b5
 810b49c:	0810b4bd 	.word	0x0810b4bd
 810b4a0:	0810b4c5 	.word	0x0810b4c5
 810b4a4:	0810b4cd 	.word	0x0810b4cd
 810b4a8:	0810b4d5 	.word	0x0810b4d5
 810b4ac:	2300      	movs	r3, #0
 810b4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b4b2:	e1ea      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b4b4:	2304      	movs	r3, #4
 810b4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b4ba:	e1e6      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b4bc:	2308      	movs	r3, #8
 810b4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b4c2:	e1e2      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b4c4:	2310      	movs	r3, #16
 810b4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b4ca:	e1de      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b4cc:	2320      	movs	r3, #32
 810b4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b4d2:	e1da      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b4d4:	2340      	movs	r3, #64	@ 0x40
 810b4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b4da:	e1d6      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b4dc:	2380      	movs	r3, #128	@ 0x80
 810b4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b4e2:	e1d2      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b4e4:	697b      	ldr	r3, [r7, #20]
 810b4e6:	681b      	ldr	r3, [r3, #0]
 810b4e8:	4a4c      	ldr	r2, [pc, #304]	@ (810b61c <UART_SetConfig+0x338>)
 810b4ea:	4293      	cmp	r3, r2
 810b4ec:	d130      	bne.n	810b550 <UART_SetConfig+0x26c>
 810b4ee:	4b49      	ldr	r3, [pc, #292]	@ (810b614 <UART_SetConfig+0x330>)
 810b4f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b4f2:	f003 0307 	and.w	r3, r3, #7
 810b4f6:	2b05      	cmp	r3, #5
 810b4f8:	d826      	bhi.n	810b548 <UART_SetConfig+0x264>
 810b4fa:	a201      	add	r2, pc, #4	@ (adr r2, 810b500 <UART_SetConfig+0x21c>)
 810b4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b500:	0810b519 	.word	0x0810b519
 810b504:	0810b521 	.word	0x0810b521
 810b508:	0810b529 	.word	0x0810b529
 810b50c:	0810b531 	.word	0x0810b531
 810b510:	0810b539 	.word	0x0810b539
 810b514:	0810b541 	.word	0x0810b541
 810b518:	2300      	movs	r3, #0
 810b51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b51e:	e1b4      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b520:	2304      	movs	r3, #4
 810b522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b526:	e1b0      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b528:	2308      	movs	r3, #8
 810b52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b52e:	e1ac      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b530:	2310      	movs	r3, #16
 810b532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b536:	e1a8      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b538:	2320      	movs	r3, #32
 810b53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b53e:	e1a4      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b540:	2340      	movs	r3, #64	@ 0x40
 810b542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b546:	e1a0      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b548:	2380      	movs	r3, #128	@ 0x80
 810b54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b54e:	e19c      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b550:	697b      	ldr	r3, [r7, #20]
 810b552:	681b      	ldr	r3, [r3, #0]
 810b554:	4a32      	ldr	r2, [pc, #200]	@ (810b620 <UART_SetConfig+0x33c>)
 810b556:	4293      	cmp	r3, r2
 810b558:	d130      	bne.n	810b5bc <UART_SetConfig+0x2d8>
 810b55a:	4b2e      	ldr	r3, [pc, #184]	@ (810b614 <UART_SetConfig+0x330>)
 810b55c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b55e:	f003 0307 	and.w	r3, r3, #7
 810b562:	2b05      	cmp	r3, #5
 810b564:	d826      	bhi.n	810b5b4 <UART_SetConfig+0x2d0>
 810b566:	a201      	add	r2, pc, #4	@ (adr r2, 810b56c <UART_SetConfig+0x288>)
 810b568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b56c:	0810b585 	.word	0x0810b585
 810b570:	0810b58d 	.word	0x0810b58d
 810b574:	0810b595 	.word	0x0810b595
 810b578:	0810b59d 	.word	0x0810b59d
 810b57c:	0810b5a5 	.word	0x0810b5a5
 810b580:	0810b5ad 	.word	0x0810b5ad
 810b584:	2300      	movs	r3, #0
 810b586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b58a:	e17e      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b58c:	2304      	movs	r3, #4
 810b58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b592:	e17a      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b594:	2308      	movs	r3, #8
 810b596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b59a:	e176      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b59c:	2310      	movs	r3, #16
 810b59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b5a2:	e172      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b5a4:	2320      	movs	r3, #32
 810b5a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b5aa:	e16e      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b5ac:	2340      	movs	r3, #64	@ 0x40
 810b5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b5b2:	e16a      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b5b4:	2380      	movs	r3, #128	@ 0x80
 810b5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b5ba:	e166      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b5bc:	697b      	ldr	r3, [r7, #20]
 810b5be:	681b      	ldr	r3, [r3, #0]
 810b5c0:	4a18      	ldr	r2, [pc, #96]	@ (810b624 <UART_SetConfig+0x340>)
 810b5c2:	4293      	cmp	r3, r2
 810b5c4:	d140      	bne.n	810b648 <UART_SetConfig+0x364>
 810b5c6:	4b13      	ldr	r3, [pc, #76]	@ (810b614 <UART_SetConfig+0x330>)
 810b5c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b5ca:	f003 0307 	and.w	r3, r3, #7
 810b5ce:	2b05      	cmp	r3, #5
 810b5d0:	d836      	bhi.n	810b640 <UART_SetConfig+0x35c>
 810b5d2:	a201      	add	r2, pc, #4	@ (adr r2, 810b5d8 <UART_SetConfig+0x2f4>)
 810b5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b5d8:	0810b5f1 	.word	0x0810b5f1
 810b5dc:	0810b5f9 	.word	0x0810b5f9
 810b5e0:	0810b601 	.word	0x0810b601
 810b5e4:	0810b629 	.word	0x0810b629
 810b5e8:	0810b631 	.word	0x0810b631
 810b5ec:	0810b639 	.word	0x0810b639
 810b5f0:	2300      	movs	r3, #0
 810b5f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b5f6:	e148      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b5f8:	2304      	movs	r3, #4
 810b5fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b5fe:	e144      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b600:	2308      	movs	r3, #8
 810b602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b606:	e140      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b608:	cfff69f3 	.word	0xcfff69f3
 810b60c:	58000c00 	.word	0x58000c00
 810b610:	40011000 	.word	0x40011000
 810b614:	58024400 	.word	0x58024400
 810b618:	40004400 	.word	0x40004400
 810b61c:	40004800 	.word	0x40004800
 810b620:	40004c00 	.word	0x40004c00
 810b624:	40005000 	.word	0x40005000
 810b628:	2310      	movs	r3, #16
 810b62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b62e:	e12c      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b630:	2320      	movs	r3, #32
 810b632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b636:	e128      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b638:	2340      	movs	r3, #64	@ 0x40
 810b63a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b63e:	e124      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b640:	2380      	movs	r3, #128	@ 0x80
 810b642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b646:	e120      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b648:	697b      	ldr	r3, [r7, #20]
 810b64a:	681b      	ldr	r3, [r3, #0]
 810b64c:	4acb      	ldr	r2, [pc, #812]	@ (810b97c <UART_SetConfig+0x698>)
 810b64e:	4293      	cmp	r3, r2
 810b650:	d176      	bne.n	810b740 <UART_SetConfig+0x45c>
 810b652:	4bcb      	ldr	r3, [pc, #812]	@ (810b980 <UART_SetConfig+0x69c>)
 810b654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b656:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810b65a:	2b28      	cmp	r3, #40	@ 0x28
 810b65c:	d86c      	bhi.n	810b738 <UART_SetConfig+0x454>
 810b65e:	a201      	add	r2, pc, #4	@ (adr r2, 810b664 <UART_SetConfig+0x380>)
 810b660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b664:	0810b709 	.word	0x0810b709
 810b668:	0810b739 	.word	0x0810b739
 810b66c:	0810b739 	.word	0x0810b739
 810b670:	0810b739 	.word	0x0810b739
 810b674:	0810b739 	.word	0x0810b739
 810b678:	0810b739 	.word	0x0810b739
 810b67c:	0810b739 	.word	0x0810b739
 810b680:	0810b739 	.word	0x0810b739
 810b684:	0810b711 	.word	0x0810b711
 810b688:	0810b739 	.word	0x0810b739
 810b68c:	0810b739 	.word	0x0810b739
 810b690:	0810b739 	.word	0x0810b739
 810b694:	0810b739 	.word	0x0810b739
 810b698:	0810b739 	.word	0x0810b739
 810b69c:	0810b739 	.word	0x0810b739
 810b6a0:	0810b739 	.word	0x0810b739
 810b6a4:	0810b719 	.word	0x0810b719
 810b6a8:	0810b739 	.word	0x0810b739
 810b6ac:	0810b739 	.word	0x0810b739
 810b6b0:	0810b739 	.word	0x0810b739
 810b6b4:	0810b739 	.word	0x0810b739
 810b6b8:	0810b739 	.word	0x0810b739
 810b6bc:	0810b739 	.word	0x0810b739
 810b6c0:	0810b739 	.word	0x0810b739
 810b6c4:	0810b721 	.word	0x0810b721
 810b6c8:	0810b739 	.word	0x0810b739
 810b6cc:	0810b739 	.word	0x0810b739
 810b6d0:	0810b739 	.word	0x0810b739
 810b6d4:	0810b739 	.word	0x0810b739
 810b6d8:	0810b739 	.word	0x0810b739
 810b6dc:	0810b739 	.word	0x0810b739
 810b6e0:	0810b739 	.word	0x0810b739
 810b6e4:	0810b729 	.word	0x0810b729
 810b6e8:	0810b739 	.word	0x0810b739
 810b6ec:	0810b739 	.word	0x0810b739
 810b6f0:	0810b739 	.word	0x0810b739
 810b6f4:	0810b739 	.word	0x0810b739
 810b6f8:	0810b739 	.word	0x0810b739
 810b6fc:	0810b739 	.word	0x0810b739
 810b700:	0810b739 	.word	0x0810b739
 810b704:	0810b731 	.word	0x0810b731
 810b708:	2301      	movs	r3, #1
 810b70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b70e:	e0bc      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b710:	2304      	movs	r3, #4
 810b712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b716:	e0b8      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b718:	2308      	movs	r3, #8
 810b71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b71e:	e0b4      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b720:	2310      	movs	r3, #16
 810b722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b726:	e0b0      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b728:	2320      	movs	r3, #32
 810b72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b72e:	e0ac      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b730:	2340      	movs	r3, #64	@ 0x40
 810b732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b736:	e0a8      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b738:	2380      	movs	r3, #128	@ 0x80
 810b73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b73e:	e0a4      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b740:	697b      	ldr	r3, [r7, #20]
 810b742:	681b      	ldr	r3, [r3, #0]
 810b744:	4a8f      	ldr	r2, [pc, #572]	@ (810b984 <UART_SetConfig+0x6a0>)
 810b746:	4293      	cmp	r3, r2
 810b748:	d130      	bne.n	810b7ac <UART_SetConfig+0x4c8>
 810b74a:	4b8d      	ldr	r3, [pc, #564]	@ (810b980 <UART_SetConfig+0x69c>)
 810b74c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b74e:	f003 0307 	and.w	r3, r3, #7
 810b752:	2b05      	cmp	r3, #5
 810b754:	d826      	bhi.n	810b7a4 <UART_SetConfig+0x4c0>
 810b756:	a201      	add	r2, pc, #4	@ (adr r2, 810b75c <UART_SetConfig+0x478>)
 810b758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b75c:	0810b775 	.word	0x0810b775
 810b760:	0810b77d 	.word	0x0810b77d
 810b764:	0810b785 	.word	0x0810b785
 810b768:	0810b78d 	.word	0x0810b78d
 810b76c:	0810b795 	.word	0x0810b795
 810b770:	0810b79d 	.word	0x0810b79d
 810b774:	2300      	movs	r3, #0
 810b776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b77a:	e086      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b77c:	2304      	movs	r3, #4
 810b77e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b782:	e082      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b784:	2308      	movs	r3, #8
 810b786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b78a:	e07e      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b78c:	2310      	movs	r3, #16
 810b78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b792:	e07a      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b794:	2320      	movs	r3, #32
 810b796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b79a:	e076      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b79c:	2340      	movs	r3, #64	@ 0x40
 810b79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b7a2:	e072      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b7a4:	2380      	movs	r3, #128	@ 0x80
 810b7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b7aa:	e06e      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b7ac:	697b      	ldr	r3, [r7, #20]
 810b7ae:	681b      	ldr	r3, [r3, #0]
 810b7b0:	4a75      	ldr	r2, [pc, #468]	@ (810b988 <UART_SetConfig+0x6a4>)
 810b7b2:	4293      	cmp	r3, r2
 810b7b4:	d130      	bne.n	810b818 <UART_SetConfig+0x534>
 810b7b6:	4b72      	ldr	r3, [pc, #456]	@ (810b980 <UART_SetConfig+0x69c>)
 810b7b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810b7ba:	f003 0307 	and.w	r3, r3, #7
 810b7be:	2b05      	cmp	r3, #5
 810b7c0:	d826      	bhi.n	810b810 <UART_SetConfig+0x52c>
 810b7c2:	a201      	add	r2, pc, #4	@ (adr r2, 810b7c8 <UART_SetConfig+0x4e4>)
 810b7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b7c8:	0810b7e1 	.word	0x0810b7e1
 810b7cc:	0810b7e9 	.word	0x0810b7e9
 810b7d0:	0810b7f1 	.word	0x0810b7f1
 810b7d4:	0810b7f9 	.word	0x0810b7f9
 810b7d8:	0810b801 	.word	0x0810b801
 810b7dc:	0810b809 	.word	0x0810b809
 810b7e0:	2300      	movs	r3, #0
 810b7e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b7e6:	e050      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b7e8:	2304      	movs	r3, #4
 810b7ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b7ee:	e04c      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b7f0:	2308      	movs	r3, #8
 810b7f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b7f6:	e048      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b7f8:	2310      	movs	r3, #16
 810b7fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b7fe:	e044      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b800:	2320      	movs	r3, #32
 810b802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b806:	e040      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b808:	2340      	movs	r3, #64	@ 0x40
 810b80a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b80e:	e03c      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b810:	2380      	movs	r3, #128	@ 0x80
 810b812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b816:	e038      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b818:	697b      	ldr	r3, [r7, #20]
 810b81a:	681b      	ldr	r3, [r3, #0]
 810b81c:	4a5b      	ldr	r2, [pc, #364]	@ (810b98c <UART_SetConfig+0x6a8>)
 810b81e:	4293      	cmp	r3, r2
 810b820:	d130      	bne.n	810b884 <UART_SetConfig+0x5a0>
 810b822:	4b57      	ldr	r3, [pc, #348]	@ (810b980 <UART_SetConfig+0x69c>)
 810b824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b826:	f003 0307 	and.w	r3, r3, #7
 810b82a:	2b05      	cmp	r3, #5
 810b82c:	d826      	bhi.n	810b87c <UART_SetConfig+0x598>
 810b82e:	a201      	add	r2, pc, #4	@ (adr r2, 810b834 <UART_SetConfig+0x550>)
 810b830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b834:	0810b84d 	.word	0x0810b84d
 810b838:	0810b855 	.word	0x0810b855
 810b83c:	0810b85d 	.word	0x0810b85d
 810b840:	0810b865 	.word	0x0810b865
 810b844:	0810b86d 	.word	0x0810b86d
 810b848:	0810b875 	.word	0x0810b875
 810b84c:	2302      	movs	r3, #2
 810b84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b852:	e01a      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b854:	2304      	movs	r3, #4
 810b856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b85a:	e016      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b85c:	2308      	movs	r3, #8
 810b85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b862:	e012      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b864:	2310      	movs	r3, #16
 810b866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b86a:	e00e      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b86c:	2320      	movs	r3, #32
 810b86e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b872:	e00a      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b874:	2340      	movs	r3, #64	@ 0x40
 810b876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b87a:	e006      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b87c:	2380      	movs	r3, #128	@ 0x80
 810b87e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810b882:	e002      	b.n	810b88a <UART_SetConfig+0x5a6>
 810b884:	2380      	movs	r3, #128	@ 0x80
 810b886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810b88a:	697b      	ldr	r3, [r7, #20]
 810b88c:	681b      	ldr	r3, [r3, #0]
 810b88e:	4a3f      	ldr	r2, [pc, #252]	@ (810b98c <UART_SetConfig+0x6a8>)
 810b890:	4293      	cmp	r3, r2
 810b892:	f040 80f8 	bne.w	810ba86 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810b896:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810b89a:	2b20      	cmp	r3, #32
 810b89c:	dc46      	bgt.n	810b92c <UART_SetConfig+0x648>
 810b89e:	2b02      	cmp	r3, #2
 810b8a0:	f2c0 8082 	blt.w	810b9a8 <UART_SetConfig+0x6c4>
 810b8a4:	3b02      	subs	r3, #2
 810b8a6:	2b1e      	cmp	r3, #30
 810b8a8:	d87e      	bhi.n	810b9a8 <UART_SetConfig+0x6c4>
 810b8aa:	a201      	add	r2, pc, #4	@ (adr r2, 810b8b0 <UART_SetConfig+0x5cc>)
 810b8ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810b8b0:	0810b933 	.word	0x0810b933
 810b8b4:	0810b9a9 	.word	0x0810b9a9
 810b8b8:	0810b93b 	.word	0x0810b93b
 810b8bc:	0810b9a9 	.word	0x0810b9a9
 810b8c0:	0810b9a9 	.word	0x0810b9a9
 810b8c4:	0810b9a9 	.word	0x0810b9a9
 810b8c8:	0810b94b 	.word	0x0810b94b
 810b8cc:	0810b9a9 	.word	0x0810b9a9
 810b8d0:	0810b9a9 	.word	0x0810b9a9
 810b8d4:	0810b9a9 	.word	0x0810b9a9
 810b8d8:	0810b9a9 	.word	0x0810b9a9
 810b8dc:	0810b9a9 	.word	0x0810b9a9
 810b8e0:	0810b9a9 	.word	0x0810b9a9
 810b8e4:	0810b9a9 	.word	0x0810b9a9
 810b8e8:	0810b95b 	.word	0x0810b95b
 810b8ec:	0810b9a9 	.word	0x0810b9a9
 810b8f0:	0810b9a9 	.word	0x0810b9a9
 810b8f4:	0810b9a9 	.word	0x0810b9a9
 810b8f8:	0810b9a9 	.word	0x0810b9a9
 810b8fc:	0810b9a9 	.word	0x0810b9a9
 810b900:	0810b9a9 	.word	0x0810b9a9
 810b904:	0810b9a9 	.word	0x0810b9a9
 810b908:	0810b9a9 	.word	0x0810b9a9
 810b90c:	0810b9a9 	.word	0x0810b9a9
 810b910:	0810b9a9 	.word	0x0810b9a9
 810b914:	0810b9a9 	.word	0x0810b9a9
 810b918:	0810b9a9 	.word	0x0810b9a9
 810b91c:	0810b9a9 	.word	0x0810b9a9
 810b920:	0810b9a9 	.word	0x0810b9a9
 810b924:	0810b9a9 	.word	0x0810b9a9
 810b928:	0810b99b 	.word	0x0810b99b
 810b92c:	2b40      	cmp	r3, #64	@ 0x40
 810b92e:	d037      	beq.n	810b9a0 <UART_SetConfig+0x6bc>
 810b930:	e03a      	b.n	810b9a8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810b932:	f7fc f80f 	bl	8107954 <HAL_RCCEx_GetD3PCLK1Freq>
 810b936:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810b938:	e03c      	b.n	810b9b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810b93a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810b93e:	4618      	mov	r0, r3
 810b940:	f7fc f81e 	bl	8107980 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810b944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b948:	e034      	b.n	810b9b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810b94a:	f107 0318 	add.w	r3, r7, #24
 810b94e:	4618      	mov	r0, r3
 810b950:	f7fc f96a 	bl	8107c28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810b954:	69fb      	ldr	r3, [r7, #28]
 810b956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b958:	e02c      	b.n	810b9b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810b95a:	4b09      	ldr	r3, [pc, #36]	@ (810b980 <UART_SetConfig+0x69c>)
 810b95c:	681b      	ldr	r3, [r3, #0]
 810b95e:	f003 0320 	and.w	r3, r3, #32
 810b962:	2b00      	cmp	r3, #0
 810b964:	d016      	beq.n	810b994 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810b966:	4b06      	ldr	r3, [pc, #24]	@ (810b980 <UART_SetConfig+0x69c>)
 810b968:	681b      	ldr	r3, [r3, #0]
 810b96a:	08db      	lsrs	r3, r3, #3
 810b96c:	f003 0303 	and.w	r3, r3, #3
 810b970:	4a07      	ldr	r2, [pc, #28]	@ (810b990 <UART_SetConfig+0x6ac>)
 810b972:	fa22 f303 	lsr.w	r3, r2, r3
 810b976:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810b978:	e01c      	b.n	810b9b4 <UART_SetConfig+0x6d0>
 810b97a:	bf00      	nop
 810b97c:	40011400 	.word	0x40011400
 810b980:	58024400 	.word	0x58024400
 810b984:	40007800 	.word	0x40007800
 810b988:	40007c00 	.word	0x40007c00
 810b98c:	58000c00 	.word	0x58000c00
 810b990:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810b994:	4b9d      	ldr	r3, [pc, #628]	@ (810bc0c <UART_SetConfig+0x928>)
 810b996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b998:	e00c      	b.n	810b9b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810b99a:	4b9d      	ldr	r3, [pc, #628]	@ (810bc10 <UART_SetConfig+0x92c>)
 810b99c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b99e:	e009      	b.n	810b9b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810b9a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810b9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810b9a6:	e005      	b.n	810b9b4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810b9a8:	2300      	movs	r3, #0
 810b9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810b9ac:	2301      	movs	r3, #1
 810b9ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810b9b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810b9b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b9b6:	2b00      	cmp	r3, #0
 810b9b8:	f000 81de 	beq.w	810bd78 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810b9bc:	697b      	ldr	r3, [r7, #20]
 810b9be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b9c0:	4a94      	ldr	r2, [pc, #592]	@ (810bc14 <UART_SetConfig+0x930>)
 810b9c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810b9c6:	461a      	mov	r2, r3
 810b9c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b9ca:	fbb3 f3f2 	udiv	r3, r3, r2
 810b9ce:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810b9d0:	697b      	ldr	r3, [r7, #20]
 810b9d2:	685a      	ldr	r2, [r3, #4]
 810b9d4:	4613      	mov	r3, r2
 810b9d6:	005b      	lsls	r3, r3, #1
 810b9d8:	4413      	add	r3, r2
 810b9da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b9dc:	429a      	cmp	r2, r3
 810b9de:	d305      	bcc.n	810b9ec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810b9e0:	697b      	ldr	r3, [r7, #20]
 810b9e2:	685b      	ldr	r3, [r3, #4]
 810b9e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810b9e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b9e8:	429a      	cmp	r2, r3
 810b9ea:	d903      	bls.n	810b9f4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810b9ec:	2301      	movs	r3, #1
 810b9ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810b9f2:	e1c1      	b.n	810bd78 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810b9f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b9f6:	2200      	movs	r2, #0
 810b9f8:	60bb      	str	r3, [r7, #8]
 810b9fa:	60fa      	str	r2, [r7, #12]
 810b9fc:	697b      	ldr	r3, [r7, #20]
 810b9fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810ba00:	4a84      	ldr	r2, [pc, #528]	@ (810bc14 <UART_SetConfig+0x930>)
 810ba02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810ba06:	b29b      	uxth	r3, r3
 810ba08:	2200      	movs	r2, #0
 810ba0a:	603b      	str	r3, [r7, #0]
 810ba0c:	607a      	str	r2, [r7, #4]
 810ba0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 810ba12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810ba16:	f7f4 fc5f 	bl	81002d8 <__aeabi_uldivmod>
 810ba1a:	4602      	mov	r2, r0
 810ba1c:	460b      	mov	r3, r1
 810ba1e:	4610      	mov	r0, r2
 810ba20:	4619      	mov	r1, r3
 810ba22:	f04f 0200 	mov.w	r2, #0
 810ba26:	f04f 0300 	mov.w	r3, #0
 810ba2a:	020b      	lsls	r3, r1, #8
 810ba2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810ba30:	0202      	lsls	r2, r0, #8
 810ba32:	6979      	ldr	r1, [r7, #20]
 810ba34:	6849      	ldr	r1, [r1, #4]
 810ba36:	0849      	lsrs	r1, r1, #1
 810ba38:	2000      	movs	r0, #0
 810ba3a:	460c      	mov	r4, r1
 810ba3c:	4605      	mov	r5, r0
 810ba3e:	eb12 0804 	adds.w	r8, r2, r4
 810ba42:	eb43 0905 	adc.w	r9, r3, r5
 810ba46:	697b      	ldr	r3, [r7, #20]
 810ba48:	685b      	ldr	r3, [r3, #4]
 810ba4a:	2200      	movs	r2, #0
 810ba4c:	469a      	mov	sl, r3
 810ba4e:	4693      	mov	fp, r2
 810ba50:	4652      	mov	r2, sl
 810ba52:	465b      	mov	r3, fp
 810ba54:	4640      	mov	r0, r8
 810ba56:	4649      	mov	r1, r9
 810ba58:	f7f4 fc3e 	bl	81002d8 <__aeabi_uldivmod>
 810ba5c:	4602      	mov	r2, r0
 810ba5e:	460b      	mov	r3, r1
 810ba60:	4613      	mov	r3, r2
 810ba62:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810ba64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ba66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810ba6a:	d308      	bcc.n	810ba7e <UART_SetConfig+0x79a>
 810ba6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ba6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810ba72:	d204      	bcs.n	810ba7e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810ba74:	697b      	ldr	r3, [r7, #20]
 810ba76:	681b      	ldr	r3, [r3, #0]
 810ba78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810ba7a:	60da      	str	r2, [r3, #12]
 810ba7c:	e17c      	b.n	810bd78 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810ba7e:	2301      	movs	r3, #1
 810ba80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810ba84:	e178      	b.n	810bd78 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810ba86:	697b      	ldr	r3, [r7, #20]
 810ba88:	69db      	ldr	r3, [r3, #28]
 810ba8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810ba8e:	f040 80c5 	bne.w	810bc1c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810ba92:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810ba96:	2b20      	cmp	r3, #32
 810ba98:	dc48      	bgt.n	810bb2c <UART_SetConfig+0x848>
 810ba9a:	2b00      	cmp	r3, #0
 810ba9c:	db7b      	blt.n	810bb96 <UART_SetConfig+0x8b2>
 810ba9e:	2b20      	cmp	r3, #32
 810baa0:	d879      	bhi.n	810bb96 <UART_SetConfig+0x8b2>
 810baa2:	a201      	add	r2, pc, #4	@ (adr r2, 810baa8 <UART_SetConfig+0x7c4>)
 810baa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810baa8:	0810bb33 	.word	0x0810bb33
 810baac:	0810bb3b 	.word	0x0810bb3b
 810bab0:	0810bb97 	.word	0x0810bb97
 810bab4:	0810bb97 	.word	0x0810bb97
 810bab8:	0810bb43 	.word	0x0810bb43
 810babc:	0810bb97 	.word	0x0810bb97
 810bac0:	0810bb97 	.word	0x0810bb97
 810bac4:	0810bb97 	.word	0x0810bb97
 810bac8:	0810bb53 	.word	0x0810bb53
 810bacc:	0810bb97 	.word	0x0810bb97
 810bad0:	0810bb97 	.word	0x0810bb97
 810bad4:	0810bb97 	.word	0x0810bb97
 810bad8:	0810bb97 	.word	0x0810bb97
 810badc:	0810bb97 	.word	0x0810bb97
 810bae0:	0810bb97 	.word	0x0810bb97
 810bae4:	0810bb97 	.word	0x0810bb97
 810bae8:	0810bb63 	.word	0x0810bb63
 810baec:	0810bb97 	.word	0x0810bb97
 810baf0:	0810bb97 	.word	0x0810bb97
 810baf4:	0810bb97 	.word	0x0810bb97
 810baf8:	0810bb97 	.word	0x0810bb97
 810bafc:	0810bb97 	.word	0x0810bb97
 810bb00:	0810bb97 	.word	0x0810bb97
 810bb04:	0810bb97 	.word	0x0810bb97
 810bb08:	0810bb97 	.word	0x0810bb97
 810bb0c:	0810bb97 	.word	0x0810bb97
 810bb10:	0810bb97 	.word	0x0810bb97
 810bb14:	0810bb97 	.word	0x0810bb97
 810bb18:	0810bb97 	.word	0x0810bb97
 810bb1c:	0810bb97 	.word	0x0810bb97
 810bb20:	0810bb97 	.word	0x0810bb97
 810bb24:	0810bb97 	.word	0x0810bb97
 810bb28:	0810bb89 	.word	0x0810bb89
 810bb2c:	2b40      	cmp	r3, #64	@ 0x40
 810bb2e:	d02e      	beq.n	810bb8e <UART_SetConfig+0x8aa>
 810bb30:	e031      	b.n	810bb96 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810bb32:	f7f9 ff19 	bl	8105968 <HAL_RCC_GetPCLK1Freq>
 810bb36:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810bb38:	e033      	b.n	810bba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810bb3a:	f7f9 ff2b 	bl	8105994 <HAL_RCC_GetPCLK2Freq>
 810bb3e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810bb40:	e02f      	b.n	810bba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bb42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810bb46:	4618      	mov	r0, r3
 810bb48:	f7fb ff1a 	bl	8107980 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810bb4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bb4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bb50:	e027      	b.n	810bba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bb52:	f107 0318 	add.w	r3, r7, #24
 810bb56:	4618      	mov	r0, r3
 810bb58:	f7fc f866 	bl	8107c28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810bb5c:	69fb      	ldr	r3, [r7, #28]
 810bb5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bb60:	e01f      	b.n	810bba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810bb62:	4b2d      	ldr	r3, [pc, #180]	@ (810bc18 <UART_SetConfig+0x934>)
 810bb64:	681b      	ldr	r3, [r3, #0]
 810bb66:	f003 0320 	and.w	r3, r3, #32
 810bb6a:	2b00      	cmp	r3, #0
 810bb6c:	d009      	beq.n	810bb82 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810bb6e:	4b2a      	ldr	r3, [pc, #168]	@ (810bc18 <UART_SetConfig+0x934>)
 810bb70:	681b      	ldr	r3, [r3, #0]
 810bb72:	08db      	lsrs	r3, r3, #3
 810bb74:	f003 0303 	and.w	r3, r3, #3
 810bb78:	4a24      	ldr	r2, [pc, #144]	@ (810bc0c <UART_SetConfig+0x928>)
 810bb7a:	fa22 f303 	lsr.w	r3, r2, r3
 810bb7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810bb80:	e00f      	b.n	810bba2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810bb82:	4b22      	ldr	r3, [pc, #136]	@ (810bc0c <UART_SetConfig+0x928>)
 810bb84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bb86:	e00c      	b.n	810bba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810bb88:	4b21      	ldr	r3, [pc, #132]	@ (810bc10 <UART_SetConfig+0x92c>)
 810bb8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bb8c:	e009      	b.n	810bba2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810bb8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810bb92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bb94:	e005      	b.n	810bba2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810bb96:	2300      	movs	r3, #0
 810bb98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810bb9a:	2301      	movs	r3, #1
 810bb9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810bba0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810bba2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810bba4:	2b00      	cmp	r3, #0
 810bba6:	f000 80e7 	beq.w	810bd78 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810bbaa:	697b      	ldr	r3, [r7, #20]
 810bbac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810bbae:	4a19      	ldr	r2, [pc, #100]	@ (810bc14 <UART_SetConfig+0x930>)
 810bbb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810bbb4:	461a      	mov	r2, r3
 810bbb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810bbb8:	fbb3 f3f2 	udiv	r3, r3, r2
 810bbbc:	005a      	lsls	r2, r3, #1
 810bbbe:	697b      	ldr	r3, [r7, #20]
 810bbc0:	685b      	ldr	r3, [r3, #4]
 810bbc2:	085b      	lsrs	r3, r3, #1
 810bbc4:	441a      	add	r2, r3
 810bbc6:	697b      	ldr	r3, [r7, #20]
 810bbc8:	685b      	ldr	r3, [r3, #4]
 810bbca:	fbb2 f3f3 	udiv	r3, r2, r3
 810bbce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810bbd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bbd2:	2b0f      	cmp	r3, #15
 810bbd4:	d916      	bls.n	810bc04 <UART_SetConfig+0x920>
 810bbd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bbd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810bbdc:	d212      	bcs.n	810bc04 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810bbde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bbe0:	b29b      	uxth	r3, r3
 810bbe2:	f023 030f 	bic.w	r3, r3, #15
 810bbe6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810bbe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bbea:	085b      	lsrs	r3, r3, #1
 810bbec:	b29b      	uxth	r3, r3
 810bbee:	f003 0307 	and.w	r3, r3, #7
 810bbf2:	b29a      	uxth	r2, r3
 810bbf4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810bbf6:	4313      	orrs	r3, r2
 810bbf8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810bbfa:	697b      	ldr	r3, [r7, #20]
 810bbfc:	681b      	ldr	r3, [r3, #0]
 810bbfe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810bc00:	60da      	str	r2, [r3, #12]
 810bc02:	e0b9      	b.n	810bd78 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810bc04:	2301      	movs	r3, #1
 810bc06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810bc0a:	e0b5      	b.n	810bd78 <UART_SetConfig+0xa94>
 810bc0c:	03d09000 	.word	0x03d09000
 810bc10:	003d0900 	.word	0x003d0900
 810bc14:	0810d5ec 	.word	0x0810d5ec
 810bc18:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810bc1c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810bc20:	2b20      	cmp	r3, #32
 810bc22:	dc49      	bgt.n	810bcb8 <UART_SetConfig+0x9d4>
 810bc24:	2b00      	cmp	r3, #0
 810bc26:	db7c      	blt.n	810bd22 <UART_SetConfig+0xa3e>
 810bc28:	2b20      	cmp	r3, #32
 810bc2a:	d87a      	bhi.n	810bd22 <UART_SetConfig+0xa3e>
 810bc2c:	a201      	add	r2, pc, #4	@ (adr r2, 810bc34 <UART_SetConfig+0x950>)
 810bc2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810bc32:	bf00      	nop
 810bc34:	0810bcbf 	.word	0x0810bcbf
 810bc38:	0810bcc7 	.word	0x0810bcc7
 810bc3c:	0810bd23 	.word	0x0810bd23
 810bc40:	0810bd23 	.word	0x0810bd23
 810bc44:	0810bccf 	.word	0x0810bccf
 810bc48:	0810bd23 	.word	0x0810bd23
 810bc4c:	0810bd23 	.word	0x0810bd23
 810bc50:	0810bd23 	.word	0x0810bd23
 810bc54:	0810bcdf 	.word	0x0810bcdf
 810bc58:	0810bd23 	.word	0x0810bd23
 810bc5c:	0810bd23 	.word	0x0810bd23
 810bc60:	0810bd23 	.word	0x0810bd23
 810bc64:	0810bd23 	.word	0x0810bd23
 810bc68:	0810bd23 	.word	0x0810bd23
 810bc6c:	0810bd23 	.word	0x0810bd23
 810bc70:	0810bd23 	.word	0x0810bd23
 810bc74:	0810bcef 	.word	0x0810bcef
 810bc78:	0810bd23 	.word	0x0810bd23
 810bc7c:	0810bd23 	.word	0x0810bd23
 810bc80:	0810bd23 	.word	0x0810bd23
 810bc84:	0810bd23 	.word	0x0810bd23
 810bc88:	0810bd23 	.word	0x0810bd23
 810bc8c:	0810bd23 	.word	0x0810bd23
 810bc90:	0810bd23 	.word	0x0810bd23
 810bc94:	0810bd23 	.word	0x0810bd23
 810bc98:	0810bd23 	.word	0x0810bd23
 810bc9c:	0810bd23 	.word	0x0810bd23
 810bca0:	0810bd23 	.word	0x0810bd23
 810bca4:	0810bd23 	.word	0x0810bd23
 810bca8:	0810bd23 	.word	0x0810bd23
 810bcac:	0810bd23 	.word	0x0810bd23
 810bcb0:	0810bd23 	.word	0x0810bd23
 810bcb4:	0810bd15 	.word	0x0810bd15
 810bcb8:	2b40      	cmp	r3, #64	@ 0x40
 810bcba:	d02e      	beq.n	810bd1a <UART_SetConfig+0xa36>
 810bcbc:	e031      	b.n	810bd22 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810bcbe:	f7f9 fe53 	bl	8105968 <HAL_RCC_GetPCLK1Freq>
 810bcc2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810bcc4:	e033      	b.n	810bd2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810bcc6:	f7f9 fe65 	bl	8105994 <HAL_RCC_GetPCLK2Freq>
 810bcca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810bccc:	e02f      	b.n	810bd2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810bcce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810bcd2:	4618      	mov	r0, r3
 810bcd4:	f7fb fe54 	bl	8107980 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810bcd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bcda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bcdc:	e027      	b.n	810bd2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810bcde:	f107 0318 	add.w	r3, r7, #24
 810bce2:	4618      	mov	r0, r3
 810bce4:	f7fb ffa0 	bl	8107c28 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810bce8:	69fb      	ldr	r3, [r7, #28]
 810bcea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bcec:	e01f      	b.n	810bd2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810bcee:	4b2d      	ldr	r3, [pc, #180]	@ (810bda4 <UART_SetConfig+0xac0>)
 810bcf0:	681b      	ldr	r3, [r3, #0]
 810bcf2:	f003 0320 	and.w	r3, r3, #32
 810bcf6:	2b00      	cmp	r3, #0
 810bcf8:	d009      	beq.n	810bd0e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810bcfa:	4b2a      	ldr	r3, [pc, #168]	@ (810bda4 <UART_SetConfig+0xac0>)
 810bcfc:	681b      	ldr	r3, [r3, #0]
 810bcfe:	08db      	lsrs	r3, r3, #3
 810bd00:	f003 0303 	and.w	r3, r3, #3
 810bd04:	4a28      	ldr	r2, [pc, #160]	@ (810bda8 <UART_SetConfig+0xac4>)
 810bd06:	fa22 f303 	lsr.w	r3, r2, r3
 810bd0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810bd0c:	e00f      	b.n	810bd2e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810bd0e:	4b26      	ldr	r3, [pc, #152]	@ (810bda8 <UART_SetConfig+0xac4>)
 810bd10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bd12:	e00c      	b.n	810bd2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810bd14:	4b25      	ldr	r3, [pc, #148]	@ (810bdac <UART_SetConfig+0xac8>)
 810bd16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bd18:	e009      	b.n	810bd2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810bd1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810bd1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810bd20:	e005      	b.n	810bd2e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810bd22:	2300      	movs	r3, #0
 810bd24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810bd26:	2301      	movs	r3, #1
 810bd28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810bd2c:	bf00      	nop
    }

    if (pclk != 0U)
 810bd2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810bd30:	2b00      	cmp	r3, #0
 810bd32:	d021      	beq.n	810bd78 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810bd34:	697b      	ldr	r3, [r7, #20]
 810bd36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810bd38:	4a1d      	ldr	r2, [pc, #116]	@ (810bdb0 <UART_SetConfig+0xacc>)
 810bd3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810bd3e:	461a      	mov	r2, r3
 810bd40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810bd42:	fbb3 f2f2 	udiv	r2, r3, r2
 810bd46:	697b      	ldr	r3, [r7, #20]
 810bd48:	685b      	ldr	r3, [r3, #4]
 810bd4a:	085b      	lsrs	r3, r3, #1
 810bd4c:	441a      	add	r2, r3
 810bd4e:	697b      	ldr	r3, [r7, #20]
 810bd50:	685b      	ldr	r3, [r3, #4]
 810bd52:	fbb2 f3f3 	udiv	r3, r2, r3
 810bd56:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810bd58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd5a:	2b0f      	cmp	r3, #15
 810bd5c:	d909      	bls.n	810bd72 <UART_SetConfig+0xa8e>
 810bd5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810bd64:	d205      	bcs.n	810bd72 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810bd66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bd68:	b29a      	uxth	r2, r3
 810bd6a:	697b      	ldr	r3, [r7, #20]
 810bd6c:	681b      	ldr	r3, [r3, #0]
 810bd6e:	60da      	str	r2, [r3, #12]
 810bd70:	e002      	b.n	810bd78 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810bd72:	2301      	movs	r3, #1
 810bd74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810bd78:	697b      	ldr	r3, [r7, #20]
 810bd7a:	2201      	movs	r2, #1
 810bd7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810bd80:	697b      	ldr	r3, [r7, #20]
 810bd82:	2201      	movs	r2, #1
 810bd84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810bd88:	697b      	ldr	r3, [r7, #20]
 810bd8a:	2200      	movs	r2, #0
 810bd8c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810bd8e:	697b      	ldr	r3, [r7, #20]
 810bd90:	2200      	movs	r2, #0
 810bd92:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810bd94:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810bd98:	4618      	mov	r0, r3
 810bd9a:	3748      	adds	r7, #72	@ 0x48
 810bd9c:	46bd      	mov	sp, r7
 810bd9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810bda2:	bf00      	nop
 810bda4:	58024400 	.word	0x58024400
 810bda8:	03d09000 	.word	0x03d09000
 810bdac:	003d0900 	.word	0x003d0900
 810bdb0:	0810d5ec 	.word	0x0810d5ec

0810bdb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810bdb4:	b480      	push	{r7}
 810bdb6:	b083      	sub	sp, #12
 810bdb8:	af00      	add	r7, sp, #0
 810bdba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810bdbc:	687b      	ldr	r3, [r7, #4]
 810bdbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810bdc0:	f003 0308 	and.w	r3, r3, #8
 810bdc4:	2b00      	cmp	r3, #0
 810bdc6:	d00a      	beq.n	810bdde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810bdc8:	687b      	ldr	r3, [r7, #4]
 810bdca:	681b      	ldr	r3, [r3, #0]
 810bdcc:	685b      	ldr	r3, [r3, #4]
 810bdce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810bdd2:	687b      	ldr	r3, [r7, #4]
 810bdd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810bdd6:	687b      	ldr	r3, [r7, #4]
 810bdd8:	681b      	ldr	r3, [r3, #0]
 810bdda:	430a      	orrs	r2, r1
 810bddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810bdde:	687b      	ldr	r3, [r7, #4]
 810bde0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810bde2:	f003 0301 	and.w	r3, r3, #1
 810bde6:	2b00      	cmp	r3, #0
 810bde8:	d00a      	beq.n	810be00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810bdea:	687b      	ldr	r3, [r7, #4]
 810bdec:	681b      	ldr	r3, [r3, #0]
 810bdee:	685b      	ldr	r3, [r3, #4]
 810bdf0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810bdf4:	687b      	ldr	r3, [r7, #4]
 810bdf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810bdf8:	687b      	ldr	r3, [r7, #4]
 810bdfa:	681b      	ldr	r3, [r3, #0]
 810bdfc:	430a      	orrs	r2, r1
 810bdfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810be00:	687b      	ldr	r3, [r7, #4]
 810be02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810be04:	f003 0302 	and.w	r3, r3, #2
 810be08:	2b00      	cmp	r3, #0
 810be0a:	d00a      	beq.n	810be22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810be0c:	687b      	ldr	r3, [r7, #4]
 810be0e:	681b      	ldr	r3, [r3, #0]
 810be10:	685b      	ldr	r3, [r3, #4]
 810be12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810be16:	687b      	ldr	r3, [r7, #4]
 810be18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810be1a:	687b      	ldr	r3, [r7, #4]
 810be1c:	681b      	ldr	r3, [r3, #0]
 810be1e:	430a      	orrs	r2, r1
 810be20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810be22:	687b      	ldr	r3, [r7, #4]
 810be24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810be26:	f003 0304 	and.w	r3, r3, #4
 810be2a:	2b00      	cmp	r3, #0
 810be2c:	d00a      	beq.n	810be44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810be2e:	687b      	ldr	r3, [r7, #4]
 810be30:	681b      	ldr	r3, [r3, #0]
 810be32:	685b      	ldr	r3, [r3, #4]
 810be34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810be38:	687b      	ldr	r3, [r7, #4]
 810be3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810be3c:	687b      	ldr	r3, [r7, #4]
 810be3e:	681b      	ldr	r3, [r3, #0]
 810be40:	430a      	orrs	r2, r1
 810be42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810be44:	687b      	ldr	r3, [r7, #4]
 810be46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810be48:	f003 0310 	and.w	r3, r3, #16
 810be4c:	2b00      	cmp	r3, #0
 810be4e:	d00a      	beq.n	810be66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810be50:	687b      	ldr	r3, [r7, #4]
 810be52:	681b      	ldr	r3, [r3, #0]
 810be54:	689b      	ldr	r3, [r3, #8]
 810be56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810be5a:	687b      	ldr	r3, [r7, #4]
 810be5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810be5e:	687b      	ldr	r3, [r7, #4]
 810be60:	681b      	ldr	r3, [r3, #0]
 810be62:	430a      	orrs	r2, r1
 810be64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810be66:	687b      	ldr	r3, [r7, #4]
 810be68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810be6a:	f003 0320 	and.w	r3, r3, #32
 810be6e:	2b00      	cmp	r3, #0
 810be70:	d00a      	beq.n	810be88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810be72:	687b      	ldr	r3, [r7, #4]
 810be74:	681b      	ldr	r3, [r3, #0]
 810be76:	689b      	ldr	r3, [r3, #8]
 810be78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810be7c:	687b      	ldr	r3, [r7, #4]
 810be7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810be80:	687b      	ldr	r3, [r7, #4]
 810be82:	681b      	ldr	r3, [r3, #0]
 810be84:	430a      	orrs	r2, r1
 810be86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810be88:	687b      	ldr	r3, [r7, #4]
 810be8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810be8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810be90:	2b00      	cmp	r3, #0
 810be92:	d01a      	beq.n	810beca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810be94:	687b      	ldr	r3, [r7, #4]
 810be96:	681b      	ldr	r3, [r3, #0]
 810be98:	685b      	ldr	r3, [r3, #4]
 810be9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810be9e:	687b      	ldr	r3, [r7, #4]
 810bea0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810bea2:	687b      	ldr	r3, [r7, #4]
 810bea4:	681b      	ldr	r3, [r3, #0]
 810bea6:	430a      	orrs	r2, r1
 810bea8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810beaa:	687b      	ldr	r3, [r7, #4]
 810beac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810beae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810beb2:	d10a      	bne.n	810beca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810beb4:	687b      	ldr	r3, [r7, #4]
 810beb6:	681b      	ldr	r3, [r3, #0]
 810beb8:	685b      	ldr	r3, [r3, #4]
 810beba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810bebe:	687b      	ldr	r3, [r7, #4]
 810bec0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810bec2:	687b      	ldr	r3, [r7, #4]
 810bec4:	681b      	ldr	r3, [r3, #0]
 810bec6:	430a      	orrs	r2, r1
 810bec8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810beca:	687b      	ldr	r3, [r7, #4]
 810becc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810bece:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810bed2:	2b00      	cmp	r3, #0
 810bed4:	d00a      	beq.n	810beec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810bed6:	687b      	ldr	r3, [r7, #4]
 810bed8:	681b      	ldr	r3, [r3, #0]
 810beda:	685b      	ldr	r3, [r3, #4]
 810bedc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810bee0:	687b      	ldr	r3, [r7, #4]
 810bee2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810bee4:	687b      	ldr	r3, [r7, #4]
 810bee6:	681b      	ldr	r3, [r3, #0]
 810bee8:	430a      	orrs	r2, r1
 810beea:	605a      	str	r2, [r3, #4]
  }
}
 810beec:	bf00      	nop
 810beee:	370c      	adds	r7, #12
 810bef0:	46bd      	mov	sp, r7
 810bef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bef6:	4770      	bx	lr

0810bef8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810bef8:	b580      	push	{r7, lr}
 810befa:	b098      	sub	sp, #96	@ 0x60
 810befc:	af02      	add	r7, sp, #8
 810befe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810bf00:	687b      	ldr	r3, [r7, #4]
 810bf02:	2200      	movs	r2, #0
 810bf04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810bf08:	f7f6 feac 	bl	8102c64 <HAL_GetTick>
 810bf0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810bf0e:	687b      	ldr	r3, [r7, #4]
 810bf10:	681b      	ldr	r3, [r3, #0]
 810bf12:	681b      	ldr	r3, [r3, #0]
 810bf14:	f003 0308 	and.w	r3, r3, #8
 810bf18:	2b08      	cmp	r3, #8
 810bf1a:	d12f      	bne.n	810bf7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810bf1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810bf20:	9300      	str	r3, [sp, #0]
 810bf22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810bf24:	2200      	movs	r2, #0
 810bf26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810bf2a:	6878      	ldr	r0, [r7, #4]
 810bf2c:	f000 f88e 	bl	810c04c <UART_WaitOnFlagUntilTimeout>
 810bf30:	4603      	mov	r3, r0
 810bf32:	2b00      	cmp	r3, #0
 810bf34:	d022      	beq.n	810bf7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810bf36:	687b      	ldr	r3, [r7, #4]
 810bf38:	681b      	ldr	r3, [r3, #0]
 810bf3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810bf3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810bf3e:	e853 3f00 	ldrex	r3, [r3]
 810bf42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810bf44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810bf46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810bf4a:	653b      	str	r3, [r7, #80]	@ 0x50
 810bf4c:	687b      	ldr	r3, [r7, #4]
 810bf4e:	681b      	ldr	r3, [r3, #0]
 810bf50:	461a      	mov	r2, r3
 810bf52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810bf54:	647b      	str	r3, [r7, #68]	@ 0x44
 810bf56:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810bf58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810bf5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810bf5c:	e841 2300 	strex	r3, r2, [r1]
 810bf60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810bf62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810bf64:	2b00      	cmp	r3, #0
 810bf66:	d1e6      	bne.n	810bf36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810bf68:	687b      	ldr	r3, [r7, #4]
 810bf6a:	2220      	movs	r2, #32
 810bf6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810bf70:	687b      	ldr	r3, [r7, #4]
 810bf72:	2200      	movs	r2, #0
 810bf74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810bf78:	2303      	movs	r3, #3
 810bf7a:	e063      	b.n	810c044 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810bf7c:	687b      	ldr	r3, [r7, #4]
 810bf7e:	681b      	ldr	r3, [r3, #0]
 810bf80:	681b      	ldr	r3, [r3, #0]
 810bf82:	f003 0304 	and.w	r3, r3, #4
 810bf86:	2b04      	cmp	r3, #4
 810bf88:	d149      	bne.n	810c01e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810bf8a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810bf8e:	9300      	str	r3, [sp, #0]
 810bf90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810bf92:	2200      	movs	r2, #0
 810bf94:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810bf98:	6878      	ldr	r0, [r7, #4]
 810bf9a:	f000 f857 	bl	810c04c <UART_WaitOnFlagUntilTimeout>
 810bf9e:	4603      	mov	r3, r0
 810bfa0:	2b00      	cmp	r3, #0
 810bfa2:	d03c      	beq.n	810c01e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810bfa4:	687b      	ldr	r3, [r7, #4]
 810bfa6:	681b      	ldr	r3, [r3, #0]
 810bfa8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810bfaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810bfac:	e853 3f00 	ldrex	r3, [r3]
 810bfb0:	623b      	str	r3, [r7, #32]
   return(result);
 810bfb2:	6a3b      	ldr	r3, [r7, #32]
 810bfb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810bfb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810bfba:	687b      	ldr	r3, [r7, #4]
 810bfbc:	681b      	ldr	r3, [r3, #0]
 810bfbe:	461a      	mov	r2, r3
 810bfc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810bfc2:	633b      	str	r3, [r7, #48]	@ 0x30
 810bfc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810bfc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810bfc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810bfca:	e841 2300 	strex	r3, r2, [r1]
 810bfce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810bfd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810bfd2:	2b00      	cmp	r3, #0
 810bfd4:	d1e6      	bne.n	810bfa4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810bfd6:	687b      	ldr	r3, [r7, #4]
 810bfd8:	681b      	ldr	r3, [r3, #0]
 810bfda:	3308      	adds	r3, #8
 810bfdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810bfde:	693b      	ldr	r3, [r7, #16]
 810bfe0:	e853 3f00 	ldrex	r3, [r3]
 810bfe4:	60fb      	str	r3, [r7, #12]
   return(result);
 810bfe6:	68fb      	ldr	r3, [r7, #12]
 810bfe8:	f023 0301 	bic.w	r3, r3, #1
 810bfec:	64bb      	str	r3, [r7, #72]	@ 0x48
 810bfee:	687b      	ldr	r3, [r7, #4]
 810bff0:	681b      	ldr	r3, [r3, #0]
 810bff2:	3308      	adds	r3, #8
 810bff4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810bff6:	61fa      	str	r2, [r7, #28]
 810bff8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810bffa:	69b9      	ldr	r1, [r7, #24]
 810bffc:	69fa      	ldr	r2, [r7, #28]
 810bffe:	e841 2300 	strex	r3, r2, [r1]
 810c002:	617b      	str	r3, [r7, #20]
   return(result);
 810c004:	697b      	ldr	r3, [r7, #20]
 810c006:	2b00      	cmp	r3, #0
 810c008:	d1e5      	bne.n	810bfd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810c00a:	687b      	ldr	r3, [r7, #4]
 810c00c:	2220      	movs	r2, #32
 810c00e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810c012:	687b      	ldr	r3, [r7, #4]
 810c014:	2200      	movs	r2, #0
 810c016:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810c01a:	2303      	movs	r3, #3
 810c01c:	e012      	b.n	810c044 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810c01e:	687b      	ldr	r3, [r7, #4]
 810c020:	2220      	movs	r2, #32
 810c022:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810c026:	687b      	ldr	r3, [r7, #4]
 810c028:	2220      	movs	r2, #32
 810c02a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c02e:	687b      	ldr	r3, [r7, #4]
 810c030:	2200      	movs	r2, #0
 810c032:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810c034:	687b      	ldr	r3, [r7, #4]
 810c036:	2200      	movs	r2, #0
 810c038:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810c03a:	687b      	ldr	r3, [r7, #4]
 810c03c:	2200      	movs	r2, #0
 810c03e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810c042:	2300      	movs	r3, #0
}
 810c044:	4618      	mov	r0, r3
 810c046:	3758      	adds	r7, #88	@ 0x58
 810c048:	46bd      	mov	sp, r7
 810c04a:	bd80      	pop	{r7, pc}

0810c04c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810c04c:	b580      	push	{r7, lr}
 810c04e:	b084      	sub	sp, #16
 810c050:	af00      	add	r7, sp, #0
 810c052:	60f8      	str	r0, [r7, #12]
 810c054:	60b9      	str	r1, [r7, #8]
 810c056:	603b      	str	r3, [r7, #0]
 810c058:	4613      	mov	r3, r2
 810c05a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810c05c:	e04f      	b.n	810c0fe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810c05e:	69bb      	ldr	r3, [r7, #24]
 810c060:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c064:	d04b      	beq.n	810c0fe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810c066:	f7f6 fdfd 	bl	8102c64 <HAL_GetTick>
 810c06a:	4602      	mov	r2, r0
 810c06c:	683b      	ldr	r3, [r7, #0]
 810c06e:	1ad3      	subs	r3, r2, r3
 810c070:	69ba      	ldr	r2, [r7, #24]
 810c072:	429a      	cmp	r2, r3
 810c074:	d302      	bcc.n	810c07c <UART_WaitOnFlagUntilTimeout+0x30>
 810c076:	69bb      	ldr	r3, [r7, #24]
 810c078:	2b00      	cmp	r3, #0
 810c07a:	d101      	bne.n	810c080 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810c07c:	2303      	movs	r3, #3
 810c07e:	e04e      	b.n	810c11e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810c080:	68fb      	ldr	r3, [r7, #12]
 810c082:	681b      	ldr	r3, [r3, #0]
 810c084:	681b      	ldr	r3, [r3, #0]
 810c086:	f003 0304 	and.w	r3, r3, #4
 810c08a:	2b00      	cmp	r3, #0
 810c08c:	d037      	beq.n	810c0fe <UART_WaitOnFlagUntilTimeout+0xb2>
 810c08e:	68bb      	ldr	r3, [r7, #8]
 810c090:	2b80      	cmp	r3, #128	@ 0x80
 810c092:	d034      	beq.n	810c0fe <UART_WaitOnFlagUntilTimeout+0xb2>
 810c094:	68bb      	ldr	r3, [r7, #8]
 810c096:	2b40      	cmp	r3, #64	@ 0x40
 810c098:	d031      	beq.n	810c0fe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810c09a:	68fb      	ldr	r3, [r7, #12]
 810c09c:	681b      	ldr	r3, [r3, #0]
 810c09e:	69db      	ldr	r3, [r3, #28]
 810c0a0:	f003 0308 	and.w	r3, r3, #8
 810c0a4:	2b08      	cmp	r3, #8
 810c0a6:	d110      	bne.n	810c0ca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810c0a8:	68fb      	ldr	r3, [r7, #12]
 810c0aa:	681b      	ldr	r3, [r3, #0]
 810c0ac:	2208      	movs	r2, #8
 810c0ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810c0b0:	68f8      	ldr	r0, [r7, #12]
 810c0b2:	f000 f838 	bl	810c126 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810c0b6:	68fb      	ldr	r3, [r7, #12]
 810c0b8:	2208      	movs	r2, #8
 810c0ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810c0be:	68fb      	ldr	r3, [r7, #12]
 810c0c0:	2200      	movs	r2, #0
 810c0c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810c0c6:	2301      	movs	r3, #1
 810c0c8:	e029      	b.n	810c11e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810c0ca:	68fb      	ldr	r3, [r7, #12]
 810c0cc:	681b      	ldr	r3, [r3, #0]
 810c0ce:	69db      	ldr	r3, [r3, #28]
 810c0d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810c0d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810c0d8:	d111      	bne.n	810c0fe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810c0da:	68fb      	ldr	r3, [r7, #12]
 810c0dc:	681b      	ldr	r3, [r3, #0]
 810c0de:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810c0e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810c0e4:	68f8      	ldr	r0, [r7, #12]
 810c0e6:	f000 f81e 	bl	810c126 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810c0ea:	68fb      	ldr	r3, [r7, #12]
 810c0ec:	2220      	movs	r2, #32
 810c0ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810c0f2:	68fb      	ldr	r3, [r7, #12]
 810c0f4:	2200      	movs	r2, #0
 810c0f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810c0fa:	2303      	movs	r3, #3
 810c0fc:	e00f      	b.n	810c11e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810c0fe:	68fb      	ldr	r3, [r7, #12]
 810c100:	681b      	ldr	r3, [r3, #0]
 810c102:	69da      	ldr	r2, [r3, #28]
 810c104:	68bb      	ldr	r3, [r7, #8]
 810c106:	4013      	ands	r3, r2
 810c108:	68ba      	ldr	r2, [r7, #8]
 810c10a:	429a      	cmp	r2, r3
 810c10c:	bf0c      	ite	eq
 810c10e:	2301      	moveq	r3, #1
 810c110:	2300      	movne	r3, #0
 810c112:	b2db      	uxtb	r3, r3
 810c114:	461a      	mov	r2, r3
 810c116:	79fb      	ldrb	r3, [r7, #7]
 810c118:	429a      	cmp	r2, r3
 810c11a:	d0a0      	beq.n	810c05e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810c11c:	2300      	movs	r3, #0
}
 810c11e:	4618      	mov	r0, r3
 810c120:	3710      	adds	r7, #16
 810c122:	46bd      	mov	sp, r7
 810c124:	bd80      	pop	{r7, pc}

0810c126 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810c126:	b480      	push	{r7}
 810c128:	b095      	sub	sp, #84	@ 0x54
 810c12a:	af00      	add	r7, sp, #0
 810c12c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810c12e:	687b      	ldr	r3, [r7, #4]
 810c130:	681b      	ldr	r3, [r3, #0]
 810c132:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810c136:	e853 3f00 	ldrex	r3, [r3]
 810c13a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810c13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810c13e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810c142:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810c144:	687b      	ldr	r3, [r7, #4]
 810c146:	681b      	ldr	r3, [r3, #0]
 810c148:	461a      	mov	r2, r3
 810c14a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810c14c:	643b      	str	r3, [r7, #64]	@ 0x40
 810c14e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c150:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810c152:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810c154:	e841 2300 	strex	r3, r2, [r1]
 810c158:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810c15a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810c15c:	2b00      	cmp	r3, #0
 810c15e:	d1e6      	bne.n	810c12e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810c160:	687b      	ldr	r3, [r7, #4]
 810c162:	681b      	ldr	r3, [r3, #0]
 810c164:	3308      	adds	r3, #8
 810c166:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c168:	6a3b      	ldr	r3, [r7, #32]
 810c16a:	e853 3f00 	ldrex	r3, [r3]
 810c16e:	61fb      	str	r3, [r7, #28]
   return(result);
 810c170:	69fb      	ldr	r3, [r7, #28]
 810c172:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810c176:	f023 0301 	bic.w	r3, r3, #1
 810c17a:	64bb      	str	r3, [r7, #72]	@ 0x48
 810c17c:	687b      	ldr	r3, [r7, #4]
 810c17e:	681b      	ldr	r3, [r3, #0]
 810c180:	3308      	adds	r3, #8
 810c182:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810c184:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810c186:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c188:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810c18a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810c18c:	e841 2300 	strex	r3, r2, [r1]
 810c190:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810c192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c194:	2b00      	cmp	r3, #0
 810c196:	d1e3      	bne.n	810c160 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810c198:	687b      	ldr	r3, [r7, #4]
 810c19a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810c19c:	2b01      	cmp	r3, #1
 810c19e:	d118      	bne.n	810c1d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810c1a0:	687b      	ldr	r3, [r7, #4]
 810c1a2:	681b      	ldr	r3, [r3, #0]
 810c1a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810c1a6:	68fb      	ldr	r3, [r7, #12]
 810c1a8:	e853 3f00 	ldrex	r3, [r3]
 810c1ac:	60bb      	str	r3, [r7, #8]
   return(result);
 810c1ae:	68bb      	ldr	r3, [r7, #8]
 810c1b0:	f023 0310 	bic.w	r3, r3, #16
 810c1b4:	647b      	str	r3, [r7, #68]	@ 0x44
 810c1b6:	687b      	ldr	r3, [r7, #4]
 810c1b8:	681b      	ldr	r3, [r3, #0]
 810c1ba:	461a      	mov	r2, r3
 810c1bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810c1be:	61bb      	str	r3, [r7, #24]
 810c1c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810c1c2:	6979      	ldr	r1, [r7, #20]
 810c1c4:	69ba      	ldr	r2, [r7, #24]
 810c1c6:	e841 2300 	strex	r3, r2, [r1]
 810c1ca:	613b      	str	r3, [r7, #16]
   return(result);
 810c1cc:	693b      	ldr	r3, [r7, #16]
 810c1ce:	2b00      	cmp	r3, #0
 810c1d0:	d1e6      	bne.n	810c1a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810c1d2:	687b      	ldr	r3, [r7, #4]
 810c1d4:	2220      	movs	r2, #32
 810c1d6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810c1da:	687b      	ldr	r3, [r7, #4]
 810c1dc:	2200      	movs	r2, #0
 810c1de:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810c1e0:	687b      	ldr	r3, [r7, #4]
 810c1e2:	2200      	movs	r2, #0
 810c1e4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810c1e6:	bf00      	nop
 810c1e8:	3754      	adds	r7, #84	@ 0x54
 810c1ea:	46bd      	mov	sp, r7
 810c1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c1f0:	4770      	bx	lr

0810c1f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810c1f2:	b480      	push	{r7}
 810c1f4:	b085      	sub	sp, #20
 810c1f6:	af00      	add	r7, sp, #0
 810c1f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c1fa:	687b      	ldr	r3, [r7, #4]
 810c1fc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810c200:	2b01      	cmp	r3, #1
 810c202:	d101      	bne.n	810c208 <HAL_UARTEx_DisableFifoMode+0x16>
 810c204:	2302      	movs	r3, #2
 810c206:	e027      	b.n	810c258 <HAL_UARTEx_DisableFifoMode+0x66>
 810c208:	687b      	ldr	r3, [r7, #4]
 810c20a:	2201      	movs	r2, #1
 810c20c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810c210:	687b      	ldr	r3, [r7, #4]
 810c212:	2224      	movs	r2, #36	@ 0x24
 810c214:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c218:	687b      	ldr	r3, [r7, #4]
 810c21a:	681b      	ldr	r3, [r3, #0]
 810c21c:	681b      	ldr	r3, [r3, #0]
 810c21e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c220:	687b      	ldr	r3, [r7, #4]
 810c222:	681b      	ldr	r3, [r3, #0]
 810c224:	681a      	ldr	r2, [r3, #0]
 810c226:	687b      	ldr	r3, [r7, #4]
 810c228:	681b      	ldr	r3, [r3, #0]
 810c22a:	f022 0201 	bic.w	r2, r2, #1
 810c22e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810c230:	68fb      	ldr	r3, [r7, #12]
 810c232:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810c236:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810c238:	687b      	ldr	r3, [r7, #4]
 810c23a:	2200      	movs	r2, #0
 810c23c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c23e:	687b      	ldr	r3, [r7, #4]
 810c240:	681b      	ldr	r3, [r3, #0]
 810c242:	68fa      	ldr	r2, [r7, #12]
 810c244:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c246:	687b      	ldr	r3, [r7, #4]
 810c248:	2220      	movs	r2, #32
 810c24a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c24e:	687b      	ldr	r3, [r7, #4]
 810c250:	2200      	movs	r2, #0
 810c252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810c256:	2300      	movs	r3, #0
}
 810c258:	4618      	mov	r0, r3
 810c25a:	3714      	adds	r7, #20
 810c25c:	46bd      	mov	sp, r7
 810c25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c262:	4770      	bx	lr

0810c264 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810c264:	b580      	push	{r7, lr}
 810c266:	b084      	sub	sp, #16
 810c268:	af00      	add	r7, sp, #0
 810c26a:	6078      	str	r0, [r7, #4]
 810c26c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c26e:	687b      	ldr	r3, [r7, #4]
 810c270:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810c274:	2b01      	cmp	r3, #1
 810c276:	d101      	bne.n	810c27c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810c278:	2302      	movs	r3, #2
 810c27a:	e02d      	b.n	810c2d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810c27c:	687b      	ldr	r3, [r7, #4]
 810c27e:	2201      	movs	r2, #1
 810c280:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810c284:	687b      	ldr	r3, [r7, #4]
 810c286:	2224      	movs	r2, #36	@ 0x24
 810c288:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c28c:	687b      	ldr	r3, [r7, #4]
 810c28e:	681b      	ldr	r3, [r3, #0]
 810c290:	681b      	ldr	r3, [r3, #0]
 810c292:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c294:	687b      	ldr	r3, [r7, #4]
 810c296:	681b      	ldr	r3, [r3, #0]
 810c298:	681a      	ldr	r2, [r3, #0]
 810c29a:	687b      	ldr	r3, [r7, #4]
 810c29c:	681b      	ldr	r3, [r3, #0]
 810c29e:	f022 0201 	bic.w	r2, r2, #1
 810c2a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810c2a4:	687b      	ldr	r3, [r7, #4]
 810c2a6:	681b      	ldr	r3, [r3, #0]
 810c2a8:	689b      	ldr	r3, [r3, #8]
 810c2aa:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810c2ae:	687b      	ldr	r3, [r7, #4]
 810c2b0:	681b      	ldr	r3, [r3, #0]
 810c2b2:	683a      	ldr	r2, [r7, #0]
 810c2b4:	430a      	orrs	r2, r1
 810c2b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810c2b8:	6878      	ldr	r0, [r7, #4]
 810c2ba:	f000 f84f 	bl	810c35c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c2be:	687b      	ldr	r3, [r7, #4]
 810c2c0:	681b      	ldr	r3, [r3, #0]
 810c2c2:	68fa      	ldr	r2, [r7, #12]
 810c2c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c2c6:	687b      	ldr	r3, [r7, #4]
 810c2c8:	2220      	movs	r2, #32
 810c2ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c2ce:	687b      	ldr	r3, [r7, #4]
 810c2d0:	2200      	movs	r2, #0
 810c2d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810c2d6:	2300      	movs	r3, #0
}
 810c2d8:	4618      	mov	r0, r3
 810c2da:	3710      	adds	r7, #16
 810c2dc:	46bd      	mov	sp, r7
 810c2de:	bd80      	pop	{r7, pc}

0810c2e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810c2e0:	b580      	push	{r7, lr}
 810c2e2:	b084      	sub	sp, #16
 810c2e4:	af00      	add	r7, sp, #0
 810c2e6:	6078      	str	r0, [r7, #4]
 810c2e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810c2ea:	687b      	ldr	r3, [r7, #4]
 810c2ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810c2f0:	2b01      	cmp	r3, #1
 810c2f2:	d101      	bne.n	810c2f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810c2f4:	2302      	movs	r3, #2
 810c2f6:	e02d      	b.n	810c354 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810c2f8:	687b      	ldr	r3, [r7, #4]
 810c2fa:	2201      	movs	r2, #1
 810c2fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810c300:	687b      	ldr	r3, [r7, #4]
 810c302:	2224      	movs	r2, #36	@ 0x24
 810c304:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810c308:	687b      	ldr	r3, [r7, #4]
 810c30a:	681b      	ldr	r3, [r3, #0]
 810c30c:	681b      	ldr	r3, [r3, #0]
 810c30e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810c310:	687b      	ldr	r3, [r7, #4]
 810c312:	681b      	ldr	r3, [r3, #0]
 810c314:	681a      	ldr	r2, [r3, #0]
 810c316:	687b      	ldr	r3, [r7, #4]
 810c318:	681b      	ldr	r3, [r3, #0]
 810c31a:	f022 0201 	bic.w	r2, r2, #1
 810c31e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810c320:	687b      	ldr	r3, [r7, #4]
 810c322:	681b      	ldr	r3, [r3, #0]
 810c324:	689b      	ldr	r3, [r3, #8]
 810c326:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810c32a:	687b      	ldr	r3, [r7, #4]
 810c32c:	681b      	ldr	r3, [r3, #0]
 810c32e:	683a      	ldr	r2, [r7, #0]
 810c330:	430a      	orrs	r2, r1
 810c332:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810c334:	6878      	ldr	r0, [r7, #4]
 810c336:	f000 f811 	bl	810c35c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810c33a:	687b      	ldr	r3, [r7, #4]
 810c33c:	681b      	ldr	r3, [r3, #0]
 810c33e:	68fa      	ldr	r2, [r7, #12]
 810c340:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810c342:	687b      	ldr	r3, [r7, #4]
 810c344:	2220      	movs	r2, #32
 810c346:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810c34a:	687b      	ldr	r3, [r7, #4]
 810c34c:	2200      	movs	r2, #0
 810c34e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810c352:	2300      	movs	r3, #0
}
 810c354:	4618      	mov	r0, r3
 810c356:	3710      	adds	r7, #16
 810c358:	46bd      	mov	sp, r7
 810c35a:	bd80      	pop	{r7, pc}

0810c35c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810c35c:	b480      	push	{r7}
 810c35e:	b085      	sub	sp, #20
 810c360:	af00      	add	r7, sp, #0
 810c362:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810c364:	687b      	ldr	r3, [r7, #4]
 810c366:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810c368:	2b00      	cmp	r3, #0
 810c36a:	d108      	bne.n	810c37e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810c36c:	687b      	ldr	r3, [r7, #4]
 810c36e:	2201      	movs	r2, #1
 810c370:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810c374:	687b      	ldr	r3, [r7, #4]
 810c376:	2201      	movs	r2, #1
 810c378:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810c37c:	e031      	b.n	810c3e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810c37e:	2310      	movs	r3, #16
 810c380:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810c382:	2310      	movs	r3, #16
 810c384:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810c386:	687b      	ldr	r3, [r7, #4]
 810c388:	681b      	ldr	r3, [r3, #0]
 810c38a:	689b      	ldr	r3, [r3, #8]
 810c38c:	0e5b      	lsrs	r3, r3, #25
 810c38e:	b2db      	uxtb	r3, r3
 810c390:	f003 0307 	and.w	r3, r3, #7
 810c394:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810c396:	687b      	ldr	r3, [r7, #4]
 810c398:	681b      	ldr	r3, [r3, #0]
 810c39a:	689b      	ldr	r3, [r3, #8]
 810c39c:	0f5b      	lsrs	r3, r3, #29
 810c39e:	b2db      	uxtb	r3, r3
 810c3a0:	f003 0307 	and.w	r3, r3, #7
 810c3a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810c3a6:	7bbb      	ldrb	r3, [r7, #14]
 810c3a8:	7b3a      	ldrb	r2, [r7, #12]
 810c3aa:	4911      	ldr	r1, [pc, #68]	@ (810c3f0 <UARTEx_SetNbDataToProcess+0x94>)
 810c3ac:	5c8a      	ldrb	r2, [r1, r2]
 810c3ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810c3b2:	7b3a      	ldrb	r2, [r7, #12]
 810c3b4:	490f      	ldr	r1, [pc, #60]	@ (810c3f4 <UARTEx_SetNbDataToProcess+0x98>)
 810c3b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810c3b8:	fb93 f3f2 	sdiv	r3, r3, r2
 810c3bc:	b29a      	uxth	r2, r3
 810c3be:	687b      	ldr	r3, [r7, #4]
 810c3c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810c3c4:	7bfb      	ldrb	r3, [r7, #15]
 810c3c6:	7b7a      	ldrb	r2, [r7, #13]
 810c3c8:	4909      	ldr	r1, [pc, #36]	@ (810c3f0 <UARTEx_SetNbDataToProcess+0x94>)
 810c3ca:	5c8a      	ldrb	r2, [r1, r2]
 810c3cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810c3d0:	7b7a      	ldrb	r2, [r7, #13]
 810c3d2:	4908      	ldr	r1, [pc, #32]	@ (810c3f4 <UARTEx_SetNbDataToProcess+0x98>)
 810c3d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810c3d6:	fb93 f3f2 	sdiv	r3, r3, r2
 810c3da:	b29a      	uxth	r2, r3
 810c3dc:	687b      	ldr	r3, [r7, #4]
 810c3de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810c3e2:	bf00      	nop
 810c3e4:	3714      	adds	r7, #20
 810c3e6:	46bd      	mov	sp, r7
 810c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c3ec:	4770      	bx	lr
 810c3ee:	bf00      	nop
 810c3f0:	0810d604 	.word	0x0810d604
 810c3f4:	0810d60c 	.word	0x0810d60c

0810c3f8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 810c3f8:	b480      	push	{r7}
 810c3fa:	b083      	sub	sp, #12
 810c3fc:	af00      	add	r7, sp, #0
 810c3fe:	6078      	str	r0, [r7, #4]
 810c400:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 810c402:	683b      	ldr	r3, [r7, #0]
 810c404:	681b      	ldr	r3, [r3, #0]
 810c406:	2b00      	cmp	r3, #0
 810c408:	d123      	bne.n	810c452 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810c40a:	687b      	ldr	r3, [r7, #4]
 810c40c:	681b      	ldr	r3, [r3, #0]
 810c40e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810c412:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 810c416:	683a      	ldr	r2, [r7, #0]
 810c418:	6851      	ldr	r1, [r2, #4]
 810c41a:	683a      	ldr	r2, [r7, #0]
 810c41c:	6892      	ldr	r2, [r2, #8]
 810c41e:	4311      	orrs	r1, r2
 810c420:	683a      	ldr	r2, [r7, #0]
 810c422:	68d2      	ldr	r2, [r2, #12]
 810c424:	4311      	orrs	r1, r2
 810c426:	683a      	ldr	r2, [r7, #0]
 810c428:	6912      	ldr	r2, [r2, #16]
 810c42a:	4311      	orrs	r1, r2
 810c42c:	683a      	ldr	r2, [r7, #0]
 810c42e:	6952      	ldr	r2, [r2, #20]
 810c430:	4311      	orrs	r1, r2
 810c432:	683a      	ldr	r2, [r7, #0]
 810c434:	6992      	ldr	r2, [r2, #24]
 810c436:	4311      	orrs	r1, r2
 810c438:	683a      	ldr	r2, [r7, #0]
 810c43a:	69d2      	ldr	r2, [r2, #28]
 810c43c:	4311      	orrs	r1, r2
 810c43e:	683a      	ldr	r2, [r7, #0]
 810c440:	6a12      	ldr	r2, [r2, #32]
 810c442:	4311      	orrs	r1, r2
 810c444:	683a      	ldr	r2, [r7, #0]
 810c446:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 810c448:	430a      	orrs	r2, r1
 810c44a:	431a      	orrs	r2, r3
 810c44c:	687b      	ldr	r3, [r7, #4]
 810c44e:	601a      	str	r2, [r3, #0]
 810c450:	e028      	b.n	810c4a4 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 810c452:	687b      	ldr	r3, [r7, #4]
 810c454:	681b      	ldr	r3, [r3, #0]
 810c456:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 810c45a:	683b      	ldr	r3, [r7, #0]
 810c45c:	69d9      	ldr	r1, [r3, #28]
 810c45e:	683b      	ldr	r3, [r7, #0]
 810c460:	6a1b      	ldr	r3, [r3, #32]
 810c462:	4319      	orrs	r1, r3
 810c464:	683b      	ldr	r3, [r7, #0]
 810c466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810c468:	430b      	orrs	r3, r1
 810c46a:	431a      	orrs	r2, r3
 810c46c:	687b      	ldr	r3, [r7, #4]
 810c46e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 810c470:	687b      	ldr	r3, [r7, #4]
 810c472:	685b      	ldr	r3, [r3, #4]
 810c474:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 810c478:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 810c47c:	683a      	ldr	r2, [r7, #0]
 810c47e:	6851      	ldr	r1, [r2, #4]
 810c480:	683a      	ldr	r2, [r7, #0]
 810c482:	6892      	ldr	r2, [r2, #8]
 810c484:	4311      	orrs	r1, r2
 810c486:	683a      	ldr	r2, [r7, #0]
 810c488:	68d2      	ldr	r2, [r2, #12]
 810c48a:	4311      	orrs	r1, r2
 810c48c:	683a      	ldr	r2, [r7, #0]
 810c48e:	6912      	ldr	r2, [r2, #16]
 810c490:	4311      	orrs	r1, r2
 810c492:	683a      	ldr	r2, [r7, #0]
 810c494:	6952      	ldr	r2, [r2, #20]
 810c496:	4311      	orrs	r1, r2
 810c498:	683a      	ldr	r2, [r7, #0]
 810c49a:	6992      	ldr	r2, [r2, #24]
 810c49c:	430a      	orrs	r2, r1
 810c49e:	431a      	orrs	r2, r3
 810c4a0:	687b      	ldr	r3, [r7, #4]
 810c4a2:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 810c4a4:	2300      	movs	r3, #0
}
 810c4a6:	4618      	mov	r0, r3
 810c4a8:	370c      	adds	r7, #12
 810c4aa:	46bd      	mov	sp, r7
 810c4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c4b0:	4770      	bx	lr

0810c4b2 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 810c4b2:	b480      	push	{r7}
 810c4b4:	b085      	sub	sp, #20
 810c4b6:	af00      	add	r7, sp, #0
 810c4b8:	60f8      	str	r0, [r7, #12]
 810c4ba:	60b9      	str	r1, [r7, #8]
 810c4bc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 810c4be:	687b      	ldr	r3, [r7, #4]
 810c4c0:	2b00      	cmp	r3, #0
 810c4c2:	d128      	bne.n	810c516 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 810c4c4:	68fb      	ldr	r3, [r7, #12]
 810c4c6:	689b      	ldr	r3, [r3, #8]
 810c4c8:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 810c4cc:	68bb      	ldr	r3, [r7, #8]
 810c4ce:	681b      	ldr	r3, [r3, #0]
 810c4d0:	1e59      	subs	r1, r3, #1
 810c4d2:	68bb      	ldr	r3, [r7, #8]
 810c4d4:	685b      	ldr	r3, [r3, #4]
 810c4d6:	3b01      	subs	r3, #1
 810c4d8:	011b      	lsls	r3, r3, #4
 810c4da:	4319      	orrs	r1, r3
 810c4dc:	68bb      	ldr	r3, [r7, #8]
 810c4de:	689b      	ldr	r3, [r3, #8]
 810c4e0:	3b01      	subs	r3, #1
 810c4e2:	021b      	lsls	r3, r3, #8
 810c4e4:	4319      	orrs	r1, r3
 810c4e6:	68bb      	ldr	r3, [r7, #8]
 810c4e8:	68db      	ldr	r3, [r3, #12]
 810c4ea:	3b01      	subs	r3, #1
 810c4ec:	031b      	lsls	r3, r3, #12
 810c4ee:	4319      	orrs	r1, r3
 810c4f0:	68bb      	ldr	r3, [r7, #8]
 810c4f2:	691b      	ldr	r3, [r3, #16]
 810c4f4:	3b01      	subs	r3, #1
 810c4f6:	041b      	lsls	r3, r3, #16
 810c4f8:	4319      	orrs	r1, r3
 810c4fa:	68bb      	ldr	r3, [r7, #8]
 810c4fc:	695b      	ldr	r3, [r3, #20]
 810c4fe:	3b01      	subs	r3, #1
 810c500:	051b      	lsls	r3, r3, #20
 810c502:	4319      	orrs	r1, r3
 810c504:	68bb      	ldr	r3, [r7, #8]
 810c506:	699b      	ldr	r3, [r3, #24]
 810c508:	3b01      	subs	r3, #1
 810c50a:	061b      	lsls	r3, r3, #24
 810c50c:	430b      	orrs	r3, r1
 810c50e:	431a      	orrs	r2, r3
 810c510:	68fb      	ldr	r3, [r7, #12]
 810c512:	609a      	str	r2, [r3, #8]
 810c514:	e02f      	b.n	810c576 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 810c516:	68fb      	ldr	r3, [r7, #12]
 810c518:	689b      	ldr	r3, [r3, #8]
 810c51a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810c51e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 810c522:	68ba      	ldr	r2, [r7, #8]
 810c524:	68d2      	ldr	r2, [r2, #12]
 810c526:	3a01      	subs	r2, #1
 810c528:	0311      	lsls	r1, r2, #12
 810c52a:	68ba      	ldr	r2, [r7, #8]
 810c52c:	6952      	ldr	r2, [r2, #20]
 810c52e:	3a01      	subs	r2, #1
 810c530:	0512      	lsls	r2, r2, #20
 810c532:	430a      	orrs	r2, r1
 810c534:	431a      	orrs	r2, r3
 810c536:	68fb      	ldr	r3, [r7, #12]
 810c538:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 810c53a:	68fb      	ldr	r3, [r7, #12]
 810c53c:	68db      	ldr	r3, [r3, #12]
 810c53e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 810c542:	68bb      	ldr	r3, [r7, #8]
 810c544:	681b      	ldr	r3, [r3, #0]
 810c546:	1e59      	subs	r1, r3, #1
 810c548:	68bb      	ldr	r3, [r7, #8]
 810c54a:	685b      	ldr	r3, [r3, #4]
 810c54c:	3b01      	subs	r3, #1
 810c54e:	011b      	lsls	r3, r3, #4
 810c550:	4319      	orrs	r1, r3
 810c552:	68bb      	ldr	r3, [r7, #8]
 810c554:	689b      	ldr	r3, [r3, #8]
 810c556:	3b01      	subs	r3, #1
 810c558:	021b      	lsls	r3, r3, #8
 810c55a:	4319      	orrs	r1, r3
 810c55c:	68bb      	ldr	r3, [r7, #8]
 810c55e:	691b      	ldr	r3, [r3, #16]
 810c560:	3b01      	subs	r3, #1
 810c562:	041b      	lsls	r3, r3, #16
 810c564:	4319      	orrs	r1, r3
 810c566:	68bb      	ldr	r3, [r7, #8]
 810c568:	699b      	ldr	r3, [r3, #24]
 810c56a:	3b01      	subs	r3, #1
 810c56c:	061b      	lsls	r3, r3, #24
 810c56e:	430b      	orrs	r3, r1
 810c570:	431a      	orrs	r2, r3
 810c572:	68fb      	ldr	r3, [r7, #12]
 810c574:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 810c576:	2300      	movs	r3, #0
}
 810c578:	4618      	mov	r0, r3
 810c57a:	3714      	adds	r7, #20
 810c57c:	46bd      	mov	sp, r7
 810c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c582:	4770      	bx	lr

0810c584 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 810c584:	b084      	sub	sp, #16
 810c586:	b480      	push	{r7}
 810c588:	b085      	sub	sp, #20
 810c58a:	af00      	add	r7, sp, #0
 810c58c:	6078      	str	r0, [r7, #4]
 810c58e:	f107 001c 	add.w	r0, r7, #28
 810c592:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 810c596:	2300      	movs	r3, #0
 810c598:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 810c59a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 810c59c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 810c59e:	431a      	orrs	r2, r3
             Init.BusWide             | \
 810c5a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 810c5a2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 810c5a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 810c5a6:	431a      	orrs	r2, r3
             Init.ClockDiv
 810c5a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 810c5aa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 810c5ac:	68fa      	ldr	r2, [r7, #12]
 810c5ae:	4313      	orrs	r3, r2
 810c5b0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 810c5b2:	687b      	ldr	r3, [r7, #4]
 810c5b4:	685a      	ldr	r2, [r3, #4]
 810c5b6:	4b07      	ldr	r3, [pc, #28]	@ (810c5d4 <SDMMC_Init+0x50>)
 810c5b8:	4013      	ands	r3, r2
 810c5ba:	68fa      	ldr	r2, [r7, #12]
 810c5bc:	431a      	orrs	r2, r3
 810c5be:	687b      	ldr	r3, [r7, #4]
 810c5c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 810c5c2:	2300      	movs	r3, #0
}
 810c5c4:	4618      	mov	r0, r3
 810c5c6:	3714      	adds	r7, #20
 810c5c8:	46bd      	mov	sp, r7
 810c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c5ce:	b004      	add	sp, #16
 810c5d0:	4770      	bx	lr
 810c5d2:	bf00      	nop
 810c5d4:	ffc02c00 	.word	0xffc02c00

0810c5d8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 810c5d8:	b480      	push	{r7}
 810c5da:	b083      	sub	sp, #12
 810c5dc:	af00      	add	r7, sp, #0
 810c5de:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 810c5e0:	687b      	ldr	r3, [r7, #4]
 810c5e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 810c5e6:	4618      	mov	r0, r3
 810c5e8:	370c      	adds	r7, #12
 810c5ea:	46bd      	mov	sp, r7
 810c5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c5f0:	4770      	bx	lr

0810c5f2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 810c5f2:	b480      	push	{r7}
 810c5f4:	b083      	sub	sp, #12
 810c5f6:	af00      	add	r7, sp, #0
 810c5f8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 810c5fa:	687b      	ldr	r3, [r7, #4]
 810c5fc:	681b      	ldr	r3, [r3, #0]
 810c5fe:	f043 0203 	orr.w	r2, r3, #3
 810c602:	687b      	ldr	r3, [r7, #4]
 810c604:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 810c606:	2300      	movs	r3, #0
}
 810c608:	4618      	mov	r0, r3
 810c60a:	370c      	adds	r7, #12
 810c60c:	46bd      	mov	sp, r7
 810c60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c612:	4770      	bx	lr

0810c614 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 810c614:	b480      	push	{r7}
 810c616:	b083      	sub	sp, #12
 810c618:	af00      	add	r7, sp, #0
 810c61a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 810c61c:	687b      	ldr	r3, [r7, #4]
 810c61e:	681b      	ldr	r3, [r3, #0]
 810c620:	f003 0303 	and.w	r3, r3, #3
}
 810c624:	4618      	mov	r0, r3
 810c626:	370c      	adds	r7, #12
 810c628:	46bd      	mov	sp, r7
 810c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c62e:	4770      	bx	lr

0810c630 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 810c630:	b480      	push	{r7}
 810c632:	b085      	sub	sp, #20
 810c634:	af00      	add	r7, sp, #0
 810c636:	6078      	str	r0, [r7, #4]
 810c638:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810c63a:	2300      	movs	r3, #0
 810c63c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 810c63e:	683b      	ldr	r3, [r7, #0]
 810c640:	681a      	ldr	r2, [r3, #0]
 810c642:	687b      	ldr	r3, [r7, #4]
 810c644:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810c646:	683b      	ldr	r3, [r7, #0]
 810c648:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 810c64a:	683b      	ldr	r3, [r7, #0]
 810c64c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810c64e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 810c650:	683b      	ldr	r3, [r7, #0]
 810c652:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 810c654:	431a      	orrs	r2, r3
                       Command->CPSM);
 810c656:	683b      	ldr	r3, [r7, #0]
 810c658:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 810c65a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 810c65c:	68fa      	ldr	r2, [r7, #12]
 810c65e:	4313      	orrs	r3, r2
 810c660:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 810c662:	687b      	ldr	r3, [r7, #4]
 810c664:	68da      	ldr	r2, [r3, #12]
 810c666:	4b06      	ldr	r3, [pc, #24]	@ (810c680 <SDMMC_SendCommand+0x50>)
 810c668:	4013      	ands	r3, r2
 810c66a:	68fa      	ldr	r2, [r7, #12]
 810c66c:	431a      	orrs	r2, r3
 810c66e:	687b      	ldr	r3, [r7, #4]
 810c670:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 810c672:	2300      	movs	r3, #0
}
 810c674:	4618      	mov	r0, r3
 810c676:	3714      	adds	r7, #20
 810c678:	46bd      	mov	sp, r7
 810c67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c67e:	4770      	bx	lr
 810c680:	fffee0c0 	.word	0xfffee0c0

0810c684 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 810c684:	b480      	push	{r7}
 810c686:	b083      	sub	sp, #12
 810c688:	af00      	add	r7, sp, #0
 810c68a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 810c68c:	687b      	ldr	r3, [r7, #4]
 810c68e:	691b      	ldr	r3, [r3, #16]
 810c690:	b2db      	uxtb	r3, r3
}
 810c692:	4618      	mov	r0, r3
 810c694:	370c      	adds	r7, #12
 810c696:	46bd      	mov	sp, r7
 810c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c69c:	4770      	bx	lr

0810c69e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 810c69e:	b480      	push	{r7}
 810c6a0:	b085      	sub	sp, #20
 810c6a2:	af00      	add	r7, sp, #0
 810c6a4:	6078      	str	r0, [r7, #4]
 810c6a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 810c6a8:	687b      	ldr	r3, [r7, #4]
 810c6aa:	3314      	adds	r3, #20
 810c6ac:	461a      	mov	r2, r3
 810c6ae:	683b      	ldr	r3, [r7, #0]
 810c6b0:	4413      	add	r3, r2
 810c6b2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 810c6b4:	68fb      	ldr	r3, [r7, #12]
 810c6b6:	681b      	ldr	r3, [r3, #0]
}
 810c6b8:	4618      	mov	r0, r3
 810c6ba:	3714      	adds	r7, #20
 810c6bc:	46bd      	mov	sp, r7
 810c6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c6c2:	4770      	bx	lr

0810c6c4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 810c6c4:	b480      	push	{r7}
 810c6c6:	b085      	sub	sp, #20
 810c6c8:	af00      	add	r7, sp, #0
 810c6ca:	6078      	str	r0, [r7, #4]
 810c6cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 810c6ce:	2300      	movs	r3, #0
 810c6d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 810c6d2:	683b      	ldr	r3, [r7, #0]
 810c6d4:	681a      	ldr	r2, [r3, #0]
 810c6d6:	687b      	ldr	r3, [r7, #4]
 810c6d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 810c6da:	683b      	ldr	r3, [r7, #0]
 810c6dc:	685a      	ldr	r2, [r3, #4]
 810c6de:	687b      	ldr	r3, [r7, #4]
 810c6e0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810c6e2:	683b      	ldr	r3, [r7, #0]
 810c6e4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 810c6e6:	683b      	ldr	r3, [r7, #0]
 810c6e8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810c6ea:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 810c6ec:	683b      	ldr	r3, [r7, #0]
 810c6ee:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 810c6f0:	431a      	orrs	r2, r3
                       Data->DPSM);
 810c6f2:	683b      	ldr	r3, [r7, #0]
 810c6f4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 810c6f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 810c6f8:	68fa      	ldr	r2, [r7, #12]
 810c6fa:	4313      	orrs	r3, r2
 810c6fc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 810c6fe:	687b      	ldr	r3, [r7, #4]
 810c700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c702:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 810c706:	68fb      	ldr	r3, [r7, #12]
 810c708:	431a      	orrs	r2, r3
 810c70a:	687b      	ldr	r3, [r7, #4]
 810c70c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 810c70e:	2300      	movs	r3, #0

}
 810c710:	4618      	mov	r0, r3
 810c712:	3714      	adds	r7, #20
 810c714:	46bd      	mov	sp, r7
 810c716:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c71a:	4770      	bx	lr

0810c71c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 810c71c:	b580      	push	{r7, lr}
 810c71e:	b088      	sub	sp, #32
 810c720:	af00      	add	r7, sp, #0
 810c722:	6078      	str	r0, [r7, #4]
 810c724:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 810c726:	683b      	ldr	r3, [r7, #0]
 810c728:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 810c72a:	2310      	movs	r3, #16
 810c72c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c72e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810c732:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c734:	2300      	movs	r3, #0
 810c736:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c73c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c73e:	f107 0308 	add.w	r3, r7, #8
 810c742:	4619      	mov	r1, r3
 810c744:	6878      	ldr	r0, [r7, #4]
 810c746:	f7ff ff73 	bl	810c630 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 810c74a:	f241 3288 	movw	r2, #5000	@ 0x1388
 810c74e:	2110      	movs	r1, #16
 810c750:	6878      	ldr	r0, [r7, #4]
 810c752:	f000 f995 	bl	810ca80 <SDMMC_GetCmdResp1>
 810c756:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c758:	69fb      	ldr	r3, [r7, #28]
}
 810c75a:	4618      	mov	r0, r3
 810c75c:	3720      	adds	r7, #32
 810c75e:	46bd      	mov	sp, r7
 810c760:	bd80      	pop	{r7, pc}

0810c762 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 810c762:	b580      	push	{r7, lr}
 810c764:	b088      	sub	sp, #32
 810c766:	af00      	add	r7, sp, #0
 810c768:	6078      	str	r0, [r7, #4]
 810c76a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 810c76c:	683b      	ldr	r3, [r7, #0]
 810c76e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 810c770:	2307      	movs	r3, #7
 810c772:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c774:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810c778:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c77a:	2300      	movs	r3, #0
 810c77c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c77e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c782:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c784:	f107 0308 	add.w	r3, r7, #8
 810c788:	4619      	mov	r1, r3
 810c78a:	6878      	ldr	r0, [r7, #4]
 810c78c:	f7ff ff50 	bl	810c630 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 810c790:	f241 3288 	movw	r2, #5000	@ 0x1388
 810c794:	2107      	movs	r1, #7
 810c796:	6878      	ldr	r0, [r7, #4]
 810c798:	f000 f972 	bl	810ca80 <SDMMC_GetCmdResp1>
 810c79c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c79e:	69fb      	ldr	r3, [r7, #28]
}
 810c7a0:	4618      	mov	r0, r3
 810c7a2:	3720      	adds	r7, #32
 810c7a4:	46bd      	mov	sp, r7
 810c7a6:	bd80      	pop	{r7, pc}

0810c7a8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 810c7a8:	b580      	push	{r7, lr}
 810c7aa:	b088      	sub	sp, #32
 810c7ac:	af00      	add	r7, sp, #0
 810c7ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810c7b0:	2300      	movs	r3, #0
 810c7b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 810c7b4:	2300      	movs	r3, #0
 810c7b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 810c7b8:	2300      	movs	r3, #0
 810c7ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c7bc:	2300      	movs	r3, #0
 810c7be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c7c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c7c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c7c6:	f107 0308 	add.w	r3, r7, #8
 810c7ca:	4619      	mov	r1, r3
 810c7cc:	6878      	ldr	r0, [r7, #4]
 810c7ce:	f7ff ff2f 	bl	810c630 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 810c7d2:	6878      	ldr	r0, [r7, #4]
 810c7d4:	f000 fb96 	bl	810cf04 <SDMMC_GetCmdError>
 810c7d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c7da:	69fb      	ldr	r3, [r7, #28]
}
 810c7dc:	4618      	mov	r0, r3
 810c7de:	3720      	adds	r7, #32
 810c7e0:	46bd      	mov	sp, r7
 810c7e2:	bd80      	pop	{r7, pc}

0810c7e4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 810c7e4:	b580      	push	{r7, lr}
 810c7e6:	b088      	sub	sp, #32
 810c7e8:	af00      	add	r7, sp, #0
 810c7ea:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 810c7ec:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 810c7f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 810c7f2:	2308      	movs	r3, #8
 810c7f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c7f6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810c7fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c7fc:	2300      	movs	r3, #0
 810c7fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c800:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c804:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c806:	f107 0308 	add.w	r3, r7, #8
 810c80a:	4619      	mov	r1, r3
 810c80c:	6878      	ldr	r0, [r7, #4]
 810c80e:	f7ff ff0f 	bl	810c630 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 810c812:	6878      	ldr	r0, [r7, #4]
 810c814:	f000 fb28 	bl	810ce68 <SDMMC_GetCmdResp7>
 810c818:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c81a:	69fb      	ldr	r3, [r7, #28]
}
 810c81c:	4618      	mov	r0, r3
 810c81e:	3720      	adds	r7, #32
 810c820:	46bd      	mov	sp, r7
 810c822:	bd80      	pop	{r7, pc}

0810c824 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810c824:	b580      	push	{r7, lr}
 810c826:	b088      	sub	sp, #32
 810c828:	af00      	add	r7, sp, #0
 810c82a:	6078      	str	r0, [r7, #4]
 810c82c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 810c82e:	683b      	ldr	r3, [r7, #0]
 810c830:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 810c832:	2337      	movs	r3, #55	@ 0x37
 810c834:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c836:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810c83a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c83c:	2300      	movs	r3, #0
 810c83e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c840:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c844:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c846:	f107 0308 	add.w	r3, r7, #8
 810c84a:	4619      	mov	r1, r3
 810c84c:	6878      	ldr	r0, [r7, #4]
 810c84e:	f7ff feef 	bl	810c630 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 810c852:	f241 3288 	movw	r2, #5000	@ 0x1388
 810c856:	2137      	movs	r1, #55	@ 0x37
 810c858:	6878      	ldr	r0, [r7, #4]
 810c85a:	f000 f911 	bl	810ca80 <SDMMC_GetCmdResp1>
 810c85e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c860:	69fb      	ldr	r3, [r7, #28]
}
 810c862:	4618      	mov	r0, r3
 810c864:	3720      	adds	r7, #32
 810c866:	46bd      	mov	sp, r7
 810c868:	bd80      	pop	{r7, pc}

0810c86a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810c86a:	b580      	push	{r7, lr}
 810c86c:	b088      	sub	sp, #32
 810c86e:	af00      	add	r7, sp, #0
 810c870:	6078      	str	r0, [r7, #4]
 810c872:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810c874:	683b      	ldr	r3, [r7, #0]
 810c876:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 810c878:	2329      	movs	r3, #41	@ 0x29
 810c87a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c87c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810c880:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c882:	2300      	movs	r3, #0
 810c884:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c886:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c88a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c88c:	f107 0308 	add.w	r3, r7, #8
 810c890:	4619      	mov	r1, r3
 810c892:	6878      	ldr	r0, [r7, #4]
 810c894:	f7ff fecc 	bl	810c630 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 810c898:	6878      	ldr	r0, [r7, #4]
 810c89a:	f000 fa2d 	bl	810ccf8 <SDMMC_GetCmdResp3>
 810c89e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c8a0:	69fb      	ldr	r3, [r7, #28]
}
 810c8a2:	4618      	mov	r0, r3
 810c8a4:	3720      	adds	r7, #32
 810c8a6:	46bd      	mov	sp, r7
 810c8a8:	bd80      	pop	{r7, pc}

0810c8aa <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 810c8aa:	b580      	push	{r7, lr}
 810c8ac:	b088      	sub	sp, #32
 810c8ae:	af00      	add	r7, sp, #0
 810c8b0:	6078      	str	r0, [r7, #4]
 810c8b2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 810c8b4:	683b      	ldr	r3, [r7, #0]
 810c8b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 810c8b8:	2306      	movs	r3, #6
 810c8ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c8bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810c8c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c8c2:	2300      	movs	r3, #0
 810c8c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c8c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c8ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c8cc:	f107 0308 	add.w	r3, r7, #8
 810c8d0:	4619      	mov	r1, r3
 810c8d2:	6878      	ldr	r0, [r7, #4]
 810c8d4:	f7ff feac 	bl	810c630 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 810c8d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 810c8dc:	2106      	movs	r1, #6
 810c8de:	6878      	ldr	r0, [r7, #4]
 810c8e0:	f000 f8ce 	bl	810ca80 <SDMMC_GetCmdResp1>
 810c8e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c8e6:	69fb      	ldr	r3, [r7, #28]
}
 810c8e8:	4618      	mov	r0, r3
 810c8ea:	3720      	adds	r7, #32
 810c8ec:	46bd      	mov	sp, r7
 810c8ee:	bd80      	pop	{r7, pc}

0810c8f0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 810c8f0:	b580      	push	{r7, lr}
 810c8f2:	b088      	sub	sp, #32
 810c8f4:	af00      	add	r7, sp, #0
 810c8f6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 810c8f8:	2300      	movs	r3, #0
 810c8fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 810c8fc:	2333      	movs	r3, #51	@ 0x33
 810c8fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c900:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810c904:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c906:	2300      	movs	r3, #0
 810c908:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c90a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c90e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c910:	f107 0308 	add.w	r3, r7, #8
 810c914:	4619      	mov	r1, r3
 810c916:	6878      	ldr	r0, [r7, #4]
 810c918:	f7ff fe8a 	bl	810c630 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 810c91c:	f241 3288 	movw	r2, #5000	@ 0x1388
 810c920:	2133      	movs	r1, #51	@ 0x33
 810c922:	6878      	ldr	r0, [r7, #4]
 810c924:	f000 f8ac 	bl	810ca80 <SDMMC_GetCmdResp1>
 810c928:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c92a:	69fb      	ldr	r3, [r7, #28]
}
 810c92c:	4618      	mov	r0, r3
 810c92e:	3720      	adds	r7, #32
 810c930:	46bd      	mov	sp, r7
 810c932:	bd80      	pop	{r7, pc}

0810c934 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 810c934:	b580      	push	{r7, lr}
 810c936:	b088      	sub	sp, #32
 810c938:	af00      	add	r7, sp, #0
 810c93a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 810c93c:	2300      	movs	r3, #0
 810c93e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 810c940:	2302      	movs	r3, #2
 810c942:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810c944:	f44f 7340 	mov.w	r3, #768	@ 0x300
 810c948:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c94a:	2300      	movs	r3, #0
 810c94c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c94e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c952:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c954:	f107 0308 	add.w	r3, r7, #8
 810c958:	4619      	mov	r1, r3
 810c95a:	6878      	ldr	r0, [r7, #4]
 810c95c:	f7ff fe68 	bl	810c630 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810c960:	6878      	ldr	r0, [r7, #4]
 810c962:	f000 f97f 	bl	810cc64 <SDMMC_GetCmdResp2>
 810c966:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c968:	69fb      	ldr	r3, [r7, #28]
}
 810c96a:	4618      	mov	r0, r3
 810c96c:	3720      	adds	r7, #32
 810c96e:	46bd      	mov	sp, r7
 810c970:	bd80      	pop	{r7, pc}

0810c972 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810c972:	b580      	push	{r7, lr}
 810c974:	b088      	sub	sp, #32
 810c976:	af00      	add	r7, sp, #0
 810c978:	6078      	str	r0, [r7, #4]
 810c97a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 810c97c:	683b      	ldr	r3, [r7, #0]
 810c97e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 810c980:	2309      	movs	r3, #9
 810c982:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810c984:	f44f 7340 	mov.w	r3, #768	@ 0x300
 810c988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c98a:	2300      	movs	r3, #0
 810c98c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c98e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c992:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c994:	f107 0308 	add.w	r3, r7, #8
 810c998:	4619      	mov	r1, r3
 810c99a:	6878      	ldr	r0, [r7, #4]
 810c99c:	f7ff fe48 	bl	810c630 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810c9a0:	6878      	ldr	r0, [r7, #4]
 810c9a2:	f000 f95f 	bl	810cc64 <SDMMC_GetCmdResp2>
 810c9a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c9a8:	69fb      	ldr	r3, [r7, #28]
}
 810c9aa:	4618      	mov	r0, r3
 810c9ac:	3720      	adds	r7, #32
 810c9ae:	46bd      	mov	sp, r7
 810c9b0:	bd80      	pop	{r7, pc}

0810c9b2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 810c9b2:	b580      	push	{r7, lr}
 810c9b4:	b088      	sub	sp, #32
 810c9b6:	af00      	add	r7, sp, #0
 810c9b8:	6078      	str	r0, [r7, #4]
 810c9ba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 810c9bc:	2300      	movs	r3, #0
 810c9be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 810c9c0:	2303      	movs	r3, #3
 810c9c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810c9c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810c9c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810c9ca:	2300      	movs	r3, #0
 810c9cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810c9ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810c9d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810c9d4:	f107 0308 	add.w	r3, r7, #8
 810c9d8:	4619      	mov	r1, r3
 810c9da:	6878      	ldr	r0, [r7, #4]
 810c9dc:	f7ff fe28 	bl	810c630 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 810c9e0:	683a      	ldr	r2, [r7, #0]
 810c9e2:	2103      	movs	r1, #3
 810c9e4:	6878      	ldr	r0, [r7, #4]
 810c9e6:	f000 f9c7 	bl	810cd78 <SDMMC_GetCmdResp6>
 810c9ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810c9ec:	69fb      	ldr	r3, [r7, #28]
}
 810c9ee:	4618      	mov	r0, r3
 810c9f0:	3720      	adds	r7, #32
 810c9f2:	46bd      	mov	sp, r7
 810c9f4:	bd80      	pop	{r7, pc}

0810c9f6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810c9f6:	b580      	push	{r7, lr}
 810c9f8:	b088      	sub	sp, #32
 810c9fa:	af00      	add	r7, sp, #0
 810c9fc:	6078      	str	r0, [r7, #4]
 810c9fe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810ca00:	683b      	ldr	r3, [r7, #0]
 810ca02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 810ca04:	230d      	movs	r3, #13
 810ca06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810ca08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810ca0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810ca0e:	2300      	movs	r3, #0
 810ca10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810ca12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810ca16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810ca18:	f107 0308 	add.w	r3, r7, #8
 810ca1c:	4619      	mov	r1, r3
 810ca1e:	6878      	ldr	r0, [r7, #4]
 810ca20:	f7ff fe06 	bl	810c630 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 810ca24:	f241 3288 	movw	r2, #5000	@ 0x1388
 810ca28:	210d      	movs	r1, #13
 810ca2a:	6878      	ldr	r0, [r7, #4]
 810ca2c:	f000 f828 	bl	810ca80 <SDMMC_GetCmdResp1>
 810ca30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810ca32:	69fb      	ldr	r3, [r7, #28]
}
 810ca34:	4618      	mov	r0, r3
 810ca36:	3720      	adds	r7, #32
 810ca38:	46bd      	mov	sp, r7
 810ca3a:	bd80      	pop	{r7, pc}

0810ca3c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 810ca3c:	b580      	push	{r7, lr}
 810ca3e:	b088      	sub	sp, #32
 810ca40:	af00      	add	r7, sp, #0
 810ca42:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 810ca44:	2300      	movs	r3, #0
 810ca46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 810ca48:	230d      	movs	r3, #13
 810ca4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810ca4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810ca50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810ca52:	2300      	movs	r3, #0
 810ca54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810ca56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810ca5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810ca5c:	f107 0308 	add.w	r3, r7, #8
 810ca60:	4619      	mov	r1, r3
 810ca62:	6878      	ldr	r0, [r7, #4]
 810ca64:	f7ff fde4 	bl	810c630 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 810ca68:	f241 3288 	movw	r2, #5000	@ 0x1388
 810ca6c:	210d      	movs	r1, #13
 810ca6e:	6878      	ldr	r0, [r7, #4]
 810ca70:	f000 f806 	bl	810ca80 <SDMMC_GetCmdResp1>
 810ca74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810ca76:	69fb      	ldr	r3, [r7, #28]
}
 810ca78:	4618      	mov	r0, r3
 810ca7a:	3720      	adds	r7, #32
 810ca7c:	46bd      	mov	sp, r7
 810ca7e:	bd80      	pop	{r7, pc}

0810ca80 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 810ca80:	b580      	push	{r7, lr}
 810ca82:	b088      	sub	sp, #32
 810ca84:	af00      	add	r7, sp, #0
 810ca86:	60f8      	str	r0, [r7, #12]
 810ca88:	460b      	mov	r3, r1
 810ca8a:	607a      	str	r2, [r7, #4]
 810ca8c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 810ca8e:	4b70      	ldr	r3, [pc, #448]	@ (810cc50 <SDMMC_GetCmdResp1+0x1d0>)
 810ca90:	681b      	ldr	r3, [r3, #0]
 810ca92:	4a70      	ldr	r2, [pc, #448]	@ (810cc54 <SDMMC_GetCmdResp1+0x1d4>)
 810ca94:	fba2 2303 	umull	r2, r3, r2, r3
 810ca98:	0a5a      	lsrs	r2, r3, #9
 810ca9a:	687b      	ldr	r3, [r7, #4]
 810ca9c:	fb02 f303 	mul.w	r3, r2, r3
 810caa0:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810caa2:	69fb      	ldr	r3, [r7, #28]
 810caa4:	1e5a      	subs	r2, r3, #1
 810caa6:	61fa      	str	r2, [r7, #28]
 810caa8:	2b00      	cmp	r3, #0
 810caaa:	d102      	bne.n	810cab2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 810caac:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810cab0:	e0c9      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 810cab2:	68fb      	ldr	r3, [r7, #12]
 810cab4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810cab6:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 810cab8:	69ba      	ldr	r2, [r7, #24]
 810caba:	4b67      	ldr	r3, [pc, #412]	@ (810cc58 <SDMMC_GetCmdResp1+0x1d8>)
 810cabc:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810cabe:	2b00      	cmp	r3, #0
 810cac0:	d0ef      	beq.n	810caa2 <SDMMC_GetCmdResp1+0x22>
 810cac2:	69bb      	ldr	r3, [r7, #24]
 810cac4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810cac8:	2b00      	cmp	r3, #0
 810caca:	d1ea      	bne.n	810caa2 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810cacc:	68fb      	ldr	r3, [r7, #12]
 810cace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810cad0:	f003 0304 	and.w	r3, r3, #4
 810cad4:	2b00      	cmp	r3, #0
 810cad6:	d004      	beq.n	810cae2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810cad8:	68fb      	ldr	r3, [r7, #12]
 810cada:	2204      	movs	r2, #4
 810cadc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810cade:	2304      	movs	r3, #4
 810cae0:	e0b1      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810cae2:	68fb      	ldr	r3, [r7, #12]
 810cae4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810cae6:	f003 0301 	and.w	r3, r3, #1
 810caea:	2b00      	cmp	r3, #0
 810caec:	d004      	beq.n	810caf8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810caee:	68fb      	ldr	r3, [r7, #12]
 810caf0:	2201      	movs	r2, #1
 810caf2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810caf4:	2301      	movs	r3, #1
 810caf6:	e0a6      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810caf8:	68fb      	ldr	r3, [r7, #12]
 810cafa:	4a58      	ldr	r2, [pc, #352]	@ (810cc5c <SDMMC_GetCmdResp1+0x1dc>)
 810cafc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810cafe:	68f8      	ldr	r0, [r7, #12]
 810cb00:	f7ff fdc0 	bl	810c684 <SDMMC_GetCommandResponse>
 810cb04:	4603      	mov	r3, r0
 810cb06:	461a      	mov	r2, r3
 810cb08:	7afb      	ldrb	r3, [r7, #11]
 810cb0a:	4293      	cmp	r3, r2
 810cb0c:	d001      	beq.n	810cb12 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810cb0e:	2301      	movs	r3, #1
 810cb10:	e099      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810cb12:	2100      	movs	r1, #0
 810cb14:	68f8      	ldr	r0, [r7, #12]
 810cb16:	f7ff fdc2 	bl	810c69e <SDMMC_GetResponse>
 810cb1a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 810cb1c:	697a      	ldr	r2, [r7, #20]
 810cb1e:	4b50      	ldr	r3, [pc, #320]	@ (810cc60 <SDMMC_GetCmdResp1+0x1e0>)
 810cb20:	4013      	ands	r3, r2
 810cb22:	2b00      	cmp	r3, #0
 810cb24:	d101      	bne.n	810cb2a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 810cb26:	2300      	movs	r3, #0
 810cb28:	e08d      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 810cb2a:	697b      	ldr	r3, [r7, #20]
 810cb2c:	2b00      	cmp	r3, #0
 810cb2e:	da02      	bge.n	810cb36 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 810cb30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810cb34:	e087      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 810cb36:	697b      	ldr	r3, [r7, #20]
 810cb38:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 810cb3c:	2b00      	cmp	r3, #0
 810cb3e:	d001      	beq.n	810cb44 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 810cb40:	2340      	movs	r3, #64	@ 0x40
 810cb42:	e080      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 810cb44:	697b      	ldr	r3, [r7, #20]
 810cb46:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810cb4a:	2b00      	cmp	r3, #0
 810cb4c:	d001      	beq.n	810cb52 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 810cb4e:	2380      	movs	r3, #128	@ 0x80
 810cb50:	e079      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 810cb52:	697b      	ldr	r3, [r7, #20]
 810cb54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810cb58:	2b00      	cmp	r3, #0
 810cb5a:	d002      	beq.n	810cb62 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 810cb5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810cb60:	e071      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 810cb62:	697b      	ldr	r3, [r7, #20]
 810cb64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810cb68:	2b00      	cmp	r3, #0
 810cb6a:	d002      	beq.n	810cb72 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 810cb6c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810cb70:	e069      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 810cb72:	697b      	ldr	r3, [r7, #20]
 810cb74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 810cb78:	2b00      	cmp	r3, #0
 810cb7a:	d002      	beq.n	810cb82 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 810cb7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810cb80:	e061      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 810cb82:	697b      	ldr	r3, [r7, #20]
 810cb84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810cb88:	2b00      	cmp	r3, #0
 810cb8a:	d002      	beq.n	810cb92 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 810cb8c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810cb90:	e059      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 810cb92:	697b      	ldr	r3, [r7, #20]
 810cb94:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810cb98:	2b00      	cmp	r3, #0
 810cb9a:	d002      	beq.n	810cba2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810cb9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810cba0:	e051      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 810cba2:	697b      	ldr	r3, [r7, #20]
 810cba4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810cba8:	2b00      	cmp	r3, #0
 810cbaa:	d002      	beq.n	810cbb2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810cbac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810cbb0:	e049      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 810cbb2:	697b      	ldr	r3, [r7, #20]
 810cbb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810cbb8:	2b00      	cmp	r3, #0
 810cbba:	d002      	beq.n	810cbc2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 810cbbc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810cbc0:	e041      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 810cbc2:	697b      	ldr	r3, [r7, #20]
 810cbc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810cbc8:	2b00      	cmp	r3, #0
 810cbca:	d002      	beq.n	810cbd2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 810cbcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810cbd0:	e039      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 810cbd2:	697b      	ldr	r3, [r7, #20]
 810cbd4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810cbd8:	2b00      	cmp	r3, #0
 810cbda:	d002      	beq.n	810cbe2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 810cbdc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 810cbe0:	e031      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 810cbe2:	697b      	ldr	r3, [r7, #20]
 810cbe4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810cbe8:	2b00      	cmp	r3, #0
 810cbea:	d002      	beq.n	810cbf2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 810cbec:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 810cbf0:	e029      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 810cbf2:	697b      	ldr	r3, [r7, #20]
 810cbf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810cbf8:	2b00      	cmp	r3, #0
 810cbfa:	d002      	beq.n	810cc02 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 810cbfc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 810cc00:	e021      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 810cc02:	697b      	ldr	r3, [r7, #20]
 810cc04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810cc08:	2b00      	cmp	r3, #0
 810cc0a:	d002      	beq.n	810cc12 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 810cc0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 810cc10:	e019      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 810cc12:	697b      	ldr	r3, [r7, #20]
 810cc14:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810cc18:	2b00      	cmp	r3, #0
 810cc1a:	d002      	beq.n	810cc22 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 810cc1c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810cc20:	e011      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 810cc22:	697b      	ldr	r3, [r7, #20]
 810cc24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810cc28:	2b00      	cmp	r3, #0
 810cc2a:	d002      	beq.n	810cc32 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 810cc2c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 810cc30:	e009      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 810cc32:	697b      	ldr	r3, [r7, #20]
 810cc34:	f003 0308 	and.w	r3, r3, #8
 810cc38:	2b00      	cmp	r3, #0
 810cc3a:	d002      	beq.n	810cc42 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 810cc3c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 810cc40:	e001      	b.n	810cc46 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810cc42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 810cc46:	4618      	mov	r0, r3
 810cc48:	3720      	adds	r7, #32
 810cc4a:	46bd      	mov	sp, r7
 810cc4c:	bd80      	pop	{r7, pc}
 810cc4e:	bf00      	nop
 810cc50:	10000000 	.word	0x10000000
 810cc54:	10624dd3 	.word	0x10624dd3
 810cc58:	00200045 	.word	0x00200045
 810cc5c:	002000c5 	.word	0x002000c5
 810cc60:	fdffe008 	.word	0xfdffe008

0810cc64 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 810cc64:	b480      	push	{r7}
 810cc66:	b085      	sub	sp, #20
 810cc68:	af00      	add	r7, sp, #0
 810cc6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810cc6c:	4b1f      	ldr	r3, [pc, #124]	@ (810ccec <SDMMC_GetCmdResp2+0x88>)
 810cc6e:	681b      	ldr	r3, [r3, #0]
 810cc70:	4a1f      	ldr	r2, [pc, #124]	@ (810ccf0 <SDMMC_GetCmdResp2+0x8c>)
 810cc72:	fba2 2303 	umull	r2, r3, r2, r3
 810cc76:	0a5b      	lsrs	r3, r3, #9
 810cc78:	f241 3288 	movw	r2, #5000	@ 0x1388
 810cc7c:	fb02 f303 	mul.w	r3, r2, r3
 810cc80:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810cc82:	68fb      	ldr	r3, [r7, #12]
 810cc84:	1e5a      	subs	r2, r3, #1
 810cc86:	60fa      	str	r2, [r7, #12]
 810cc88:	2b00      	cmp	r3, #0
 810cc8a:	d102      	bne.n	810cc92 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810cc8c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810cc90:	e026      	b.n	810cce0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 810cc92:	687b      	ldr	r3, [r7, #4]
 810cc94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810cc96:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810cc98:	68bb      	ldr	r3, [r7, #8]
 810cc9a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810cc9e:	2b00      	cmp	r3, #0
 810cca0:	d0ef      	beq.n	810cc82 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810cca2:	68bb      	ldr	r3, [r7, #8]
 810cca4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810cca8:	2b00      	cmp	r3, #0
 810ccaa:	d1ea      	bne.n	810cc82 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810ccac:	687b      	ldr	r3, [r7, #4]
 810ccae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810ccb0:	f003 0304 	and.w	r3, r3, #4
 810ccb4:	2b00      	cmp	r3, #0
 810ccb6:	d004      	beq.n	810ccc2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810ccb8:	687b      	ldr	r3, [r7, #4]
 810ccba:	2204      	movs	r2, #4
 810ccbc:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810ccbe:	2304      	movs	r3, #4
 810ccc0:	e00e      	b.n	810cce0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810ccc2:	687b      	ldr	r3, [r7, #4]
 810ccc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810ccc6:	f003 0301 	and.w	r3, r3, #1
 810ccca:	2b00      	cmp	r3, #0
 810cccc:	d004      	beq.n	810ccd8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810ccce:	687b      	ldr	r3, [r7, #4]
 810ccd0:	2201      	movs	r2, #1
 810ccd2:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810ccd4:	2301      	movs	r3, #1
 810ccd6:	e003      	b.n	810cce0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810ccd8:	687b      	ldr	r3, [r7, #4]
 810ccda:	4a06      	ldr	r2, [pc, #24]	@ (810ccf4 <SDMMC_GetCmdResp2+0x90>)
 810ccdc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810ccde:	2300      	movs	r3, #0
}
 810cce0:	4618      	mov	r0, r3
 810cce2:	3714      	adds	r7, #20
 810cce4:	46bd      	mov	sp, r7
 810cce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ccea:	4770      	bx	lr
 810ccec:	10000000 	.word	0x10000000
 810ccf0:	10624dd3 	.word	0x10624dd3
 810ccf4:	002000c5 	.word	0x002000c5

0810ccf8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 810ccf8:	b480      	push	{r7}
 810ccfa:	b085      	sub	sp, #20
 810ccfc:	af00      	add	r7, sp, #0
 810ccfe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810cd00:	4b1a      	ldr	r3, [pc, #104]	@ (810cd6c <SDMMC_GetCmdResp3+0x74>)
 810cd02:	681b      	ldr	r3, [r3, #0]
 810cd04:	4a1a      	ldr	r2, [pc, #104]	@ (810cd70 <SDMMC_GetCmdResp3+0x78>)
 810cd06:	fba2 2303 	umull	r2, r3, r2, r3
 810cd0a:	0a5b      	lsrs	r3, r3, #9
 810cd0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 810cd10:	fb02 f303 	mul.w	r3, r2, r3
 810cd14:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810cd16:	68fb      	ldr	r3, [r7, #12]
 810cd18:	1e5a      	subs	r2, r3, #1
 810cd1a:	60fa      	str	r2, [r7, #12]
 810cd1c:	2b00      	cmp	r3, #0
 810cd1e:	d102      	bne.n	810cd26 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810cd20:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810cd24:	e01b      	b.n	810cd5e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 810cd26:	687b      	ldr	r3, [r7, #4]
 810cd28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810cd2a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810cd2c:	68bb      	ldr	r3, [r7, #8]
 810cd2e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810cd32:	2b00      	cmp	r3, #0
 810cd34:	d0ef      	beq.n	810cd16 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810cd36:	68bb      	ldr	r3, [r7, #8]
 810cd38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810cd3c:	2b00      	cmp	r3, #0
 810cd3e:	d1ea      	bne.n	810cd16 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810cd40:	687b      	ldr	r3, [r7, #4]
 810cd42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810cd44:	f003 0304 	and.w	r3, r3, #4
 810cd48:	2b00      	cmp	r3, #0
 810cd4a:	d004      	beq.n	810cd56 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810cd4c:	687b      	ldr	r3, [r7, #4]
 810cd4e:	2204      	movs	r2, #4
 810cd50:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810cd52:	2304      	movs	r3, #4
 810cd54:	e003      	b.n	810cd5e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810cd56:	687b      	ldr	r3, [r7, #4]
 810cd58:	4a06      	ldr	r2, [pc, #24]	@ (810cd74 <SDMMC_GetCmdResp3+0x7c>)
 810cd5a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810cd5c:	2300      	movs	r3, #0
}
 810cd5e:	4618      	mov	r0, r3
 810cd60:	3714      	adds	r7, #20
 810cd62:	46bd      	mov	sp, r7
 810cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cd68:	4770      	bx	lr
 810cd6a:	bf00      	nop
 810cd6c:	10000000 	.word	0x10000000
 810cd70:	10624dd3 	.word	0x10624dd3
 810cd74:	002000c5 	.word	0x002000c5

0810cd78 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 810cd78:	b580      	push	{r7, lr}
 810cd7a:	b088      	sub	sp, #32
 810cd7c:	af00      	add	r7, sp, #0
 810cd7e:	60f8      	str	r0, [r7, #12]
 810cd80:	460b      	mov	r3, r1
 810cd82:	607a      	str	r2, [r7, #4]
 810cd84:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810cd86:	4b35      	ldr	r3, [pc, #212]	@ (810ce5c <SDMMC_GetCmdResp6+0xe4>)
 810cd88:	681b      	ldr	r3, [r3, #0]
 810cd8a:	4a35      	ldr	r2, [pc, #212]	@ (810ce60 <SDMMC_GetCmdResp6+0xe8>)
 810cd8c:	fba2 2303 	umull	r2, r3, r2, r3
 810cd90:	0a5b      	lsrs	r3, r3, #9
 810cd92:	f241 3288 	movw	r2, #5000	@ 0x1388
 810cd96:	fb02 f303 	mul.w	r3, r2, r3
 810cd9a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810cd9c:	69fb      	ldr	r3, [r7, #28]
 810cd9e:	1e5a      	subs	r2, r3, #1
 810cda0:	61fa      	str	r2, [r7, #28]
 810cda2:	2b00      	cmp	r3, #0
 810cda4:	d102      	bne.n	810cdac <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 810cda6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810cdaa:	e052      	b.n	810ce52 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 810cdac:	68fb      	ldr	r3, [r7, #12]
 810cdae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810cdb0:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810cdb2:	69bb      	ldr	r3, [r7, #24]
 810cdb4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810cdb8:	2b00      	cmp	r3, #0
 810cdba:	d0ef      	beq.n	810cd9c <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810cdbc:	69bb      	ldr	r3, [r7, #24]
 810cdbe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810cdc2:	2b00      	cmp	r3, #0
 810cdc4:	d1ea      	bne.n	810cd9c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810cdc6:	68fb      	ldr	r3, [r7, #12]
 810cdc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810cdca:	f003 0304 	and.w	r3, r3, #4
 810cdce:	2b00      	cmp	r3, #0
 810cdd0:	d004      	beq.n	810cddc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810cdd2:	68fb      	ldr	r3, [r7, #12]
 810cdd4:	2204      	movs	r2, #4
 810cdd6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810cdd8:	2304      	movs	r3, #4
 810cdda:	e03a      	b.n	810ce52 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810cddc:	68fb      	ldr	r3, [r7, #12]
 810cdde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810cde0:	f003 0301 	and.w	r3, r3, #1
 810cde4:	2b00      	cmp	r3, #0
 810cde6:	d004      	beq.n	810cdf2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810cde8:	68fb      	ldr	r3, [r7, #12]
 810cdea:	2201      	movs	r2, #1
 810cdec:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810cdee:	2301      	movs	r3, #1
 810cdf0:	e02f      	b.n	810ce52 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810cdf2:	68f8      	ldr	r0, [r7, #12]
 810cdf4:	f7ff fc46 	bl	810c684 <SDMMC_GetCommandResponse>
 810cdf8:	4603      	mov	r3, r0
 810cdfa:	461a      	mov	r2, r3
 810cdfc:	7afb      	ldrb	r3, [r7, #11]
 810cdfe:	4293      	cmp	r3, r2
 810ce00:	d001      	beq.n	810ce06 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810ce02:	2301      	movs	r3, #1
 810ce04:	e025      	b.n	810ce52 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810ce06:	68fb      	ldr	r3, [r7, #12]
 810ce08:	4a16      	ldr	r2, [pc, #88]	@ (810ce64 <SDMMC_GetCmdResp6+0xec>)
 810ce0a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810ce0c:	2100      	movs	r1, #0
 810ce0e:	68f8      	ldr	r0, [r7, #12]
 810ce10:	f7ff fc45 	bl	810c69e <SDMMC_GetResponse>
 810ce14:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 810ce16:	697b      	ldr	r3, [r7, #20]
 810ce18:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 810ce1c:	2b00      	cmp	r3, #0
 810ce1e:	d106      	bne.n	810ce2e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 810ce20:	697b      	ldr	r3, [r7, #20]
 810ce22:	0c1b      	lsrs	r3, r3, #16
 810ce24:	b29a      	uxth	r2, r3
 810ce26:	687b      	ldr	r3, [r7, #4]
 810ce28:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 810ce2a:	2300      	movs	r3, #0
 810ce2c:	e011      	b.n	810ce52 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 810ce2e:	697b      	ldr	r3, [r7, #20]
 810ce30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810ce34:	2b00      	cmp	r3, #0
 810ce36:	d002      	beq.n	810ce3e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810ce38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810ce3c:	e009      	b.n	810ce52 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 810ce3e:	697b      	ldr	r3, [r7, #20]
 810ce40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810ce44:	2b00      	cmp	r3, #0
 810ce46:	d002      	beq.n	810ce4e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810ce48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810ce4c:	e001      	b.n	810ce52 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810ce4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 810ce52:	4618      	mov	r0, r3
 810ce54:	3720      	adds	r7, #32
 810ce56:	46bd      	mov	sp, r7
 810ce58:	bd80      	pop	{r7, pc}
 810ce5a:	bf00      	nop
 810ce5c:	10000000 	.word	0x10000000
 810ce60:	10624dd3 	.word	0x10624dd3
 810ce64:	002000c5 	.word	0x002000c5

0810ce68 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 810ce68:	b480      	push	{r7}
 810ce6a:	b085      	sub	sp, #20
 810ce6c:	af00      	add	r7, sp, #0
 810ce6e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810ce70:	4b22      	ldr	r3, [pc, #136]	@ (810cefc <SDMMC_GetCmdResp7+0x94>)
 810ce72:	681b      	ldr	r3, [r3, #0]
 810ce74:	4a22      	ldr	r2, [pc, #136]	@ (810cf00 <SDMMC_GetCmdResp7+0x98>)
 810ce76:	fba2 2303 	umull	r2, r3, r2, r3
 810ce7a:	0a5b      	lsrs	r3, r3, #9
 810ce7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 810ce80:	fb02 f303 	mul.w	r3, r2, r3
 810ce84:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810ce86:	68fb      	ldr	r3, [r7, #12]
 810ce88:	1e5a      	subs	r2, r3, #1
 810ce8a:	60fa      	str	r2, [r7, #12]
 810ce8c:	2b00      	cmp	r3, #0
 810ce8e:	d102      	bne.n	810ce96 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810ce90:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810ce94:	e02c      	b.n	810cef0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 810ce96:	687b      	ldr	r3, [r7, #4]
 810ce98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810ce9a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810ce9c:	68bb      	ldr	r3, [r7, #8]
 810ce9e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810cea2:	2b00      	cmp	r3, #0
 810cea4:	d0ef      	beq.n	810ce86 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810cea6:	68bb      	ldr	r3, [r7, #8]
 810cea8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810ceac:	2b00      	cmp	r3, #0
 810ceae:	d1ea      	bne.n	810ce86 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810ceb0:	687b      	ldr	r3, [r7, #4]
 810ceb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810ceb4:	f003 0304 	and.w	r3, r3, #4
 810ceb8:	2b00      	cmp	r3, #0
 810ceba:	d004      	beq.n	810cec6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810cebc:	687b      	ldr	r3, [r7, #4]
 810cebe:	2204      	movs	r2, #4
 810cec0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810cec2:	2304      	movs	r3, #4
 810cec4:	e014      	b.n	810cef0 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810cec6:	687b      	ldr	r3, [r7, #4]
 810cec8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810ceca:	f003 0301 	and.w	r3, r3, #1
 810cece:	2b00      	cmp	r3, #0
 810ced0:	d004      	beq.n	810cedc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810ced2:	687b      	ldr	r3, [r7, #4]
 810ced4:	2201      	movs	r2, #1
 810ced6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810ced8:	2301      	movs	r3, #1
 810ceda:	e009      	b.n	810cef0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 810cedc:	687b      	ldr	r3, [r7, #4]
 810cede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810cee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810cee4:	2b00      	cmp	r3, #0
 810cee6:	d002      	beq.n	810ceee <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 810cee8:	687b      	ldr	r3, [r7, #4]
 810ceea:	2240      	movs	r2, #64	@ 0x40
 810ceec:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810ceee:	2300      	movs	r3, #0

}
 810cef0:	4618      	mov	r0, r3
 810cef2:	3714      	adds	r7, #20
 810cef4:	46bd      	mov	sp, r7
 810cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cefa:	4770      	bx	lr
 810cefc:	10000000 	.word	0x10000000
 810cf00:	10624dd3 	.word	0x10624dd3

0810cf04 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 810cf04:	b480      	push	{r7}
 810cf06:	b085      	sub	sp, #20
 810cf08:	af00      	add	r7, sp, #0
 810cf0a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810cf0c:	4b11      	ldr	r3, [pc, #68]	@ (810cf54 <SDMMC_GetCmdError+0x50>)
 810cf0e:	681b      	ldr	r3, [r3, #0]
 810cf10:	4a11      	ldr	r2, [pc, #68]	@ (810cf58 <SDMMC_GetCmdError+0x54>)
 810cf12:	fba2 2303 	umull	r2, r3, r2, r3
 810cf16:	0a5b      	lsrs	r3, r3, #9
 810cf18:	f241 3288 	movw	r2, #5000	@ 0x1388
 810cf1c:	fb02 f303 	mul.w	r3, r2, r3
 810cf20:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810cf22:	68fb      	ldr	r3, [r7, #12]
 810cf24:	1e5a      	subs	r2, r3, #1
 810cf26:	60fa      	str	r2, [r7, #12]
 810cf28:	2b00      	cmp	r3, #0
 810cf2a:	d102      	bne.n	810cf32 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810cf2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810cf30:	e009      	b.n	810cf46 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 810cf32:	687b      	ldr	r3, [r7, #4]
 810cf34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810cf36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810cf3a:	2b00      	cmp	r3, #0
 810cf3c:	d0f1      	beq.n	810cf22 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810cf3e:	687b      	ldr	r3, [r7, #4]
 810cf40:	4a06      	ldr	r2, [pc, #24]	@ (810cf5c <SDMMC_GetCmdError+0x58>)
 810cf42:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 810cf44:	2300      	movs	r3, #0
}
 810cf46:	4618      	mov	r0, r3
 810cf48:	3714      	adds	r7, #20
 810cf4a:	46bd      	mov	sp, r7
 810cf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf50:	4770      	bx	lr
 810cf52:	bf00      	nop
 810cf54:	10000000 	.word	0x10000000
 810cf58:	10624dd3 	.word	0x10624dd3
 810cf5c:	002000c5 	.word	0x002000c5

0810cf60 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810cf60:	b084      	sub	sp, #16
 810cf62:	b580      	push	{r7, lr}
 810cf64:	b084      	sub	sp, #16
 810cf66:	af00      	add	r7, sp, #0
 810cf68:	6078      	str	r0, [r7, #4]
 810cf6a:	f107 001c 	add.w	r0, r7, #28
 810cf6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810cf72:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 810cf76:	2b01      	cmp	r3, #1
 810cf78:	d123      	bne.n	810cfc2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810cf7a:	687b      	ldr	r3, [r7, #4]
 810cf7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810cf7e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810cf82:	687b      	ldr	r3, [r7, #4]
 810cf84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 810cf86:	687b      	ldr	r3, [r7, #4]
 810cf88:	68db      	ldr	r3, [r3, #12]
 810cf8a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 810cf8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810cf92:	687a      	ldr	r2, [r7, #4]
 810cf94:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 810cf96:	687b      	ldr	r3, [r7, #4]
 810cf98:	68db      	ldr	r3, [r3, #12]
 810cf9a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 810cf9e:	687b      	ldr	r3, [r7, #4]
 810cfa0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 810cfa2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 810cfa6:	2b01      	cmp	r3, #1
 810cfa8:	d105      	bne.n	810cfb6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 810cfaa:	687b      	ldr	r3, [r7, #4]
 810cfac:	68db      	ldr	r3, [r3, #12]
 810cfae:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 810cfb2:	687b      	ldr	r3, [r7, #4]
 810cfb4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810cfb6:	6878      	ldr	r0, [r7, #4]
 810cfb8:	f000 faa6 	bl	810d508 <USB_CoreReset>
 810cfbc:	4603      	mov	r3, r0
 810cfbe:	73fb      	strb	r3, [r7, #15]
 810cfc0:	e01b      	b.n	810cffa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 810cfc2:	687b      	ldr	r3, [r7, #4]
 810cfc4:	68db      	ldr	r3, [r3, #12]
 810cfc6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 810cfca:	687b      	ldr	r3, [r7, #4]
 810cfcc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810cfce:	6878      	ldr	r0, [r7, #4]
 810cfd0:	f000 fa9a 	bl	810d508 <USB_CoreReset>
 810cfd4:	4603      	mov	r3, r0
 810cfd6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 810cfd8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 810cfdc:	2b00      	cmp	r3, #0
 810cfde:	d106      	bne.n	810cfee <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 810cfe0:	687b      	ldr	r3, [r7, #4]
 810cfe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810cfe4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 810cfe8:	687b      	ldr	r3, [r7, #4]
 810cfea:	639a      	str	r2, [r3, #56]	@ 0x38
 810cfec:	e005      	b.n	810cffa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810cfee:	687b      	ldr	r3, [r7, #4]
 810cff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810cff2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810cff6:	687b      	ldr	r3, [r7, #4]
 810cff8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 810cffa:	7fbb      	ldrb	r3, [r7, #30]
 810cffc:	2b01      	cmp	r3, #1
 810cffe:	d118      	bne.n	810d032 <USB_CoreInit+0xd2>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 810d000:	687b      	ldr	r3, [r7, #4]
 810d002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810d004:	b29a      	uxth	r2, r3
 810d006:	687b      	ldr	r3, [r7, #4]
 810d008:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 810d00a:	687b      	ldr	r3, [r7, #4]
 810d00c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810d00e:	f043 737b 	orr.w	r3, r3, #65798144	@ 0x3ec0000
 810d012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810d016:	687a      	ldr	r2, [r7, #4]
 810d018:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 810d01a:	687b      	ldr	r3, [r7, #4]
 810d01c:	689b      	ldr	r3, [r3, #8]
 810d01e:	f043 0206 	orr.w	r2, r3, #6
 810d022:	687b      	ldr	r3, [r7, #4]
 810d024:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 810d026:	687b      	ldr	r3, [r7, #4]
 810d028:	689b      	ldr	r3, [r3, #8]
 810d02a:	f043 0220 	orr.w	r2, r3, #32
 810d02e:	687b      	ldr	r3, [r7, #4]
 810d030:	609a      	str	r2, [r3, #8]
  }

  return ret;
 810d032:	7bfb      	ldrb	r3, [r7, #15]
}
 810d034:	4618      	mov	r0, r3
 810d036:	3710      	adds	r7, #16
 810d038:	46bd      	mov	sp, r7
 810d03a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810d03e:	b004      	add	sp, #16
 810d040:	4770      	bx	lr

0810d042 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 810d042:	b480      	push	{r7}
 810d044:	b083      	sub	sp, #12
 810d046:	af00      	add	r7, sp, #0
 810d048:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 810d04a:	687b      	ldr	r3, [r7, #4]
 810d04c:	689b      	ldr	r3, [r3, #8]
 810d04e:	f023 0201 	bic.w	r2, r3, #1
 810d052:	687b      	ldr	r3, [r7, #4]
 810d054:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 810d056:	2300      	movs	r3, #0
}
 810d058:	4618      	mov	r0, r3
 810d05a:	370c      	adds	r7, #12
 810d05c:	46bd      	mov	sp, r7
 810d05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d062:	4770      	bx	lr

0810d064 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 810d064:	b580      	push	{r7, lr}
 810d066:	b084      	sub	sp, #16
 810d068:	af00      	add	r7, sp, #0
 810d06a:	6078      	str	r0, [r7, #4]
 810d06c:	460b      	mov	r3, r1
 810d06e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 810d070:	2300      	movs	r3, #0
 810d072:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 810d074:	687b      	ldr	r3, [r7, #4]
 810d076:	68db      	ldr	r3, [r3, #12]
 810d078:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 810d07c:	687b      	ldr	r3, [r7, #4]
 810d07e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 810d080:	78fb      	ldrb	r3, [r7, #3]
 810d082:	2b01      	cmp	r3, #1
 810d084:	d115      	bne.n	810d0b2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 810d086:	687b      	ldr	r3, [r7, #4]
 810d088:	68db      	ldr	r3, [r3, #12]
 810d08a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 810d08e:	687b      	ldr	r3, [r7, #4]
 810d090:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 810d092:	200a      	movs	r0, #10
 810d094:	f7f5 fdf2 	bl	8102c7c <HAL_Delay>
      ms += 10U;
 810d098:	68fb      	ldr	r3, [r7, #12]
 810d09a:	330a      	adds	r3, #10
 810d09c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 810d09e:	6878      	ldr	r0, [r7, #4]
 810d0a0:	f000 fa24 	bl	810d4ec <USB_GetMode>
 810d0a4:	4603      	mov	r3, r0
 810d0a6:	2b01      	cmp	r3, #1
 810d0a8:	d01e      	beq.n	810d0e8 <USB_SetCurrentMode+0x84>
 810d0aa:	68fb      	ldr	r3, [r7, #12]
 810d0ac:	2bc7      	cmp	r3, #199	@ 0xc7
 810d0ae:	d9f0      	bls.n	810d092 <USB_SetCurrentMode+0x2e>
 810d0b0:	e01a      	b.n	810d0e8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 810d0b2:	78fb      	ldrb	r3, [r7, #3]
 810d0b4:	2b00      	cmp	r3, #0
 810d0b6:	d115      	bne.n	810d0e4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 810d0b8:	687b      	ldr	r3, [r7, #4]
 810d0ba:	68db      	ldr	r3, [r3, #12]
 810d0bc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 810d0c0:	687b      	ldr	r3, [r7, #4]
 810d0c2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 810d0c4:	200a      	movs	r0, #10
 810d0c6:	f7f5 fdd9 	bl	8102c7c <HAL_Delay>
      ms += 10U;
 810d0ca:	68fb      	ldr	r3, [r7, #12]
 810d0cc:	330a      	adds	r3, #10
 810d0ce:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 810d0d0:	6878      	ldr	r0, [r7, #4]
 810d0d2:	f000 fa0b 	bl	810d4ec <USB_GetMode>
 810d0d6:	4603      	mov	r3, r0
 810d0d8:	2b00      	cmp	r3, #0
 810d0da:	d005      	beq.n	810d0e8 <USB_SetCurrentMode+0x84>
 810d0dc:	68fb      	ldr	r3, [r7, #12]
 810d0de:	2bc7      	cmp	r3, #199	@ 0xc7
 810d0e0:	d9f0      	bls.n	810d0c4 <USB_SetCurrentMode+0x60>
 810d0e2:	e001      	b.n	810d0e8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 810d0e4:	2301      	movs	r3, #1
 810d0e6:	e005      	b.n	810d0f4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 810d0e8:	68fb      	ldr	r3, [r7, #12]
 810d0ea:	2bc8      	cmp	r3, #200	@ 0xc8
 810d0ec:	d101      	bne.n	810d0f2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 810d0ee:	2301      	movs	r3, #1
 810d0f0:	e000      	b.n	810d0f4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 810d0f2:	2300      	movs	r3, #0
}
 810d0f4:	4618      	mov	r0, r3
 810d0f6:	3710      	adds	r7, #16
 810d0f8:	46bd      	mov	sp, r7
 810d0fa:	bd80      	pop	{r7, pc}

0810d0fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810d0fc:	b084      	sub	sp, #16
 810d0fe:	b580      	push	{r7, lr}
 810d100:	b086      	sub	sp, #24
 810d102:	af00      	add	r7, sp, #0
 810d104:	6078      	str	r0, [r7, #4]
 810d106:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 810d10a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 810d10e:	2300      	movs	r3, #0
 810d110:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810d112:	687b      	ldr	r3, [r7, #4]
 810d114:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 810d116:	2300      	movs	r3, #0
 810d118:	613b      	str	r3, [r7, #16]
 810d11a:	e009      	b.n	810d130 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 810d11c:	687a      	ldr	r2, [r7, #4]
 810d11e:	693b      	ldr	r3, [r7, #16]
 810d120:	3340      	adds	r3, #64	@ 0x40
 810d122:	009b      	lsls	r3, r3, #2
 810d124:	4413      	add	r3, r2
 810d126:	2200      	movs	r2, #0
 810d128:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 810d12a:	693b      	ldr	r3, [r7, #16]
 810d12c:	3301      	adds	r3, #1
 810d12e:	613b      	str	r3, [r7, #16]
 810d130:	693b      	ldr	r3, [r7, #16]
 810d132:	2b0e      	cmp	r3, #14
 810d134:	d9f2      	bls.n	810d11c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 810d136:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 810d13a:	2b00      	cmp	r3, #0
 810d13c:	d11c      	bne.n	810d178 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810d13e:	68fb      	ldr	r3, [r7, #12]
 810d140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810d144:	685b      	ldr	r3, [r3, #4]
 810d146:	68fa      	ldr	r2, [r7, #12]
 810d148:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810d14c:	f043 0302 	orr.w	r3, r3, #2
 810d150:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 810d152:	687b      	ldr	r3, [r7, #4]
 810d154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d156:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 810d15a:	687b      	ldr	r3, [r7, #4]
 810d15c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 810d15e:	687b      	ldr	r3, [r7, #4]
 810d160:	681b      	ldr	r3, [r3, #0]
 810d162:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 810d166:	687b      	ldr	r3, [r7, #4]
 810d168:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 810d16a:	687b      	ldr	r3, [r7, #4]
 810d16c:	681b      	ldr	r3, [r3, #0]
 810d16e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 810d172:	687b      	ldr	r3, [r7, #4]
 810d174:	601a      	str	r2, [r3, #0]
 810d176:	e005      	b.n	810d184 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 810d178:	687b      	ldr	r3, [r7, #4]
 810d17a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d17c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 810d180:	687b      	ldr	r3, [r7, #4]
 810d182:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 810d184:	68fb      	ldr	r3, [r7, #12]
 810d186:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 810d18a:	461a      	mov	r2, r3
 810d18c:	2300      	movs	r3, #0
 810d18e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810d190:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 810d194:	2b01      	cmp	r3, #1
 810d196:	d10d      	bne.n	810d1b4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 810d198:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810d19c:	2b00      	cmp	r3, #0
 810d19e:	d104      	bne.n	810d1aa <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 810d1a0:	2100      	movs	r1, #0
 810d1a2:	6878      	ldr	r0, [r7, #4]
 810d1a4:	f000 f968 	bl	810d478 <USB_SetDevSpeed>
 810d1a8:	e008      	b.n	810d1bc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 810d1aa:	2101      	movs	r1, #1
 810d1ac:	6878      	ldr	r0, [r7, #4]
 810d1ae:	f000 f963 	bl	810d478 <USB_SetDevSpeed>
 810d1b2:	e003      	b.n	810d1bc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 810d1b4:	2103      	movs	r1, #3
 810d1b6:	6878      	ldr	r0, [r7, #4]
 810d1b8:	f000 f95e 	bl	810d478 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 810d1bc:	2110      	movs	r1, #16
 810d1be:	6878      	ldr	r0, [r7, #4]
 810d1c0:	f000 f8fa 	bl	810d3b8 <USB_FlushTxFifo>
 810d1c4:	4603      	mov	r3, r0
 810d1c6:	2b00      	cmp	r3, #0
 810d1c8:	d001      	beq.n	810d1ce <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 810d1ca:	2301      	movs	r3, #1
 810d1cc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 810d1ce:	6878      	ldr	r0, [r7, #4]
 810d1d0:	f000 f924 	bl	810d41c <USB_FlushRxFifo>
 810d1d4:	4603      	mov	r3, r0
 810d1d6:	2b00      	cmp	r3, #0
 810d1d8:	d001      	beq.n	810d1de <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 810d1da:	2301      	movs	r3, #1
 810d1dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 810d1de:	68fb      	ldr	r3, [r7, #12]
 810d1e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810d1e4:	461a      	mov	r2, r3
 810d1e6:	2300      	movs	r3, #0
 810d1e8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 810d1ea:	68fb      	ldr	r3, [r7, #12]
 810d1ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810d1f0:	461a      	mov	r2, r3
 810d1f2:	2300      	movs	r3, #0
 810d1f4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 810d1f6:	68fb      	ldr	r3, [r7, #12]
 810d1f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810d1fc:	461a      	mov	r2, r3
 810d1fe:	2300      	movs	r3, #0
 810d200:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810d202:	2300      	movs	r3, #0
 810d204:	613b      	str	r3, [r7, #16]
 810d206:	e043      	b.n	810d290 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 810d208:	693b      	ldr	r3, [r7, #16]
 810d20a:	015a      	lsls	r2, r3, #5
 810d20c:	68fb      	ldr	r3, [r7, #12]
 810d20e:	4413      	add	r3, r2
 810d210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810d214:	681b      	ldr	r3, [r3, #0]
 810d216:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810d21a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810d21e:	d118      	bne.n	810d252 <USB_DevInit+0x156>
    {
      if (i == 0U)
 810d220:	693b      	ldr	r3, [r7, #16]
 810d222:	2b00      	cmp	r3, #0
 810d224:	d10a      	bne.n	810d23c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 810d226:	693b      	ldr	r3, [r7, #16]
 810d228:	015a      	lsls	r2, r3, #5
 810d22a:	68fb      	ldr	r3, [r7, #12]
 810d22c:	4413      	add	r3, r2
 810d22e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810d232:	461a      	mov	r2, r3
 810d234:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 810d238:	6013      	str	r3, [r2, #0]
 810d23a:	e013      	b.n	810d264 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 810d23c:	693b      	ldr	r3, [r7, #16]
 810d23e:	015a      	lsls	r2, r3, #5
 810d240:	68fb      	ldr	r3, [r7, #12]
 810d242:	4413      	add	r3, r2
 810d244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810d248:	461a      	mov	r2, r3
 810d24a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 810d24e:	6013      	str	r3, [r2, #0]
 810d250:	e008      	b.n	810d264 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 810d252:	693b      	ldr	r3, [r7, #16]
 810d254:	015a      	lsls	r2, r3, #5
 810d256:	68fb      	ldr	r3, [r7, #12]
 810d258:	4413      	add	r3, r2
 810d25a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810d25e:	461a      	mov	r2, r3
 810d260:	2300      	movs	r3, #0
 810d262:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 810d264:	693b      	ldr	r3, [r7, #16]
 810d266:	015a      	lsls	r2, r3, #5
 810d268:	68fb      	ldr	r3, [r7, #12]
 810d26a:	4413      	add	r3, r2
 810d26c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810d270:	461a      	mov	r2, r3
 810d272:	2300      	movs	r3, #0
 810d274:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 810d276:	693b      	ldr	r3, [r7, #16]
 810d278:	015a      	lsls	r2, r3, #5
 810d27a:	68fb      	ldr	r3, [r7, #12]
 810d27c:	4413      	add	r3, r2
 810d27e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810d282:	461a      	mov	r2, r3
 810d284:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 810d288:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810d28a:	693b      	ldr	r3, [r7, #16]
 810d28c:	3301      	adds	r3, #1
 810d28e:	613b      	str	r3, [r7, #16]
 810d290:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 810d294:	461a      	mov	r2, r3
 810d296:	693b      	ldr	r3, [r7, #16]
 810d298:	4293      	cmp	r3, r2
 810d29a:	d3b5      	bcc.n	810d208 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810d29c:	2300      	movs	r3, #0
 810d29e:	613b      	str	r3, [r7, #16]
 810d2a0:	e043      	b.n	810d32a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810d2a2:	693b      	ldr	r3, [r7, #16]
 810d2a4:	015a      	lsls	r2, r3, #5
 810d2a6:	68fb      	ldr	r3, [r7, #12]
 810d2a8:	4413      	add	r3, r2
 810d2aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810d2ae:	681b      	ldr	r3, [r3, #0]
 810d2b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810d2b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810d2b8:	d118      	bne.n	810d2ec <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 810d2ba:	693b      	ldr	r3, [r7, #16]
 810d2bc:	2b00      	cmp	r3, #0
 810d2be:	d10a      	bne.n	810d2d6 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 810d2c0:	693b      	ldr	r3, [r7, #16]
 810d2c2:	015a      	lsls	r2, r3, #5
 810d2c4:	68fb      	ldr	r3, [r7, #12]
 810d2c6:	4413      	add	r3, r2
 810d2c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810d2cc:	461a      	mov	r2, r3
 810d2ce:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 810d2d2:	6013      	str	r3, [r2, #0]
 810d2d4:	e013      	b.n	810d2fe <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 810d2d6:	693b      	ldr	r3, [r7, #16]
 810d2d8:	015a      	lsls	r2, r3, #5
 810d2da:	68fb      	ldr	r3, [r7, #12]
 810d2dc:	4413      	add	r3, r2
 810d2de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810d2e2:	461a      	mov	r2, r3
 810d2e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 810d2e8:	6013      	str	r3, [r2, #0]
 810d2ea:	e008      	b.n	810d2fe <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 810d2ec:	693b      	ldr	r3, [r7, #16]
 810d2ee:	015a      	lsls	r2, r3, #5
 810d2f0:	68fb      	ldr	r3, [r7, #12]
 810d2f2:	4413      	add	r3, r2
 810d2f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810d2f8:	461a      	mov	r2, r3
 810d2fa:	2300      	movs	r3, #0
 810d2fc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 810d2fe:	693b      	ldr	r3, [r7, #16]
 810d300:	015a      	lsls	r2, r3, #5
 810d302:	68fb      	ldr	r3, [r7, #12]
 810d304:	4413      	add	r3, r2
 810d306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810d30a:	461a      	mov	r2, r3
 810d30c:	2300      	movs	r3, #0
 810d30e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 810d310:	693b      	ldr	r3, [r7, #16]
 810d312:	015a      	lsls	r2, r3, #5
 810d314:	68fb      	ldr	r3, [r7, #12]
 810d316:	4413      	add	r3, r2
 810d318:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810d31c:	461a      	mov	r2, r3
 810d31e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 810d322:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810d324:	693b      	ldr	r3, [r7, #16]
 810d326:	3301      	adds	r3, #1
 810d328:	613b      	str	r3, [r7, #16]
 810d32a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 810d32e:	461a      	mov	r2, r3
 810d330:	693b      	ldr	r3, [r7, #16]
 810d332:	4293      	cmp	r3, r2
 810d334:	d3b5      	bcc.n	810d2a2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 810d336:	68fb      	ldr	r3, [r7, #12]
 810d338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810d33c:	691b      	ldr	r3, [r3, #16]
 810d33e:	68fa      	ldr	r2, [r7, #12]
 810d340:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810d344:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810d348:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 810d34a:	687b      	ldr	r3, [r7, #4]
 810d34c:	2200      	movs	r2, #0
 810d34e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 810d350:	687b      	ldr	r3, [r7, #4]
 810d352:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 810d356:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 810d358:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 810d35c:	2b00      	cmp	r3, #0
 810d35e:	d105      	bne.n	810d36c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 810d360:	687b      	ldr	r3, [r7, #4]
 810d362:	699b      	ldr	r3, [r3, #24]
 810d364:	f043 0210 	orr.w	r2, r3, #16
 810d368:	687b      	ldr	r3, [r7, #4]
 810d36a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 810d36c:	687b      	ldr	r3, [r7, #4]
 810d36e:	699a      	ldr	r2, [r3, #24]
 810d370:	4b10      	ldr	r3, [pc, #64]	@ (810d3b4 <USB_DevInit+0x2b8>)
 810d372:	4313      	orrs	r3, r2
 810d374:	687a      	ldr	r2, [r7, #4]
 810d376:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 810d378:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 810d37c:	2b00      	cmp	r3, #0
 810d37e:	d005      	beq.n	810d38c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 810d380:	687b      	ldr	r3, [r7, #4]
 810d382:	699b      	ldr	r3, [r3, #24]
 810d384:	f043 0208 	orr.w	r2, r3, #8
 810d388:	687b      	ldr	r3, [r7, #4]
 810d38a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 810d38c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 810d390:	2b01      	cmp	r3, #1
 810d392:	d107      	bne.n	810d3a4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 810d394:	687b      	ldr	r3, [r7, #4]
 810d396:	699b      	ldr	r3, [r3, #24]
 810d398:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 810d39c:	f043 0304 	orr.w	r3, r3, #4
 810d3a0:	687a      	ldr	r2, [r7, #4]
 810d3a2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 810d3a4:	7dfb      	ldrb	r3, [r7, #23]
}
 810d3a6:	4618      	mov	r0, r3
 810d3a8:	3718      	adds	r7, #24
 810d3aa:	46bd      	mov	sp, r7
 810d3ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810d3b0:	b004      	add	sp, #16
 810d3b2:	4770      	bx	lr
 810d3b4:	803c3800 	.word	0x803c3800

0810d3b8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 810d3b8:	b480      	push	{r7}
 810d3ba:	b085      	sub	sp, #20
 810d3bc:	af00      	add	r7, sp, #0
 810d3be:	6078      	str	r0, [r7, #4]
 810d3c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 810d3c2:	2300      	movs	r3, #0
 810d3c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810d3c6:	68fb      	ldr	r3, [r7, #12]
 810d3c8:	3301      	adds	r3, #1
 810d3ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810d3cc:	68fb      	ldr	r3, [r7, #12]
 810d3ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810d3d2:	d901      	bls.n	810d3d8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 810d3d4:	2303      	movs	r3, #3
 810d3d6:	e01b      	b.n	810d410 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810d3d8:	687b      	ldr	r3, [r7, #4]
 810d3da:	691b      	ldr	r3, [r3, #16]
 810d3dc:	2b00      	cmp	r3, #0
 810d3de:	daf2      	bge.n	810d3c6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 810d3e0:	2300      	movs	r3, #0
 810d3e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 810d3e4:	683b      	ldr	r3, [r7, #0]
 810d3e6:	019b      	lsls	r3, r3, #6
 810d3e8:	f043 0220 	orr.w	r2, r3, #32
 810d3ec:	687b      	ldr	r3, [r7, #4]
 810d3ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810d3f0:	68fb      	ldr	r3, [r7, #12]
 810d3f2:	3301      	adds	r3, #1
 810d3f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810d3f6:	68fb      	ldr	r3, [r7, #12]
 810d3f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810d3fc:	d901      	bls.n	810d402 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 810d3fe:	2303      	movs	r3, #3
 810d400:	e006      	b.n	810d410 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 810d402:	687b      	ldr	r3, [r7, #4]
 810d404:	691b      	ldr	r3, [r3, #16]
 810d406:	f003 0320 	and.w	r3, r3, #32
 810d40a:	2b20      	cmp	r3, #32
 810d40c:	d0f0      	beq.n	810d3f0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 810d40e:	2300      	movs	r3, #0
}
 810d410:	4618      	mov	r0, r3
 810d412:	3714      	adds	r7, #20
 810d414:	46bd      	mov	sp, r7
 810d416:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d41a:	4770      	bx	lr

0810d41c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 810d41c:	b480      	push	{r7}
 810d41e:	b085      	sub	sp, #20
 810d420:	af00      	add	r7, sp, #0
 810d422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810d424:	2300      	movs	r3, #0
 810d426:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810d428:	68fb      	ldr	r3, [r7, #12]
 810d42a:	3301      	adds	r3, #1
 810d42c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810d42e:	68fb      	ldr	r3, [r7, #12]
 810d430:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810d434:	d901      	bls.n	810d43a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 810d436:	2303      	movs	r3, #3
 810d438:	e018      	b.n	810d46c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810d43a:	687b      	ldr	r3, [r7, #4]
 810d43c:	691b      	ldr	r3, [r3, #16]
 810d43e:	2b00      	cmp	r3, #0
 810d440:	daf2      	bge.n	810d428 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 810d442:	2300      	movs	r3, #0
 810d444:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 810d446:	687b      	ldr	r3, [r7, #4]
 810d448:	2210      	movs	r2, #16
 810d44a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810d44c:	68fb      	ldr	r3, [r7, #12]
 810d44e:	3301      	adds	r3, #1
 810d450:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810d452:	68fb      	ldr	r3, [r7, #12]
 810d454:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810d458:	d901      	bls.n	810d45e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 810d45a:	2303      	movs	r3, #3
 810d45c:	e006      	b.n	810d46c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 810d45e:	687b      	ldr	r3, [r7, #4]
 810d460:	691b      	ldr	r3, [r3, #16]
 810d462:	f003 0310 	and.w	r3, r3, #16
 810d466:	2b10      	cmp	r3, #16
 810d468:	d0f0      	beq.n	810d44c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 810d46a:	2300      	movs	r3, #0
}
 810d46c:	4618      	mov	r0, r3
 810d46e:	3714      	adds	r7, #20
 810d470:	46bd      	mov	sp, r7
 810d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d476:	4770      	bx	lr

0810d478 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 810d478:	b480      	push	{r7}
 810d47a:	b085      	sub	sp, #20
 810d47c:	af00      	add	r7, sp, #0
 810d47e:	6078      	str	r0, [r7, #4]
 810d480:	460b      	mov	r3, r1
 810d482:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810d484:	687b      	ldr	r3, [r7, #4]
 810d486:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 810d488:	68fb      	ldr	r3, [r7, #12]
 810d48a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810d48e:	681a      	ldr	r2, [r3, #0]
 810d490:	78fb      	ldrb	r3, [r7, #3]
 810d492:	68f9      	ldr	r1, [r7, #12]
 810d494:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810d498:	4313      	orrs	r3, r2
 810d49a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 810d49c:	2300      	movs	r3, #0
}
 810d49e:	4618      	mov	r0, r3
 810d4a0:	3714      	adds	r7, #20
 810d4a2:	46bd      	mov	sp, r7
 810d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d4a8:	4770      	bx	lr

0810d4aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 810d4aa:	b480      	push	{r7}
 810d4ac:	b085      	sub	sp, #20
 810d4ae:	af00      	add	r7, sp, #0
 810d4b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810d4b2:	687b      	ldr	r3, [r7, #4]
 810d4b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 810d4b6:	68fb      	ldr	r3, [r7, #12]
 810d4b8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 810d4bc:	681b      	ldr	r3, [r3, #0]
 810d4be:	68fa      	ldr	r2, [r7, #12]
 810d4c0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 810d4c4:	f023 0303 	bic.w	r3, r3, #3
 810d4c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810d4ca:	68fb      	ldr	r3, [r7, #12]
 810d4cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810d4d0:	685b      	ldr	r3, [r3, #4]
 810d4d2:	68fa      	ldr	r2, [r7, #12]
 810d4d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810d4d8:	f043 0302 	orr.w	r3, r3, #2
 810d4dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 810d4de:	2300      	movs	r3, #0
}
 810d4e0:	4618      	mov	r0, r3
 810d4e2:	3714      	adds	r7, #20
 810d4e4:	46bd      	mov	sp, r7
 810d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d4ea:	4770      	bx	lr

0810d4ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 810d4ec:	b480      	push	{r7}
 810d4ee:	b083      	sub	sp, #12
 810d4f0:	af00      	add	r7, sp, #0
 810d4f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 810d4f4:	687b      	ldr	r3, [r7, #4]
 810d4f6:	695b      	ldr	r3, [r3, #20]
 810d4f8:	f003 0301 	and.w	r3, r3, #1
}
 810d4fc:	4618      	mov	r0, r3
 810d4fe:	370c      	adds	r7, #12
 810d500:	46bd      	mov	sp, r7
 810d502:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d506:	4770      	bx	lr

0810d508 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 810d508:	b480      	push	{r7}
 810d50a:	b085      	sub	sp, #20
 810d50c:	af00      	add	r7, sp, #0
 810d50e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810d510:	2300      	movs	r3, #0
 810d512:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810d514:	68fb      	ldr	r3, [r7, #12]
 810d516:	3301      	adds	r3, #1
 810d518:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810d51a:	68fb      	ldr	r3, [r7, #12]
 810d51c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810d520:	d901      	bls.n	810d526 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 810d522:	2303      	movs	r3, #3
 810d524:	e01b      	b.n	810d55e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810d526:	687b      	ldr	r3, [r7, #4]
 810d528:	691b      	ldr	r3, [r3, #16]
 810d52a:	2b00      	cmp	r3, #0
 810d52c:	daf2      	bge.n	810d514 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 810d52e:	2300      	movs	r3, #0
 810d530:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 810d532:	687b      	ldr	r3, [r7, #4]
 810d534:	691b      	ldr	r3, [r3, #16]
 810d536:	f043 0201 	orr.w	r2, r3, #1
 810d53a:	687b      	ldr	r3, [r7, #4]
 810d53c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810d53e:	68fb      	ldr	r3, [r7, #12]
 810d540:	3301      	adds	r3, #1
 810d542:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810d544:	68fb      	ldr	r3, [r7, #12]
 810d546:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810d54a:	d901      	bls.n	810d550 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 810d54c:	2303      	movs	r3, #3
 810d54e:	e006      	b.n	810d55e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 810d550:	687b      	ldr	r3, [r7, #4]
 810d552:	691b      	ldr	r3, [r3, #16]
 810d554:	f003 0301 	and.w	r3, r3, #1
 810d558:	2b01      	cmp	r3, #1
 810d55a:	d0f0      	beq.n	810d53e <USB_CoreReset+0x36>

  return HAL_OK;
 810d55c:	2300      	movs	r3, #0
}
 810d55e:	4618      	mov	r0, r3
 810d560:	3714      	adds	r7, #20
 810d562:	46bd      	mov	sp, r7
 810d564:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d568:	4770      	bx	lr

0810d56a <memset>:
 810d56a:	4402      	add	r2, r0
 810d56c:	4603      	mov	r3, r0
 810d56e:	4293      	cmp	r3, r2
 810d570:	d100      	bne.n	810d574 <memset+0xa>
 810d572:	4770      	bx	lr
 810d574:	f803 1b01 	strb.w	r1, [r3], #1
 810d578:	e7f9      	b.n	810d56e <memset+0x4>
	...

0810d57c <__libc_init_array>:
 810d57c:	b570      	push	{r4, r5, r6, lr}
 810d57e:	4d0d      	ldr	r5, [pc, #52]	@ (810d5b4 <__libc_init_array+0x38>)
 810d580:	4c0d      	ldr	r4, [pc, #52]	@ (810d5b8 <__libc_init_array+0x3c>)
 810d582:	1b64      	subs	r4, r4, r5
 810d584:	10a4      	asrs	r4, r4, #2
 810d586:	2600      	movs	r6, #0
 810d588:	42a6      	cmp	r6, r4
 810d58a:	d109      	bne.n	810d5a0 <__libc_init_array+0x24>
 810d58c:	4d0b      	ldr	r5, [pc, #44]	@ (810d5bc <__libc_init_array+0x40>)
 810d58e:	4c0c      	ldr	r4, [pc, #48]	@ (810d5c0 <__libc_init_array+0x44>)
 810d590:	f000 f818 	bl	810d5c4 <_init>
 810d594:	1b64      	subs	r4, r4, r5
 810d596:	10a4      	asrs	r4, r4, #2
 810d598:	2600      	movs	r6, #0
 810d59a:	42a6      	cmp	r6, r4
 810d59c:	d105      	bne.n	810d5aa <__libc_init_array+0x2e>
 810d59e:	bd70      	pop	{r4, r5, r6, pc}
 810d5a0:	f855 3b04 	ldr.w	r3, [r5], #4
 810d5a4:	4798      	blx	r3
 810d5a6:	3601      	adds	r6, #1
 810d5a8:	e7ee      	b.n	810d588 <__libc_init_array+0xc>
 810d5aa:	f855 3b04 	ldr.w	r3, [r5], #4
 810d5ae:	4798      	blx	r3
 810d5b0:	3601      	adds	r6, #1
 810d5b2:	e7f2      	b.n	810d59a <__libc_init_array+0x1e>
 810d5b4:	0810d61c 	.word	0x0810d61c
 810d5b8:	0810d61c 	.word	0x0810d61c
 810d5bc:	0810d61c 	.word	0x0810d61c
 810d5c0:	0810d620 	.word	0x0810d620

0810d5c4 <_init>:
 810d5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d5c6:	bf00      	nop
 810d5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810d5ca:	bc08      	pop	{r3}
 810d5cc:	469e      	mov	lr, r3
 810d5ce:	4770      	bx	lr

0810d5d0 <_fini>:
 810d5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810d5d2:	bf00      	nop
 810d5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810d5d6:	bc08      	pop	{r3}
 810d5d8:	469e      	mov	lr, r3
 810d5da:	4770      	bx	lr
