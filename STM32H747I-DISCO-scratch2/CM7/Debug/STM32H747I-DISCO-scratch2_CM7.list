
STM32H747I-DISCO-scratch2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008440  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  080086e0  080086e0  000096e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008818  08008818  0000a014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008818  08008818  00009818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008820  08008820  0000a014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008820  08008820  00009820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008824  08008824  00009824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  24000000  08008828  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004aac  24000014  0800883c  0000a014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004ac0  0800883c  0000aac0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a42e  00000000  00000000  0000a042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003417  00000000  00000000  00024470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  00027888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec2  00000000  00000000  00028bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003fbea  00000000  00000000  00029a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017509  00000000  00000000  00069664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019fefe  00000000  00000000  00080b6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00220a6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff8  00000000  00000000  00220ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  00225aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080086c8 	.word	0x080086c8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	080086c8 	.word	0x080086c8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000610:	4b49      	ldr	r3, [pc, #292]	@ (8000738 <SystemInit+0x12c>)
 8000612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000616:	4a48      	ldr	r2, [pc, #288]	@ (8000738 <SystemInit+0x12c>)
 8000618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800061c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000620:	4b45      	ldr	r3, [pc, #276]	@ (8000738 <SystemInit+0x12c>)
 8000622:	691b      	ldr	r3, [r3, #16]
 8000624:	4a44      	ldr	r2, [pc, #272]	@ (8000738 <SystemInit+0x12c>)
 8000626:	f043 0310 	orr.w	r3, r3, #16
 800062a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062c:	4b43      	ldr	r3, [pc, #268]	@ (800073c <SystemInit+0x130>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f003 030f 	and.w	r3, r3, #15
 8000634:	2b06      	cmp	r3, #6
 8000636:	d807      	bhi.n	8000648 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000638:	4b40      	ldr	r3, [pc, #256]	@ (800073c <SystemInit+0x130>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f023 030f 	bic.w	r3, r3, #15
 8000640:	4a3e      	ldr	r2, [pc, #248]	@ (800073c <SystemInit+0x130>)
 8000642:	f043 0307 	orr.w	r3, r3, #7
 8000646:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000648:	4b3d      	ldr	r3, [pc, #244]	@ (8000740 <SystemInit+0x134>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a3c      	ldr	r2, [pc, #240]	@ (8000740 <SystemInit+0x134>)
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000654:	4b3a      	ldr	r3, [pc, #232]	@ (8000740 <SystemInit+0x134>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800065a:	4b39      	ldr	r3, [pc, #228]	@ (8000740 <SystemInit+0x134>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	4938      	ldr	r1, [pc, #224]	@ (8000740 <SystemInit+0x134>)
 8000660:	4b38      	ldr	r3, [pc, #224]	@ (8000744 <SystemInit+0x138>)
 8000662:	4013      	ands	r3, r2
 8000664:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000666:	4b35      	ldr	r3, [pc, #212]	@ (800073c <SystemInit+0x130>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f003 0308 	and.w	r3, r3, #8
 800066e:	2b00      	cmp	r3, #0
 8000670:	d007      	beq.n	8000682 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000672:	4b32      	ldr	r3, [pc, #200]	@ (800073c <SystemInit+0x130>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f023 030f 	bic.w	r3, r3, #15
 800067a:	4a30      	ldr	r2, [pc, #192]	@ (800073c <SystemInit+0x130>)
 800067c:	f043 0307 	orr.w	r3, r3, #7
 8000680:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000682:	4b2f      	ldr	r3, [pc, #188]	@ (8000740 <SystemInit+0x134>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000688:	4b2d      	ldr	r3, [pc, #180]	@ (8000740 <SystemInit+0x134>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800068e:	4b2c      	ldr	r3, [pc, #176]	@ (8000740 <SystemInit+0x134>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000694:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <SystemInit+0x134>)
 8000696:	4a2c      	ldr	r2, [pc, #176]	@ (8000748 <SystemInit+0x13c>)
 8000698:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800069a:	4b29      	ldr	r3, [pc, #164]	@ (8000740 <SystemInit+0x134>)
 800069c:	4a2b      	ldr	r2, [pc, #172]	@ (800074c <SystemInit+0x140>)
 800069e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80006a0:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <SystemInit+0x134>)
 80006a2:	4a2b      	ldr	r2, [pc, #172]	@ (8000750 <SystemInit+0x144>)
 80006a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006a6:	4b26      	ldr	r3, [pc, #152]	@ (8000740 <SystemInit+0x134>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006ac:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <SystemInit+0x134>)
 80006ae:	4a28      	ldr	r2, [pc, #160]	@ (8000750 <SystemInit+0x144>)
 80006b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006b2:	4b23      	ldr	r3, [pc, #140]	@ (8000740 <SystemInit+0x134>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b8:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <SystemInit+0x134>)
 80006ba:	4a25      	ldr	r2, [pc, #148]	@ (8000750 <SystemInit+0x144>)
 80006bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006be:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <SystemInit+0x134>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <SystemInit+0x134>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000740 <SystemInit+0x134>)
 80006ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <SystemInit+0x134>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <SystemInit+0x148>)
 80006d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006da:	4a1e      	ldr	r2, [pc, #120]	@ (8000754 <SystemInit+0x148>)
 80006dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e0:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <SystemInit+0x14c>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <SystemInit+0x150>)
 80006e8:	4013      	ands	r3, r2
 80006ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006ee:	d202      	bcs.n	80006f6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <SystemInit+0x154>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006f6:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <SystemInit+0x134>)
 80006f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000700:	2b00      	cmp	r3, #0
 8000702:	d113      	bne.n	800072c <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000704:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <SystemInit+0x134>)
 8000706:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800070a:	4a0d      	ldr	r2, [pc, #52]	@ (8000740 <SystemInit+0x134>)
 800070c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000710:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000714:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <SystemInit+0x158>)
 8000716:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800071a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800071c:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <SystemInit+0x134>)
 800071e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000722:	4a07      	ldr	r2, [pc, #28]	@ (8000740 <SystemInit+0x134>)
 8000724:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000728:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00
 800073c:	52002000 	.word	0x52002000
 8000740:	58024400 	.word	0x58024400
 8000744:	eaf6ed7f 	.word	0xeaf6ed7f
 8000748:	02020200 	.word	0x02020200
 800074c:	01ff0000 	.word	0x01ff0000
 8000750:	01010280 	.word	0x01010280
 8000754:	580000c0 	.word	0x580000c0
 8000758:	5c001000 	.word	0x5c001000
 800075c:	ffff0000 	.word	0xffff0000
 8000760:	51008108 	.word	0x51008108
 8000764:	52004000 	.word	0x52004000

08000768 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <ExitRun0Mode+0x2c>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	4a08      	ldr	r2, [pc, #32]	@ (8000794 <ExitRun0Mode+0x2c>)
 8000772:	f023 0302 	bic.w	r3, r3, #2
 8000776:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000778:	bf00      	nop
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <ExitRun0Mode+0x2c>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0f9      	beq.n	800077a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	58024800 	.word	0x58024800

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800079e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007a2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007a4:	bf00      	nop
 80007a6:	4b3a      	ldr	r3, [pc, #232]	@ (8000890 <main+0xf8>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d004      	beq.n	80007bc <main+0x24>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	1e5a      	subs	r2, r3, #1
 80007b6:	607a      	str	r2, [r7, #4]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	dcf4      	bgt.n	80007a6 <main+0xe>
  if ( timeout < 0 )
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	da01      	bge.n	80007c6 <main+0x2e>
  {
  Error_Handler();
 80007c2:	f000 fac9 	bl	8000d58 <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f000 fc1d 	bl	8001004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ca:	f000 f87d 	bl	80008c8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007ce:	f000 f901 	bl	80009d4 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000890 <main+0xf8>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	4a2d      	ldr	r2, [pc, #180]	@ (8000890 <main+0xf8>)
 80007da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <main+0xf8>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f000 ff53 	bl	800169c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007f6:	2100      	movs	r1, #0
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 ff69 	bl	80016d0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000802:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000804:	bf00      	nop
 8000806:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <main+0xf8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d104      	bne.n	800081c <main+0x84>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	1e5a      	subs	r2, r3, #1
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	dcf4      	bgt.n	8000806 <main+0x6e>
if ( timeout < 0 )
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	da01      	bge.n	8000826 <main+0x8e>
{
Error_Handler();
 8000822:	f000 fa99 	bl	8000d58 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 f99d 	bl	8000b64 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800082a:	f000 f903 	bl	8000a34 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800082e:	f000 f94d 	bl	8000acc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000832:	f005 f8dd 	bl	80059f0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of ledCmdQueue */
  ledCmdQueueHandle = osMessageQueueNew (8, 32, &ledCmdQueue_attributes);
 8000836:	4a17      	ldr	r2, [pc, #92]	@ (8000894 <main+0xfc>)
 8000838:	2120      	movs	r1, #32
 800083a:	2008      	movs	r0, #8
 800083c:	f005 f9cf 	bl	8005bde <osMessageQueueNew>
 8000840:	4603      	mov	r3, r0
 8000842:	4a15      	ldr	r2, [pc, #84]	@ (8000898 <main+0x100>)
 8000844:	6013      	str	r3, [r2, #0]

  /* creation of uart1RxDMAQueue */
  uart1RxDMAQueueHandle = osMessageQueueNew (8, 128, &uart1RxDMAQueue_attributes);
 8000846:	4a15      	ldr	r2, [pc, #84]	@ (800089c <main+0x104>)
 8000848:	2180      	movs	r1, #128	@ 0x80
 800084a:	2008      	movs	r0, #8
 800084c:	f005 f9c7 	bl	8005bde <osMessageQueueNew>
 8000850:	4603      	mov	r3, r0
 8000852:	4a13      	ldr	r2, [pc, #76]	@ (80008a0 <main+0x108>)
 8000854:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of workerTask */
  workerTaskHandle = osThreadNew(StartDefaultTask, NULL, &workerTask_attributes);
 8000856:	4a13      	ldr	r2, [pc, #76]	@ (80008a4 <main+0x10c>)
 8000858:	2100      	movs	r1, #0
 800085a:	4813      	ldr	r0, [pc, #76]	@ (80008a8 <main+0x110>)
 800085c:	f005 f912 	bl	8005a84 <osThreadNew>
 8000860:	4603      	mov	r3, r0
 8000862:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <main+0x114>)
 8000864:	6013      	str	r3, [r2, #0]

  /* creation of ledTask */
  ledTaskHandle = osThreadNew(StarLEDTask, NULL, &ledTask_attributes);
 8000866:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <main+0x118>)
 8000868:	2100      	movs	r1, #0
 800086a:	4812      	ldr	r0, [pc, #72]	@ (80008b4 <main+0x11c>)
 800086c:	f005 f90a 	bl	8005a84 <osThreadNew>
 8000870:	4603      	mov	r3, r0
 8000872:	4a11      	ldr	r2, [pc, #68]	@ (80008b8 <main+0x120>)
 8000874:	6013      	str	r3, [r2, #0]

  /* creation of uart1Task */
  uart1TaskHandle = osThreadNew(StartUart1Task, NULL, &uart1Task_attributes);
 8000876:	4a11      	ldr	r2, [pc, #68]	@ (80008bc <main+0x124>)
 8000878:	2100      	movs	r1, #0
 800087a:	4811      	ldr	r0, [pc, #68]	@ (80008c0 <main+0x128>)
 800087c:	f005 f902 	bl	8005a84 <osThreadNew>
 8000880:	4603      	mov	r3, r0
 8000882:	4a10      	ldr	r2, [pc, #64]	@ (80008c4 <main+0x12c>)
 8000884:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000886:	f005 f8d7 	bl	8005a38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800088a:	bf00      	nop
 800088c:	e7fd      	b.n	800088a <main+0xf2>
 800088e:	bf00      	nop
 8000890:	58024400 	.word	0x58024400
 8000894:	080087c0 	.word	0x080087c0
 8000898:	24000164 	.word	0x24000164
 800089c:	080087d8 	.word	0x080087d8
 80008a0:	24000168 	.word	0x24000168
 80008a4:	08008754 	.word	0x08008754
 80008a8:	08000cad 	.word	0x08000cad
 80008ac:	24000158 	.word	0x24000158
 80008b0:	08008778 	.word	0x08008778
 80008b4:	08000cbd 	.word	0x08000cbd
 80008b8:	2400015c 	.word	0x2400015c
 80008bc:	0800879c 	.word	0x0800879c
 80008c0:	08000d0d 	.word	0x08000d0d
 80008c4:	24000160 	.word	0x24000160

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b09c      	sub	sp, #112	@ 0x70
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d2:	224c      	movs	r2, #76	@ 0x4c
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f007 febc 	bl	8008654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2220      	movs	r2, #32
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f007 feb6 	bl	8008654 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008e8:	2004      	movs	r0, #4
 80008ea:	f000 ff05 	bl	80016f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b36      	ldr	r3, [pc, #216]	@ (80009cc <SystemClock_Config+0x104>)
 80008f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008f6:	4a35      	ldr	r2, [pc, #212]	@ (80009cc <SystemClock_Config+0x104>)
 80008f8:	f023 0301 	bic.w	r3, r3, #1
 80008fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008fe:	4b33      	ldr	r3, [pc, #204]	@ (80009cc <SystemClock_Config+0x104>)
 8000900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	4b31      	ldr	r3, [pc, #196]	@ (80009d0 <SystemClock_Config+0x108>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a30      	ldr	r2, [pc, #192]	@ (80009d0 <SystemClock_Config+0x108>)
 800090e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b2e      	ldr	r3, [pc, #184]	@ (80009d0 <SystemClock_Config+0x108>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000920:	bf00      	nop
 8000922:	4b2b      	ldr	r3, [pc, #172]	@ (80009d0 <SystemClock_Config+0x108>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800092a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800092e:	d1f8      	bne.n	8000922 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000930:	230b      	movs	r3, #11
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000934:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000938:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800093a:	2301      	movs	r3, #1
 800093c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093e:	2340      	movs	r3, #64	@ 0x40
 8000940:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000942:	2301      	movs	r3, #1
 8000944:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000946:	2302      	movs	r3, #2
 8000948:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094a:	2302      	movs	r3, #2
 800094c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800094e:	2305      	movs	r3, #5
 8000950:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000952:	2330      	movs	r3, #48	@ 0x30
 8000954:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000956:	2302      	movs	r3, #2
 8000958:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800095a:	2305      	movs	r3, #5
 800095c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800095e:	2302      	movs	r3, #2
 8000960:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000962:	2308      	movs	r3, #8
 8000964:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000966:	2300      	movs	r3, #0
 8000968:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000972:	4618      	mov	r0, r3
 8000974:	f000 ff1a 	bl	80017ac <HAL_RCC_OscConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800097e:	f000 f9eb 	bl	8000d58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000982:	233f      	movs	r3, #63	@ 0x3f
 8000984:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 800099a:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800099e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f001 fb59 	bl	8002060 <HAL_RCC_ClockConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80009b4:	f000 f9d0 	bl	8000d58 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80009b8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009bc:	2100      	movs	r1, #0
 80009be:	2000      	movs	r0, #0
 80009c0:	f001 fd04 	bl	80023cc <HAL_RCC_MCOConfig>
}
 80009c4:	bf00      	nop
 80009c6:	3770      	adds	r7, #112	@ 0x70
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	58000400 	.word	0x58000400
 80009d0:	58024800 	.word	0x58024800

080009d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b0b2      	sub	sp, #200	@ 0xc8
 80009d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009da:	463b      	mov	r3, r7
 80009dc:	22c8      	movs	r2, #200	@ 0xc8
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f007 fe37 	bl	8008654 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009e6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80009ea:	f04f 0300 	mov.w	r3, #0
 80009ee:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80009f6:	230c      	movs	r3, #12
 80009f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80009fa:	2302      	movs	r3, #2
 80009fc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a02:	2302      	movs	r3, #2
 8000a04:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a06:	23c0      	movs	r3, #192	@ 0xc0
 8000a08:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a0a:	2320      	movs	r3, #32
 8000a0c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a18:	463b      	mov	r3, r7
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 ff16 	bl	800284c <HAL_RCCEx_PeriphCLKConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000a26:	f000 f997 	bl	8000d58 <Error_Handler>
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	37c8      	adds	r7, #200	@ 0xc8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a38:	4b22      	ldr	r3, [pc, #136]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a3a:	4a23      	ldr	r2, [pc, #140]	@ (8000ac8 <MX_USART1_UART_Init+0x94>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b17      	ldr	r3, [pc, #92]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a70:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a76:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a7c:	4811      	ldr	r0, [pc, #68]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a7e:	f003 fd51 	bl	8004524 <HAL_UART_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a88:	f000 f966 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	480d      	ldr	r0, [pc, #52]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a90:	f004 feaf 	bl	80057f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a9a:	f000 f95d 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4808      	ldr	r0, [pc, #32]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000aa2:	f004 fee4 	bl	800586e <HAL_UARTEx_SetRxFifoThreshold>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000aac:	f000 f954 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ab0:	4804      	ldr	r0, [pc, #16]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000ab2:	f004 fe65 	bl	8005780 <HAL_UARTEx_DisableFifoMode>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000abc:	f000 f94c 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	24000030 	.word	0x24000030
 8000ac8:	40011000 	.word	0x40011000

08000acc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad0:	4b22      	ldr	r3, [pc, #136]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000ad2:	4a23      	ldr	r2, [pc, #140]	@ (8000b60 <MX_USART2_UART_Init+0x94>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ad6:	4b21      	ldr	r3, [pc, #132]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000ad8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000adc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b1f      	ldr	r3, [pc, #124]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b02:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b08:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b14:	4811      	ldr	r0, [pc, #68]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000b16:	f003 fd05 	bl	8004524 <HAL_UART_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b20:	f000 f91a 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b24:	2100      	movs	r1, #0
 8000b26:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000b28:	f004 fe63 	bl	80057f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b32:	f000 f911 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b36:	2100      	movs	r1, #0
 8000b38:	4808      	ldr	r0, [pc, #32]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000b3a:	f004 fe98 	bl	800586e <HAL_UARTEx_SetRxFifoThreshold>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b44:	f000 f908 	bl	8000d58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b48:	4804      	ldr	r0, [pc, #16]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000b4a:	f004 fe19 	bl	8005780 <HAL_UARTEx_DisableFifoMode>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b54:	f000 f900 	bl	8000d58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	240000c4 	.word	0x240000c4
 8000b60:	40004400 	.word	0x40004400

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08c      	sub	sp, #48	@ 0x30
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	4b48      	ldr	r3, [pc, #288]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b80:	4a46      	ldr	r2, [pc, #280]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000b82:	f043 0308 	orr.w	r3, r3, #8
 8000b86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b8a:	4b44      	ldr	r3, [pc, #272]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	61bb      	str	r3, [r7, #24]
 8000b96:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b98:	4b40      	ldr	r3, [pc, #256]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9e:	4a3f      	ldr	r2, [pc, #252]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba8:	4b3c      	ldr	r3, [pc, #240]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b39      	ldr	r3, [pc, #228]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbc:	4a37      	ldr	r2, [pc, #220]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc6:	4b35      	ldr	r3, [pc, #212]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000bd4:	4b31      	ldr	r3, [pc, #196]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bda:	4a30      	ldr	r2, [pc, #192]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be4:	4b2d      	ldr	r3, [pc, #180]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf8:	4a28      	ldr	r2, [pc, #160]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000bfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c02:	4b26      	ldr	r3, [pc, #152]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c10:	4b22      	ldr	r3, [pc, #136]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c16:	4a21      	ldr	r2, [pc, #132]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c20:	4b1e      	ldr	r3, [pc, #120]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000c34:	481a      	ldr	r0, [pc, #104]	@ (8000ca0 <MX_GPIO_Init+0x13c>)
 8000c36:	f000 fd17 	bl	8001668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000c3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	4813      	ldr	r0, [pc, #76]	@ (8000ca4 <MX_GPIO_Init+0x140>)
 8000c58:	f000 fb56 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000c5c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	480a      	ldr	r0, [pc, #40]	@ (8000ca0 <MX_GPIO_Init+0x13c>)
 8000c76:	f000 fb47 	bl	8001308 <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4806      	ldr	r0, [pc, #24]	@ (8000ca8 <MX_GPIO_Init+0x144>)
 8000c8e:	f000 fb3b 	bl	8001308 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c92:	bf00      	nop
 8000c94:	3730      	adds	r7, #48	@ 0x30
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	58024400 	.word	0x58024400
 8000ca0:	58022000 	.word	0x58022000
 8000ca4:	58020000 	.word	0x58020000
 8000ca8:	58022800 	.word	0x58022800

08000cac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f004 ff77 	bl	8005ba8 <osDelay>
 8000cba:	e7fb      	b.n	8000cb4 <StartDefaultTask+0x8>

08000cbc <StarLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StarLEDTask */
void StarLEDTask(void *argument)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StarLEDTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cca:	480f      	ldr	r0, [pc, #60]	@ (8000d08 <StarLEDTask+0x4c>)
 8000ccc:	f000 fccc 	bl	8001668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cd6:	480c      	ldr	r0, [pc, #48]	@ (8000d08 <StarLEDTask+0x4c>)
 8000cd8:	f000 fcc6 	bl	8001668 <HAL_GPIO_WritePin>
	osDelay(1000);
 8000cdc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ce0:	f004 ff62 	bl	8005ba8 <osDelay>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cea:	4807      	ldr	r0, [pc, #28]	@ (8000d08 <StarLEDTask+0x4c>)
 8000cec:	f000 fcbc 	bl	8001668 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cf6:	4804      	ldr	r0, [pc, #16]	@ (8000d08 <StarLEDTask+0x4c>)
 8000cf8:	f000 fcb6 	bl	8001668 <HAL_GPIO_WritePin>
	osDelay(1000);
 8000cfc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d00:	f004 ff52 	bl	8005ba8 <osDelay>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000d04:	bf00      	nop
 8000d06:	e7dd      	b.n	8000cc4 <StarLEDTask+0x8>
 8000d08:	58022000 	.word	0x58022000

08000d0c <StartUart1Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUart1Task */
void StartUart1Task(void *argument)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUart1Task */
	HAL_StatusTypeDef status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	75fb      	strb	r3, [r7, #23]
	uint8_t msg[] = "\n\rHello A.U.G";
 8000d18:	4b0d      	ldr	r3, [pc, #52]	@ (8000d50 <StartUart1Task+0x44>)
 8000d1a:	f107 0408 	add.w	r4, r7, #8
 8000d1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d20:	c407      	stmia	r4!, {r0, r1, r2}
 8000d22:	8023      	strh	r3, [r4, #0]
	  }


	  osDelay(1000);
#else
	  status = HAL_UART_Receive(&huart1, msg, 1, 1000);
 8000d24:	f107 0108 	add.w	r1, r7, #8
 8000d28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	4809      	ldr	r0, [pc, #36]	@ (8000d54 <StartUart1Task+0x48>)
 8000d30:	f003 fcd6 	bl	80046e0 <HAL_UART_Receive>
 8000d34:	4603      	mov	r3, r0
 8000d36:	75fb      	strb	r3, [r7, #23]
	  if(status == HAL_OK)
 8000d38:	7dfb      	ldrb	r3, [r7, #23]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d1f2      	bne.n	8000d24 <StartUart1Task+0x18>
	  {
		  HAL_UART_Transmit(&huart1, msg, 1, 1000);
 8000d3e:	f107 0108 	add.w	r1, r7, #8
 8000d42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d46:	2201      	movs	r2, #1
 8000d48:	4802      	ldr	r0, [pc, #8]	@ (8000d54 <StartUart1Task+0x48>)
 8000d4a:	f003 fc3b 	bl	80045c4 <HAL_UART_Transmit>
	  status = HAL_UART_Receive(&huart1, msg, 1, 1000);
 8000d4e:	e7e9      	b.n	8000d24 <StartUart1Task+0x18>
 8000d50:	0800871c 	.word	0x0800871c
 8000d54:	24000030 	.word	0x24000030

08000d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d5c:	b672      	cpsid	i
}
 8000d5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <Error_Handler+0x8>

08000d64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d9c <HAL_MspInit+0x38>)
 8000d6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d70:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <HAL_MspInit+0x38>)
 8000d72:	f043 0302 	orr.w	r3, r3, #2
 8000d76:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d7a:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <HAL_MspInit+0x38>)
 8000d7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	f06f 0001 	mvn.w	r0, #1
 8000d90:	f000 fa93 	bl	80012ba <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d94:	bf00      	nop
 8000d96:	3708      	adds	r7, #8
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	58024400 	.word	0x58024400

08000da0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b0c0      	sub	sp, #256	@ 0x100
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da8:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db8:	f107 0320 	add.w	r3, r7, #32
 8000dbc:	22c8      	movs	r2, #200	@ 0xc8
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f007 fc47 	bl	8008654 <memset>
  if(huart->Instance==USART1)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a5f      	ldr	r2, [pc, #380]	@ (8000f48 <HAL_UART_MspInit+0x1a8>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d147      	bne.n	8000e60 <HAL_UART_MspInit+0xc0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dd0:	f04f 0201 	mov.w	r2, #1
 8000dd4:	f04f 0300 	mov.w	r3, #0
 8000dd8:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de2:	f107 0320 	add.w	r3, r7, #32
 8000de6:	4618      	mov	r0, r3
 8000de8:	f001 fd30 	bl	800284c <HAL_RCCEx_PeriphCLKConfig>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000df2:	f7ff ffb1 	bl	8000d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000df6:	4b55      	ldr	r3, [pc, #340]	@ (8000f4c <HAL_UART_MspInit+0x1ac>)
 8000df8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000dfc:	4a53      	ldr	r2, [pc, #332]	@ (8000f4c <HAL_UART_MspInit+0x1ac>)
 8000dfe:	f043 0310 	orr.w	r3, r3, #16
 8000e02:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000e06:	4b51      	ldr	r3, [pc, #324]	@ (8000f4c <HAL_UART_MspInit+0x1ac>)
 8000e08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e0c:	f003 0310 	and.w	r3, r3, #16
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b4d      	ldr	r3, [pc, #308]	@ (8000f4c <HAL_UART_MspInit+0x1ac>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1a:	4a4c      	ldr	r2, [pc, #304]	@ (8000f4c <HAL_UART_MspInit+0x1ac>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e24:	4b49      	ldr	r3, [pc, #292]	@ (8000f4c <HAL_UART_MspInit+0x1ac>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	61bb      	str	r3, [r7, #24]
 8000e30:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000e32:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e36:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e46:	2300      	movs	r3, #0
 8000e48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000e56:	4619      	mov	r1, r3
 8000e58:	483d      	ldr	r0, [pc, #244]	@ (8000f50 <HAL_UART_MspInit+0x1b0>)
 8000e5a:	f000 fa55 	bl	8001308 <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e5e:	e06e      	b.n	8000f3e <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART2)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a3b      	ldr	r2, [pc, #236]	@ (8000f54 <HAL_UART_MspInit+0x1b4>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d169      	bne.n	8000f3e <HAL_UART_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e6a:	f04f 0202 	mov.w	r2, #2
 8000e6e:	f04f 0300 	mov.w	r3, #0
 8000e72:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e76:	2300      	movs	r3, #0
 8000e78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e7c:	f107 0320 	add.w	r3, r7, #32
 8000e80:	4618      	mov	r0, r3
 8000e82:	f001 fce3 	bl	800284c <HAL_RCCEx_PeriphCLKConfig>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8000e8c:	f7ff ff64 	bl	8000d58 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e90:	4b2e      	ldr	r3, [pc, #184]	@ (8000f4c <HAL_UART_MspInit+0x1ac>)
 8000e92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e96:	4a2d      	ldr	r2, [pc, #180]	@ (8000f4c <HAL_UART_MspInit+0x1ac>)
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e9c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ea0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f4c <HAL_UART_MspInit+0x1ac>)
 8000ea2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eae:	4b27      	ldr	r3, [pc, #156]	@ (8000f4c <HAL_UART_MspInit+0x1ac>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb4:	4a25      	ldr	r2, [pc, #148]	@ (8000f4c <HAL_UART_MspInit+0x1ac>)
 8000eb6:	f043 0308 	orr.w	r3, r3, #8
 8000eba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ebe:	4b23      	ldr	r3, [pc, #140]	@ (8000f4c <HAL_UART_MspInit+0x1ac>)
 8000ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec4:	f003 0308 	and.w	r3, r3, #8
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f4c <HAL_UART_MspInit+0x1ac>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f4c <HAL_UART_MspInit+0x1ac>)
 8000ed4:	f043 0301 	orr.w	r3, r3, #1
 8000ed8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000edc:	4b1b      	ldr	r3, [pc, #108]	@ (8000f4c <HAL_UART_MspInit+0x1ac>)
 8000ede:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee2:	f003 0301 	and.w	r3, r3, #1
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PMOD_2__USART2_TX_Pin|PMOD_4__USART2_RTS_Pin|PMOD_3__USART2_RX_Pin;
 8000eea:	2370      	movs	r3, #112	@ 0x70
 8000eec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f02:	2307      	movs	r3, #7
 8000f04:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f08:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4812      	ldr	r0, [pc, #72]	@ (8000f58 <HAL_UART_MspInit+0x1b8>)
 8000f10:	f000 f9fa 	bl	8001308 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PMOD_1__USART2_CTS_NSS_Pin;
 8000f14:	2301      	movs	r3, #1
 8000f16:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f2c:	2307      	movs	r3, #7
 8000f2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(PMOD_1__USART2_CTS_NSS_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000f36:	4619      	mov	r1, r3
 8000f38:	4805      	ldr	r0, [pc, #20]	@ (8000f50 <HAL_UART_MspInit+0x1b0>)
 8000f3a:	f000 f9e5 	bl	8001308 <HAL_GPIO_Init>
}
 8000f3e:	bf00      	nop
 8000f40:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40011000 	.word	0x40011000
 8000f4c:	58024400 	.word	0x58024400
 8000f50:	58020000 	.word	0x58020000
 8000f54:	40004400 	.word	0x40004400
 8000f58:	58020c00 	.word	0x58020c00

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <NMI_Handler+0x4>

08000f64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <MemManage_Handler+0x4>

08000f74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f96:	f000 f8a7 	bl	80010e8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f9a:	f006 ff1f 	bl	8007ddc <xTaskGetSchedulerState>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d001      	beq.n	8000fa8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000fa4:	f005 fb28 	bl	80065f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	bd80      	pop	{r7, pc}

08000fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fac:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000fe8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000fb0:	f7ff fbda 	bl	8000768 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb4:	f7ff fb2a 	bl	800060c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb8:	480c      	ldr	r0, [pc, #48]	@ (8000fec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fba:	490d      	ldr	r1, [pc, #52]	@ (8000ff0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ffc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fde:	f007 fb41 	bl	8008664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe2:	f7ff fbd9 	bl	8000798 <main>
  bx  lr
 8000fe6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fe8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ff0:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000ff4:	08008828 	.word	0x08008828
  ldr r2, =_sbss
 8000ff8:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8000ffc:	24004ac0 	.word	0x24004ac0

08001000 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC3_IRQHandler>
	...

08001004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100a:	2003      	movs	r0, #3
 800100c:	f000 f94a 	bl	80012a4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001010:	f001 fa46 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 8001014:	4602      	mov	r2, r0
 8001016:	4b15      	ldr	r3, [pc, #84]	@ (800106c <HAL_Init+0x68>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	0a1b      	lsrs	r3, r3, #8
 800101c:	f003 030f 	and.w	r3, r3, #15
 8001020:	4913      	ldr	r1, [pc, #76]	@ (8001070 <HAL_Init+0x6c>)
 8001022:	5ccb      	ldrb	r3, [r1, r3]
 8001024:	f003 031f 	and.w	r3, r3, #31
 8001028:	fa22 f303 	lsr.w	r3, r2, r3
 800102c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800102e:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <HAL_Init+0x68>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	4a0e      	ldr	r2, [pc, #56]	@ (8001070 <HAL_Init+0x6c>)
 8001038:	5cd3      	ldrb	r3, [r2, r3]
 800103a:	f003 031f 	and.w	r3, r3, #31
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	fa22 f303 	lsr.w	r3, r2, r3
 8001044:	4a0b      	ldr	r2, [pc, #44]	@ (8001074 <HAL_Init+0x70>)
 8001046:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001048:	4a0b      	ldr	r2, [pc, #44]	@ (8001078 <HAL_Init+0x74>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800104e:	200f      	movs	r0, #15
 8001050:	f000 f814 	bl	800107c <HAL_InitTick>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e002      	b.n	8001064 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800105e:	f7ff fe81 	bl	8000d64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	58024400 	.word	0x58024400
 8001070:	08008744 	.word	0x08008744
 8001074:	24000004 	.word	0x24000004
 8001078:	24000000 	.word	0x24000000

0800107c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001084:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <HAL_InitTick+0x60>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e021      	b.n	80010d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001090:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <HAL_InitTick+0x64>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <HAL_InitTick+0x60>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109e:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f921 	bl	80012ee <HAL_SYSTICK_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00e      	b.n	80010d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d80a      	bhi.n	80010d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010bc:	2200      	movs	r2, #0
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f000 f8f9 	bl	80012ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c8:	4a06      	ldr	r2, [pc, #24]	@ (80010e4 <HAL_InitTick+0x68>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e000      	b.n	80010d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2400000c 	.word	0x2400000c
 80010e0:	24000000 	.word	0x24000000
 80010e4:	24000008 	.word	0x24000008

080010e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_IncTick+0x20>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	@ (800110c <HAL_IncTick+0x24>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a04      	ldr	r2, [pc, #16]	@ (800110c <HAL_IncTick+0x24>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	2400000c 	.word	0x2400000c
 800110c:	2400016c 	.word	0x2400016c

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b03      	ldr	r3, [pc, #12]	@ (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	2400016c 	.word	0x2400016c

08001128 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <HAL_GetREVID+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	0c1b      	lsrs	r3, r3, #16
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	5c001000 	.word	0x5c001000

08001140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001150:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <__NVIC_SetPriorityGrouping+0x40>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800115c:	4013      	ands	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	4313      	orrs	r3, r2
 800116c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116e:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <__NVIC_SetPriorityGrouping+0x40>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	60d3      	str	r3, [r2, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00
 8001184:	05fa0000 	.word	0x05fa0000

08001188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800118c:	4b04      	ldr	r3, [pc, #16]	@ (80011a0 <__NVIC_GetPriorityGrouping+0x18>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	f003 0307 	and.w	r3, r3, #7
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	db0a      	blt.n	80011ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	490c      	ldr	r1, [pc, #48]	@ (80011f0 <__NVIC_SetPriority+0x4c>)
 80011be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c2:	0112      	lsls	r2, r2, #4
 80011c4:	b2d2      	uxtb	r2, r2
 80011c6:	440b      	add	r3, r1
 80011c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011cc:	e00a      	b.n	80011e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	b2da      	uxtb	r2, r3
 80011d2:	4908      	ldr	r1, [pc, #32]	@ (80011f4 <__NVIC_SetPriority+0x50>)
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	3b04      	subs	r3, #4
 80011dc:	0112      	lsls	r2, r2, #4
 80011de:	b2d2      	uxtb	r2, r2
 80011e0:	440b      	add	r3, r1
 80011e2:	761a      	strb	r2, [r3, #24]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000e100 	.word	0xe000e100
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	@ 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f1c3 0307 	rsb	r3, r3, #7
 8001212:	2b04      	cmp	r3, #4
 8001214:	bf28      	it	cs
 8001216:	2304      	movcs	r3, #4
 8001218:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3304      	adds	r3, #4
 800121e:	2b06      	cmp	r3, #6
 8001220:	d902      	bls.n	8001228 <NVIC_EncodePriority+0x30>
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	3b03      	subs	r3, #3
 8001226:	e000      	b.n	800122a <NVIC_EncodePriority+0x32>
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800122c:	f04f 32ff 	mov.w	r2, #4294967295
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	43da      	mvns	r2, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	401a      	ands	r2, r3
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001240:	f04f 31ff 	mov.w	r1, #4294967295
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	fa01 f303 	lsl.w	r3, r1, r3
 800124a:	43d9      	mvns	r1, r3
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001250:	4313      	orrs	r3, r2
         );
}
 8001252:	4618      	mov	r0, r3
 8001254:	3724      	adds	r7, #36	@ 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	3b01      	subs	r3, #1
 800126c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001270:	d301      	bcc.n	8001276 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001272:	2301      	movs	r3, #1
 8001274:	e00f      	b.n	8001296 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001276:	4a0a      	ldr	r2, [pc, #40]	@ (80012a0 <SysTick_Config+0x40>)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	3b01      	subs	r3, #1
 800127c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800127e:	210f      	movs	r1, #15
 8001280:	f04f 30ff 	mov.w	r0, #4294967295
 8001284:	f7ff ff8e 	bl	80011a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001288:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <SysTick_Config+0x40>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800128e:	4b04      	ldr	r3, [pc, #16]	@ (80012a0 <SysTick_Config+0x40>)
 8001290:	2207      	movs	r2, #7
 8001292:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	e000e010 	.word	0xe000e010

080012a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff ff47 	bl	8001140 <__NVIC_SetPriorityGrouping>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b086      	sub	sp, #24
 80012be:	af00      	add	r7, sp, #0
 80012c0:	4603      	mov	r3, r0
 80012c2:	60b9      	str	r1, [r7, #8]
 80012c4:	607a      	str	r2, [r7, #4]
 80012c6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012c8:	f7ff ff5e 	bl	8001188 <__NVIC_GetPriorityGrouping>
 80012cc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68b9      	ldr	r1, [r7, #8]
 80012d2:	6978      	ldr	r0, [r7, #20]
 80012d4:	f7ff ff90 	bl	80011f8 <NVIC_EncodePriority>
 80012d8:	4602      	mov	r2, r0
 80012da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012de:	4611      	mov	r1, r2
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff5f 	bl	80011a4 <__NVIC_SetPriority>
}
 80012e6:	bf00      	nop
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ffb2 	bl	8001260 <SysTick_Config>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001308:	b480      	push	{r7}
 800130a:	b089      	sub	sp, #36	@ 0x24
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001316:	4b89      	ldr	r3, [pc, #548]	@ (800153c <HAL_GPIO_Init+0x234>)
 8001318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800131a:	e194      	b.n	8001646 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2101      	movs	r1, #1
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 8186 	beq.w	8001640 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b01      	cmp	r3, #1
 800133e:	d005      	beq.n	800134c <HAL_GPIO_Init+0x44>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d130      	bne.n	80013ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001382:	2201      	movs	r2, #1
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	4013      	ands	r3, r2
 8001390:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	091b      	lsrs	r3, r3, #4
 8001398:	f003 0201 	and.w	r2, r3, #1
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	69ba      	ldr	r2, [r7, #24]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d017      	beq.n	80013ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	2203      	movs	r2, #3
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	4013      	ands	r3, r2
 80013d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	69ba      	ldr	r2, [r7, #24]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f003 0303 	and.w	r3, r3, #3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d123      	bne.n	800143e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	08da      	lsrs	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3208      	adds	r2, #8
 80013fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0307 	and.w	r3, r3, #7
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	220f      	movs	r2, #15
 800140e:	fa02 f303 	lsl.w	r3, r2, r3
 8001412:	43db      	mvns	r3, r3
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4013      	ands	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	691a      	ldr	r2, [r3, #16]
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	f003 0307 	and.w	r3, r3, #7
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	08da      	lsrs	r2, r3, #3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3208      	adds	r2, #8
 8001438:	69b9      	ldr	r1, [r7, #24]
 800143a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	2203      	movs	r2, #3
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	69ba      	ldr	r2, [r7, #24]
 8001452:	4013      	ands	r3, r2
 8001454:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0203 	and.w	r2, r3, #3
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4313      	orrs	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800147a:	2b00      	cmp	r3, #0
 800147c:	f000 80e0 	beq.w	8001640 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001480:	4b2f      	ldr	r3, [pc, #188]	@ (8001540 <HAL_GPIO_Init+0x238>)
 8001482:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001486:	4a2e      	ldr	r2, [pc, #184]	@ (8001540 <HAL_GPIO_Init+0x238>)
 8001488:	f043 0302 	orr.w	r3, r3, #2
 800148c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001490:	4b2b      	ldr	r3, [pc, #172]	@ (8001540 <HAL_GPIO_Init+0x238>)
 8001492:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800149e:	4a29      	ldr	r2, [pc, #164]	@ (8001544 <HAL_GPIO_Init+0x23c>)
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	089b      	lsrs	r3, r3, #2
 80014a4:	3302      	adds	r3, #2
 80014a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	220f      	movs	r2, #15
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4013      	ands	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a20      	ldr	r2, [pc, #128]	@ (8001548 <HAL_GPIO_Init+0x240>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d052      	beq.n	8001570 <HAL_GPIO_Init+0x268>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a1f      	ldr	r2, [pc, #124]	@ (800154c <HAL_GPIO_Init+0x244>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d031      	beq.n	8001536 <HAL_GPIO_Init+0x22e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a1e      	ldr	r2, [pc, #120]	@ (8001550 <HAL_GPIO_Init+0x248>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d02b      	beq.n	8001532 <HAL_GPIO_Init+0x22a>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001554 <HAL_GPIO_Init+0x24c>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d025      	beq.n	800152e <HAL_GPIO_Init+0x226>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001558 <HAL_GPIO_Init+0x250>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d01f      	beq.n	800152a <HAL_GPIO_Init+0x222>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a1b      	ldr	r2, [pc, #108]	@ (800155c <HAL_GPIO_Init+0x254>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d019      	beq.n	8001526 <HAL_GPIO_Init+0x21e>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001560 <HAL_GPIO_Init+0x258>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0x21a>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a19      	ldr	r2, [pc, #100]	@ (8001564 <HAL_GPIO_Init+0x25c>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00d      	beq.n	800151e <HAL_GPIO_Init+0x216>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a18      	ldr	r2, [pc, #96]	@ (8001568 <HAL_GPIO_Init+0x260>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <HAL_GPIO_Init+0x212>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a17      	ldr	r2, [pc, #92]	@ (800156c <HAL_GPIO_Init+0x264>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_GPIO_Init+0x20e>
 8001512:	2309      	movs	r3, #9
 8001514:	e02d      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 8001516:	230a      	movs	r3, #10
 8001518:	e02b      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 800151a:	2308      	movs	r3, #8
 800151c:	e029      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 800151e:	2307      	movs	r3, #7
 8001520:	e027      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 8001522:	2306      	movs	r3, #6
 8001524:	e025      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 8001526:	2305      	movs	r3, #5
 8001528:	e023      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 800152a:	2304      	movs	r3, #4
 800152c:	e021      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 800152e:	2303      	movs	r3, #3
 8001530:	e01f      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 8001532:	2302      	movs	r3, #2
 8001534:	e01d      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 8001536:	2301      	movs	r3, #1
 8001538:	e01b      	b.n	8001572 <HAL_GPIO_Init+0x26a>
 800153a:	bf00      	nop
 800153c:	58000080 	.word	0x58000080
 8001540:	58024400 	.word	0x58024400
 8001544:	58000400 	.word	0x58000400
 8001548:	58020000 	.word	0x58020000
 800154c:	58020400 	.word	0x58020400
 8001550:	58020800 	.word	0x58020800
 8001554:	58020c00 	.word	0x58020c00
 8001558:	58021000 	.word	0x58021000
 800155c:	58021400 	.word	0x58021400
 8001560:	58021800 	.word	0x58021800
 8001564:	58021c00 	.word	0x58021c00
 8001568:	58022000 	.word	0x58022000
 800156c:	58022400 	.word	0x58022400
 8001570:	2300      	movs	r3, #0
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	f002 0203 	and.w	r2, r2, #3
 8001578:	0092      	lsls	r2, r2, #2
 800157a:	4093      	lsls	r3, r2
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001582:	4938      	ldr	r1, [pc, #224]	@ (8001664 <HAL_GPIO_Init+0x35c>)
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	089b      	lsrs	r3, r3, #2
 8001588:	3302      	adds	r3, #2
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	43db      	mvns	r3, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4013      	ands	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d003      	beq.n	80015b6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80015b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015e4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	69ba      	ldr	r2, [r7, #24]
 8001614:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	43db      	mvns	r3, r3
 8001620:	69ba      	ldr	r2, [r7, #24]
 8001622:	4013      	ands	r3, r2
 8001624:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	3301      	adds	r3, #1
 8001644:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	f47f ae63 	bne.w	800131c <HAL_GPIO_Init+0x14>
  }
}
 8001656:	bf00      	nop
 8001658:	bf00      	nop
 800165a:	3724      	adds	r7, #36	@ 0x24
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	58000400 	.word	0x58000400

08001668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	460b      	mov	r3, r1
 8001672:	807b      	strh	r3, [r7, #2]
 8001674:	4613      	mov	r3, r2
 8001676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001678:	787b      	ldrb	r3, [r7, #1]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800167e:	887a      	ldrh	r2, [r7, #2]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001684:	e003      	b.n	800168e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001686:	887b      	ldrh	r3, [r7, #2]
 8001688:	041a      	lsls	r2, r3, #16
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	619a      	str	r2, [r3, #24]
}
 800168e:	bf00      	nop
 8001690:	370c      	adds	r7, #12
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80016a4:	4a08      	ldr	r2, [pc, #32]	@ (80016c8 <HAL_HSEM_FastTake+0x2c>)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3320      	adds	r3, #32
 80016aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ae:	4a07      	ldr	r2, [pc, #28]	@ (80016cc <HAL_HSEM_FastTake+0x30>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d101      	bne.n	80016b8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	e000      	b.n	80016ba <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr
 80016c6:	bf00      	nop
 80016c8:	58026400 	.word	0x58026400
 80016cc:	80000300 	.word	0x80000300

080016d0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80016da:	4906      	ldr	r1, [pc, #24]	@ (80016f4 <HAL_HSEM_Release+0x24>)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	58026400 	.word	0x58026400

080016f8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001700:	4b29      	ldr	r3, [pc, #164]	@ (80017a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	2b06      	cmp	r3, #6
 800170a:	d00a      	beq.n	8001722 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800170c:	4b26      	ldr	r3, [pc, #152]	@ (80017a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	429a      	cmp	r2, r3
 8001718:	d001      	beq.n	800171e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e040      	b.n	80017a0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e03e      	b.n	80017a0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001722:	4b21      	ldr	r3, [pc, #132]	@ (80017a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800172a:	491f      	ldr	r1, [pc, #124]	@ (80017a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4313      	orrs	r3, r2
 8001730:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001732:	f7ff fced 	bl	8001110 <HAL_GetTick>
 8001736:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001738:	e009      	b.n	800174e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800173a:	f7ff fce9 	bl	8001110 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001748:	d901      	bls.n	800174e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e028      	b.n	80017a0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800174e:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001756:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800175a:	d1ee      	bne.n	800173a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b1e      	cmp	r3, #30
 8001760:	d008      	beq.n	8001774 <HAL_PWREx_ConfigSupply+0x7c>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b2e      	cmp	r3, #46	@ 0x2e
 8001766:	d005      	beq.n	8001774 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b1d      	cmp	r3, #29
 800176c:	d002      	beq.n	8001774 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b2d      	cmp	r3, #45	@ 0x2d
 8001772:	d114      	bne.n	800179e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001774:	f7ff fccc 	bl	8001110 <HAL_GetTick>
 8001778:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800177a:	e009      	b.n	8001790 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800177c:	f7ff fcc8 	bl	8001110 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800178a:	d901      	bls.n	8001790 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e007      	b.n	80017a0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001790:	4b05      	ldr	r3, [pc, #20]	@ (80017a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800179c:	d1ee      	bne.n	800177c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	4618      	mov	r0, r3
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	58024800 	.word	0x58024800

080017ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08c      	sub	sp, #48	@ 0x30
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d102      	bne.n	80017c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	f000 bc48 	b.w	8002050 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 8088 	beq.w	80018de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017ce:	4b99      	ldr	r3, [pc, #612]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017d8:	4b96      	ldr	r3, [pc, #600]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80017da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e0:	2b10      	cmp	r3, #16
 80017e2:	d007      	beq.n	80017f4 <HAL_RCC_OscConfig+0x48>
 80017e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017e6:	2b18      	cmp	r3, #24
 80017e8:	d111      	bne.n	800180e <HAL_RCC_OscConfig+0x62>
 80017ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d10c      	bne.n	800180e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f4:	4b8f      	ldr	r3, [pc, #572]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d06d      	beq.n	80018dc <HAL_RCC_OscConfig+0x130>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d169      	bne.n	80018dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	f000 bc21 	b.w	8002050 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001816:	d106      	bne.n	8001826 <HAL_RCC_OscConfig+0x7a>
 8001818:	4b86      	ldr	r3, [pc, #536]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a85      	ldr	r2, [pc, #532]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 800181e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	e02e      	b.n	8001884 <HAL_RCC_OscConfig+0xd8>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d10c      	bne.n	8001848 <HAL_RCC_OscConfig+0x9c>
 800182e:	4b81      	ldr	r3, [pc, #516]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a80      	ldr	r2, [pc, #512]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001834:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	4b7e      	ldr	r3, [pc, #504]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a7d      	ldr	r2, [pc, #500]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001840:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	e01d      	b.n	8001884 <HAL_RCC_OscConfig+0xd8>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001850:	d10c      	bne.n	800186c <HAL_RCC_OscConfig+0xc0>
 8001852:	4b78      	ldr	r3, [pc, #480]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a77      	ldr	r2, [pc, #476]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001858:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	4b75      	ldr	r3, [pc, #468]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a74      	ldr	r2, [pc, #464]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001864:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001868:	6013      	str	r3, [r2, #0]
 800186a:	e00b      	b.n	8001884 <HAL_RCC_OscConfig+0xd8>
 800186c:	4b71      	ldr	r3, [pc, #452]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a70      	ldr	r2, [pc, #448]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b6e      	ldr	r3, [pc, #440]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a6d      	ldr	r2, [pc, #436]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 800187e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d013      	beq.n	80018b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188c:	f7ff fc40 	bl	8001110 <HAL_GetTick>
 8001890:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff fc3c 	bl	8001110 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	@ 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e3d4      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018a6:	4b63      	ldr	r3, [pc, #396]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d0f0      	beq.n	8001894 <HAL_RCC_OscConfig+0xe8>
 80018b2:	e014      	b.n	80018de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff fc2c 	bl	8001110 <HAL_GetTick>
 80018b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018bc:	f7ff fc28 	bl	8001110 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b64      	cmp	r3, #100	@ 0x64
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e3c0      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018ce:	4b59      	ldr	r3, [pc, #356]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x110>
 80018da:	e000      	b.n	80018de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 80ca 	beq.w	8001a80 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ec:	4b51      	ldr	r3, [pc, #324]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018f6:	4b4f      	ldr	r3, [pc, #316]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80018f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018fc:	6a3b      	ldr	r3, [r7, #32]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d007      	beq.n	8001912 <HAL_RCC_OscConfig+0x166>
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	2b18      	cmp	r3, #24
 8001906:	d156      	bne.n	80019b6 <HAL_RCC_OscConfig+0x20a>
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d151      	bne.n	80019b6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001912:	4b48      	ldr	r3, [pc, #288]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <HAL_RCC_OscConfig+0x17e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d101      	bne.n	800192a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e392      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800192a:	4b42      	ldr	r3, [pc, #264]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 0219 	bic.w	r2, r3, #25
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
 8001936:	493f      	ldr	r1, [pc, #252]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001938:	4313      	orrs	r3, r2
 800193a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff fbe8 	bl	8001110 <HAL_GetTick>
 8001940:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001944:	f7ff fbe4 	bl	8001110 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e37c      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001956:	4b37      	ldr	r3, [pc, #220]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0f0      	beq.n	8001944 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001962:	f7ff fbe1 	bl	8001128 <HAL_GetREVID>
 8001966:	4603      	mov	r3, r0
 8001968:	f241 0203 	movw	r2, #4099	@ 0x1003
 800196c:	4293      	cmp	r3, r2
 800196e:	d817      	bhi.n	80019a0 <HAL_RCC_OscConfig+0x1f4>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	2b40      	cmp	r3, #64	@ 0x40
 8001976:	d108      	bne.n	800198a <HAL_RCC_OscConfig+0x1de>
 8001978:	4b2e      	ldr	r3, [pc, #184]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001980:	4a2c      	ldr	r2, [pc, #176]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001986:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001988:	e07a      	b.n	8001a80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	031b      	lsls	r3, r3, #12
 8001998:	4926      	ldr	r1, [pc, #152]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 800199a:	4313      	orrs	r3, r2
 800199c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800199e:	e06f      	b.n	8001a80 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a0:	4b24      	ldr	r3, [pc, #144]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	061b      	lsls	r3, r3, #24
 80019ae:	4921      	ldr	r1, [pc, #132]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b4:	e064      	b.n	8001a80 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68db      	ldr	r3, [r3, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d047      	beq.n	8001a4e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019be:	4b1d      	ldr	r3, [pc, #116]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 0219 	bic.w	r2, r3, #25
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	491a      	ldr	r1, [pc, #104]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff fb9e 	bl	8001110 <HAL_GetTick>
 80019d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d8:	f7ff fb9a 	bl	8001110 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e332      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ea:	4b12      	ldr	r3, [pc, #72]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f6:	f7ff fb97 	bl	8001128 <HAL_GetREVID>
 80019fa:	4603      	mov	r3, r0
 80019fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d819      	bhi.n	8001a38 <HAL_RCC_OscConfig+0x28c>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	691b      	ldr	r3, [r3, #16]
 8001a08:	2b40      	cmp	r3, #64	@ 0x40
 8001a0a:	d108      	bne.n	8001a1e <HAL_RCC_OscConfig+0x272>
 8001a0c:	4b09      	ldr	r3, [pc, #36]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001a14:	4a07      	ldr	r2, [pc, #28]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a1a:	6053      	str	r3, [r2, #4]
 8001a1c:	e030      	b.n	8001a80 <HAL_RCC_OscConfig+0x2d4>
 8001a1e:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	031b      	lsls	r3, r3, #12
 8001a2c:	4901      	ldr	r1, [pc, #4]	@ (8001a34 <HAL_RCC_OscConfig+0x288>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	604b      	str	r3, [r1, #4]
 8001a32:	e025      	b.n	8001a80 <HAL_RCC_OscConfig+0x2d4>
 8001a34:	58024400 	.word	0x58024400
 8001a38:	4b9a      	ldr	r3, [pc, #616]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	061b      	lsls	r3, r3, #24
 8001a46:	4997      	ldr	r1, [pc, #604]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	604b      	str	r3, [r1, #4]
 8001a4c:	e018      	b.n	8001a80 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4e:	4b95      	ldr	r3, [pc, #596]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a94      	ldr	r2, [pc, #592]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001a54:	f023 0301 	bic.w	r3, r3, #1
 8001a58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5a:	f7ff fb59 	bl	8001110 <HAL_GetTick>
 8001a5e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a62:	f7ff fb55 	bl	8001110 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e2ed      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a74:	4b8b      	ldr	r3, [pc, #556]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d1f0      	bne.n	8001a62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 0310 	and.w	r3, r3, #16
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	f000 80a9 	beq.w	8001be0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a8e:	4b85      	ldr	r3, [pc, #532]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001a90:	691b      	ldr	r3, [r3, #16]
 8001a92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a96:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a98:	4b82      	ldr	r3, [pc, #520]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a9c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d007      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x308>
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	2b18      	cmp	r3, #24
 8001aa8:	d13a      	bne.n	8001b20 <HAL_RCC_OscConfig+0x374>
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f003 0303 	and.w	r3, r3, #3
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d135      	bne.n	8001b20 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ab4:	4b7b      	ldr	r3, [pc, #492]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_RCC_OscConfig+0x320>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	2b80      	cmp	r3, #128	@ 0x80
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e2c1      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001acc:	f7ff fb2c 	bl	8001128 <HAL_GetREVID>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d817      	bhi.n	8001b0a <HAL_RCC_OscConfig+0x35e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	2b20      	cmp	r3, #32
 8001ae0:	d108      	bne.n	8001af4 <HAL_RCC_OscConfig+0x348>
 8001ae2:	4b70      	ldr	r3, [pc, #448]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001aea:	4a6e      	ldr	r2, [pc, #440]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001aec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001af0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001af2:	e075      	b.n	8001be0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001af4:	4b6b      	ldr	r3, [pc, #428]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	069b      	lsls	r3, r3, #26
 8001b02:	4968      	ldr	r1, [pc, #416]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b08:	e06a      	b.n	8001be0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b0a:	4b66      	ldr	r3, [pc, #408]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b0c:	68db      	ldr	r3, [r3, #12]
 8001b0e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a1b      	ldr	r3, [r3, #32]
 8001b16:	061b      	lsls	r3, r3, #24
 8001b18:	4962      	ldr	r1, [pc, #392]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b1e:	e05f      	b.n	8001be0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d042      	beq.n	8001bae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b28:	4b5e      	ldr	r3, [pc, #376]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a5d      	ldr	r2, [pc, #372]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b34:	f7ff faec 	bl	8001110 <HAL_GetTick>
 8001b38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b3c:	f7ff fae8 	bl	8001110 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e280      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b4e:	4b55      	ldr	r3, [pc, #340]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f0      	beq.n	8001b3c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b5a:	f7ff fae5 	bl	8001128 <HAL_GetREVID>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d817      	bhi.n	8001b98 <HAL_RCC_OscConfig+0x3ec>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	2b20      	cmp	r3, #32
 8001b6e:	d108      	bne.n	8001b82 <HAL_RCC_OscConfig+0x3d6>
 8001b70:	4b4c      	ldr	r3, [pc, #304]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001b78:	4a4a      	ldr	r2, [pc, #296]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b7e:	6053      	str	r3, [r2, #4]
 8001b80:	e02e      	b.n	8001be0 <HAL_RCC_OscConfig+0x434>
 8001b82:	4b48      	ldr	r3, [pc, #288]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a1b      	ldr	r3, [r3, #32]
 8001b8e:	069b      	lsls	r3, r3, #26
 8001b90:	4944      	ldr	r1, [pc, #272]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]
 8001b96:	e023      	b.n	8001be0 <HAL_RCC_OscConfig+0x434>
 8001b98:	4b42      	ldr	r3, [pc, #264]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	061b      	lsls	r3, r3, #24
 8001ba6:	493f      	ldr	r1, [pc, #252]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	60cb      	str	r3, [r1, #12]
 8001bac:	e018      	b.n	8001be0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001bae:	4b3d      	ldr	r3, [pc, #244]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a3c      	ldr	r2, [pc, #240]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001bb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bba:	f7ff faa9 	bl	8001110 <HAL_GetTick>
 8001bbe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001bc2:	f7ff faa5 	bl	8001110 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e23d      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bd4:	4b33      	ldr	r3, [pc, #204]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f0      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d036      	beq.n	8001c5a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	695b      	ldr	r3, [r3, #20]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d019      	beq.n	8001c28 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf4:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001bf6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bf8:	4a2a      	ldr	r2, [pc, #168]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c00:	f7ff fa86 	bl	8001110 <HAL_GetTick>
 8001c04:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c08:	f7ff fa82 	bl	8001110 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e21a      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c1a:	4b22      	ldr	r3, [pc, #136]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001c1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x45c>
 8001c26:	e018      	b.n	8001c5a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c28:	4b1e      	ldr	r3, [pc, #120]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001c2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001c2e:	f023 0301 	bic.w	r3, r3, #1
 8001c32:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7ff fa6c 	bl	8001110 <HAL_GetTick>
 8001c38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c3a:	e008      	b.n	8001c4e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c3c:	f7ff fa68 	bl	8001110 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e200      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1f0      	bne.n	8001c3c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d039      	beq.n	8001cda <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d01c      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a0c      	ldr	r2, [pc, #48]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001c74:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c78:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c7a:	f7ff fa49 	bl	8001110 <HAL_GetTick>
 8001c7e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c82:	f7ff fa45 	bl	8001110 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e1dd      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c94:	4b03      	ldr	r3, [pc, #12]	@ (8001ca4 <HAL_RCC_OscConfig+0x4f8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d0f0      	beq.n	8001c82 <HAL_RCC_OscConfig+0x4d6>
 8001ca0:	e01b      	b.n	8001cda <HAL_RCC_OscConfig+0x52e>
 8001ca2:	bf00      	nop
 8001ca4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ca8:	4b9b      	ldr	r3, [pc, #620]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a9a      	ldr	r2, [pc, #616]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001cae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001cb2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cb4:	f7ff fa2c 	bl	8001110 <HAL_GetTick>
 8001cb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cbc:	f7ff fa28 	bl	8001110 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e1c0      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cce:	4b92      	ldr	r3, [pc, #584]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 8081 	beq.w	8001dea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ce8:	4b8c      	ldr	r3, [pc, #560]	@ (8001f1c <HAL_RCC_OscConfig+0x770>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a8b      	ldr	r2, [pc, #556]	@ (8001f1c <HAL_RCC_OscConfig+0x770>)
 8001cee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cf2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001cf4:	f7ff fa0c 	bl	8001110 <HAL_GetTick>
 8001cf8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cfc:	f7ff fa08 	bl	8001110 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b64      	cmp	r3, #100	@ 0x64
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e1a0      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d0e:	4b83      	ldr	r3, [pc, #524]	@ (8001f1c <HAL_RCC_OscConfig+0x770>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d106      	bne.n	8001d30 <HAL_RCC_OscConfig+0x584>
 8001d22:	4b7d      	ldr	r3, [pc, #500]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d26:	4a7c      	ldr	r2, [pc, #496]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d28:	f043 0301 	orr.w	r3, r3, #1
 8001d2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d2e:	e02d      	b.n	8001d8c <HAL_RCC_OscConfig+0x5e0>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d10c      	bne.n	8001d52 <HAL_RCC_OscConfig+0x5a6>
 8001d38:	4b77      	ldr	r3, [pc, #476]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3c:	4a76      	ldr	r2, [pc, #472]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d3e:	f023 0301 	bic.w	r3, r3, #1
 8001d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d44:	4b74      	ldr	r3, [pc, #464]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d48:	4a73      	ldr	r2, [pc, #460]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d4a:	f023 0304 	bic.w	r3, r3, #4
 8001d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d50:	e01c      	b.n	8001d8c <HAL_RCC_OscConfig+0x5e0>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2b05      	cmp	r3, #5
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0x5c8>
 8001d5a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5e:	4a6e      	ldr	r2, [pc, #440]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d66:	4b6c      	ldr	r3, [pc, #432]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6a:	4a6b      	ldr	r2, [pc, #428]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d6c:	f043 0301 	orr.w	r3, r3, #1
 8001d70:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d72:	e00b      	b.n	8001d8c <HAL_RCC_OscConfig+0x5e0>
 8001d74:	4b68      	ldr	r3, [pc, #416]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d78:	4a67      	ldr	r2, [pc, #412]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d7a:	f023 0301 	bic.w	r3, r3, #1
 8001d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d80:	4b65      	ldr	r3, [pc, #404]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d84:	4a64      	ldr	r2, [pc, #400]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001d86:	f023 0304 	bic.w	r3, r3, #4
 8001d8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d015      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7ff f9bc 	bl	8001110 <HAL_GetTick>
 8001d98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d9a:	e00a      	b.n	8001db2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9c:	f7ff f9b8 	bl	8001110 <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e14e      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001db2:	4b59      	ldr	r3, [pc, #356]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0ee      	beq.n	8001d9c <HAL_RCC_OscConfig+0x5f0>
 8001dbe:	e014      	b.n	8001dea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc0:	f7ff f9a6 	bl	8001110 <HAL_GetTick>
 8001dc4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dc6:	e00a      	b.n	8001dde <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dc8:	f7ff f9a2 	bl	8001110 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e138      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dde:	4b4e      	ldr	r3, [pc, #312]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1ee      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 812d 	beq.w	800204e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001df4:	4b48      	ldr	r3, [pc, #288]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dfc:	2b18      	cmp	r3, #24
 8001dfe:	f000 80bd 	beq.w	8001f7c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	f040 809e 	bne.w	8001f48 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0c:	4b42      	ldr	r3, [pc, #264]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a41      	ldr	r2, [pc, #260]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001e12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e18:	f7ff f97a 	bl	8001110 <HAL_GetTick>
 8001e1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e1e:	e008      	b.n	8001e32 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e20:	f7ff f976 	bl	8001110 <HAL_GetTick>
 8001e24:	4602      	mov	r2, r0
 8001e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d901      	bls.n	8001e32 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e10e      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e32:	4b39      	ldr	r3, [pc, #228]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d1f0      	bne.n	8001e20 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e3e:	4b36      	ldr	r3, [pc, #216]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001e40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e42:	4b37      	ldr	r3, [pc, #220]	@ (8001f20 <HAL_RCC_OscConfig+0x774>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	430a      	orrs	r2, r1
 8001e52:	4931      	ldr	r1, [pc, #196]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	628b      	str	r3, [r1, #40]	@ 0x28
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e66:	3b01      	subs	r3, #1
 8001e68:	025b      	lsls	r3, r3, #9
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e72:	3b01      	subs	r3, #1
 8001e74:	041b      	lsls	r3, r3, #16
 8001e76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e80:	3b01      	subs	r3, #1
 8001e82:	061b      	lsls	r3, r3, #24
 8001e84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001e88:	4923      	ldr	r1, [pc, #140]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001e8e:	4b22      	ldr	r3, [pc, #136]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e92:	4a21      	ldr	r2, [pc, #132]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001e9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e9e:	4b21      	ldr	r3, [pc, #132]	@ (8001f24 <HAL_RCC_OscConfig+0x778>)
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ea6:	00d2      	lsls	r2, r2, #3
 8001ea8:	491b      	ldr	r1, [pc, #108]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001eae:	4b1a      	ldr	r3, [pc, #104]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb2:	f023 020c 	bic.w	r2, r3, #12
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	4917      	ldr	r1, [pc, #92]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ec0:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec4:	f023 0202 	bic.w	r2, r3, #2
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ecc:	4912      	ldr	r1, [pc, #72]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ed2:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed6:	4a10      	ldr	r2, [pc, #64]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001ed8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001edc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ede:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee2:	4a0d      	ldr	r2, [pc, #52]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ee8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001eea:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eee:	4a0a      	ldr	r2, [pc, #40]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001ef0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001ef6:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efa:	4a07      	ldr	r2, [pc, #28]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f02:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a04      	ldr	r2, [pc, #16]	@ (8001f18 <HAL_RCC_OscConfig+0x76c>)
 8001f08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0e:	f7ff f8ff 	bl	8001110 <HAL_GetTick>
 8001f12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f14:	e011      	b.n	8001f3a <HAL_RCC_OscConfig+0x78e>
 8001f16:	bf00      	nop
 8001f18:	58024400 	.word	0x58024400
 8001f1c:	58024800 	.word	0x58024800
 8001f20:	fffffc0c 	.word	0xfffffc0c
 8001f24:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f28:	f7ff f8f2 	bl	8001110 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e08a      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f3a:	4b47      	ldr	r3, [pc, #284]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x77c>
 8001f46:	e082      	b.n	800204e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f48:	4b43      	ldr	r3, [pc, #268]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a42      	ldr	r2, [pc, #264]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8001f4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7ff f8dc 	bl	8001110 <HAL_GetTick>
 8001f58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7ff f8d8 	bl	8001110 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e070      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f6e:	4b3a      	ldr	r3, [pc, #232]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x7b0>
 8001f7a:	e068      	b.n	800204e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f7c:	4b36      	ldr	r3, [pc, #216]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8001f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f82:	4b35      	ldr	r3, [pc, #212]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f86:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d031      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	f003 0203 	and.w	r2, r3, #3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d12a      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d122      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d11a      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	0a5b      	lsrs	r3, r3, #9
 8001fc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d111      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	0c1b      	lsrs	r3, r3, #16
 8001fd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fdc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d108      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	0e1b      	lsrs	r3, r3, #24
 8001fe6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d001      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e02b      	b.n	8002050 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001ff8:	4b17      	ldr	r3, [pc, #92]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8001ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ffc:	08db      	lsrs	r3, r3, #3
 8001ffe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002002:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	429a      	cmp	r2, r3
 800200c:	d01f      	beq.n	800204e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800200e:	4b12      	ldr	r3, [pc, #72]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8002010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002012:	4a11      	ldr	r2, [pc, #68]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8002014:	f023 0301 	bic.w	r3, r3, #1
 8002018:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800201a:	f7ff f879 	bl	8001110 <HAL_GetTick>
 800201e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002020:	bf00      	nop
 8002022:	f7ff f875 	bl	8001110 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	4293      	cmp	r3, r2
 800202c:	d0f9      	beq.n	8002022 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800202e:	4b0a      	ldr	r3, [pc, #40]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8002030:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002032:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <HAL_RCC_OscConfig+0x8b0>)
 8002034:	4013      	ands	r3, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800203a:	00d2      	lsls	r2, r2, #3
 800203c:	4906      	ldr	r1, [pc, #24]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 800203e:	4313      	orrs	r3, r2
 8002040:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002042:	4b05      	ldr	r3, [pc, #20]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8002044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002046:	4a04      	ldr	r2, [pc, #16]	@ (8002058 <HAL_RCC_OscConfig+0x8ac>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3730      	adds	r7, #48	@ 0x30
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	58024400 	.word	0x58024400
 800205c:	ffff0007 	.word	0xffff0007

08002060 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b086      	sub	sp, #24
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e19c      	b.n	80023ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002074:	4b8a      	ldr	r3, [pc, #552]	@ (80022a0 <HAL_RCC_ClockConfig+0x240>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d910      	bls.n	80020a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b87      	ldr	r3, [pc, #540]	@ (80022a0 <HAL_RCC_ClockConfig+0x240>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 020f 	bic.w	r2, r3, #15
 800208a:	4985      	ldr	r1, [pc, #532]	@ (80022a0 <HAL_RCC_ClockConfig+0x240>)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b83      	ldr	r3, [pc, #524]	@ (80022a0 <HAL_RCC_ClockConfig+0x240>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e184      	b.n	80023ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d010      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	691a      	ldr	r2, [r3, #16]
 80020b4:	4b7b      	ldr	r3, [pc, #492]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020bc:	429a      	cmp	r2, r3
 80020be:	d908      	bls.n	80020d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020c0:	4b78      	ldr	r3, [pc, #480]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	4975      	ldr	r1, [pc, #468]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d010      	beq.n	8002100 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	695a      	ldr	r2, [r3, #20]
 80020e2:	4b70      	ldr	r3, [pc, #448]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d908      	bls.n	8002100 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020ee:	4b6d      	ldr	r3, [pc, #436]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	496a      	ldr	r1, [pc, #424]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0310 	and.w	r3, r3, #16
 8002108:	2b00      	cmp	r3, #0
 800210a:	d010      	beq.n	800212e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699a      	ldr	r2, [r3, #24]
 8002110:	4b64      	ldr	r3, [pc, #400]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002118:	429a      	cmp	r2, r3
 800211a:	d908      	bls.n	800212e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800211c:	4b61      	ldr	r3, [pc, #388]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 800211e:	69db      	ldr	r3, [r3, #28]
 8002120:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	495e      	ldr	r1, [pc, #376]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 800212a:	4313      	orrs	r3, r2
 800212c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0320 	and.w	r3, r3, #32
 8002136:	2b00      	cmp	r3, #0
 8002138:	d010      	beq.n	800215c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	69da      	ldr	r2, [r3, #28]
 800213e:	4b59      	ldr	r3, [pc, #356]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002146:	429a      	cmp	r2, r3
 8002148:	d908      	bls.n	800215c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800214a:	4b56      	ldr	r3, [pc, #344]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 800214c:	6a1b      	ldr	r3, [r3, #32]
 800214e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	4953      	ldr	r1, [pc, #332]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 8002158:	4313      	orrs	r3, r2
 800215a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d010      	beq.n	800218a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	68da      	ldr	r2, [r3, #12]
 800216c:	4b4d      	ldr	r3, [pc, #308]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	429a      	cmp	r2, r3
 8002176:	d908      	bls.n	800218a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002178:	4b4a      	ldr	r3, [pc, #296]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f023 020f 	bic.w	r2, r3, #15
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4947      	ldr	r1, [pc, #284]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 8002186:	4313      	orrs	r3, r2
 8002188:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d055      	beq.n	8002242 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002196:	4b43      	ldr	r3, [pc, #268]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 8002198:	699b      	ldr	r3, [r3, #24]
 800219a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	4940      	ldr	r1, [pc, #256]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d107      	bne.n	80021c0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021b0:	4b3c      	ldr	r3, [pc, #240]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d121      	bne.n	8002200 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e0f6      	b.n	80023ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b03      	cmp	r3, #3
 80021c6:	d107      	bne.n	80021d8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021c8:	4b36      	ldr	r3, [pc, #216]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d115      	bne.n	8002200 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0ea      	b.n	80023ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d107      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021e0:	4b30      	ldr	r3, [pc, #192]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d109      	bne.n	8002200 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0de      	b.n	80023ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021f0:	4b2c      	ldr	r3, [pc, #176]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0d6      	b.n	80023ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002200:	4b28      	ldr	r3, [pc, #160]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	f023 0207 	bic.w	r2, r3, #7
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	4925      	ldr	r1, [pc, #148]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 800220e:	4313      	orrs	r3, r2
 8002210:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002212:	f7fe ff7d 	bl	8001110 <HAL_GetTick>
 8002216:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002218:	e00a      	b.n	8002230 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800221a:	f7fe ff79 	bl	8001110 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e0be      	b.n	80023ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002230:	4b1c      	ldr	r3, [pc, #112]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	429a      	cmp	r2, r3
 8002240:	d1eb      	bne.n	800221a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d010      	beq.n	8002270 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	4b14      	ldr	r3, [pc, #80]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	429a      	cmp	r2, r3
 800225c:	d208      	bcs.n	8002270 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800225e:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	f023 020f 	bic.w	r2, r3, #15
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	490e      	ldr	r1, [pc, #56]	@ (80022a4 <HAL_RCC_ClockConfig+0x244>)
 800226c:	4313      	orrs	r3, r2
 800226e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002270:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <HAL_RCC_ClockConfig+0x240>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d214      	bcs.n	80022a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <HAL_RCC_ClockConfig+0x240>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f023 020f 	bic.w	r2, r3, #15
 8002286:	4906      	ldr	r1, [pc, #24]	@ (80022a0 <HAL_RCC_ClockConfig+0x240>)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	4313      	orrs	r3, r2
 800228c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228e:	4b04      	ldr	r3, [pc, #16]	@ (80022a0 <HAL_RCC_ClockConfig+0x240>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d005      	beq.n	80022a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e086      	b.n	80023ae <HAL_RCC_ClockConfig+0x34e>
 80022a0:	52002000 	.word	0x52002000
 80022a4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d010      	beq.n	80022d6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	4b3f      	ldr	r3, [pc, #252]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d208      	bcs.n	80022d6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022c4:	4b3c      	ldr	r3, [pc, #240]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	4939      	ldr	r1, [pc, #228]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 80022d2:	4313      	orrs	r3, r2
 80022d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d010      	beq.n	8002304 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695a      	ldr	r2, [r3, #20]
 80022e6:	4b34      	ldr	r3, [pc, #208]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022ee:	429a      	cmp	r2, r3
 80022f0:	d208      	bcs.n	8002304 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022f2:	4b31      	ldr	r3, [pc, #196]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	492e      	ldr	r1, [pc, #184]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 8002300:	4313      	orrs	r3, r2
 8002302:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0310 	and.w	r3, r3, #16
 800230c:	2b00      	cmp	r3, #0
 800230e:	d010      	beq.n	8002332 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699a      	ldr	r2, [r3, #24]
 8002314:	4b28      	ldr	r3, [pc, #160]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800231c:	429a      	cmp	r2, r3
 800231e:	d208      	bcs.n	8002332 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002320:	4b25      	ldr	r3, [pc, #148]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	699b      	ldr	r3, [r3, #24]
 800232c:	4922      	ldr	r1, [pc, #136]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 800232e:	4313      	orrs	r3, r2
 8002330:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0320 	and.w	r3, r3, #32
 800233a:	2b00      	cmp	r3, #0
 800233c:	d010      	beq.n	8002360 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69da      	ldr	r2, [r3, #28]
 8002342:	4b1d      	ldr	r3, [pc, #116]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800234a:	429a      	cmp	r2, r3
 800234c:	d208      	bcs.n	8002360 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800234e:	4b1a      	ldr	r3, [pc, #104]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 8002350:	6a1b      	ldr	r3, [r3, #32]
 8002352:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	4917      	ldr	r1, [pc, #92]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 800235c:	4313      	orrs	r3, r2
 800235e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002360:	f000 f89e 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 8002364:	4602      	mov	r2, r0
 8002366:	4b14      	ldr	r3, [pc, #80]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	0a1b      	lsrs	r3, r3, #8
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	4912      	ldr	r1, [pc, #72]	@ (80023bc <HAL_RCC_ClockConfig+0x35c>)
 8002372:	5ccb      	ldrb	r3, [r1, r3]
 8002374:	f003 031f 	and.w	r3, r3, #31
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
 800237c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800237e:	4b0e      	ldr	r3, [pc, #56]	@ (80023b8 <HAL_RCC_ClockConfig+0x358>)
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	4a0d      	ldr	r2, [pc, #52]	@ (80023bc <HAL_RCC_ClockConfig+0x35c>)
 8002388:	5cd3      	ldrb	r3, [r2, r3]
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
 8002394:	4a0a      	ldr	r2, [pc, #40]	@ (80023c0 <HAL_RCC_ClockConfig+0x360>)
 8002396:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002398:	4a0a      	ldr	r2, [pc, #40]	@ (80023c4 <HAL_RCC_ClockConfig+0x364>)
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800239e:	4b0a      	ldr	r3, [pc, #40]	@ (80023c8 <HAL_RCC_ClockConfig+0x368>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fe6a 	bl	800107c <HAL_InitTick>
 80023a8:	4603      	mov	r3, r0
 80023aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80023ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	58024400 	.word	0x58024400
 80023bc:	08008744 	.word	0x08008744
 80023c0:	24000004 	.word	0x24000004
 80023c4:	24000000 	.word	0x24000000
 80023c8:	24000008 	.word	0x24000008

080023cc <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08c      	sub	sp, #48	@ 0x30
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d12a      	bne.n	8002434 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80023de:	4b2d      	ldr	r3, [pc, #180]	@ (8002494 <HAL_RCC_MCOConfig+0xc8>)
 80023e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002494 <HAL_RCC_MCOConfig+0xc8>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023ee:	4b29      	ldr	r3, [pc, #164]	@ (8002494 <HAL_RCC_MCOConfig+0xc8>)
 80023f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023f4:	f003 0301 	and.w	r3, r3, #1
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80023fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002402:	2302      	movs	r3, #2
 8002404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002406:	2303      	movs	r3, #3
 8002408:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800240e:	2300      	movs	r3, #0
 8002410:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002412:	f107 031c 	add.w	r3, r7, #28
 8002416:	4619      	mov	r1, r3
 8002418:	481f      	ldr	r0, [pc, #124]	@ (8002498 <HAL_RCC_MCOConfig+0xcc>)
 800241a:	f7fe ff75 	bl	8001308 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800241e:	4b1d      	ldr	r3, [pc, #116]	@ (8002494 <HAL_RCC_MCOConfig+0xc8>)
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8002426:	68b9      	ldr	r1, [r7, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	430b      	orrs	r3, r1
 800242c:	4919      	ldr	r1, [pc, #100]	@ (8002494 <HAL_RCC_MCOConfig+0xc8>)
 800242e:	4313      	orrs	r3, r2
 8002430:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8002432:	e02a      	b.n	800248a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8002434:	4b17      	ldr	r3, [pc, #92]	@ (8002494 <HAL_RCC_MCOConfig+0xc8>)
 8002436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800243a:	4a16      	ldr	r2, [pc, #88]	@ (8002494 <HAL_RCC_MCOConfig+0xc8>)
 800243c:	f043 0304 	orr.w	r3, r3, #4
 8002440:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002444:	4b13      	ldr	r3, [pc, #76]	@ (8002494 <HAL_RCC_MCOConfig+0xc8>)
 8002446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002452:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002458:	2302      	movs	r3, #2
 800245a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245c:	2303      	movs	r3, #3
 800245e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002464:	2300      	movs	r3, #0
 8002466:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8002468:	f107 031c 	add.w	r3, r7, #28
 800246c:	4619      	mov	r1, r3
 800246e:	480b      	ldr	r0, [pc, #44]	@ (800249c <HAL_RCC_MCOConfig+0xd0>)
 8002470:	f7fe ff4a 	bl	8001308 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8002474:	4b07      	ldr	r3, [pc, #28]	@ (8002494 <HAL_RCC_MCOConfig+0xc8>)
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	01d9      	lsls	r1, r3, #7
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	430b      	orrs	r3, r1
 8002484:	4903      	ldr	r1, [pc, #12]	@ (8002494 <HAL_RCC_MCOConfig+0xc8>)
 8002486:	4313      	orrs	r3, r2
 8002488:	610b      	str	r3, [r1, #16]
}
 800248a:	bf00      	nop
 800248c:	3730      	adds	r7, #48	@ 0x30
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	58024400 	.word	0x58024400
 8002498:	58020000 	.word	0x58020000
 800249c:	58020800 	.word	0x58020800

080024a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	@ 0x24
 80024a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024a6:	4bb3      	ldr	r3, [pc, #716]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024ae:	2b18      	cmp	r3, #24
 80024b0:	f200 8155 	bhi.w	800275e <HAL_RCC_GetSysClockFreq+0x2be>
 80024b4:	a201      	add	r2, pc, #4	@ (adr r2, 80024bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80024b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ba:	bf00      	nop
 80024bc:	08002521 	.word	0x08002521
 80024c0:	0800275f 	.word	0x0800275f
 80024c4:	0800275f 	.word	0x0800275f
 80024c8:	0800275f 	.word	0x0800275f
 80024cc:	0800275f 	.word	0x0800275f
 80024d0:	0800275f 	.word	0x0800275f
 80024d4:	0800275f 	.word	0x0800275f
 80024d8:	0800275f 	.word	0x0800275f
 80024dc:	08002547 	.word	0x08002547
 80024e0:	0800275f 	.word	0x0800275f
 80024e4:	0800275f 	.word	0x0800275f
 80024e8:	0800275f 	.word	0x0800275f
 80024ec:	0800275f 	.word	0x0800275f
 80024f0:	0800275f 	.word	0x0800275f
 80024f4:	0800275f 	.word	0x0800275f
 80024f8:	0800275f 	.word	0x0800275f
 80024fc:	0800254d 	.word	0x0800254d
 8002500:	0800275f 	.word	0x0800275f
 8002504:	0800275f 	.word	0x0800275f
 8002508:	0800275f 	.word	0x0800275f
 800250c:	0800275f 	.word	0x0800275f
 8002510:	0800275f 	.word	0x0800275f
 8002514:	0800275f 	.word	0x0800275f
 8002518:	0800275f 	.word	0x0800275f
 800251c:	08002553 	.word	0x08002553
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002520:	4b94      	ldr	r3, [pc, #592]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d009      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800252c:	4b91      	ldr	r3, [pc, #580]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	08db      	lsrs	r3, r3, #3
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	4a90      	ldr	r2, [pc, #576]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800253e:	e111      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002540:	4b8d      	ldr	r3, [pc, #564]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002542:	61bb      	str	r3, [r7, #24]
      break;
 8002544:	e10e      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002546:	4b8d      	ldr	r3, [pc, #564]	@ (800277c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002548:	61bb      	str	r3, [r7, #24]
      break;
 800254a:	e10b      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800254c:	4b8c      	ldr	r3, [pc, #560]	@ (8002780 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800254e:	61bb      	str	r3, [r7, #24]
      break;
 8002550:	e108      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002552:	4b88      	ldr	r3, [pc, #544]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800255c:	4b85      	ldr	r3, [pc, #532]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800255e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002566:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002568:	4b82      	ldr	r3, [pc, #520]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800256a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002572:	4b80      	ldr	r3, [pc, #512]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002574:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002576:	08db      	lsrs	r3, r3, #3
 8002578:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	ee07 3a90 	vmov	s15, r3
 8002586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800258a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80e1 	beq.w	8002758 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	2b02      	cmp	r3, #2
 800259a:	f000 8083 	beq.w	80026a4 <HAL_RCC_GetSysClockFreq+0x204>
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	f200 80a1 	bhi.w	80026e8 <HAL_RCC_GetSysClockFreq+0x248>
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_RCC_GetSysClockFreq+0x114>
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d056      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x1c0>
 80025b2:	e099      	b.n	80026e8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d02d      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80025c0:	4b6c      	ldr	r3, [pc, #432]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	08db      	lsrs	r3, r3, #3
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	4a6b      	ldr	r2, [pc, #428]	@ (8002778 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
 80025d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	ee07 3a90 	vmov	s15, r3
 80025d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	ee07 3a90 	vmov	s15, r3
 80025e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ea:	4b62      	ldr	r3, [pc, #392]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80025fe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002784 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800260a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800260e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002616:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800261a:	e087      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	ee07 3a90 	vmov	s15, r3
 8002622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002626:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002788 <HAL_RCC_GetSysClockFreq+0x2e8>
 800262a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800262e:	4b51      	ldr	r3, [pc, #324]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002636:	ee07 3a90 	vmov	s15, r3
 800263a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800263e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002642:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002784 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800264a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800264e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800265a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800265e:	e065      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	ee07 3a90 	vmov	s15, r3
 8002666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800266a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800278c <HAL_RCC_GetSysClockFreq+0x2ec>
 800266e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002672:	4b40      	ldr	r3, [pc, #256]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800267a:	ee07 3a90 	vmov	s15, r3
 800267e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002682:	ed97 6a02 	vldr	s12, [r7, #8]
 8002686:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002784 <HAL_RCC_GetSysClockFreq+0x2e4>
 800268a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800268e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800269a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800269e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026a2:	e043      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	ee07 3a90 	vmov	s15, r3
 80026aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002790 <HAL_RCC_GetSysClockFreq+0x2f0>
 80026b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026b6:	4b2f      	ldr	r3, [pc, #188]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026be:	ee07 3a90 	vmov	s15, r3
 80026c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026ca:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002784 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026e6:	e021      	b.n	800272c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	ee07 3a90 	vmov	s15, r3
 80026ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026f2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800278c <HAL_RCC_GetSysClockFreq+0x2ec>
 80026f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002702:	ee07 3a90 	vmov	s15, r3
 8002706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800270a:	ed97 6a02 	vldr	s12, [r7, #8]
 800270e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002784 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800271a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800271e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002726:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800272a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800272c:	4b11      	ldr	r3, [pc, #68]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800272e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002730:	0a5b      	lsrs	r3, r3, #9
 8002732:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002736:	3301      	adds	r3, #1
 8002738:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	ee07 3a90 	vmov	s15, r3
 8002740:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002744:	edd7 6a07 	vldr	s13, [r7, #28]
 8002748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800274c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002750:	ee17 3a90 	vmov	r3, s15
 8002754:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002756:	e005      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002758:	2300      	movs	r3, #0
 800275a:	61bb      	str	r3, [r7, #24]
      break;
 800275c:	e002      	b.n	8002764 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800275e:	4b07      	ldr	r3, [pc, #28]	@ (800277c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002760:	61bb      	str	r3, [r7, #24]
      break;
 8002762:	bf00      	nop
  }

  return sysclockfreq;
 8002764:	69bb      	ldr	r3, [r7, #24]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3724      	adds	r7, #36	@ 0x24
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	58024400 	.word	0x58024400
 8002778:	03d09000 	.word	0x03d09000
 800277c:	003d0900 	.word	0x003d0900
 8002780:	017d7840 	.word	0x017d7840
 8002784:	46000000 	.word	0x46000000
 8002788:	4c742400 	.word	0x4c742400
 800278c:	4a742400 	.word	0x4a742400
 8002790:	4bbebc20 	.word	0x4bbebc20

08002794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800279a:	f7ff fe81 	bl	80024a0 <HAL_RCC_GetSysClockFreq>
 800279e:	4602      	mov	r2, r0
 80027a0:	4b10      	ldr	r3, [pc, #64]	@ (80027e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	0a1b      	lsrs	r3, r3, #8
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	490f      	ldr	r1, [pc, #60]	@ (80027e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80027ac:	5ccb      	ldrb	r3, [r1, r3]
 80027ae:	f003 031f 	and.w	r3, r3, #31
 80027b2:	fa22 f303 	lsr.w	r3, r2, r3
 80027b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027b8:	4b0a      	ldr	r3, [pc, #40]	@ (80027e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	f003 030f 	and.w	r3, r3, #15
 80027c0:	4a09      	ldr	r2, [pc, #36]	@ (80027e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80027c2:	5cd3      	ldrb	r3, [r2, r3]
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	fa22 f303 	lsr.w	r3, r2, r3
 80027ce:	4a07      	ldr	r2, [pc, #28]	@ (80027ec <HAL_RCC_GetHCLKFreq+0x58>)
 80027d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027d2:	4a07      	ldr	r2, [pc, #28]	@ (80027f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80027d8:	4b04      	ldr	r3, [pc, #16]	@ (80027ec <HAL_RCC_GetHCLKFreq+0x58>)
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	58024400 	.word	0x58024400
 80027e8:	08008744 	.word	0x08008744
 80027ec:	24000004 	.word	0x24000004
 80027f0:	24000000 	.word	0x24000000

080027f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80027f8:	f7ff ffcc 	bl	8002794 <HAL_RCC_GetHCLKFreq>
 80027fc:	4602      	mov	r2, r0
 80027fe:	4b06      	ldr	r3, [pc, #24]	@ (8002818 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	091b      	lsrs	r3, r3, #4
 8002804:	f003 0307 	and.w	r3, r3, #7
 8002808:	4904      	ldr	r1, [pc, #16]	@ (800281c <HAL_RCC_GetPCLK1Freq+0x28>)
 800280a:	5ccb      	ldrb	r3, [r1, r3]
 800280c:	f003 031f 	and.w	r3, r3, #31
 8002810:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002814:	4618      	mov	r0, r3
 8002816:	bd80      	pop	{r7, pc}
 8002818:	58024400 	.word	0x58024400
 800281c:	08008744 	.word	0x08008744

08002820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002824:	f7ff ffb6 	bl	8002794 <HAL_RCC_GetHCLKFreq>
 8002828:	4602      	mov	r2, r0
 800282a:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <HAL_RCC_GetPCLK2Freq+0x24>)
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	0a1b      	lsrs	r3, r3, #8
 8002830:	f003 0307 	and.w	r3, r3, #7
 8002834:	4904      	ldr	r1, [pc, #16]	@ (8002848 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002836:	5ccb      	ldrb	r3, [r1, r3]
 8002838:	f003 031f 	and.w	r3, r3, #31
 800283c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002840:	4618      	mov	r0, r3
 8002842:	bd80      	pop	{r7, pc}
 8002844:	58024400 	.word	0x58024400
 8002848:	08008744 	.word	0x08008744

0800284c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800284c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002850:	b0cc      	sub	sp, #304	@ 0x130
 8002852:	af00      	add	r7, sp, #0
 8002854:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002858:	2300      	movs	r3, #0
 800285a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800285e:	2300      	movs	r3, #0
 8002860:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002864:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002870:	2500      	movs	r5, #0
 8002872:	ea54 0305 	orrs.w	r3, r4, r5
 8002876:	d049      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002878:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800287c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800287e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002882:	d02f      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002884:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002888:	d828      	bhi.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800288a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800288e:	d01a      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002890:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002894:	d822      	bhi.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800289a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800289e:	d007      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028a0:	e01c      	b.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028a2:	4bb8      	ldr	r3, [pc, #736]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a6:	4ab7      	ldr	r2, [pc, #732]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028ae:	e01a      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80028b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028b4:	3308      	adds	r3, #8
 80028b6:	2102      	movs	r1, #2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f001 fccf 	bl	800425c <RCCEx_PLL2_Config>
 80028be:	4603      	mov	r3, r0
 80028c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028c4:	e00f      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80028c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028ca:	3328      	adds	r3, #40	@ 0x28
 80028cc:	2102      	movs	r1, #2
 80028ce:	4618      	mov	r0, r3
 80028d0:	f001 fd76 	bl	80043c0 <RCCEx_PLL3_Config>
 80028d4:	4603      	mov	r3, r0
 80028d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028da:	e004      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80028e2:	e000      	b.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80028e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d10a      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80028ee:	4ba5      	ldr	r3, [pc, #660]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80028f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028fc:	4aa1      	ldr	r2, [pc, #644]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028fe:	430b      	orrs	r3, r1
 8002900:	6513      	str	r3, [r2, #80]	@ 0x50
 8002902:	e003      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002904:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002908:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800290c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002914:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002918:	f04f 0900 	mov.w	r9, #0
 800291c:	ea58 0309 	orrs.w	r3, r8, r9
 8002920:	d047      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002922:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002926:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002928:	2b04      	cmp	r3, #4
 800292a:	d82a      	bhi.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800292c:	a201      	add	r2, pc, #4	@ (adr r2, 8002934 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800292e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002932:	bf00      	nop
 8002934:	08002949 	.word	0x08002949
 8002938:	08002957 	.word	0x08002957
 800293c:	0800296d 	.word	0x0800296d
 8002940:	0800298b 	.word	0x0800298b
 8002944:	0800298b 	.word	0x0800298b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002948:	4b8e      	ldr	r3, [pc, #568]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800294a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800294c:	4a8d      	ldr	r2, [pc, #564]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800294e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002952:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002954:	e01a      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002956:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800295a:	3308      	adds	r3, #8
 800295c:	2100      	movs	r1, #0
 800295e:	4618      	mov	r0, r3
 8002960:	f001 fc7c 	bl	800425c <RCCEx_PLL2_Config>
 8002964:	4603      	mov	r3, r0
 8002966:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800296a:	e00f      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800296c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002970:	3328      	adds	r3, #40	@ 0x28
 8002972:	2100      	movs	r1, #0
 8002974:	4618      	mov	r0, r3
 8002976:	f001 fd23 	bl	80043c0 <RCCEx_PLL3_Config>
 800297a:	4603      	mov	r3, r0
 800297c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002980:	e004      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002988:	e000      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800298a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800298c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10a      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002994:	4b7b      	ldr	r3, [pc, #492]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002998:	f023 0107 	bic.w	r1, r3, #7
 800299c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029a2:	4a78      	ldr	r2, [pc, #480]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029a4:	430b      	orrs	r3, r1
 80029a6:	6513      	str	r3, [r2, #80]	@ 0x50
 80029a8:	e003      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80029ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80029b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80029be:	f04f 0b00 	mov.w	fp, #0
 80029c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80029c6:	d04c      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80029c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029d2:	d030      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80029d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029d8:	d829      	bhi.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029da:	2bc0      	cmp	r3, #192	@ 0xc0
 80029dc:	d02d      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80029de:	2bc0      	cmp	r3, #192	@ 0xc0
 80029e0:	d825      	bhi.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029e2:	2b80      	cmp	r3, #128	@ 0x80
 80029e4:	d018      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80029e6:	2b80      	cmp	r3, #128	@ 0x80
 80029e8:	d821      	bhi.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80029ee:	2b40      	cmp	r3, #64	@ 0x40
 80029f0:	d007      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80029f2:	e01c      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029f4:	4b63      	ldr	r3, [pc, #396]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f8:	4a62      	ldr	r2, [pc, #392]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a00:	e01c      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a06:	3308      	adds	r3, #8
 8002a08:	2100      	movs	r1, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f001 fc26 	bl	800425c <RCCEx_PLL2_Config>
 8002a10:	4603      	mov	r3, r0
 8002a12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a16:	e011      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a1c:	3328      	adds	r3, #40	@ 0x28
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f001 fccd 	bl	80043c0 <RCCEx_PLL3_Config>
 8002a26:	4603      	mov	r3, r0
 8002a28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a2c:	e006      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002a34:	e002      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002a36:	bf00      	nop
 8002a38:	e000      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002a3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a3c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002a44:	4b4f      	ldr	r3, [pc, #316]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a48:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002a4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a52:	4a4c      	ldr	r2, [pc, #304]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a54:	430b      	orrs	r3, r1
 8002a56:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a58:	e003      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a5e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a6a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002a6e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002a72:	2300      	movs	r3, #0
 8002a74:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002a78:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	d053      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002a82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a86:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002a8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a8e:	d035      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002a90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a94:	d82e      	bhi.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a96:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002a9a:	d031      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002a9c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002aa0:	d828      	bhi.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002aa2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aa6:	d01a      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002aa8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aac:	d822      	bhi.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002ab2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002ab6:	d007      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002ab8:	e01c      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aba:	4b32      	ldr	r3, [pc, #200]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002abe:	4a31      	ldr	r2, [pc, #196]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ac6:	e01c      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ac8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002acc:	3308      	adds	r3, #8
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f001 fbc3 	bl	800425c <RCCEx_PLL2_Config>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002adc:	e011      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ade:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ae2:	3328      	adds	r3, #40	@ 0x28
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f001 fc6a 	bl	80043c0 <RCCEx_PLL3_Config>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002af2:	e006      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002afa:	e002      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002afc:	bf00      	nop
 8002afe:	e000      	b.n	8002b02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002b00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d10b      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b0e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002b12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b16:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002b1a:	4a1a      	ldr	r2, [pc, #104]	@ (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b1c:	430b      	orrs	r3, r1
 8002b1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b20:	e003      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b26:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b32:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002b36:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002b40:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002b44:	460b      	mov	r3, r1
 8002b46:	4313      	orrs	r3, r2
 8002b48:	d056      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002b4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002b52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b56:	d038      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002b58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b5c:	d831      	bhi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b5e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b62:	d034      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002b64:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b68:	d82b      	bhi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b6e:	d01d      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002b70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b74:	d825      	bhi.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d006      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002b7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b7e:	d00a      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002b80:	e01f      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b82:	bf00      	nop
 8002b84:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b88:	4ba2      	ldr	r3, [pc, #648]	@ (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8c:	4aa1      	ldr	r2, [pc, #644]	@ (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b94:	e01c      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b9a:	3308      	adds	r3, #8
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f001 fb5c 	bl	800425c <RCCEx_PLL2_Config>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002baa:	e011      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002bac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bb0:	3328      	adds	r3, #40	@ 0x28
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f001 fc03 	bl	80043c0 <RCCEx_PLL3_Config>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bc0:	e006      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002bc8:	e002      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002bca:	bf00      	nop
 8002bcc:	e000      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002bce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bd0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d10b      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002bd8:	4b8e      	ldr	r3, [pc, #568]	@ (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bdc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002be0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002be4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002be8:	4a8a      	ldr	r2, [pc, #552]	@ (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bea:	430b      	orrs	r3, r1
 8002bec:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bee:	e003      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bf4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002bf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c00:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002c04:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c0e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002c12:	460b      	mov	r3, r1
 8002c14:	4313      	orrs	r3, r2
 8002c16:	d03a      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002c18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c1e:	2b30      	cmp	r3, #48	@ 0x30
 8002c20:	d01f      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002c22:	2b30      	cmp	r3, #48	@ 0x30
 8002c24:	d819      	bhi.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	d00c      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002c2a:	2b20      	cmp	r3, #32
 8002c2c:	d815      	bhi.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d019      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002c32:	2b10      	cmp	r3, #16
 8002c34:	d111      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c36:	4b77      	ldr	r3, [pc, #476]	@ (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3a:	4a76      	ldr	r2, [pc, #472]	@ (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002c42:	e011      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c48:	3308      	adds	r3, #8
 8002c4a:	2102      	movs	r1, #2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f001 fb05 	bl	800425c <RCCEx_PLL2_Config>
 8002c52:	4603      	mov	r3, r0
 8002c54:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002c58:	e006      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002c60:	e002      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c62:	bf00      	nop
 8002c64:	e000      	b.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c68:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d10a      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c70:	4b68      	ldr	r3, [pc, #416]	@ (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c74:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002c78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c7e:	4a65      	ldr	r2, [pc, #404]	@ (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c80:	430b      	orrs	r3, r1
 8002c82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c84:	e003      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c86:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c8a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c96:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002c9a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002ca4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002ca8:	460b      	mov	r3, r1
 8002caa:	4313      	orrs	r3, r2
 8002cac:	d051      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002cae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cb8:	d035      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002cba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cbe:	d82e      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002cc0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cc4:	d031      	beq.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002cc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cca:	d828      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002ccc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cd0:	d01a      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002cd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cd6:	d822      	bhi.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ce0:	d007      	beq.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002ce2:	e01c      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ce4:	4b4b      	ldr	r3, [pc, #300]	@ (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ce8:	4a4a      	ldr	r2, [pc, #296]	@ (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cf0:	e01c      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cf6:	3308      	adds	r3, #8
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f001 faae 	bl	800425c <RCCEx_PLL2_Config>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d06:	e011      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d0c:	3328      	adds	r3, #40	@ 0x28
 8002d0e:	2100      	movs	r1, #0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f001 fb55 	bl	80043c0 <RCCEx_PLL3_Config>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d1c:	e006      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002d24:	e002      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002d26:	bf00      	nop
 8002d28:	e000      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002d2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d2c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d10a      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d34:	4b37      	ldr	r3, [pc, #220]	@ (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d38:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002d3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d40:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d42:	4a34      	ldr	r2, [pc, #208]	@ (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d44:	430b      	orrs	r3, r1
 8002d46:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d48:	e003      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d4e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002d5e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002d62:	2300      	movs	r3, #0
 8002d64:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002d68:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	d056      	beq.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002d72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d76:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d7c:	d033      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002d7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d82:	d82c      	bhi.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d88:	d02f      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002d8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d8e:	d826      	bhi.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d94:	d02b      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002d96:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d9a:	d820      	bhi.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002da0:	d012      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002da2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002da6:	d81a      	bhi.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d022      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002dac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002db0:	d115      	bne.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002db2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002db6:	3308      	adds	r3, #8
 8002db8:	2101      	movs	r1, #1
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f001 fa4e 	bl	800425c <RCCEx_PLL2_Config>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002dc6:	e015      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002dc8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dcc:	3328      	adds	r3, #40	@ 0x28
 8002dce:	2101      	movs	r1, #1
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f001 faf5 	bl	80043c0 <RCCEx_PLL3_Config>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002ddc:	e00a      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002de4:	e006      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002de6:	bf00      	nop
 8002de8:	e004      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002dea:	bf00      	nop
 8002dec:	e002      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002dee:	bf00      	nop
 8002df0:	e000      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002df4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10d      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002dfc:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e00:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002e04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e0a:	4a02      	ldr	r2, [pc, #8]	@ (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e10:	e006      	b.n	8002e20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002e12:	bf00      	nop
 8002e14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e18:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e1c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e28:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002e2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e30:	2300      	movs	r3, #0
 8002e32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002e36:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	d055      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002e40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e4c:	d033      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002e4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e52:	d82c      	bhi.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e58:	d02f      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e5e:	d826      	bhi.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e64:	d02b      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002e66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e6a:	d820      	bhi.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e70:	d012      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002e72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e76:	d81a      	bhi.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d022      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002e7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e80:	d115      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e86:	3308      	adds	r3, #8
 8002e88:	2101      	movs	r1, #1
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f001 f9e6 	bl	800425c <RCCEx_PLL2_Config>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e96:	e015      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e9c:	3328      	adds	r3, #40	@ 0x28
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f001 fa8d 	bl	80043c0 <RCCEx_PLL3_Config>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002eac:	e00a      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002eb4:	e006      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002eb6:	bf00      	nop
 8002eb8:	e004      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002eba:	bf00      	nop
 8002ebc:	e002      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002ebe:	bf00      	nop
 8002ec0:	e000      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002ec2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ec4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d10b      	bne.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002ecc:	4bb6      	ldr	r3, [pc, #728]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002ed4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ed8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002edc:	4ab2      	ldr	r2, [pc, #712]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ede:	430b      	orrs	r3, r1
 8002ee0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ee2:	e003      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ee8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002eec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8002ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002efc:	2300      	movs	r3, #0
 8002efe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002f02:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002f06:	460b      	mov	r3, r1
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	d02a      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8002f0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d011      	beq.n	8002f3a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002f16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f1a:	d10a      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f20:	3308      	adds	r3, #8
 8002f22:	2101      	movs	r1, #1
 8002f24:	4618      	mov	r0, r3
 8002f26:	f001 f999 	bl	800425c <RCCEx_PLL2_Config>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8002f30:	e004      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002f38:	e000      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8002f3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f3c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10a      	bne.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002f44:	4b98      	ldr	r3, [pc, #608]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002f46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f48:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8002f4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f52:	4a95      	ldr	r2, [pc, #596]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002f54:	430b      	orrs	r3, r1
 8002f56:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f58:	e003      	b.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f5e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002f6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f72:	2300      	movs	r3, #0
 8002f74:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002f78:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	d037      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002f82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f8c:	d00e      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x760>
 8002f8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f92:	d816      	bhi.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d018      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002f98:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f9c:	d111      	bne.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f9e:	4b82      	ldr	r3, [pc, #520]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa2:	4a81      	ldr	r2, [pc, #516]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002fa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002faa:	e00f      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fb0:	3308      	adds	r3, #8
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f001 f951 	bl	800425c <RCCEx_PLL2_Config>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002fc0:	e004      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002fc8:	e000      	b.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8002fca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fcc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10a      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002fd4:	4b74      	ldr	r3, [pc, #464]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002fd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fd8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002fdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fe2:	4a71      	ldr	r2, [pc, #452]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002fe4:	430b      	orrs	r3, r1
 8002fe6:	6513      	str	r3, [r2, #80]	@ 0x50
 8002fe8:	e003      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002fee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002ff2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffa:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002ffe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003002:	2300      	movs	r3, #0
 8003004:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003008:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800300c:	460b      	mov	r3, r1
 800300e:	4313      	orrs	r3, r2
 8003010:	d03a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003012:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003016:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003018:	2b03      	cmp	r3, #3
 800301a:	d81d      	bhi.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 800301c:	a201      	add	r2, pc, #4	@ (adr r2, 8003024 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800301e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003022:	bf00      	nop
 8003024:	08003061 	.word	0x08003061
 8003028:	08003035 	.word	0x08003035
 800302c:	08003043 	.word	0x08003043
 8003030:	08003061 	.word	0x08003061
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003034:	4b5c      	ldr	r3, [pc, #368]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003038:	4a5b      	ldr	r2, [pc, #364]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800303a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800303e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003040:	e00f      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003042:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003046:	3308      	adds	r3, #8
 8003048:	2102      	movs	r1, #2
 800304a:	4618      	mov	r0, r3
 800304c:	f001 f906 	bl	800425c <RCCEx_PLL2_Config>
 8003050:	4603      	mov	r3, r0
 8003052:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003056:	e004      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800305e:	e000      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8003060:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003062:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10a      	bne.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800306a:	4b4f      	ldr	r3, [pc, #316]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800306c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800306e:	f023 0103 	bic.w	r1, r3, #3
 8003072:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003076:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003078:	4a4b      	ldr	r2, [pc, #300]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800307a:	430b      	orrs	r3, r1
 800307c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800307e:	e003      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003080:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003084:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003088:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003090:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003094:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003098:	2300      	movs	r3, #0
 800309a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800309e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80030a2:	460b      	mov	r3, r1
 80030a4:	4313      	orrs	r3, r2
 80030a6:	f000 80a0 	beq.w	80031ea <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030aa:	4b40      	ldr	r3, [pc, #256]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a3f      	ldr	r2, [pc, #252]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80030b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030b6:	f7fe f82b 	bl	8001110 <HAL_GetTick>
 80030ba:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030be:	e00b      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c0:	f7fe f826 	bl	8001110 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b64      	cmp	r3, #100	@ 0x64
 80030ce:	d903      	bls.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80030d6:	e005      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030d8:	4b34      	ldr	r3, [pc, #208]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0ed      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80030e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d17a      	bne.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80030ec:	4b2e      	ldr	r3, [pc, #184]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80030ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80030f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80030f8:	4053      	eors	r3, r2
 80030fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d015      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003102:	4b29      	ldr	r3, [pc, #164]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003106:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800310a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800310e:	4b26      	ldr	r3, [pc, #152]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003112:	4a25      	ldr	r2, [pc, #148]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003118:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800311a:	4b23      	ldr	r3, [pc, #140]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311e:	4a22      	ldr	r2, [pc, #136]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003120:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003124:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003126:	4a20      	ldr	r2, [pc, #128]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003128:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800312c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800312e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003132:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003136:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800313a:	d118      	bne.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7fd ffe8 	bl	8001110 <HAL_GetTick>
 8003140:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003144:	e00d      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003146:	f7fd ffe3 	bl	8001110 <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003150:	1ad2      	subs	r2, r2, r3
 8003152:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003156:	429a      	cmp	r2, r3
 8003158:	d903      	bls.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8003160:	e005      	b.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003162:	4b11      	ldr	r3, [pc, #68]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0eb      	beq.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800316e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003172:	2b00      	cmp	r3, #0
 8003174:	d130      	bne.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003176:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800317a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800317e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003182:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003186:	d115      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8003188:	4b07      	ldr	r3, [pc, #28]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003190:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003194:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003198:	091a      	lsrs	r2, r3, #4
 800319a:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800319c:	4013      	ands	r3, r2
 800319e:	4a02      	ldr	r2, [pc, #8]	@ (80031a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80031a0:	430b      	orrs	r3, r1
 80031a2:	6113      	str	r3, [r2, #16]
 80031a4:	e00c      	b.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80031a6:	bf00      	nop
 80031a8:	58024400 	.word	0x58024400
 80031ac:	58024800 	.word	0x58024800
 80031b0:	00ffffcf 	.word	0x00ffffcf
 80031b4:	4bd4      	ldr	r3, [pc, #848]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	4ad3      	ldr	r2, [pc, #844]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80031ba:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80031be:	6113      	str	r3, [r2, #16]
 80031c0:	4bd1      	ldr	r3, [pc, #836]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80031c2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80031c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80031cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d0:	4acd      	ldr	r2, [pc, #820]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80031d2:	430b      	orrs	r3, r1
 80031d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d6:	e008      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031dc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80031e0:	e003      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031e6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80031ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f2:	f002 0301 	and.w	r3, r2, #1
 80031f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031fa:	2300      	movs	r3, #0
 80031fc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003200:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003204:	460b      	mov	r3, r1
 8003206:	4313      	orrs	r3, r2
 8003208:	f000 808b 	beq.w	8003322 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800320c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003210:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003214:	2b28      	cmp	r3, #40	@ 0x28
 8003216:	d86b      	bhi.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8003218:	a201      	add	r2, pc, #4	@ (adr r2, 8003220 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 800321a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321e:	bf00      	nop
 8003220:	080032f9 	.word	0x080032f9
 8003224:	080032f1 	.word	0x080032f1
 8003228:	080032f1 	.word	0x080032f1
 800322c:	080032f1 	.word	0x080032f1
 8003230:	080032f1 	.word	0x080032f1
 8003234:	080032f1 	.word	0x080032f1
 8003238:	080032f1 	.word	0x080032f1
 800323c:	080032f1 	.word	0x080032f1
 8003240:	080032c5 	.word	0x080032c5
 8003244:	080032f1 	.word	0x080032f1
 8003248:	080032f1 	.word	0x080032f1
 800324c:	080032f1 	.word	0x080032f1
 8003250:	080032f1 	.word	0x080032f1
 8003254:	080032f1 	.word	0x080032f1
 8003258:	080032f1 	.word	0x080032f1
 800325c:	080032f1 	.word	0x080032f1
 8003260:	080032db 	.word	0x080032db
 8003264:	080032f1 	.word	0x080032f1
 8003268:	080032f1 	.word	0x080032f1
 800326c:	080032f1 	.word	0x080032f1
 8003270:	080032f1 	.word	0x080032f1
 8003274:	080032f1 	.word	0x080032f1
 8003278:	080032f1 	.word	0x080032f1
 800327c:	080032f1 	.word	0x080032f1
 8003280:	080032f9 	.word	0x080032f9
 8003284:	080032f1 	.word	0x080032f1
 8003288:	080032f1 	.word	0x080032f1
 800328c:	080032f1 	.word	0x080032f1
 8003290:	080032f1 	.word	0x080032f1
 8003294:	080032f1 	.word	0x080032f1
 8003298:	080032f1 	.word	0x080032f1
 800329c:	080032f1 	.word	0x080032f1
 80032a0:	080032f9 	.word	0x080032f9
 80032a4:	080032f1 	.word	0x080032f1
 80032a8:	080032f1 	.word	0x080032f1
 80032ac:	080032f1 	.word	0x080032f1
 80032b0:	080032f1 	.word	0x080032f1
 80032b4:	080032f1 	.word	0x080032f1
 80032b8:	080032f1 	.word	0x080032f1
 80032bc:	080032f1 	.word	0x080032f1
 80032c0:	080032f9 	.word	0x080032f9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032c8:	3308      	adds	r3, #8
 80032ca:	2101      	movs	r1, #1
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 ffc5 	bl	800425c <RCCEx_PLL2_Config>
 80032d2:	4603      	mov	r3, r0
 80032d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80032d8:	e00f      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032de:	3328      	adds	r3, #40	@ 0x28
 80032e0:	2101      	movs	r1, #1
 80032e2:	4618      	mov	r0, r3
 80032e4:	f001 f86c 	bl	80043c0 <RCCEx_PLL3_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80032ee:	e004      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032f0:	2301      	movs	r3, #1
 80032f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80032f6:	e000      	b.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80032f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10b      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003302:	4b81      	ldr	r3, [pc, #516]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003304:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003306:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800330a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800330e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003312:	4a7d      	ldr	r2, [pc, #500]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003314:	430b      	orrs	r3, r1
 8003316:	6553      	str	r3, [r2, #84]	@ 0x54
 8003318:	e003      	b.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800331a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800331e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003322:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332a:	f002 0302 	and.w	r3, r2, #2
 800332e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003332:	2300      	movs	r3, #0
 8003334:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003338:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800333c:	460b      	mov	r3, r1
 800333e:	4313      	orrs	r3, r2
 8003340:	d042      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003342:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003346:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003348:	2b05      	cmp	r3, #5
 800334a:	d825      	bhi.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 800334c:	a201      	add	r2, pc, #4	@ (adr r2, 8003354 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 800334e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003352:	bf00      	nop
 8003354:	080033a1 	.word	0x080033a1
 8003358:	0800336d 	.word	0x0800336d
 800335c:	08003383 	.word	0x08003383
 8003360:	080033a1 	.word	0x080033a1
 8003364:	080033a1 	.word	0x080033a1
 8003368:	080033a1 	.word	0x080033a1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800336c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003370:	3308      	adds	r3, #8
 8003372:	2101      	movs	r1, #1
 8003374:	4618      	mov	r0, r3
 8003376:	f000 ff71 	bl	800425c <RCCEx_PLL2_Config>
 800337a:	4603      	mov	r3, r0
 800337c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003380:	e00f      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003382:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003386:	3328      	adds	r3, #40	@ 0x28
 8003388:	2101      	movs	r1, #1
 800338a:	4618      	mov	r0, r3
 800338c:	f001 f818 	bl	80043c0 <RCCEx_PLL3_Config>
 8003390:	4603      	mov	r3, r0
 8003392:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003396:	e004      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800339e:	e000      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 80033a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033a2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d10a      	bne.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80033aa:	4b57      	ldr	r3, [pc, #348]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80033ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ae:	f023 0107 	bic.w	r1, r3, #7
 80033b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033b6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033b8:	4a53      	ldr	r2, [pc, #332]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80033ba:	430b      	orrs	r3, r1
 80033bc:	6553      	str	r3, [r2, #84]	@ 0x54
 80033be:	e003      	b.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033c4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f002 0304 	and.w	r3, r2, #4
 80033d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033d8:	2300      	movs	r3, #0
 80033da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033de:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4313      	orrs	r3, r2
 80033e6:	d044      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80033e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033f0:	2b05      	cmp	r3, #5
 80033f2:	d825      	bhi.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80033f4:	a201      	add	r2, pc, #4	@ (adr r2, 80033fc <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80033f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fa:	bf00      	nop
 80033fc:	08003449 	.word	0x08003449
 8003400:	08003415 	.word	0x08003415
 8003404:	0800342b 	.word	0x0800342b
 8003408:	08003449 	.word	0x08003449
 800340c:	08003449 	.word	0x08003449
 8003410:	08003449 	.word	0x08003449
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003414:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003418:	3308      	adds	r3, #8
 800341a:	2101      	movs	r1, #1
 800341c:	4618      	mov	r0, r3
 800341e:	f000 ff1d 	bl	800425c <RCCEx_PLL2_Config>
 8003422:	4603      	mov	r3, r0
 8003424:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003428:	e00f      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800342a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800342e:	3328      	adds	r3, #40	@ 0x28
 8003430:	2101      	movs	r1, #1
 8003432:	4618      	mov	r0, r3
 8003434:	f000 ffc4 	bl	80043c0 <RCCEx_PLL3_Config>
 8003438:	4603      	mov	r3, r0
 800343a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800343e:	e004      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003446:	e000      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8003448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800344a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10b      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003452:	4b2d      	ldr	r3, [pc, #180]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003456:	f023 0107 	bic.w	r1, r3, #7
 800345a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800345e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003462:	4a29      	ldr	r2, [pc, #164]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003464:	430b      	orrs	r3, r1
 8003466:	6593      	str	r3, [r2, #88]	@ 0x58
 8003468:	e003      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800346a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800346e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003472:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800347a:	f002 0320 	and.w	r3, r2, #32
 800347e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003482:	2300      	movs	r3, #0
 8003484:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003488:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800348c:	460b      	mov	r3, r1
 800348e:	4313      	orrs	r3, r2
 8003490:	d057      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003492:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800349a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800349e:	d035      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 80034a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034a4:	d82c      	bhi.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80034a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034aa:	d031      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 80034ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034b0:	d826      	bhi.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80034b2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80034b6:	d02d      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80034b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80034bc:	d820      	bhi.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80034be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034c2:	d012      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80034c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034c8:	d81a      	bhi.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d024      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80034ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034d2:	d115      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034d8:	3308      	adds	r3, #8
 80034da:	2100      	movs	r1, #0
 80034dc:	4618      	mov	r0, r3
 80034de:	f000 febd 	bl	800425c <RCCEx_PLL2_Config>
 80034e2:	4603      	mov	r3, r0
 80034e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80034e8:	e017      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034ee:	3328      	adds	r3, #40	@ 0x28
 80034f0:	2102      	movs	r1, #2
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 ff64 	bl	80043c0 <RCCEx_PLL3_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80034fe:	e00c      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003506:	e008      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8003508:	58024400 	.word	0x58024400
        break;
 800350c:	bf00      	nop
 800350e:	e004      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003510:	bf00      	nop
 8003512:	e002      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003514:	bf00      	nop
 8003516:	e000      	b.n	800351a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003518:	bf00      	nop
    }

    if (ret == HAL_OK)
 800351a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10b      	bne.n	800353a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003522:	4bc2      	ldr	r3, [pc, #776]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003524:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003526:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800352a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800352e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003532:	4abe      	ldr	r2, [pc, #760]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003534:	430b      	orrs	r3, r1
 8003536:	6553      	str	r3, [r2, #84]	@ 0x54
 8003538:	e003      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800353a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800353e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003542:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800354e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003552:	2300      	movs	r3, #0
 8003554:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003558:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800355c:	460b      	mov	r3, r1
 800355e:	4313      	orrs	r3, r2
 8003560:	d055      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003562:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003566:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800356a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800356e:	d033      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8003570:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003574:	d82c      	bhi.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003576:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800357a:	d02f      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0xd90>
 800357c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003580:	d826      	bhi.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003582:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003586:	d02b      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003588:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800358c:	d820      	bhi.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800358e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003592:	d012      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8003594:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003598:	d81a      	bhi.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800359a:	2b00      	cmp	r3, #0
 800359c:	d022      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800359e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035a2:	d115      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035a8:	3308      	adds	r3, #8
 80035aa:	2100      	movs	r1, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 fe55 	bl	800425c <RCCEx_PLL2_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80035b8:	e015      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035be:	3328      	adds	r3, #40	@ 0x28
 80035c0:	2102      	movs	r1, #2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 fefc 	bl	80043c0 <RCCEx_PLL3_Config>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80035ce:	e00a      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80035d6:	e006      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80035d8:	bf00      	nop
 80035da:	e004      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80035dc:	bf00      	nop
 80035de:	e002      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80035e0:	bf00      	nop
 80035e2:	e000      	b.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80035e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d10b      	bne.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035ee:	4b8f      	ldr	r3, [pc, #572]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80035f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80035fe:	4a8b      	ldr	r2, [pc, #556]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003600:	430b      	orrs	r3, r1
 8003602:	6593      	str	r3, [r2, #88]	@ 0x58
 8003604:	e003      	b.n	800360e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003606:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800360a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800360e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003616:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800361a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800361e:	2300      	movs	r3, #0
 8003620:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003624:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003628:	460b      	mov	r3, r1
 800362a:	4313      	orrs	r3, r2
 800362c:	d055      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800362e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003632:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003636:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800363a:	d033      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800363c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003640:	d82c      	bhi.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003642:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003646:	d02f      	beq.n	80036a8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8003648:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800364c:	d826      	bhi.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800364e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003652:	d02b      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003654:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003658:	d820      	bhi.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800365a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800365e:	d012      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8003660:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003664:	d81a      	bhi.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003666:	2b00      	cmp	r3, #0
 8003668:	d022      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800366a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800366e:	d115      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003670:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003674:	3308      	adds	r3, #8
 8003676:	2100      	movs	r1, #0
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fdef 	bl	800425c <RCCEx_PLL2_Config>
 800367e:	4603      	mov	r3, r0
 8003680:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003684:	e015      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003686:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800368a:	3328      	adds	r3, #40	@ 0x28
 800368c:	2102      	movs	r1, #2
 800368e:	4618      	mov	r0, r3
 8003690:	f000 fe96 	bl	80043c0 <RCCEx_PLL3_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800369a:	e00a      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80036a2:	e006      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80036a4:	bf00      	nop
 80036a6:	e004      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80036a8:	bf00      	nop
 80036aa:	e002      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80036ac:	bf00      	nop
 80036ae:	e000      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80036b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10b      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80036ba:	4b5c      	ldr	r3, [pc, #368]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036be:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80036c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80036ca:	4a58      	ldr	r2, [pc, #352]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036cc:	430b      	orrs	r3, r1
 80036ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80036d0:	e003      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036d6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80036da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e2:	f002 0308 	and.w	r3, r2, #8
 80036e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036ea:	2300      	movs	r3, #0
 80036ec:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80036f0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80036f4:	460b      	mov	r3, r1
 80036f6:	4313      	orrs	r3, r2
 80036f8:	d01e      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80036fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003706:	d10c      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003708:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800370c:	3328      	adds	r3, #40	@ 0x28
 800370e:	2102      	movs	r1, #2
 8003710:	4618      	mov	r0, r3
 8003712:	f000 fe55 	bl	80043c0 <RCCEx_PLL3_Config>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d002      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003722:	4b42      	ldr	r3, [pc, #264]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003726:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800372a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800372e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003732:	4a3e      	ldr	r2, [pc, #248]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003734:	430b      	orrs	r3, r1
 8003736:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003738:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800373c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003740:	f002 0310 	and.w	r3, r2, #16
 8003744:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003748:	2300      	movs	r3, #0
 800374a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800374e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003752:	460b      	mov	r3, r1
 8003754:	4313      	orrs	r3, r2
 8003756:	d01e      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003758:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800375c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003764:	d10c      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003766:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800376a:	3328      	adds	r3, #40	@ 0x28
 800376c:	2102      	movs	r1, #2
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fe26 	bl	80043c0 <RCCEx_PLL3_Config>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003780:	4b2a      	ldr	r3, [pc, #168]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003782:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003784:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003788:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800378c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003790:	4a26      	ldr	r2, [pc, #152]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003792:	430b      	orrs	r3, r1
 8003794:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003796:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80037a2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037a6:	2300      	movs	r3, #0
 80037a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037ac:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80037b0:	460b      	mov	r3, r1
 80037b2:	4313      	orrs	r3, r2
 80037b4:	d040      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80037b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80037be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037c2:	d022      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80037c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037c8:	d81b      	bhi.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d003      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80037ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d2:	d00b      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80037d4:	e015      	b.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037da:	3308      	adds	r3, #8
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fd3c 	bl	800425c <RCCEx_PLL2_Config>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80037ea:	e00f      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037f0:	3328      	adds	r3, #40	@ 0x28
 80037f2:	2102      	movs	r1, #2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f000 fde3 	bl	80043c0 <RCCEx_PLL3_Config>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003800:	e004      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003808:	e000      	b.n	800380c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800380a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800380c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10d      	bne.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003814:	4b05      	ldr	r3, [pc, #20]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003818:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800381c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003820:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003824:	4a01      	ldr	r2, [pc, #4]	@ (800382c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003826:	430b      	orrs	r3, r1
 8003828:	6593      	str	r3, [r2, #88]	@ 0x58
 800382a:	e005      	b.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800382c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003830:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003834:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003838:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800383c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003840:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003844:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003846:	2300      	movs	r3, #0
 8003848:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800384a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800384e:	460b      	mov	r3, r1
 8003850:	4313      	orrs	r3, r2
 8003852:	d03b      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003854:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003858:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800385c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003860:	d01f      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8003862:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003866:	d818      	bhi.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003868:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800386c:	d003      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800386e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003872:	d007      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003874:	e011      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003876:	4b64      	ldr	r3, [pc, #400]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800387a:	4a63      	ldr	r2, [pc, #396]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800387c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003880:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003882:	e00f      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003884:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003888:	3328      	adds	r3, #40	@ 0x28
 800388a:	2101      	movs	r1, #1
 800388c:	4618      	mov	r0, r3
 800388e:	f000 fd97 	bl	80043c0 <RCCEx_PLL3_Config>
 8003892:	4603      	mov	r3, r0
 8003894:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003898:	e004      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800389a:	2301      	movs	r3, #1
 800389c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80038a0:	e000      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80038a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10b      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038ac:	4b56      	ldr	r3, [pc, #344]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80038ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80038b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038bc:	4a52      	ldr	r2, [pc, #328]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80038be:	430b      	orrs	r3, r1
 80038c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80038c2:	e003      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038c8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80038cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80038d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80038da:	2300      	movs	r3, #0
 80038dc:	677b      	str	r3, [r7, #116]	@ 0x74
 80038de:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80038e2:	460b      	mov	r3, r1
 80038e4:	4313      	orrs	r3, r2
 80038e6:	d031      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80038e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80038f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038f6:	d007      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80038f8:	e011      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038fa:	4b43      	ldr	r3, [pc, #268]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80038fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fe:	4a42      	ldr	r2, [pc, #264]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003904:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003906:	e00e      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003908:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800390c:	3308      	adds	r3, #8
 800390e:	2102      	movs	r1, #2
 8003910:	4618      	mov	r0, r3
 8003912:	f000 fca3 	bl	800425c <RCCEx_PLL2_Config>
 8003916:	4603      	mov	r3, r0
 8003918:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800391c:	e003      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003924:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003926:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10a      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800392e:	4b36      	ldr	r3, [pc, #216]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003932:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003936:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800393a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393c:	4a32      	ldr	r2, [pc, #200]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800393e:	430b      	orrs	r3, r1
 8003940:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003942:	e003      	b.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003944:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003948:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800394c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003954:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003958:	66bb      	str	r3, [r7, #104]	@ 0x68
 800395a:	2300      	movs	r3, #0
 800395c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800395e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003962:	460b      	mov	r3, r1
 8003964:	4313      	orrs	r3, r2
 8003966:	d00c      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003968:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800396c:	3328      	adds	r3, #40	@ 0x28
 800396e:	2102      	movs	r1, #2
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fd25 	bl	80043c0 <RCCEx_PLL3_Config>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d002      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003982:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800398a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800398e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003990:	2300      	movs	r3, #0
 8003992:	667b      	str	r3, [r7, #100]	@ 0x64
 8003994:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003998:	460b      	mov	r3, r1
 800399a:	4313      	orrs	r3, r2
 800399c:	d03a      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800399e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039aa:	d018      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80039ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039b0:	d811      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80039b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039b6:	d014      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80039b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039bc:	d80b      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d011      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80039c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039c6:	d106      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80039ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039cc:	4a0e      	ldr	r2, [pc, #56]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80039ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80039d4:	e008      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80039dc:	e004      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80039de:	bf00      	nop
 80039e0:	e002      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80039e2:	bf00      	nop
 80039e4:	e000      	b.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80039e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10d      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039f0:	4b05      	ldr	r3, [pc, #20]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80039f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80039f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a00:	4a01      	ldr	r2, [pc, #4]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003a02:	430b      	orrs	r3, r1
 8003a04:	6553      	str	r3, [r2, #84]	@ 0x54
 8003a06:	e005      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8003a08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a0c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a10:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003a20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a22:	2300      	movs	r3, #0
 8003a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a26:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	d009      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a30:	4baa      	ldr	r3, [pc, #680]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a34:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003a38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a3e:	4aa7      	ldr	r2, [pc, #668]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003a40:	430b      	orrs	r3, r1
 8003a42:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003a44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003a50:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a52:	2300      	movs	r3, #0
 8003a54:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a56:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	d00a      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003a60:	4b9e      	ldr	r3, [pc, #632]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003a68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a6c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003a70:	4a9a      	ldr	r2, [pc, #616]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003a72:	430b      	orrs	r3, r1
 8003a74:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003a82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a84:	2300      	movs	r3, #0
 8003a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a88:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	d009      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a92:	4b92      	ldr	r3, [pc, #584]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003a94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a96:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003a9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa0:	4a8e      	ldr	r2, [pc, #568]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003aa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aae:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003ab2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ab8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003abc:	460b      	mov	r3, r1
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	d00e      	beq.n	8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ac2:	4b86      	ldr	r3, [pc, #536]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	4a85      	ldr	r2, [pc, #532]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ac8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003acc:	6113      	str	r3, [r2, #16]
 8003ace:	4b83      	ldr	r3, [pc, #524]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ad0:	6919      	ldr	r1, [r3, #16]
 8003ad2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ad6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ada:	4a80      	ldr	r2, [pc, #512]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003adc:	430b      	orrs	r3, r1
 8003ade:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ae0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003aec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003aee:	2300      	movs	r3, #0
 8003af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003af2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003af6:	460b      	mov	r3, r1
 8003af8:	4313      	orrs	r3, r2
 8003afa:	d009      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003afc:	4b77      	ldr	r3, [pc, #476]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003afe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b00:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003b04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0a:	4a74      	ldr	r2, [pc, #464]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b18:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003b1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b1e:	2300      	movs	r3, #0
 8003b20:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b22:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003b26:	460b      	mov	r3, r1
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	d00a      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b2c:	4b6b      	ldr	r3, [pc, #428]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b30:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003b34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b3c:	4a67      	ldr	r2, [pc, #412]	@ (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003b3e:	430b      	orrs	r3, r1
 8003b40:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003b42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b54:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003b58:	460b      	mov	r3, r1
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	d011      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b62:	3308      	adds	r3, #8
 8003b64:	2100      	movs	r1, #0
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fb78 	bl	800425c <RCCEx_PLL2_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003b72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b7e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003b82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	6239      	str	r1, [r7, #32]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b94:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	d011      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f000 fb58 	bl	800425c <RCCEx_PLL2_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003bb2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bbe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003bc2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bca:	2100      	movs	r1, #0
 8003bcc:	61b9      	str	r1, [r7, #24]
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	61fb      	str	r3, [r7, #28]
 8003bd4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	d011      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bde:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003be2:	3308      	adds	r3, #8
 8003be4:	2102      	movs	r1, #2
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fb38 	bl	800425c <RCCEx_PLL2_Config>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003bf2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bfe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003c02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	6139      	str	r1, [r7, #16]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	d011      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c22:	3328      	adds	r3, #40	@ 0x28
 8003c24:	2100      	movs	r1, #0
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fbca 	bl	80043c0 <RCCEx_PLL3_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8003c32:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c3e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003c42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	f003 0310 	and.w	r3, r3, #16
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	d011      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c62:	3328      	adds	r3, #40	@ 0x28
 8003c64:	2101      	movs	r1, #1
 8003c66:	4618      	mov	r0, r3
 8003c68:	f000 fbaa 	bl	80043c0 <RCCEx_PLL3_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003c72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d003      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c7e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003c82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c8a:	2100      	movs	r1, #0
 8003c8c:	6039      	str	r1, [r7, #0]
 8003c8e:	f003 0320 	and.w	r3, r3, #32
 8003c92:	607b      	str	r3, [r7, #4]
 8003c94:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	d011      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ca2:	3328      	adds	r3, #40	@ 0x28
 8003ca4:	2102      	movs	r1, #2
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f000 fb8a 	bl	80043c0 <RCCEx_PLL3_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003cb2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003cbe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8003cc2:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d101      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e000      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cdc:	58024400 	.word	0x58024400

08003ce0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003ce4:	f7fe fd56 	bl	8002794 <HAL_RCC_GetHCLKFreq>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	091b      	lsrs	r3, r3, #4
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	4904      	ldr	r1, [pc, #16]	@ (8003d08 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003cf6:	5ccb      	ldrb	r3, [r1, r3]
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	58024400 	.word	0x58024400
 8003d08:	08008744 	.word	0x08008744

08003d0c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b089      	sub	sp, #36	@ 0x24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d14:	4ba1      	ldr	r3, [pc, #644]	@ (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d18:	f003 0303 	and.w	r3, r3, #3
 8003d1c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003d1e:	4b9f      	ldr	r3, [pc, #636]	@ (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d22:	0b1b      	lsrs	r3, r3, #12
 8003d24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d28:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003d2a:	4b9c      	ldr	r3, [pc, #624]	@ (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d2e:	091b      	lsrs	r3, r3, #4
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003d36:	4b99      	ldr	r3, [pc, #612]	@ (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d3a:	08db      	lsrs	r3, r3, #3
 8003d3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	fb02 f303 	mul.w	r3, r2, r3
 8003d46:	ee07 3a90 	vmov	s15, r3
 8003d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 8111 	beq.w	8003f7c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	f000 8083 	beq.w	8003e68 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	f200 80a1 	bhi.w	8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d056      	beq.n	8003e24 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003d76:	e099      	b.n	8003eac <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d78:	4b88      	ldr	r3, [pc, #544]	@ (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0320 	and.w	r3, r3, #32
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d02d      	beq.n	8003de0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d84:	4b85      	ldr	r3, [pc, #532]	@ (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	08db      	lsrs	r3, r3, #3
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	4a84      	ldr	r2, [pc, #528]	@ (8003fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003d90:	fa22 f303 	lsr.w	r3, r2, r3
 8003d94:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	ee07 3a90 	vmov	s15, r3
 8003d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003dae:	4b7b      	ldr	r3, [pc, #492]	@ (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003db0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db6:	ee07 3a90 	vmov	s15, r3
 8003dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dc2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003dde:	e087      	b.n	8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	ee07 3a90 	vmov	s15, r3
 8003de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dea:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003df2:	4b6a      	ldr	r3, [pc, #424]	@ (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003df4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dfa:	ee07 3a90 	vmov	s15, r3
 8003dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e06:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e22:	e065      	b.n	8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	ee07 3a90 	vmov	s15, r3
 8003e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e2e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003fac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e36:	4b59      	ldr	r3, [pc, #356]	@ (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e3e:	ee07 3a90 	vmov	s15, r3
 8003e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e4a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e66:	e043      	b.n	8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	ee07 3a90 	vmov	s15, r3
 8003e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e72:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003fb0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e7a:	4b48      	ldr	r3, [pc, #288]	@ (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e82:	ee07 3a90 	vmov	s15, r3
 8003e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e8e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eaa:	e021      	b.n	8003ef0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	ee07 3a90 	vmov	s15, r3
 8003eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003fac <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ebe:	4b37      	ldr	r3, [pc, #220]	@ (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ec6:	ee07 3a90 	vmov	s15, r3
 8003eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ed2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003eee:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ef4:	0a5b      	lsrs	r3, r3, #9
 8003ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f02:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f06:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f16:	ee17 2a90 	vmov	r2, s15
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f22:	0c1b      	lsrs	r3, r3, #16
 8003f24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f28:	ee07 3a90 	vmov	s15, r3
 8003f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f30:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f38:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f44:	ee17 2a90 	vmov	r2, s15
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003f4c:	4b13      	ldr	r3, [pc, #76]	@ (8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f50:	0e1b      	lsrs	r3, r3, #24
 8003f52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f56:	ee07 3a90 	vmov	s15, r3
 8003f5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f66:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f72:	ee17 2a90 	vmov	r2, s15
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003f7a:	e008      	b.n	8003f8e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	609a      	str	r2, [r3, #8]
}
 8003f8e:	bf00      	nop
 8003f90:	3724      	adds	r7, #36	@ 0x24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	58024400 	.word	0x58024400
 8003fa0:	03d09000 	.word	0x03d09000
 8003fa4:	46000000 	.word	0x46000000
 8003fa8:	4c742400 	.word	0x4c742400
 8003fac:	4a742400 	.word	0x4a742400
 8003fb0:	4bbebc20 	.word	0x4bbebc20

08003fb4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b089      	sub	sp, #36	@ 0x24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fbc:	4ba1      	ldr	r3, [pc, #644]	@ (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc0:	f003 0303 	and.w	r3, r3, #3
 8003fc4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003fc6:	4b9f      	ldr	r3, [pc, #636]	@ (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fca:	0d1b      	lsrs	r3, r3, #20
 8003fcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fd0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003fd2:	4b9c      	ldr	r3, [pc, #624]	@ (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003fde:	4b99      	ldr	r3, [pc, #612]	@ (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe2:	08db      	lsrs	r3, r3, #3
 8003fe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	fb02 f303 	mul.w	r3, r2, r3
 8003fee:	ee07 3a90 	vmov	s15, r3
 8003ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ff6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8111 	beq.w	8004224 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2b02      	cmp	r3, #2
 8004006:	f000 8083 	beq.w	8004110 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	2b02      	cmp	r3, #2
 800400e:	f200 80a1 	bhi.w	8004154 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	2b01      	cmp	r3, #1
 800401c:	d056      	beq.n	80040cc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800401e:	e099      	b.n	8004154 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004020:	4b88      	ldr	r3, [pc, #544]	@ (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b00      	cmp	r3, #0
 800402a:	d02d      	beq.n	8004088 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800402c:	4b85      	ldr	r3, [pc, #532]	@ (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	08db      	lsrs	r3, r3, #3
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	4a84      	ldr	r2, [pc, #528]	@ (8004248 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004038:	fa22 f303 	lsr.w	r3, r2, r3
 800403c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	ee07 3a90 	vmov	s15, r3
 8004044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	ee07 3a90 	vmov	s15, r3
 800404e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004056:	4b7b      	ldr	r3, [pc, #492]	@ (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800405a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800405e:	ee07 3a90 	vmov	s15, r3
 8004062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004066:	ed97 6a03 	vldr	s12, [r7, #12]
 800406a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800424c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800406e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800407a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800407e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004082:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004086:	e087      	b.n	8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	ee07 3a90 	vmov	s15, r3
 800408e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004092:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004250 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800409a:	4b6a      	ldr	r3, [pc, #424]	@ (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800409c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a2:	ee07 3a90 	vmov	s15, r3
 80040a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80040ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800424c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040ca:	e065      	b.n	8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	ee07 3a90 	vmov	s15, r3
 80040d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80040da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040de:	4b59      	ldr	r3, [pc, #356]	@ (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040e6:	ee07 3a90 	vmov	s15, r3
 80040ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80040f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800424c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800410a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800410e:	e043      	b.n	8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	ee07 3a90 	vmov	s15, r3
 8004116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004258 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800411e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004122:	4b48      	ldr	r3, [pc, #288]	@ (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004132:	ed97 6a03 	vldr	s12, [r7, #12]
 8004136:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800424c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800413a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800413e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800414a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800414e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004152:	e021      	b.n	8004198 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	ee07 3a90 	vmov	s15, r3
 800415a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800415e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004166:	4b37      	ldr	r3, [pc, #220]	@ (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800416e:	ee07 3a90 	vmov	s15, r3
 8004172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004176:	ed97 6a03 	vldr	s12, [r7, #12]
 800417a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800424c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800417e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800418a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800418e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004196:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004198:	4b2a      	ldr	r3, [pc, #168]	@ (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800419a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419c:	0a5b      	lsrs	r3, r3, #9
 800419e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041a2:	ee07 3a90 	vmov	s15, r3
 80041a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80041b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041be:	ee17 2a90 	vmov	r2, s15
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80041c6:	4b1f      	ldr	r3, [pc, #124]	@ (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ca:	0c1b      	lsrs	r3, r3, #16
 80041cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041d0:	ee07 3a90 	vmov	s15, r3
 80041d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80041e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041ec:	ee17 2a90 	vmov	r2, s15
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80041f4:	4b13      	ldr	r3, [pc, #76]	@ (8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f8:	0e1b      	lsrs	r3, r3, #24
 80041fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041fe:	ee07 3a90 	vmov	s15, r3
 8004202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004206:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800420a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800420e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800421a:	ee17 2a90 	vmov	r2, s15
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004222:	e008      	b.n	8004236 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	609a      	str	r2, [r3, #8]
}
 8004236:	bf00      	nop
 8004238:	3724      	adds	r7, #36	@ 0x24
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	58024400 	.word	0x58024400
 8004248:	03d09000 	.word	0x03d09000
 800424c:	46000000 	.word	0x46000000
 8004250:	4c742400 	.word	0x4c742400
 8004254:	4a742400 	.word	0x4a742400
 8004258:	4bbebc20 	.word	0x4bbebc20

0800425c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800426a:	4b53      	ldr	r3, [pc, #332]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 800426c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800426e:	f003 0303 	and.w	r3, r3, #3
 8004272:	2b03      	cmp	r3, #3
 8004274:	d101      	bne.n	800427a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e099      	b.n	80043ae <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800427a:	4b4f      	ldr	r3, [pc, #316]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a4e      	ldr	r2, [pc, #312]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004280:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004286:	f7fc ff43 	bl	8001110 <HAL_GetTick>
 800428a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800428c:	e008      	b.n	80042a0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800428e:	f7fc ff3f 	bl	8001110 <HAL_GetTick>
 8004292:	4602      	mov	r2, r0
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d901      	bls.n	80042a0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e086      	b.n	80043ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80042a0:	4b45      	ldr	r3, [pc, #276]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d1f0      	bne.n	800428e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80042ac:	4b42      	ldr	r3, [pc, #264]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 80042ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	031b      	lsls	r3, r3, #12
 80042ba:	493f      	ldr	r1, [pc, #252]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	628b      	str	r3, [r1, #40]	@ 0x28
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	025b      	lsls	r3, r3, #9
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	431a      	orrs	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	3b01      	subs	r3, #1
 80042dc:	041b      	lsls	r3, r3, #16
 80042de:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80042e2:	431a      	orrs	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	061b      	lsls	r3, r3, #24
 80042ec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80042f0:	4931      	ldr	r1, [pc, #196]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80042f6:	4b30      	ldr	r3, [pc, #192]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 80042f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	492d      	ldr	r1, [pc, #180]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004304:	4313      	orrs	r3, r2
 8004306:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004308:	4b2b      	ldr	r3, [pc, #172]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 800430a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430c:	f023 0220 	bic.w	r2, r3, #32
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	4928      	ldr	r1, [pc, #160]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004316:	4313      	orrs	r3, r2
 8004318:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800431a:	4b27      	ldr	r3, [pc, #156]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 800431c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431e:	4a26      	ldr	r2, [pc, #152]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004320:	f023 0310 	bic.w	r3, r3, #16
 8004324:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004326:	4b24      	ldr	r3, [pc, #144]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004328:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800432a:	4b24      	ldr	r3, [pc, #144]	@ (80043bc <RCCEx_PLL2_Config+0x160>)
 800432c:	4013      	ands	r3, r2
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	69d2      	ldr	r2, [r2, #28]
 8004332:	00d2      	lsls	r2, r2, #3
 8004334:	4920      	ldr	r1, [pc, #128]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004336:	4313      	orrs	r3, r2
 8004338:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800433a:	4b1f      	ldr	r3, [pc, #124]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 800433c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800433e:	4a1e      	ldr	r2, [pc, #120]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004340:	f043 0310 	orr.w	r3, r3, #16
 8004344:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d106      	bne.n	800435a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800434c:	4b1a      	ldr	r3, [pc, #104]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 800434e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004350:	4a19      	ldr	r2, [pc, #100]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004352:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004356:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004358:	e00f      	b.n	800437a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d106      	bne.n	800436e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004360:	4b15      	ldr	r3, [pc, #84]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004364:	4a14      	ldr	r2, [pc, #80]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004366:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800436a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800436c:	e005      	b.n	800437a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800436e:	4b12      	ldr	r3, [pc, #72]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004372:	4a11      	ldr	r2, [pc, #68]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004374:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004378:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800437a:	4b0f      	ldr	r3, [pc, #60]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a0e      	ldr	r2, [pc, #56]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 8004380:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004384:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004386:	f7fc fec3 	bl	8001110 <HAL_GetTick>
 800438a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800438c:	e008      	b.n	80043a0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800438e:	f7fc febf 	bl	8001110 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	2b02      	cmp	r3, #2
 800439a:	d901      	bls.n	80043a0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e006      	b.n	80043ae <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80043a0:	4b05      	ldr	r3, [pc, #20]	@ (80043b8 <RCCEx_PLL2_Config+0x15c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d0f0      	beq.n	800438e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	58024400 	.word	0x58024400
 80043bc:	ffff0007 	.word	0xffff0007

080043c0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043ca:	2300      	movs	r3, #0
 80043cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043ce:	4b53      	ldr	r3, [pc, #332]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 80043d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d101      	bne.n	80043de <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e099      	b.n	8004512 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80043de:	4b4f      	ldr	r3, [pc, #316]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a4e      	ldr	r2, [pc, #312]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 80043e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ea:	f7fc fe91 	bl	8001110 <HAL_GetTick>
 80043ee:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80043f0:	e008      	b.n	8004404 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80043f2:	f7fc fe8d 	bl	8001110 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e086      	b.n	8004512 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004404:	4b45      	ldr	r3, [pc, #276]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f0      	bne.n	80043f2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004410:	4b42      	ldr	r3, [pc, #264]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 8004412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004414:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	051b      	lsls	r3, r3, #20
 800441e:	493f      	ldr	r1, [pc, #252]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 8004420:	4313      	orrs	r3, r2
 8004422:	628b      	str	r3, [r1, #40]	@ 0x28
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	3b01      	subs	r3, #1
 800442a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	3b01      	subs	r3, #1
 8004434:	025b      	lsls	r3, r3, #9
 8004436:	b29b      	uxth	r3, r3
 8004438:	431a      	orrs	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	3b01      	subs	r3, #1
 8004440:	041b      	lsls	r3, r3, #16
 8004442:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	3b01      	subs	r3, #1
 800444e:	061b      	lsls	r3, r3, #24
 8004450:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004454:	4931      	ldr	r1, [pc, #196]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 8004456:	4313      	orrs	r3, r2
 8004458:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800445a:	4b30      	ldr	r3, [pc, #192]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 800445c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	492d      	ldr	r1, [pc, #180]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 8004468:	4313      	orrs	r3, r2
 800446a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800446c:	4b2b      	ldr	r3, [pc, #172]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 800446e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004470:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	4928      	ldr	r1, [pc, #160]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 800447a:	4313      	orrs	r3, r2
 800447c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800447e:	4b27      	ldr	r3, [pc, #156]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 8004480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004482:	4a26      	ldr	r2, [pc, #152]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 8004484:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004488:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800448a:	4b24      	ldr	r3, [pc, #144]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 800448c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800448e:	4b24      	ldr	r3, [pc, #144]	@ (8004520 <RCCEx_PLL3_Config+0x160>)
 8004490:	4013      	ands	r3, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	69d2      	ldr	r2, [r2, #28]
 8004496:	00d2      	lsls	r2, r2, #3
 8004498:	4920      	ldr	r1, [pc, #128]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 800449a:	4313      	orrs	r3, r2
 800449c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800449e:	4b1f      	ldr	r3, [pc, #124]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 80044a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a2:	4a1e      	ldr	r2, [pc, #120]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 80044a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d106      	bne.n	80044be <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80044b0:	4b1a      	ldr	r3, [pc, #104]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 80044b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b4:	4a19      	ldr	r2, [pc, #100]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 80044b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80044ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80044bc:	e00f      	b.n	80044de <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d106      	bne.n	80044d2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80044c4:	4b15      	ldr	r3, [pc, #84]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 80044c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c8:	4a14      	ldr	r2, [pc, #80]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 80044ca:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80044d0:	e005      	b.n	80044de <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80044d2:	4b12      	ldr	r3, [pc, #72]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 80044d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d6:	4a11      	ldr	r2, [pc, #68]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 80044d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80044de:	4b0f      	ldr	r3, [pc, #60]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a0e      	ldr	r2, [pc, #56]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 80044e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ea:	f7fc fe11 	bl	8001110 <HAL_GetTick>
 80044ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80044f0:	e008      	b.n	8004504 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80044f2:	f7fc fe0d 	bl	8001110 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e006      	b.n	8004512 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004504:	4b05      	ldr	r3, [pc, #20]	@ (800451c <RCCEx_PLL3_Config+0x15c>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004510:	7bfb      	ldrb	r3, [r7, #15]
}
 8004512:	4618      	mov	r0, r3
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	58024400 	.word	0x58024400
 8004520:	ffff0007 	.word	0xffff0007

08004524 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e042      	b.n	80045bc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800453c:	2b00      	cmp	r3, #0
 800453e:	d106      	bne.n	800454e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f7fc fc29 	bl	8000da0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2224      	movs	r2, #36	@ 0x24
 8004552:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0201 	bic.w	r2, r2, #1
 8004564:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fee6 	bl	8005340 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	f000 f97b 	bl	8004870 <UART_SetConfig>
 800457a:	4603      	mov	r3, r0
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e01b      	b.n	80045bc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004592:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 ff65 	bl	8005484 <UART_CheckIdleState>
 80045ba:	4603      	mov	r3, r0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}

080045c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08a      	sub	sp, #40	@ 0x28
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	60f8      	str	r0, [r7, #12]
 80045cc:	60b9      	str	r1, [r7, #8]
 80045ce:	603b      	str	r3, [r7, #0]
 80045d0:	4613      	mov	r3, r2
 80045d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045da:	2b20      	cmp	r3, #32
 80045dc:	d17b      	bne.n	80046d6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <HAL_UART_Transmit+0x26>
 80045e4:	88fb      	ldrh	r3, [r7, #6]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e074      	b.n	80046d8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2221      	movs	r2, #33	@ 0x21
 80045fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045fe:	f7fc fd87 	bl	8001110 <HAL_GetTick>
 8004602:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	88fa      	ldrh	r2, [r7, #6]
 8004608:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	88fa      	ldrh	r2, [r7, #6]
 8004610:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800461c:	d108      	bne.n	8004630 <HAL_UART_Transmit+0x6c>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d104      	bne.n	8004630 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004626:	2300      	movs	r3, #0
 8004628:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	61bb      	str	r3, [r7, #24]
 800462e:	e003      	b.n	8004638 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004634:	2300      	movs	r3, #0
 8004636:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004638:	e030      	b.n	800469c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	2200      	movs	r2, #0
 8004642:	2180      	movs	r1, #128	@ 0x80
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f000 ffc7 	bl	80055d8 <UART_WaitOnFlagUntilTimeout>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d005      	beq.n	800465c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e03d      	b.n	80046d8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d10b      	bne.n	800467a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	881b      	ldrh	r3, [r3, #0]
 8004666:	461a      	mov	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004670:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004672:	69bb      	ldr	r3, [r7, #24]
 8004674:	3302      	adds	r3, #2
 8004676:	61bb      	str	r3, [r7, #24]
 8004678:	e007      	b.n	800468a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	781a      	ldrb	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	3301      	adds	r3, #1
 8004688:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1c8      	bne.n	800463a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	9300      	str	r3, [sp, #0]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	2200      	movs	r2, #0
 80046b0:	2140      	movs	r1, #64	@ 0x40
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 ff90 	bl	80055d8 <UART_WaitOnFlagUntilTimeout>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d005      	beq.n	80046ca <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e006      	b.n	80046d8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80046d2:	2300      	movs	r3, #0
 80046d4:	e000      	b.n	80046d8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80046d6:	2302      	movs	r3, #2
  }
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3720      	adds	r7, #32
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b08a      	sub	sp, #40	@ 0x28
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	4613      	mov	r3, r2
 80046ee:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	f040 80b5 	bne.w	8004866 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d002      	beq.n	8004708 <HAL_UART_Receive+0x28>
 8004702:	88fb      	ldrh	r3, [r7, #6]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d101      	bne.n	800470c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0ad      	b.n	8004868 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2222      	movs	r2, #34	@ 0x22
 8004718:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004722:	f7fc fcf5 	bl	8001110 <HAL_GetTick>
 8004726:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	88fa      	ldrh	r2, [r7, #6]
 800472c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	88fa      	ldrh	r2, [r7, #6]
 8004734:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004740:	d10e      	bne.n	8004760 <HAL_UART_Receive+0x80>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d105      	bne.n	8004756 <HAL_UART_Receive+0x76>
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004750:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004754:	e02d      	b.n	80047b2 <HAL_UART_Receive+0xd2>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	22ff      	movs	r2, #255	@ 0xff
 800475a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800475e:	e028      	b.n	80047b2 <HAL_UART_Receive+0xd2>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10d      	bne.n	8004784 <HAL_UART_Receive+0xa4>
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d104      	bne.n	800477a <HAL_UART_Receive+0x9a>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	22ff      	movs	r2, #255	@ 0xff
 8004774:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004778:	e01b      	b.n	80047b2 <HAL_UART_Receive+0xd2>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	227f      	movs	r2, #127	@ 0x7f
 800477e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004782:	e016      	b.n	80047b2 <HAL_UART_Receive+0xd2>
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800478c:	d10d      	bne.n	80047aa <HAL_UART_Receive+0xca>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d104      	bne.n	80047a0 <HAL_UART_Receive+0xc0>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	227f      	movs	r2, #127	@ 0x7f
 800479a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800479e:	e008      	b.n	80047b2 <HAL_UART_Receive+0xd2>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	223f      	movs	r2, #63	@ 0x3f
 80047a4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80047a8:	e003      	b.n	80047b2 <HAL_UART_Receive+0xd2>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80047b8:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047c2:	d108      	bne.n	80047d6 <HAL_UART_Receive+0xf6>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d104      	bne.n	80047d6 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80047cc:	2300      	movs	r3, #0
 80047ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	61bb      	str	r3, [r7, #24]
 80047d4:	e003      	b.n	80047de <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047da:	2300      	movs	r3, #0
 80047dc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80047de:	e036      	b.n	800484e <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	9300      	str	r3, [sp, #0]
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2200      	movs	r2, #0
 80047e8:	2120      	movs	r1, #32
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 fef4 	bl	80055d8 <UART_WaitOnFlagUntilTimeout>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d005      	beq.n	8004802 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e032      	b.n	8004868 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10c      	bne.n	8004822 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800480e:	b29a      	uxth	r2, r3
 8004810:	8a7b      	ldrh	r3, [r7, #18]
 8004812:	4013      	ands	r3, r2
 8004814:	b29a      	uxth	r2, r3
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	3302      	adds	r3, #2
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	e00c      	b.n	800483c <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004828:	b2da      	uxtb	r2, r3
 800482a:	8a7b      	ldrh	r3, [r7, #18]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	4013      	ands	r3, r2
 8004830:	b2da      	uxtb	r2, r3
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004836:	69fb      	ldr	r3, [r7, #28]
 8004838:	3301      	adds	r3, #1
 800483a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004842:	b29b      	uxth	r3, r3
 8004844:	3b01      	subs	r3, #1
 8004846:	b29a      	uxth	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1c2      	bne.n	80047e0 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2220      	movs	r2, #32
 800485e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8004862:	2300      	movs	r3, #0
 8004864:	e000      	b.n	8004868 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004866:	2302      	movs	r3, #2
  }
}
 8004868:	4618      	mov	r0, r3
 800486a:	3720      	adds	r7, #32
 800486c:	46bd      	mov	sp, r7
 800486e:	bd80      	pop	{r7, pc}

08004870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004874:	b092      	sub	sp, #72	@ 0x48
 8004876:	af00      	add	r7, sp, #0
 8004878:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800487a:	2300      	movs	r3, #0
 800487c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	689a      	ldr	r2, [r3, #8]
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	431a      	orrs	r2, r3
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	431a      	orrs	r2, r3
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	4313      	orrs	r3, r2
 8004896:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	4bbe      	ldr	r3, [pc, #760]	@ (8004b98 <UART_SetConfig+0x328>)
 80048a0:	4013      	ands	r3, r2
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	6812      	ldr	r2, [r2, #0]
 80048a6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80048a8:	430b      	orrs	r3, r1
 80048aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	68da      	ldr	r2, [r3, #12]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4ab3      	ldr	r2, [pc, #716]	@ (8004b9c <UART_SetConfig+0x32c>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d004      	beq.n	80048dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048d8:	4313      	orrs	r3, r2
 80048da:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	689a      	ldr	r2, [r3, #8]
 80048e2:	4baf      	ldr	r3, [pc, #700]	@ (8004ba0 <UART_SetConfig+0x330>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	697a      	ldr	r2, [r7, #20]
 80048e8:	6812      	ldr	r2, [r2, #0]
 80048ea:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80048ec:	430b      	orrs	r3, r1
 80048ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f6:	f023 010f 	bic.w	r1, r3, #15
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4aa6      	ldr	r2, [pc, #664]	@ (8004ba4 <UART_SetConfig+0x334>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d177      	bne.n	8004a00 <UART_SetConfig+0x190>
 8004910:	4ba5      	ldr	r3, [pc, #660]	@ (8004ba8 <UART_SetConfig+0x338>)
 8004912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004914:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004918:	2b28      	cmp	r3, #40	@ 0x28
 800491a:	d86d      	bhi.n	80049f8 <UART_SetConfig+0x188>
 800491c:	a201      	add	r2, pc, #4	@ (adr r2, 8004924 <UART_SetConfig+0xb4>)
 800491e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004922:	bf00      	nop
 8004924:	080049c9 	.word	0x080049c9
 8004928:	080049f9 	.word	0x080049f9
 800492c:	080049f9 	.word	0x080049f9
 8004930:	080049f9 	.word	0x080049f9
 8004934:	080049f9 	.word	0x080049f9
 8004938:	080049f9 	.word	0x080049f9
 800493c:	080049f9 	.word	0x080049f9
 8004940:	080049f9 	.word	0x080049f9
 8004944:	080049d1 	.word	0x080049d1
 8004948:	080049f9 	.word	0x080049f9
 800494c:	080049f9 	.word	0x080049f9
 8004950:	080049f9 	.word	0x080049f9
 8004954:	080049f9 	.word	0x080049f9
 8004958:	080049f9 	.word	0x080049f9
 800495c:	080049f9 	.word	0x080049f9
 8004960:	080049f9 	.word	0x080049f9
 8004964:	080049d9 	.word	0x080049d9
 8004968:	080049f9 	.word	0x080049f9
 800496c:	080049f9 	.word	0x080049f9
 8004970:	080049f9 	.word	0x080049f9
 8004974:	080049f9 	.word	0x080049f9
 8004978:	080049f9 	.word	0x080049f9
 800497c:	080049f9 	.word	0x080049f9
 8004980:	080049f9 	.word	0x080049f9
 8004984:	080049e1 	.word	0x080049e1
 8004988:	080049f9 	.word	0x080049f9
 800498c:	080049f9 	.word	0x080049f9
 8004990:	080049f9 	.word	0x080049f9
 8004994:	080049f9 	.word	0x080049f9
 8004998:	080049f9 	.word	0x080049f9
 800499c:	080049f9 	.word	0x080049f9
 80049a0:	080049f9 	.word	0x080049f9
 80049a4:	080049e9 	.word	0x080049e9
 80049a8:	080049f9 	.word	0x080049f9
 80049ac:	080049f9 	.word	0x080049f9
 80049b0:	080049f9 	.word	0x080049f9
 80049b4:	080049f9 	.word	0x080049f9
 80049b8:	080049f9 	.word	0x080049f9
 80049bc:	080049f9 	.word	0x080049f9
 80049c0:	080049f9 	.word	0x080049f9
 80049c4:	080049f1 	.word	0x080049f1
 80049c8:	2301      	movs	r3, #1
 80049ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ce:	e222      	b.n	8004e16 <UART_SetConfig+0x5a6>
 80049d0:	2304      	movs	r3, #4
 80049d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049d6:	e21e      	b.n	8004e16 <UART_SetConfig+0x5a6>
 80049d8:	2308      	movs	r3, #8
 80049da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049de:	e21a      	b.n	8004e16 <UART_SetConfig+0x5a6>
 80049e0:	2310      	movs	r3, #16
 80049e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049e6:	e216      	b.n	8004e16 <UART_SetConfig+0x5a6>
 80049e8:	2320      	movs	r3, #32
 80049ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ee:	e212      	b.n	8004e16 <UART_SetConfig+0x5a6>
 80049f0:	2340      	movs	r3, #64	@ 0x40
 80049f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049f6:	e20e      	b.n	8004e16 <UART_SetConfig+0x5a6>
 80049f8:	2380      	movs	r3, #128	@ 0x80
 80049fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049fe:	e20a      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a69      	ldr	r2, [pc, #420]	@ (8004bac <UART_SetConfig+0x33c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d130      	bne.n	8004a6c <UART_SetConfig+0x1fc>
 8004a0a:	4b67      	ldr	r3, [pc, #412]	@ (8004ba8 <UART_SetConfig+0x338>)
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	2b05      	cmp	r3, #5
 8004a14:	d826      	bhi.n	8004a64 <UART_SetConfig+0x1f4>
 8004a16:	a201      	add	r2, pc, #4	@ (adr r2, 8004a1c <UART_SetConfig+0x1ac>)
 8004a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1c:	08004a35 	.word	0x08004a35
 8004a20:	08004a3d 	.word	0x08004a3d
 8004a24:	08004a45 	.word	0x08004a45
 8004a28:	08004a4d 	.word	0x08004a4d
 8004a2c:	08004a55 	.word	0x08004a55
 8004a30:	08004a5d 	.word	0x08004a5d
 8004a34:	2300      	movs	r3, #0
 8004a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a3a:	e1ec      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004a3c:	2304      	movs	r3, #4
 8004a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a42:	e1e8      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004a44:	2308      	movs	r3, #8
 8004a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a4a:	e1e4      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004a4c:	2310      	movs	r3, #16
 8004a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a52:	e1e0      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004a54:	2320      	movs	r3, #32
 8004a56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a5a:	e1dc      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004a5c:	2340      	movs	r3, #64	@ 0x40
 8004a5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a62:	e1d8      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004a64:	2380      	movs	r3, #128	@ 0x80
 8004a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a6a:	e1d4      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a4f      	ldr	r2, [pc, #316]	@ (8004bb0 <UART_SetConfig+0x340>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d130      	bne.n	8004ad8 <UART_SetConfig+0x268>
 8004a76:	4b4c      	ldr	r3, [pc, #304]	@ (8004ba8 <UART_SetConfig+0x338>)
 8004a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	2b05      	cmp	r3, #5
 8004a80:	d826      	bhi.n	8004ad0 <UART_SetConfig+0x260>
 8004a82:	a201      	add	r2, pc, #4	@ (adr r2, 8004a88 <UART_SetConfig+0x218>)
 8004a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a88:	08004aa1 	.word	0x08004aa1
 8004a8c:	08004aa9 	.word	0x08004aa9
 8004a90:	08004ab1 	.word	0x08004ab1
 8004a94:	08004ab9 	.word	0x08004ab9
 8004a98:	08004ac1 	.word	0x08004ac1
 8004a9c:	08004ac9 	.word	0x08004ac9
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aa6:	e1b6      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004aa8:	2304      	movs	r3, #4
 8004aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aae:	e1b2      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004ab0:	2308      	movs	r3, #8
 8004ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ab6:	e1ae      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004ab8:	2310      	movs	r3, #16
 8004aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004abe:	e1aa      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004ac0:	2320      	movs	r3, #32
 8004ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ac6:	e1a6      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004ac8:	2340      	movs	r3, #64	@ 0x40
 8004aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ace:	e1a2      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004ad0:	2380      	movs	r3, #128	@ 0x80
 8004ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ad6:	e19e      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a35      	ldr	r2, [pc, #212]	@ (8004bb4 <UART_SetConfig+0x344>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d130      	bne.n	8004b44 <UART_SetConfig+0x2d4>
 8004ae2:	4b31      	ldr	r3, [pc, #196]	@ (8004ba8 <UART_SetConfig+0x338>)
 8004ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ae6:	f003 0307 	and.w	r3, r3, #7
 8004aea:	2b05      	cmp	r3, #5
 8004aec:	d826      	bhi.n	8004b3c <UART_SetConfig+0x2cc>
 8004aee:	a201      	add	r2, pc, #4	@ (adr r2, 8004af4 <UART_SetConfig+0x284>)
 8004af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af4:	08004b0d 	.word	0x08004b0d
 8004af8:	08004b15 	.word	0x08004b15
 8004afc:	08004b1d 	.word	0x08004b1d
 8004b00:	08004b25 	.word	0x08004b25
 8004b04:	08004b2d 	.word	0x08004b2d
 8004b08:	08004b35 	.word	0x08004b35
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b12:	e180      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004b14:	2304      	movs	r3, #4
 8004b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b1a:	e17c      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004b1c:	2308      	movs	r3, #8
 8004b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b22:	e178      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004b24:	2310      	movs	r3, #16
 8004b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b2a:	e174      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004b2c:	2320      	movs	r3, #32
 8004b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b32:	e170      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004b34:	2340      	movs	r3, #64	@ 0x40
 8004b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b3a:	e16c      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004b3c:	2380      	movs	r3, #128	@ 0x80
 8004b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b42:	e168      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a1b      	ldr	r2, [pc, #108]	@ (8004bb8 <UART_SetConfig+0x348>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d142      	bne.n	8004bd4 <UART_SetConfig+0x364>
 8004b4e:	4b16      	ldr	r3, [pc, #88]	@ (8004ba8 <UART_SetConfig+0x338>)
 8004b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	2b05      	cmp	r3, #5
 8004b58:	d838      	bhi.n	8004bcc <UART_SetConfig+0x35c>
 8004b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b60 <UART_SetConfig+0x2f0>)
 8004b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b60:	08004b79 	.word	0x08004b79
 8004b64:	08004b81 	.word	0x08004b81
 8004b68:	08004b89 	.word	0x08004b89
 8004b6c:	08004b91 	.word	0x08004b91
 8004b70:	08004bbd 	.word	0x08004bbd
 8004b74:	08004bc5 	.word	0x08004bc5
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b7e:	e14a      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004b80:	2304      	movs	r3, #4
 8004b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b86:	e146      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004b88:	2308      	movs	r3, #8
 8004b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b8e:	e142      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004b90:	2310      	movs	r3, #16
 8004b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b96:	e13e      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004b98:	cfff69f3 	.word	0xcfff69f3
 8004b9c:	58000c00 	.word	0x58000c00
 8004ba0:	11fff4ff 	.word	0x11fff4ff
 8004ba4:	40011000 	.word	0x40011000
 8004ba8:	58024400 	.word	0x58024400
 8004bac:	40004400 	.word	0x40004400
 8004bb0:	40004800 	.word	0x40004800
 8004bb4:	40004c00 	.word	0x40004c00
 8004bb8:	40005000 	.word	0x40005000
 8004bbc:	2320      	movs	r3, #32
 8004bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bc2:	e128      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004bc4:	2340      	movs	r3, #64	@ 0x40
 8004bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bca:	e124      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004bcc:	2380      	movs	r3, #128	@ 0x80
 8004bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bd2:	e120      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4acb      	ldr	r2, [pc, #812]	@ (8004f08 <UART_SetConfig+0x698>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d176      	bne.n	8004ccc <UART_SetConfig+0x45c>
 8004bde:	4bcb      	ldr	r3, [pc, #812]	@ (8004f0c <UART_SetConfig+0x69c>)
 8004be0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004be6:	2b28      	cmp	r3, #40	@ 0x28
 8004be8:	d86c      	bhi.n	8004cc4 <UART_SetConfig+0x454>
 8004bea:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf0 <UART_SetConfig+0x380>)
 8004bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf0:	08004c95 	.word	0x08004c95
 8004bf4:	08004cc5 	.word	0x08004cc5
 8004bf8:	08004cc5 	.word	0x08004cc5
 8004bfc:	08004cc5 	.word	0x08004cc5
 8004c00:	08004cc5 	.word	0x08004cc5
 8004c04:	08004cc5 	.word	0x08004cc5
 8004c08:	08004cc5 	.word	0x08004cc5
 8004c0c:	08004cc5 	.word	0x08004cc5
 8004c10:	08004c9d 	.word	0x08004c9d
 8004c14:	08004cc5 	.word	0x08004cc5
 8004c18:	08004cc5 	.word	0x08004cc5
 8004c1c:	08004cc5 	.word	0x08004cc5
 8004c20:	08004cc5 	.word	0x08004cc5
 8004c24:	08004cc5 	.word	0x08004cc5
 8004c28:	08004cc5 	.word	0x08004cc5
 8004c2c:	08004cc5 	.word	0x08004cc5
 8004c30:	08004ca5 	.word	0x08004ca5
 8004c34:	08004cc5 	.word	0x08004cc5
 8004c38:	08004cc5 	.word	0x08004cc5
 8004c3c:	08004cc5 	.word	0x08004cc5
 8004c40:	08004cc5 	.word	0x08004cc5
 8004c44:	08004cc5 	.word	0x08004cc5
 8004c48:	08004cc5 	.word	0x08004cc5
 8004c4c:	08004cc5 	.word	0x08004cc5
 8004c50:	08004cad 	.word	0x08004cad
 8004c54:	08004cc5 	.word	0x08004cc5
 8004c58:	08004cc5 	.word	0x08004cc5
 8004c5c:	08004cc5 	.word	0x08004cc5
 8004c60:	08004cc5 	.word	0x08004cc5
 8004c64:	08004cc5 	.word	0x08004cc5
 8004c68:	08004cc5 	.word	0x08004cc5
 8004c6c:	08004cc5 	.word	0x08004cc5
 8004c70:	08004cb5 	.word	0x08004cb5
 8004c74:	08004cc5 	.word	0x08004cc5
 8004c78:	08004cc5 	.word	0x08004cc5
 8004c7c:	08004cc5 	.word	0x08004cc5
 8004c80:	08004cc5 	.word	0x08004cc5
 8004c84:	08004cc5 	.word	0x08004cc5
 8004c88:	08004cc5 	.word	0x08004cc5
 8004c8c:	08004cc5 	.word	0x08004cc5
 8004c90:	08004cbd 	.word	0x08004cbd
 8004c94:	2301      	movs	r3, #1
 8004c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c9a:	e0bc      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004c9c:	2304      	movs	r3, #4
 8004c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ca2:	e0b8      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004ca4:	2308      	movs	r3, #8
 8004ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004caa:	e0b4      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004cac:	2310      	movs	r3, #16
 8004cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cb2:	e0b0      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004cb4:	2320      	movs	r3, #32
 8004cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cba:	e0ac      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004cbc:	2340      	movs	r3, #64	@ 0x40
 8004cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cc2:	e0a8      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004cc4:	2380      	movs	r3, #128	@ 0x80
 8004cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cca:	e0a4      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a8f      	ldr	r2, [pc, #572]	@ (8004f10 <UART_SetConfig+0x6a0>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d130      	bne.n	8004d38 <UART_SetConfig+0x4c8>
 8004cd6:	4b8d      	ldr	r3, [pc, #564]	@ (8004f0c <UART_SetConfig+0x69c>)
 8004cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	2b05      	cmp	r3, #5
 8004ce0:	d826      	bhi.n	8004d30 <UART_SetConfig+0x4c0>
 8004ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce8 <UART_SetConfig+0x478>)
 8004ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce8:	08004d01 	.word	0x08004d01
 8004cec:	08004d09 	.word	0x08004d09
 8004cf0:	08004d11 	.word	0x08004d11
 8004cf4:	08004d19 	.word	0x08004d19
 8004cf8:	08004d21 	.word	0x08004d21
 8004cfc:	08004d29 	.word	0x08004d29
 8004d00:	2300      	movs	r3, #0
 8004d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d06:	e086      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004d08:	2304      	movs	r3, #4
 8004d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d0e:	e082      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004d10:	2308      	movs	r3, #8
 8004d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d16:	e07e      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004d18:	2310      	movs	r3, #16
 8004d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d1e:	e07a      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004d20:	2320      	movs	r3, #32
 8004d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d26:	e076      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004d28:	2340      	movs	r3, #64	@ 0x40
 8004d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d2e:	e072      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004d30:	2380      	movs	r3, #128	@ 0x80
 8004d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d36:	e06e      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a75      	ldr	r2, [pc, #468]	@ (8004f14 <UART_SetConfig+0x6a4>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d130      	bne.n	8004da4 <UART_SetConfig+0x534>
 8004d42:	4b72      	ldr	r3, [pc, #456]	@ (8004f0c <UART_SetConfig+0x69c>)
 8004d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	2b05      	cmp	r3, #5
 8004d4c:	d826      	bhi.n	8004d9c <UART_SetConfig+0x52c>
 8004d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d54 <UART_SetConfig+0x4e4>)
 8004d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d54:	08004d6d 	.word	0x08004d6d
 8004d58:	08004d75 	.word	0x08004d75
 8004d5c:	08004d7d 	.word	0x08004d7d
 8004d60:	08004d85 	.word	0x08004d85
 8004d64:	08004d8d 	.word	0x08004d8d
 8004d68:	08004d95 	.word	0x08004d95
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d72:	e050      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004d74:	2304      	movs	r3, #4
 8004d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d7a:	e04c      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004d7c:	2308      	movs	r3, #8
 8004d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d82:	e048      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004d84:	2310      	movs	r3, #16
 8004d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d8a:	e044      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004d8c:	2320      	movs	r3, #32
 8004d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d92:	e040      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004d94:	2340      	movs	r3, #64	@ 0x40
 8004d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d9a:	e03c      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004d9c:	2380      	movs	r3, #128	@ 0x80
 8004d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004da2:	e038      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a5b      	ldr	r2, [pc, #364]	@ (8004f18 <UART_SetConfig+0x6a8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d130      	bne.n	8004e10 <UART_SetConfig+0x5a0>
 8004dae:	4b57      	ldr	r3, [pc, #348]	@ (8004f0c <UART_SetConfig+0x69c>)
 8004db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	2b05      	cmp	r3, #5
 8004db8:	d826      	bhi.n	8004e08 <UART_SetConfig+0x598>
 8004dba:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc0 <UART_SetConfig+0x550>)
 8004dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc0:	08004dd9 	.word	0x08004dd9
 8004dc4:	08004de1 	.word	0x08004de1
 8004dc8:	08004de9 	.word	0x08004de9
 8004dcc:	08004df1 	.word	0x08004df1
 8004dd0:	08004df9 	.word	0x08004df9
 8004dd4:	08004e01 	.word	0x08004e01
 8004dd8:	2302      	movs	r3, #2
 8004dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dde:	e01a      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004de0:	2304      	movs	r3, #4
 8004de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004de6:	e016      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004de8:	2308      	movs	r3, #8
 8004dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dee:	e012      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004df0:	2310      	movs	r3, #16
 8004df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004df6:	e00e      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004df8:	2320      	movs	r3, #32
 8004dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dfe:	e00a      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004e00:	2340      	movs	r3, #64	@ 0x40
 8004e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e06:	e006      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004e08:	2380      	movs	r3, #128	@ 0x80
 8004e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e0e:	e002      	b.n	8004e16 <UART_SetConfig+0x5a6>
 8004e10:	2380      	movs	r3, #128	@ 0x80
 8004e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a3f      	ldr	r2, [pc, #252]	@ (8004f18 <UART_SetConfig+0x6a8>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	f040 80f8 	bne.w	8005012 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e22:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004e26:	2b20      	cmp	r3, #32
 8004e28:	dc46      	bgt.n	8004eb8 <UART_SetConfig+0x648>
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	f2c0 8082 	blt.w	8004f34 <UART_SetConfig+0x6c4>
 8004e30:	3b02      	subs	r3, #2
 8004e32:	2b1e      	cmp	r3, #30
 8004e34:	d87e      	bhi.n	8004f34 <UART_SetConfig+0x6c4>
 8004e36:	a201      	add	r2, pc, #4	@ (adr r2, 8004e3c <UART_SetConfig+0x5cc>)
 8004e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3c:	08004ebf 	.word	0x08004ebf
 8004e40:	08004f35 	.word	0x08004f35
 8004e44:	08004ec7 	.word	0x08004ec7
 8004e48:	08004f35 	.word	0x08004f35
 8004e4c:	08004f35 	.word	0x08004f35
 8004e50:	08004f35 	.word	0x08004f35
 8004e54:	08004ed7 	.word	0x08004ed7
 8004e58:	08004f35 	.word	0x08004f35
 8004e5c:	08004f35 	.word	0x08004f35
 8004e60:	08004f35 	.word	0x08004f35
 8004e64:	08004f35 	.word	0x08004f35
 8004e68:	08004f35 	.word	0x08004f35
 8004e6c:	08004f35 	.word	0x08004f35
 8004e70:	08004f35 	.word	0x08004f35
 8004e74:	08004ee7 	.word	0x08004ee7
 8004e78:	08004f35 	.word	0x08004f35
 8004e7c:	08004f35 	.word	0x08004f35
 8004e80:	08004f35 	.word	0x08004f35
 8004e84:	08004f35 	.word	0x08004f35
 8004e88:	08004f35 	.word	0x08004f35
 8004e8c:	08004f35 	.word	0x08004f35
 8004e90:	08004f35 	.word	0x08004f35
 8004e94:	08004f35 	.word	0x08004f35
 8004e98:	08004f35 	.word	0x08004f35
 8004e9c:	08004f35 	.word	0x08004f35
 8004ea0:	08004f35 	.word	0x08004f35
 8004ea4:	08004f35 	.word	0x08004f35
 8004ea8:	08004f35 	.word	0x08004f35
 8004eac:	08004f35 	.word	0x08004f35
 8004eb0:	08004f35 	.word	0x08004f35
 8004eb4:	08004f27 	.word	0x08004f27
 8004eb8:	2b40      	cmp	r3, #64	@ 0x40
 8004eba:	d037      	beq.n	8004f2c <UART_SetConfig+0x6bc>
 8004ebc:	e03a      	b.n	8004f34 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004ebe:	f7fe ff0f 	bl	8003ce0 <HAL_RCCEx_GetD3PCLK1Freq>
 8004ec2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004ec4:	e03c      	b.n	8004f40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ec6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7fe ff1e 	bl	8003d0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ed4:	e034      	b.n	8004f40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ed6:	f107 0318 	add.w	r3, r7, #24
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff f86a 	bl	8003fb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ee4:	e02c      	b.n	8004f40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ee6:	4b09      	ldr	r3, [pc, #36]	@ (8004f0c <UART_SetConfig+0x69c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d016      	beq.n	8004f20 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004ef2:	4b06      	ldr	r3, [pc, #24]	@ (8004f0c <UART_SetConfig+0x69c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	08db      	lsrs	r3, r3, #3
 8004ef8:	f003 0303 	and.w	r3, r3, #3
 8004efc:	4a07      	ldr	r2, [pc, #28]	@ (8004f1c <UART_SetConfig+0x6ac>)
 8004efe:	fa22 f303 	lsr.w	r3, r2, r3
 8004f02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f04:	e01c      	b.n	8004f40 <UART_SetConfig+0x6d0>
 8004f06:	bf00      	nop
 8004f08:	40011400 	.word	0x40011400
 8004f0c:	58024400 	.word	0x58024400
 8004f10:	40007800 	.word	0x40007800
 8004f14:	40007c00 	.word	0x40007c00
 8004f18:	58000c00 	.word	0x58000c00
 8004f1c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004f20:	4b9d      	ldr	r3, [pc, #628]	@ (8005198 <UART_SetConfig+0x928>)
 8004f22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f24:	e00c      	b.n	8004f40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f26:	4b9d      	ldr	r3, [pc, #628]	@ (800519c <UART_SetConfig+0x92c>)
 8004f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f2a:	e009      	b.n	8004f40 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f2c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f32:	e005      	b.n	8004f40 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004f3e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 81de 	beq.w	8005304 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4c:	4a94      	ldr	r2, [pc, #592]	@ (80051a0 <UART_SetConfig+0x930>)
 8004f4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f52:	461a      	mov	r2, r3
 8004f54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f56:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f5a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	4613      	mov	r3, r2
 8004f62:	005b      	lsls	r3, r3, #1
 8004f64:	4413      	add	r3, r2
 8004f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d305      	bcc.n	8004f78 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d903      	bls.n	8004f80 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004f7e:	e1c1      	b.n	8005304 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f82:	2200      	movs	r2, #0
 8004f84:	60bb      	str	r3, [r7, #8]
 8004f86:	60fa      	str	r2, [r7, #12]
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f8c:	4a84      	ldr	r2, [pc, #528]	@ (80051a0 <UART_SetConfig+0x930>)
 8004f8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	2200      	movs	r2, #0
 8004f96:	603b      	str	r3, [r7, #0]
 8004f98:	607a      	str	r2, [r7, #4]
 8004f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f9e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fa2:	f7fb f99d 	bl	80002e0 <__aeabi_uldivmod>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4610      	mov	r0, r2
 8004fac:	4619      	mov	r1, r3
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	020b      	lsls	r3, r1, #8
 8004fb8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004fbc:	0202      	lsls	r2, r0, #8
 8004fbe:	6979      	ldr	r1, [r7, #20]
 8004fc0:	6849      	ldr	r1, [r1, #4]
 8004fc2:	0849      	lsrs	r1, r1, #1
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	4605      	mov	r5, r0
 8004fca:	eb12 0804 	adds.w	r8, r2, r4
 8004fce:	eb43 0905 	adc.w	r9, r3, r5
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	469a      	mov	sl, r3
 8004fda:	4693      	mov	fp, r2
 8004fdc:	4652      	mov	r2, sl
 8004fde:	465b      	mov	r3, fp
 8004fe0:	4640      	mov	r0, r8
 8004fe2:	4649      	mov	r1, r9
 8004fe4:	f7fb f97c 	bl	80002e0 <__aeabi_uldivmod>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	460b      	mov	r3, r1
 8004fec:	4613      	mov	r3, r2
 8004fee:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ff6:	d308      	bcc.n	800500a <UART_SetConfig+0x79a>
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ffa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ffe:	d204      	bcs.n	800500a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005006:	60da      	str	r2, [r3, #12]
 8005008:	e17c      	b.n	8005304 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005010:	e178      	b.n	8005304 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800501a:	f040 80c5 	bne.w	80051a8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800501e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005022:	2b20      	cmp	r3, #32
 8005024:	dc48      	bgt.n	80050b8 <UART_SetConfig+0x848>
 8005026:	2b00      	cmp	r3, #0
 8005028:	db7b      	blt.n	8005122 <UART_SetConfig+0x8b2>
 800502a:	2b20      	cmp	r3, #32
 800502c:	d879      	bhi.n	8005122 <UART_SetConfig+0x8b2>
 800502e:	a201      	add	r2, pc, #4	@ (adr r2, 8005034 <UART_SetConfig+0x7c4>)
 8005030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005034:	080050bf 	.word	0x080050bf
 8005038:	080050c7 	.word	0x080050c7
 800503c:	08005123 	.word	0x08005123
 8005040:	08005123 	.word	0x08005123
 8005044:	080050cf 	.word	0x080050cf
 8005048:	08005123 	.word	0x08005123
 800504c:	08005123 	.word	0x08005123
 8005050:	08005123 	.word	0x08005123
 8005054:	080050df 	.word	0x080050df
 8005058:	08005123 	.word	0x08005123
 800505c:	08005123 	.word	0x08005123
 8005060:	08005123 	.word	0x08005123
 8005064:	08005123 	.word	0x08005123
 8005068:	08005123 	.word	0x08005123
 800506c:	08005123 	.word	0x08005123
 8005070:	08005123 	.word	0x08005123
 8005074:	080050ef 	.word	0x080050ef
 8005078:	08005123 	.word	0x08005123
 800507c:	08005123 	.word	0x08005123
 8005080:	08005123 	.word	0x08005123
 8005084:	08005123 	.word	0x08005123
 8005088:	08005123 	.word	0x08005123
 800508c:	08005123 	.word	0x08005123
 8005090:	08005123 	.word	0x08005123
 8005094:	08005123 	.word	0x08005123
 8005098:	08005123 	.word	0x08005123
 800509c:	08005123 	.word	0x08005123
 80050a0:	08005123 	.word	0x08005123
 80050a4:	08005123 	.word	0x08005123
 80050a8:	08005123 	.word	0x08005123
 80050ac:	08005123 	.word	0x08005123
 80050b0:	08005123 	.word	0x08005123
 80050b4:	08005115 	.word	0x08005115
 80050b8:	2b40      	cmp	r3, #64	@ 0x40
 80050ba:	d02e      	beq.n	800511a <UART_SetConfig+0x8aa>
 80050bc:	e031      	b.n	8005122 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050be:	f7fd fb99 	bl	80027f4 <HAL_RCC_GetPCLK1Freq>
 80050c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050c4:	e033      	b.n	800512e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050c6:	f7fd fbab 	bl	8002820 <HAL_RCC_GetPCLK2Freq>
 80050ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050cc:	e02f      	b.n	800512e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fe fe1a 	bl	8003d0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050dc:	e027      	b.n	800512e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050de:	f107 0318 	add.w	r3, r7, #24
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fe ff66 	bl	8003fb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050ec:	e01f      	b.n	800512e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050ee:	4b2d      	ldr	r3, [pc, #180]	@ (80051a4 <UART_SetConfig+0x934>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d009      	beq.n	800510e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050fa:	4b2a      	ldr	r3, [pc, #168]	@ (80051a4 <UART_SetConfig+0x934>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	08db      	lsrs	r3, r3, #3
 8005100:	f003 0303 	and.w	r3, r3, #3
 8005104:	4a24      	ldr	r2, [pc, #144]	@ (8005198 <UART_SetConfig+0x928>)
 8005106:	fa22 f303 	lsr.w	r3, r2, r3
 800510a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800510c:	e00f      	b.n	800512e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800510e:	4b22      	ldr	r3, [pc, #136]	@ (8005198 <UART_SetConfig+0x928>)
 8005110:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005112:	e00c      	b.n	800512e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005114:	4b21      	ldr	r3, [pc, #132]	@ (800519c <UART_SetConfig+0x92c>)
 8005116:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005118:	e009      	b.n	800512e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800511a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800511e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005120:	e005      	b.n	800512e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005122:	2300      	movs	r3, #0
 8005124:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800512c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800512e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 80e7 	beq.w	8005304 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513a:	4a19      	ldr	r2, [pc, #100]	@ (80051a0 <UART_SetConfig+0x930>)
 800513c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005140:	461a      	mov	r2, r3
 8005142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005144:	fbb3 f3f2 	udiv	r3, r3, r2
 8005148:	005a      	lsls	r2, r3, #1
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	085b      	lsrs	r3, r3, #1
 8005150:	441a      	add	r2, r3
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	fbb2 f3f3 	udiv	r3, r2, r3
 800515a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800515c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515e:	2b0f      	cmp	r3, #15
 8005160:	d916      	bls.n	8005190 <UART_SetConfig+0x920>
 8005162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005164:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005168:	d212      	bcs.n	8005190 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800516a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800516c:	b29b      	uxth	r3, r3
 800516e:	f023 030f 	bic.w	r3, r3, #15
 8005172:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005176:	085b      	lsrs	r3, r3, #1
 8005178:	b29b      	uxth	r3, r3
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	b29a      	uxth	r2, r3
 8005180:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005182:	4313      	orrs	r3, r2
 8005184:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800518c:	60da      	str	r2, [r3, #12]
 800518e:	e0b9      	b.n	8005304 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005190:	2301      	movs	r3, #1
 8005192:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005196:	e0b5      	b.n	8005304 <UART_SetConfig+0xa94>
 8005198:	03d09000 	.word	0x03d09000
 800519c:	003d0900 	.word	0x003d0900
 80051a0:	080087f0 	.word	0x080087f0
 80051a4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80051a8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	dc49      	bgt.n	8005244 <UART_SetConfig+0x9d4>
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	db7c      	blt.n	80052ae <UART_SetConfig+0xa3e>
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	d87a      	bhi.n	80052ae <UART_SetConfig+0xa3e>
 80051b8:	a201      	add	r2, pc, #4	@ (adr r2, 80051c0 <UART_SetConfig+0x950>)
 80051ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051be:	bf00      	nop
 80051c0:	0800524b 	.word	0x0800524b
 80051c4:	08005253 	.word	0x08005253
 80051c8:	080052af 	.word	0x080052af
 80051cc:	080052af 	.word	0x080052af
 80051d0:	0800525b 	.word	0x0800525b
 80051d4:	080052af 	.word	0x080052af
 80051d8:	080052af 	.word	0x080052af
 80051dc:	080052af 	.word	0x080052af
 80051e0:	0800526b 	.word	0x0800526b
 80051e4:	080052af 	.word	0x080052af
 80051e8:	080052af 	.word	0x080052af
 80051ec:	080052af 	.word	0x080052af
 80051f0:	080052af 	.word	0x080052af
 80051f4:	080052af 	.word	0x080052af
 80051f8:	080052af 	.word	0x080052af
 80051fc:	080052af 	.word	0x080052af
 8005200:	0800527b 	.word	0x0800527b
 8005204:	080052af 	.word	0x080052af
 8005208:	080052af 	.word	0x080052af
 800520c:	080052af 	.word	0x080052af
 8005210:	080052af 	.word	0x080052af
 8005214:	080052af 	.word	0x080052af
 8005218:	080052af 	.word	0x080052af
 800521c:	080052af 	.word	0x080052af
 8005220:	080052af 	.word	0x080052af
 8005224:	080052af 	.word	0x080052af
 8005228:	080052af 	.word	0x080052af
 800522c:	080052af 	.word	0x080052af
 8005230:	080052af 	.word	0x080052af
 8005234:	080052af 	.word	0x080052af
 8005238:	080052af 	.word	0x080052af
 800523c:	080052af 	.word	0x080052af
 8005240:	080052a1 	.word	0x080052a1
 8005244:	2b40      	cmp	r3, #64	@ 0x40
 8005246:	d02e      	beq.n	80052a6 <UART_SetConfig+0xa36>
 8005248:	e031      	b.n	80052ae <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800524a:	f7fd fad3 	bl	80027f4 <HAL_RCC_GetPCLK1Freq>
 800524e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005250:	e033      	b.n	80052ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005252:	f7fd fae5 	bl	8002820 <HAL_RCC_GetPCLK2Freq>
 8005256:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005258:	e02f      	b.n	80052ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800525a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800525e:	4618      	mov	r0, r3
 8005260:	f7fe fd54 	bl	8003d0c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005268:	e027      	b.n	80052ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800526a:	f107 0318 	add.w	r3, r7, #24
 800526e:	4618      	mov	r0, r3
 8005270:	f7fe fea0 	bl	8003fb4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005278:	e01f      	b.n	80052ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800527a:	4b2d      	ldr	r3, [pc, #180]	@ (8005330 <UART_SetConfig+0xac0>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b00      	cmp	r3, #0
 8005284:	d009      	beq.n	800529a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005286:	4b2a      	ldr	r3, [pc, #168]	@ (8005330 <UART_SetConfig+0xac0>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	08db      	lsrs	r3, r3, #3
 800528c:	f003 0303 	and.w	r3, r3, #3
 8005290:	4a28      	ldr	r2, [pc, #160]	@ (8005334 <UART_SetConfig+0xac4>)
 8005292:	fa22 f303 	lsr.w	r3, r2, r3
 8005296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005298:	e00f      	b.n	80052ba <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800529a:	4b26      	ldr	r3, [pc, #152]	@ (8005334 <UART_SetConfig+0xac4>)
 800529c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800529e:	e00c      	b.n	80052ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80052a0:	4b25      	ldr	r3, [pc, #148]	@ (8005338 <UART_SetConfig+0xac8>)
 80052a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052a4:	e009      	b.n	80052ba <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80052aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052ac:	e005      	b.n	80052ba <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80052ae:	2300      	movs	r3, #0
 80052b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80052b8:	bf00      	nop
    }

    if (pclk != 0U)
 80052ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d021      	beq.n	8005304 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c4:	4a1d      	ldr	r2, [pc, #116]	@ (800533c <UART_SetConfig+0xacc>)
 80052c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052ca:	461a      	mov	r2, r3
 80052cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	085b      	lsrs	r3, r3, #1
 80052d8:	441a      	add	r2, r3
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e6:	2b0f      	cmp	r3, #15
 80052e8:	d909      	bls.n	80052fe <UART_SetConfig+0xa8e>
 80052ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052f0:	d205      	bcs.n	80052fe <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	60da      	str	r2, [r3, #12]
 80052fc:	e002      	b.n	8005304 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2201      	movs	r2, #1
 8005308:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	2201      	movs	r2, #1
 8005310:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	2200      	movs	r2, #0
 8005318:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2200      	movs	r2, #0
 800531e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005320:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005324:	4618      	mov	r0, r3
 8005326:	3748      	adds	r7, #72	@ 0x48
 8005328:	46bd      	mov	sp, r7
 800532a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800532e:	bf00      	nop
 8005330:	58024400 	.word	0x58024400
 8005334:	03d09000 	.word	0x03d09000
 8005338:	003d0900 	.word	0x003d0900
 800533c:	080087f0 	.word	0x080087f0

08005340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800534c:	f003 0308 	and.w	r3, r3, #8
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00a      	beq.n	80053ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01a      	beq.n	8005456 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800543a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800543e:	d10a      	bne.n	8005456 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800545a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	605a      	str	r2, [r3, #4]
  }
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b098      	sub	sp, #96	@ 0x60
 8005488:	af02      	add	r7, sp, #8
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005494:	f7fb fe3c 	bl	8001110 <HAL_GetTick>
 8005498:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d12f      	bne.n	8005508 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80054b0:	2200      	movs	r2, #0
 80054b2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f88e 	bl	80055d8 <UART_WaitOnFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d022      	beq.n	8005508 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ca:	e853 3f00 	ldrex	r3, [r3]
 80054ce:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	461a      	mov	r2, r3
 80054de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80054e2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054e8:	e841 2300 	strex	r3, r2, [r1]
 80054ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e6      	bne.n	80054c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e063      	b.n	80055d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b04      	cmp	r3, #4
 8005514:	d149      	bne.n	80055aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005516:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800551e:	2200      	movs	r2, #0
 8005520:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f857 	bl	80055d8 <UART_WaitOnFlagUntilTimeout>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d03c      	beq.n	80055aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	623b      	str	r3, [r7, #32]
   return(result);
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005544:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	461a      	mov	r2, r3
 800554c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800554e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005550:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005552:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005554:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800555c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1e6      	bne.n	8005530 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	3308      	adds	r3, #8
 8005568:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	60fb      	str	r3, [r7, #12]
   return(result);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	f023 0301 	bic.w	r3, r3, #1
 8005578:	64bb      	str	r3, [r7, #72]	@ 0x48
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	3308      	adds	r3, #8
 8005580:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005582:	61fa      	str	r2, [r7, #28]
 8005584:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	69b9      	ldr	r1, [r7, #24]
 8005588:	69fa      	ldr	r2, [r7, #28]
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	617b      	str	r3, [r7, #20]
   return(result);
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e5      	bne.n	8005562 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e012      	b.n	80055d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2220      	movs	r2, #32
 80055b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055ce:	2300      	movs	r3, #0
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3758      	adds	r7, #88	@ 0x58
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	603b      	str	r3, [r7, #0]
 80055e4:	4613      	mov	r3, r2
 80055e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055e8:	e04f      	b.n	800568a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f0:	d04b      	beq.n	800568a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055f2:	f7fb fd8d 	bl	8001110 <HAL_GetTick>
 80055f6:	4602      	mov	r2, r0
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	1ad3      	subs	r3, r2, r3
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d302      	bcc.n	8005608 <UART_WaitOnFlagUntilTimeout+0x30>
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d101      	bne.n	800560c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005608:	2303      	movs	r3, #3
 800560a:	e04e      	b.n	80056aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	d037      	beq.n	800568a <UART_WaitOnFlagUntilTimeout+0xb2>
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b80      	cmp	r3, #128	@ 0x80
 800561e:	d034      	beq.n	800568a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2b40      	cmp	r3, #64	@ 0x40
 8005624:	d031      	beq.n	800568a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	f003 0308 	and.w	r3, r3, #8
 8005630:	2b08      	cmp	r3, #8
 8005632:	d110      	bne.n	8005656 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2208      	movs	r2, #8
 800563a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800563c:	68f8      	ldr	r0, [r7, #12]
 800563e:	f000 f839 	bl	80056b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2208      	movs	r2, #8
 8005646:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e029      	b.n	80056aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	69db      	ldr	r3, [r3, #28]
 800565c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005660:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005664:	d111      	bne.n	800568a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800566e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 f81f 	bl	80056b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2220      	movs	r2, #32
 800567a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e00f      	b.n	80056aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69da      	ldr	r2, [r3, #28]
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	4013      	ands	r3, r2
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	429a      	cmp	r2, r3
 8005698:	bf0c      	ite	eq
 800569a:	2301      	moveq	r3, #1
 800569c:	2300      	movne	r3, #0
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	461a      	mov	r2, r3
 80056a2:	79fb      	ldrb	r3, [r7, #7]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d0a0      	beq.n	80055ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
	...

080056b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b095      	sub	sp, #84	@ 0x54
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	461a      	mov	r2, r3
 80056d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056da:	643b      	str	r3, [r7, #64]	@ 0x40
 80056dc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e6      	bne.n	80056bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	3308      	adds	r3, #8
 80056f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80056fe:	69fa      	ldr	r2, [r7, #28]
 8005700:	4b1e      	ldr	r3, [pc, #120]	@ (800577c <UART_EndRxTransfer+0xc8>)
 8005702:	4013      	ands	r3, r2
 8005704:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3308      	adds	r3, #8
 800570c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800570e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005710:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005714:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800571c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e5      	bne.n	80056ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005726:	2b01      	cmp	r3, #1
 8005728:	d118      	bne.n	800575c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	e853 3f00 	ldrex	r3, [r3]
 8005736:	60bb      	str	r3, [r7, #8]
   return(result);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f023 0310 	bic.w	r3, r3, #16
 800573e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	461a      	mov	r2, r3
 8005746:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005748:	61bb      	str	r3, [r7, #24]
 800574a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574c:	6979      	ldr	r1, [r7, #20]
 800574e:	69ba      	ldr	r2, [r7, #24]
 8005750:	e841 2300 	strex	r3, r2, [r1]
 8005754:	613b      	str	r3, [r7, #16]
   return(result);
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1e6      	bne.n	800572a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2220      	movs	r2, #32
 8005760:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005770:	bf00      	nop
 8005772:	3754      	adds	r7, #84	@ 0x54
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	effffffe 	.word	0xeffffffe

08005780 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800578e:	2b01      	cmp	r3, #1
 8005790:	d101      	bne.n	8005796 <HAL_UARTEx_DisableFifoMode+0x16>
 8005792:	2302      	movs	r3, #2
 8005794:	e027      	b.n	80057e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2224      	movs	r2, #36	@ 0x24
 80057a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f022 0201 	bic.w	r2, r2, #1
 80057bc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80057c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80057e4:	2300      	movs	r3, #0
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b084      	sub	sp, #16
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005802:	2b01      	cmp	r3, #1
 8005804:	d101      	bne.n	800580a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005806:	2302      	movs	r3, #2
 8005808:	e02d      	b.n	8005866 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2224      	movs	r2, #36	@ 0x24
 8005816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0201 	bic.w	r2, r2, #1
 8005830:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	683a      	ldr	r2, [r7, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f850 	bl	80058ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2220      	movs	r2, #32
 8005858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b084      	sub	sp, #16
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800587e:	2b01      	cmp	r3, #1
 8005880:	d101      	bne.n	8005886 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005882:	2302      	movs	r3, #2
 8005884:	e02d      	b.n	80058e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2224      	movs	r2, #36	@ 0x24
 8005892:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0201 	bic.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f812 	bl	80058ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80058e0:	2300      	movs	r3, #0
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3710      	adds	r7, #16
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
	...

080058ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d108      	bne.n	800590e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800590c:	e031      	b.n	8005972 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800590e:	2310      	movs	r3, #16
 8005910:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005912:	2310      	movs	r3, #16
 8005914:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	0e5b      	lsrs	r3, r3, #25
 800591e:	b2db      	uxtb	r3, r3
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	0f5b      	lsrs	r3, r3, #29
 800592e:	b2db      	uxtb	r3, r3
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005936:	7bbb      	ldrb	r3, [r7, #14]
 8005938:	7b3a      	ldrb	r2, [r7, #12]
 800593a:	4911      	ldr	r1, [pc, #68]	@ (8005980 <UARTEx_SetNbDataToProcess+0x94>)
 800593c:	5c8a      	ldrb	r2, [r1, r2]
 800593e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005942:	7b3a      	ldrb	r2, [r7, #12]
 8005944:	490f      	ldr	r1, [pc, #60]	@ (8005984 <UARTEx_SetNbDataToProcess+0x98>)
 8005946:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005948:	fb93 f3f2 	sdiv	r3, r3, r2
 800594c:	b29a      	uxth	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005954:	7bfb      	ldrb	r3, [r7, #15]
 8005956:	7b7a      	ldrb	r2, [r7, #13]
 8005958:	4909      	ldr	r1, [pc, #36]	@ (8005980 <UARTEx_SetNbDataToProcess+0x94>)
 800595a:	5c8a      	ldrb	r2, [r1, r2]
 800595c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005960:	7b7a      	ldrb	r2, [r7, #13]
 8005962:	4908      	ldr	r1, [pc, #32]	@ (8005984 <UARTEx_SetNbDataToProcess+0x98>)
 8005964:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005966:	fb93 f3f2 	sdiv	r3, r3, r2
 800596a:	b29a      	uxth	r2, r3
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005972:	bf00      	nop
 8005974:	3714      	adds	r7, #20
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	08008808 	.word	0x08008808
 8005984:	08008810 	.word	0x08008810

08005988 <__NVIC_SetPriority>:
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	4603      	mov	r3, r0
 8005990:	6039      	str	r1, [r7, #0]
 8005992:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005994:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005998:	2b00      	cmp	r3, #0
 800599a:	db0a      	blt.n	80059b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	490c      	ldr	r1, [pc, #48]	@ (80059d4 <__NVIC_SetPriority+0x4c>)
 80059a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059a6:	0112      	lsls	r2, r2, #4
 80059a8:	b2d2      	uxtb	r2, r2
 80059aa:	440b      	add	r3, r1
 80059ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80059b0:	e00a      	b.n	80059c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	4908      	ldr	r1, [pc, #32]	@ (80059d8 <__NVIC_SetPriority+0x50>)
 80059b8:	88fb      	ldrh	r3, [r7, #6]
 80059ba:	f003 030f 	and.w	r3, r3, #15
 80059be:	3b04      	subs	r3, #4
 80059c0:	0112      	lsls	r2, r2, #4
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	440b      	add	r3, r1
 80059c6:	761a      	strb	r2, [r3, #24]
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr
 80059d4:	e000e100 	.word	0xe000e100
 80059d8:	e000ed00 	.word	0xe000ed00

080059dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80059dc:	b580      	push	{r7, lr}
 80059de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80059e0:	2100      	movs	r1, #0
 80059e2:	f06f 0004 	mvn.w	r0, #4
 80059e6:	f7ff ffcf 	bl	8005988 <__NVIC_SetPriority>
#endif
}
 80059ea:	bf00      	nop
 80059ec:	bd80      	pop	{r7, pc}
	...

080059f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059f6:	f3ef 8305 	mrs	r3, IPSR
 80059fa:	603b      	str	r3, [r7, #0]
  return(result);
 80059fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005a02:	f06f 0305 	mvn.w	r3, #5
 8005a06:	607b      	str	r3, [r7, #4]
 8005a08:	e00c      	b.n	8005a24 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005a0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005a34 <osKernelInitialize+0x44>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d105      	bne.n	8005a1e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005a12:	4b08      	ldr	r3, [pc, #32]	@ (8005a34 <osKernelInitialize+0x44>)
 8005a14:	2201      	movs	r2, #1
 8005a16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	607b      	str	r3, [r7, #4]
 8005a1c:	e002      	b.n	8005a24 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a24:	687b      	ldr	r3, [r7, #4]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	24000170 	.word	0x24000170

08005a38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a3e:	f3ef 8305 	mrs	r3, IPSR
 8005a42:	603b      	str	r3, [r7, #0]
  return(result);
 8005a44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005a4a:	f06f 0305 	mvn.w	r3, #5
 8005a4e:	607b      	str	r3, [r7, #4]
 8005a50:	e010      	b.n	8005a74 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005a52:	4b0b      	ldr	r3, [pc, #44]	@ (8005a80 <osKernelStart+0x48>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d109      	bne.n	8005a6e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005a5a:	f7ff ffbf 	bl	80059dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005a5e:	4b08      	ldr	r3, [pc, #32]	@ (8005a80 <osKernelStart+0x48>)
 8005a60:	2202      	movs	r2, #2
 8005a62:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005a64:	f001 fd6c 	bl	8007540 <vTaskStartScheduler>
      stat = osOK;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	607b      	str	r3, [r7, #4]
 8005a6c:	e002      	b.n	8005a74 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a74:	687b      	ldr	r3, [r7, #4]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	24000170 	.word	0x24000170

08005a84 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b08e      	sub	sp, #56	@ 0x38
 8005a88:	af04      	add	r7, sp, #16
 8005a8a:	60f8      	str	r0, [r7, #12]
 8005a8c:	60b9      	str	r1, [r7, #8]
 8005a8e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005a90:	2300      	movs	r3, #0
 8005a92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a94:	f3ef 8305 	mrs	r3, IPSR
 8005a98:	617b      	str	r3, [r7, #20]
  return(result);
 8005a9a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d17e      	bne.n	8005b9e <osThreadNew+0x11a>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d07b      	beq.n	8005b9e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005aa6:	2380      	movs	r3, #128	@ 0x80
 8005aa8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005aaa:	2318      	movs	r3, #24
 8005aac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8005ab6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d045      	beq.n	8005b4a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <osThreadNew+0x48>
        name = attr->name;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d008      	beq.n	8005af2 <osThreadNew+0x6e>
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	2b38      	cmp	r3, #56	@ 0x38
 8005ae4:	d805      	bhi.n	8005af2 <osThreadNew+0x6e>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <osThreadNew+0x72>
        return (NULL);
 8005af2:	2300      	movs	r3, #0
 8005af4:	e054      	b.n	8005ba0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	695b      	ldr	r3, [r3, #20]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d003      	beq.n	8005b06 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	089b      	lsrs	r3, r3, #2
 8005b04:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00e      	beq.n	8005b2c <osThreadNew+0xa8>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	2b5b      	cmp	r3, #91	@ 0x5b
 8005b14:	d90a      	bls.n	8005b2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d006      	beq.n	8005b2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	695b      	ldr	r3, [r3, #20]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <osThreadNew+0xa8>
        mem = 1;
 8005b26:	2301      	movs	r3, #1
 8005b28:	61bb      	str	r3, [r7, #24]
 8005b2a:	e010      	b.n	8005b4e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d10c      	bne.n	8005b4e <osThreadNew+0xca>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d108      	bne.n	8005b4e <osThreadNew+0xca>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d104      	bne.n	8005b4e <osThreadNew+0xca>
          mem = 0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	61bb      	str	r3, [r7, #24]
 8005b48:	e001      	b.n	8005b4e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b4e:	69bb      	ldr	r3, [r7, #24]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d110      	bne.n	8005b76 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b5c:	9202      	str	r2, [sp, #8]
 8005b5e:	9301      	str	r3, [sp, #4]
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	6a3a      	ldr	r2, [r7, #32]
 8005b68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f001 fb0c 	bl	8007188 <xTaskCreateStatic>
 8005b70:	4603      	mov	r3, r0
 8005b72:	613b      	str	r3, [r7, #16]
 8005b74:	e013      	b.n	8005b9e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d110      	bne.n	8005b9e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	f107 0310 	add.w	r3, r7, #16
 8005b84:	9301      	str	r3, [sp, #4]
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	9300      	str	r3, [sp, #0]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f001 fb5a 	bl	8007248 <xTaskCreate>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d001      	beq.n	8005b9e <osThreadNew+0x11a>
            hTask = NULL;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b9e:	693b      	ldr	r3, [r7, #16]
}
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3728      	adds	r7, #40	@ 0x28
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}

08005ba8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bb0:	f3ef 8305 	mrs	r3, IPSR
 8005bb4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d003      	beq.n	8005bc4 <osDelay+0x1c>
    stat = osErrorISR;
 8005bbc:	f06f 0305 	mvn.w	r3, #5
 8005bc0:	60fb      	str	r3, [r7, #12]
 8005bc2:	e007      	b.n	8005bd4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f001 fc80 	bl	80074d4 <vTaskDelay>
    }
  }

  return (stat);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3710      	adds	r7, #16
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b08a      	sub	sp, #40	@ 0x28
 8005be2:	af02      	add	r7, sp, #8
 8005be4:	60f8      	str	r0, [r7, #12]
 8005be6:	60b9      	str	r1, [r7, #8]
 8005be8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005bea:	2300      	movs	r3, #0
 8005bec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bee:	f3ef 8305 	mrs	r3, IPSR
 8005bf2:	613b      	str	r3, [r7, #16]
  return(result);
 8005bf4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d15f      	bne.n	8005cba <osMessageQueueNew+0xdc>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d05c      	beq.n	8005cba <osMessageQueueNew+0xdc>
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d059      	beq.n	8005cba <osMessageQueueNew+0xdc>
    mem = -1;
 8005c06:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d029      	beq.n	8005c66 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d012      	beq.n	8005c40 <osMessageQueueNew+0x62>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	2b4f      	cmp	r3, #79	@ 0x4f
 8005c20:	d90e      	bls.n	8005c40 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	695a      	ldr	r2, [r3, #20]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	68b9      	ldr	r1, [r7, #8]
 8005c32:	fb01 f303 	mul.w	r3, r1, r3
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d302      	bcc.n	8005c40 <osMessageQueueNew+0x62>
        mem = 1;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	61bb      	str	r3, [r7, #24]
 8005c3e:	e014      	b.n	8005c6a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d110      	bne.n	8005c6a <osMessageQueueNew+0x8c>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	68db      	ldr	r3, [r3, #12]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10c      	bne.n	8005c6a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d108      	bne.n	8005c6a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	695b      	ldr	r3, [r3, #20]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d104      	bne.n	8005c6a <osMessageQueueNew+0x8c>
          mem = 0;
 8005c60:	2300      	movs	r3, #0
 8005c62:	61bb      	str	r3, [r7, #24]
 8005c64:	e001      	b.n	8005c6a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005c66:	2300      	movs	r3, #0
 8005c68:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d10b      	bne.n	8005c88 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691a      	ldr	r2, [r3, #16]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	2100      	movs	r1, #0
 8005c7a:	9100      	str	r1, [sp, #0]
 8005c7c:	68b9      	ldr	r1, [r7, #8]
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 fdb6 	bl	80067f0 <xQueueGenericCreateStatic>
 8005c84:	61f8      	str	r0, [r7, #28]
 8005c86:	e008      	b.n	8005c9a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d105      	bne.n	8005c9a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005c8e:	2200      	movs	r2, #0
 8005c90:	68b9      	ldr	r1, [r7, #8]
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 fe29 	bl	80068ea <xQueueGenericCreate>
 8005c98:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00c      	beq.n	8005cba <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d003      	beq.n	8005cae <osMessageQueueNew+0xd0>
        name = attr->name;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	e001      	b.n	8005cb2 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005cb2:	6979      	ldr	r1, [r7, #20]
 8005cb4:	69f8      	ldr	r0, [r7, #28]
 8005cb6:	f001 fa09 	bl	80070cc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005cba:	69fb      	ldr	r3, [r7, #28]
}
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	3720      	adds	r7, #32
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	bd80      	pop	{r7, pc}

08005cc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	4a07      	ldr	r2, [pc, #28]	@ (8005cf0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005cd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	4a06      	ldr	r2, [pc, #24]	@ (8005cf4 <vApplicationGetIdleTaskMemory+0x30>)
 8005cda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2280      	movs	r2, #128	@ 0x80
 8005ce0:	601a      	str	r2, [r3, #0]
}
 8005ce2:	bf00      	nop
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	24000174 	.word	0x24000174
 8005cf4:	240001d0 	.word	0x240001d0

08005cf8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	4a07      	ldr	r2, [pc, #28]	@ (8005d24 <vApplicationGetTimerTaskMemory+0x2c>)
 8005d08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	4a06      	ldr	r2, [pc, #24]	@ (8005d28 <vApplicationGetTimerTaskMemory+0x30>)
 8005d0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005d16:	601a      	str	r2, [r3, #0]
}
 8005d18:	bf00      	nop
 8005d1a:	3714      	adds	r7, #20
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr
 8005d24:	240003d0 	.word	0x240003d0
 8005d28:	2400042c 	.word	0x2400042c

08005d2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b08a      	sub	sp, #40	@ 0x28
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d34:	2300      	movs	r3, #0
 8005d36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d38:	f001 fc6a 	bl	8007610 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d3c:	4b5c      	ldr	r3, [pc, #368]	@ (8005eb0 <pvPortMalloc+0x184>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d44:	f000 f924 	bl	8005f90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d48:	4b5a      	ldr	r3, [pc, #360]	@ (8005eb4 <pvPortMalloc+0x188>)
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f040 8095 	bne.w	8005e80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d01e      	beq.n	8005d9a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005d5c:	2208      	movs	r2, #8
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4413      	add	r3, r2
 8005d62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f003 0307 	and.w	r3, r3, #7
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d015      	beq.n	8005d9a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f023 0307 	bic.w	r3, r3, #7
 8005d74:	3308      	adds	r3, #8
 8005d76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f003 0307 	and.w	r3, r3, #7
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d00b      	beq.n	8005d9a <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop
 8005d98:	e7fd      	b.n	8005d96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d06f      	beq.n	8005e80 <pvPortMalloc+0x154>
 8005da0:	4b45      	ldr	r3, [pc, #276]	@ (8005eb8 <pvPortMalloc+0x18c>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d86a      	bhi.n	8005e80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005daa:	4b44      	ldr	r3, [pc, #272]	@ (8005ebc <pvPortMalloc+0x190>)
 8005dac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005dae:	4b43      	ldr	r3, [pc, #268]	@ (8005ebc <pvPortMalloc+0x190>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005db4:	e004      	b.n	8005dc0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d903      	bls.n	8005dd2 <pvPortMalloc+0xa6>
 8005dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1f1      	bne.n	8005db6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005dd2:	4b37      	ldr	r3, [pc, #220]	@ (8005eb0 <pvPortMalloc+0x184>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d051      	beq.n	8005e80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ddc:	6a3b      	ldr	r3, [r7, #32]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2208      	movs	r2, #8
 8005de2:	4413      	add	r3, r2
 8005de4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	6a3b      	ldr	r3, [r7, #32]
 8005dec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df0:	685a      	ldr	r2, [r3, #4]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	1ad2      	subs	r2, r2, r3
 8005df6:	2308      	movs	r3, #8
 8005df8:	005b      	lsls	r3, r3, #1
 8005dfa:	429a      	cmp	r2, r3
 8005dfc:	d920      	bls.n	8005e40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005dfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4413      	add	r3, r2
 8005e04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	f003 0307 	and.w	r3, r3, #7
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00b      	beq.n	8005e28 <pvPortMalloc+0xfc>
	__asm volatile
 8005e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e14:	f383 8811 	msr	BASEPRI, r3
 8005e18:	f3bf 8f6f 	isb	sy
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	613b      	str	r3, [r7, #16]
}
 8005e22:	bf00      	nop
 8005e24:	bf00      	nop
 8005e26:	e7fd      	b.n	8005e24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2a:	685a      	ldr	r2, [r3, #4]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	1ad2      	subs	r2, r2, r3
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e3a:	69b8      	ldr	r0, [r7, #24]
 8005e3c:	f000 f90a 	bl	8006054 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e40:	4b1d      	ldr	r3, [pc, #116]	@ (8005eb8 <pvPortMalloc+0x18c>)
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8005eb8 <pvPortMalloc+0x18c>)
 8005e4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e4e:	4b1a      	ldr	r3, [pc, #104]	@ (8005eb8 <pvPortMalloc+0x18c>)
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	4b1b      	ldr	r3, [pc, #108]	@ (8005ec0 <pvPortMalloc+0x194>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d203      	bcs.n	8005e62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e5a:	4b17      	ldr	r3, [pc, #92]	@ (8005eb8 <pvPortMalloc+0x18c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a18      	ldr	r2, [pc, #96]	@ (8005ec0 <pvPortMalloc+0x194>)
 8005e60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e64:	685a      	ldr	r2, [r3, #4]
 8005e66:	4b13      	ldr	r3, [pc, #76]	@ (8005eb4 <pvPortMalloc+0x188>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	431a      	orrs	r2, r3
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e72:	2200      	movs	r2, #0
 8005e74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e76:	4b13      	ldr	r3, [pc, #76]	@ (8005ec4 <pvPortMalloc+0x198>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	4a11      	ldr	r2, [pc, #68]	@ (8005ec4 <pvPortMalloc+0x198>)
 8005e7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e80:	f001 fbd4 	bl	800762c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	f003 0307 	and.w	r3, r3, #7
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00b      	beq.n	8005ea6 <pvPortMalloc+0x17a>
	__asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e92:	f383 8811 	msr	BASEPRI, r3
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	60fb      	str	r3, [r7, #12]
}
 8005ea0:	bf00      	nop
 8005ea2:	bf00      	nop
 8005ea4:	e7fd      	b.n	8005ea2 <pvPortMalloc+0x176>
	return pvReturn;
 8005ea6:	69fb      	ldr	r3, [r7, #28]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3728      	adds	r7, #40	@ 0x28
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	24004434 	.word	0x24004434
 8005eb4:	24004448 	.word	0x24004448
 8005eb8:	24004438 	.word	0x24004438
 8005ebc:	2400442c 	.word	0x2400442c
 8005ec0:	2400443c 	.word	0x2400443c
 8005ec4:	24004440 	.word	0x24004440

08005ec8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d04f      	beq.n	8005f7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005eda:	2308      	movs	r3, #8
 8005edc:	425b      	negs	r3, r3
 8005ede:	697a      	ldr	r2, [r7, #20]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	4b25      	ldr	r3, [pc, #148]	@ (8005f84 <vPortFree+0xbc>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d10b      	bne.n	8005f0e <vPortFree+0x46>
	__asm volatile
 8005ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	60fb      	str	r3, [r7, #12]
}
 8005f08:	bf00      	nop
 8005f0a:	bf00      	nop
 8005f0c:	e7fd      	b.n	8005f0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00b      	beq.n	8005f2e <vPortFree+0x66>
	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	60bb      	str	r3, [r7, #8]
}
 8005f28:	bf00      	nop
 8005f2a:	bf00      	nop
 8005f2c:	e7fd      	b.n	8005f2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	4b14      	ldr	r3, [pc, #80]	@ (8005f84 <vPortFree+0xbc>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4013      	ands	r3, r2
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d01e      	beq.n	8005f7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d11a      	bne.n	8005f7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	685a      	ldr	r2, [r3, #4]
 8005f48:	4b0e      	ldr	r3, [pc, #56]	@ (8005f84 <vPortFree+0xbc>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	43db      	mvns	r3, r3
 8005f4e:	401a      	ands	r2, r3
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f54:	f001 fb5c 	bl	8007610 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005f88 <vPortFree+0xc0>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4413      	add	r3, r2
 8005f62:	4a09      	ldr	r2, [pc, #36]	@ (8005f88 <vPortFree+0xc0>)
 8005f64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f66:	6938      	ldr	r0, [r7, #16]
 8005f68:	f000 f874 	bl	8006054 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f6c:	4b07      	ldr	r3, [pc, #28]	@ (8005f8c <vPortFree+0xc4>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3301      	adds	r3, #1
 8005f72:	4a06      	ldr	r2, [pc, #24]	@ (8005f8c <vPortFree+0xc4>)
 8005f74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f76:	f001 fb59 	bl	800762c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f7a:	bf00      	nop
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	24004448 	.word	0x24004448
 8005f88:	24004438 	.word	0x24004438
 8005f8c:	24004444 	.word	0x24004444

08005f90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005f9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f9c:	4b27      	ldr	r3, [pc, #156]	@ (800603c <prvHeapInit+0xac>)
 8005f9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d00c      	beq.n	8005fc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	3307      	adds	r3, #7
 8005fae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0307 	bic.w	r3, r3, #7
 8005fb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800603c <prvHeapInit+0xac>)
 8005fc0:	4413      	add	r3, r2
 8005fc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005fc8:	4a1d      	ldr	r2, [pc, #116]	@ (8006040 <prvHeapInit+0xb0>)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005fce:	4b1c      	ldr	r3, [pc, #112]	@ (8006040 <prvHeapInit+0xb0>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68ba      	ldr	r2, [r7, #8]
 8005fd8:	4413      	add	r3, r2
 8005fda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005fdc:	2208      	movs	r2, #8
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	1a9b      	subs	r3, r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 0307 	bic.w	r3, r3, #7
 8005fea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	4a15      	ldr	r2, [pc, #84]	@ (8006044 <prvHeapInit+0xb4>)
 8005ff0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005ff2:	4b14      	ldr	r3, [pc, #80]	@ (8006044 <prvHeapInit+0xb4>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005ffa:	4b12      	ldr	r3, [pc, #72]	@ (8006044 <prvHeapInit+0xb4>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2200      	movs	r2, #0
 8006000:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	1ad2      	subs	r2, r2, r3
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006010:	4b0c      	ldr	r3, [pc, #48]	@ (8006044 <prvHeapInit+0xb4>)
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	4a0a      	ldr	r2, [pc, #40]	@ (8006048 <prvHeapInit+0xb8>)
 800601e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	4a09      	ldr	r2, [pc, #36]	@ (800604c <prvHeapInit+0xbc>)
 8006026:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006028:	4b09      	ldr	r3, [pc, #36]	@ (8006050 <prvHeapInit+0xc0>)
 800602a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800602e:	601a      	str	r2, [r3, #0]
}
 8006030:	bf00      	nop
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr
 800603c:	2400082c 	.word	0x2400082c
 8006040:	2400442c 	.word	0x2400442c
 8006044:	24004434 	.word	0x24004434
 8006048:	2400443c 	.word	0x2400443c
 800604c:	24004438 	.word	0x24004438
 8006050:	24004448 	.word	0x24004448

08006054 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800605c:	4b28      	ldr	r3, [pc, #160]	@ (8006100 <prvInsertBlockIntoFreeList+0xac>)
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	e002      	b.n	8006068 <prvInsertBlockIntoFreeList+0x14>
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	429a      	cmp	r2, r3
 8006070:	d8f7      	bhi.n	8006062 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	68ba      	ldr	r2, [r7, #8]
 800607c:	4413      	add	r3, r2
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	429a      	cmp	r2, r3
 8006082:	d108      	bne.n	8006096 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	685a      	ldr	r2, [r3, #4]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	441a      	add	r2, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	685b      	ldr	r3, [r3, #4]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	441a      	add	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d118      	bne.n	80060dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681a      	ldr	r2, [r3, #0]
 80060ae:	4b15      	ldr	r3, [pc, #84]	@ (8006104 <prvInsertBlockIntoFreeList+0xb0>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d00d      	beq.n	80060d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	441a      	add	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	e008      	b.n	80060e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80060d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006104 <prvInsertBlockIntoFreeList+0xb0>)
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	601a      	str	r2, [r3, #0]
 80060da:	e003      	b.n	80060e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80060e4:	68fa      	ldr	r2, [r7, #12]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d002      	beq.n	80060f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060f2:	bf00      	nop
 80060f4:	3714      	adds	r7, #20
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	2400442c 	.word	0x2400442c
 8006104:	24004434 	.word	0x24004434

08006108 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f103 0208 	add.w	r2, r3, #8
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f04f 32ff 	mov.w	r2, #4294967295
 8006120:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f103 0208 	add.w	r2, r3, #8
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f103 0208 	add.w	r2, r3, #8
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006162:	b480      	push	{r7}
 8006164:	b085      	sub	sp, #20
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
 800616a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	1c5a      	adds	r2, r3, #1
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	601a      	str	r2, [r3, #0]
}
 800619e:	bf00      	nop
 80061a0:	3714      	adds	r7, #20
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80061aa:	b480      	push	{r7}
 80061ac:	b085      	sub	sp, #20
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061c0:	d103      	bne.n	80061ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	691b      	ldr	r3, [r3, #16]
 80061c6:	60fb      	str	r3, [r7, #12]
 80061c8:	e00c      	b.n	80061e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	3308      	adds	r3, #8
 80061ce:	60fb      	str	r3, [r7, #12]
 80061d0:	e002      	b.n	80061d8 <vListInsert+0x2e>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d2f6      	bcs.n	80061d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	685b      	ldr	r3, [r3, #4]
 80061f0:	683a      	ldr	r2, [r7, #0]
 80061f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	1c5a      	adds	r2, r3, #1
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	601a      	str	r2, [r3, #0]
}
 8006210:	bf00      	nop
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	6892      	ldr	r2, [r2, #8]
 8006232:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	6852      	ldr	r2, [r2, #4]
 800623c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	429a      	cmp	r2, r3
 8006246:	d103      	bne.n	8006250 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	1e5a      	subs	r2, r3, #1
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	3b04      	subs	r3, #4
 8006280:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006288:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	3b04      	subs	r3, #4
 800628e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	f023 0201 	bic.w	r2, r3, #1
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	3b04      	subs	r3, #4
 800629e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80062a0:	4a0c      	ldr	r2, [pc, #48]	@ (80062d4 <pxPortInitialiseStack+0x64>)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	3b14      	subs	r3, #20
 80062aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	3b04      	subs	r3, #4
 80062b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	f06f 0202 	mvn.w	r2, #2
 80062be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	3b20      	subs	r3, #32
 80062c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80062c6:	68fb      	ldr	r3, [r7, #12]
}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr
 80062d4:	080062d9 	.word	0x080062d9

080062d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80062de:	2300      	movs	r3, #0
 80062e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80062e2:	4b13      	ldr	r3, [pc, #76]	@ (8006330 <prvTaskExitError+0x58>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ea:	d00b      	beq.n	8006304 <prvTaskExitError+0x2c>
	__asm volatile
 80062ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	60fb      	str	r3, [r7, #12]
}
 80062fe:	bf00      	nop
 8006300:	bf00      	nop
 8006302:	e7fd      	b.n	8006300 <prvTaskExitError+0x28>
	__asm volatile
 8006304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006308:	f383 8811 	msr	BASEPRI, r3
 800630c:	f3bf 8f6f 	isb	sy
 8006310:	f3bf 8f4f 	dsb	sy
 8006314:	60bb      	str	r3, [r7, #8]
}
 8006316:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006318:	bf00      	nop
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d0fc      	beq.n	800631a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006320:	bf00      	nop
 8006322:	bf00      	nop
 8006324:	3714      	adds	r7, #20
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	24000010 	.word	0x24000010
	...

08006340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006340:	4b07      	ldr	r3, [pc, #28]	@ (8006360 <pxCurrentTCBConst2>)
 8006342:	6819      	ldr	r1, [r3, #0]
 8006344:	6808      	ldr	r0, [r1, #0]
 8006346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800634a:	f380 8809 	msr	PSP, r0
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f04f 0000 	mov.w	r0, #0
 8006356:	f380 8811 	msr	BASEPRI, r0
 800635a:	4770      	bx	lr
 800635c:	f3af 8000 	nop.w

08006360 <pxCurrentTCBConst2>:
 8006360:	24004494 	.word	0x24004494
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006364:	bf00      	nop
 8006366:	bf00      	nop

08006368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006368:	4808      	ldr	r0, [pc, #32]	@ (800638c <prvPortStartFirstTask+0x24>)
 800636a:	6800      	ldr	r0, [r0, #0]
 800636c:	6800      	ldr	r0, [r0, #0]
 800636e:	f380 8808 	msr	MSP, r0
 8006372:	f04f 0000 	mov.w	r0, #0
 8006376:	f380 8814 	msr	CONTROL, r0
 800637a:	b662      	cpsie	i
 800637c:	b661      	cpsie	f
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	df00      	svc	0
 8006388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800638a:	bf00      	nop
 800638c:	e000ed08 	.word	0xe000ed08

08006390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006396:	4b47      	ldr	r3, [pc, #284]	@ (80064b4 <xPortStartScheduler+0x124>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a47      	ldr	r2, [pc, #284]	@ (80064b8 <xPortStartScheduler+0x128>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d10b      	bne.n	80063b8 <xPortStartScheduler+0x28>
	__asm volatile
 80063a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a4:	f383 8811 	msr	BASEPRI, r3
 80063a8:	f3bf 8f6f 	isb	sy
 80063ac:	f3bf 8f4f 	dsb	sy
 80063b0:	60fb      	str	r3, [r7, #12]
}
 80063b2:	bf00      	nop
 80063b4:	bf00      	nop
 80063b6:	e7fd      	b.n	80063b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80063b8:	4b3e      	ldr	r3, [pc, #248]	@ (80064b4 <xPortStartScheduler+0x124>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a3f      	ldr	r2, [pc, #252]	@ (80064bc <xPortStartScheduler+0x12c>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d10b      	bne.n	80063da <xPortStartScheduler+0x4a>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	613b      	str	r3, [r7, #16]
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop
 80063d8:	e7fd      	b.n	80063d6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80063da:	4b39      	ldr	r3, [pc, #228]	@ (80064c0 <xPortStartScheduler+0x130>)
 80063dc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	781b      	ldrb	r3, [r3, #0]
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	22ff      	movs	r2, #255	@ 0xff
 80063ea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80063f4:	78fb      	ldrb	r3, [r7, #3]
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80063fc:	b2da      	uxtb	r2, r3
 80063fe:	4b31      	ldr	r3, [pc, #196]	@ (80064c4 <xPortStartScheduler+0x134>)
 8006400:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006402:	4b31      	ldr	r3, [pc, #196]	@ (80064c8 <xPortStartScheduler+0x138>)
 8006404:	2207      	movs	r2, #7
 8006406:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006408:	e009      	b.n	800641e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800640a:	4b2f      	ldr	r3, [pc, #188]	@ (80064c8 <xPortStartScheduler+0x138>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	3b01      	subs	r3, #1
 8006410:	4a2d      	ldr	r2, [pc, #180]	@ (80064c8 <xPortStartScheduler+0x138>)
 8006412:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006414:	78fb      	ldrb	r3, [r7, #3]
 8006416:	b2db      	uxtb	r3, r3
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	b2db      	uxtb	r3, r3
 800641c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800641e:	78fb      	ldrb	r3, [r7, #3]
 8006420:	b2db      	uxtb	r3, r3
 8006422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006426:	2b80      	cmp	r3, #128	@ 0x80
 8006428:	d0ef      	beq.n	800640a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800642a:	4b27      	ldr	r3, [pc, #156]	@ (80064c8 <xPortStartScheduler+0x138>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f1c3 0307 	rsb	r3, r3, #7
 8006432:	2b04      	cmp	r3, #4
 8006434:	d00b      	beq.n	800644e <xPortStartScheduler+0xbe>
	__asm volatile
 8006436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	60bb      	str	r3, [r7, #8]
}
 8006448:	bf00      	nop
 800644a:	bf00      	nop
 800644c:	e7fd      	b.n	800644a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800644e:	4b1e      	ldr	r3, [pc, #120]	@ (80064c8 <xPortStartScheduler+0x138>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	021b      	lsls	r3, r3, #8
 8006454:	4a1c      	ldr	r2, [pc, #112]	@ (80064c8 <xPortStartScheduler+0x138>)
 8006456:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006458:	4b1b      	ldr	r3, [pc, #108]	@ (80064c8 <xPortStartScheduler+0x138>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006460:	4a19      	ldr	r2, [pc, #100]	@ (80064c8 <xPortStartScheduler+0x138>)
 8006462:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	b2da      	uxtb	r2, r3
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800646c:	4b17      	ldr	r3, [pc, #92]	@ (80064cc <xPortStartScheduler+0x13c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a16      	ldr	r2, [pc, #88]	@ (80064cc <xPortStartScheduler+0x13c>)
 8006472:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006476:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006478:	4b14      	ldr	r3, [pc, #80]	@ (80064cc <xPortStartScheduler+0x13c>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a13      	ldr	r2, [pc, #76]	@ (80064cc <xPortStartScheduler+0x13c>)
 800647e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006482:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006484:	f000 f8da 	bl	800663c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006488:	4b11      	ldr	r3, [pc, #68]	@ (80064d0 <xPortStartScheduler+0x140>)
 800648a:	2200      	movs	r2, #0
 800648c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800648e:	f000 f8f9 	bl	8006684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006492:	4b10      	ldr	r3, [pc, #64]	@ (80064d4 <xPortStartScheduler+0x144>)
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a0f      	ldr	r2, [pc, #60]	@ (80064d4 <xPortStartScheduler+0x144>)
 8006498:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800649c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800649e:	f7ff ff63 	bl	8006368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80064a2:	f001 fa2b 	bl	80078fc <vTaskSwitchContext>
	prvTaskExitError();
 80064a6:	f7ff ff17 	bl	80062d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3718      	adds	r7, #24
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}
 80064b4:	e000ed00 	.word	0xe000ed00
 80064b8:	410fc271 	.word	0x410fc271
 80064bc:	410fc270 	.word	0x410fc270
 80064c0:	e000e400 	.word	0xe000e400
 80064c4:	2400444c 	.word	0x2400444c
 80064c8:	24004450 	.word	0x24004450
 80064cc:	e000ed20 	.word	0xe000ed20
 80064d0:	24000010 	.word	0x24000010
 80064d4:	e000ef34 	.word	0xe000ef34

080064d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	607b      	str	r3, [r7, #4]
}
 80064f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80064f2:	4b10      	ldr	r3, [pc, #64]	@ (8006534 <vPortEnterCritical+0x5c>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3301      	adds	r3, #1
 80064f8:	4a0e      	ldr	r2, [pc, #56]	@ (8006534 <vPortEnterCritical+0x5c>)
 80064fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80064fc:	4b0d      	ldr	r3, [pc, #52]	@ (8006534 <vPortEnterCritical+0x5c>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	2b01      	cmp	r3, #1
 8006502:	d110      	bne.n	8006526 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006504:	4b0c      	ldr	r3, [pc, #48]	@ (8006538 <vPortEnterCritical+0x60>)
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00b      	beq.n	8006526 <vPortEnterCritical+0x4e>
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	603b      	str	r3, [r7, #0]
}
 8006520:	bf00      	nop
 8006522:	bf00      	nop
 8006524:	e7fd      	b.n	8006522 <vPortEnterCritical+0x4a>
	}
}
 8006526:	bf00      	nop
 8006528:	370c      	adds	r7, #12
 800652a:	46bd      	mov	sp, r7
 800652c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006530:	4770      	bx	lr
 8006532:	bf00      	nop
 8006534:	24000010 	.word	0x24000010
 8006538:	e000ed04 	.word	0xe000ed04

0800653c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006542:	4b12      	ldr	r3, [pc, #72]	@ (800658c <vPortExitCritical+0x50>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d10b      	bne.n	8006562 <vPortExitCritical+0x26>
	__asm volatile
 800654a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654e:	f383 8811 	msr	BASEPRI, r3
 8006552:	f3bf 8f6f 	isb	sy
 8006556:	f3bf 8f4f 	dsb	sy
 800655a:	607b      	str	r3, [r7, #4]
}
 800655c:	bf00      	nop
 800655e:	bf00      	nop
 8006560:	e7fd      	b.n	800655e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006562:	4b0a      	ldr	r3, [pc, #40]	@ (800658c <vPortExitCritical+0x50>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	3b01      	subs	r3, #1
 8006568:	4a08      	ldr	r2, [pc, #32]	@ (800658c <vPortExitCritical+0x50>)
 800656a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800656c:	4b07      	ldr	r3, [pc, #28]	@ (800658c <vPortExitCritical+0x50>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d105      	bne.n	8006580 <vPortExitCritical+0x44>
 8006574:	2300      	movs	r3, #0
 8006576:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800657e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	24000010 	.word	0x24000010

08006590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006590:	f3ef 8009 	mrs	r0, PSP
 8006594:	f3bf 8f6f 	isb	sy
 8006598:	4b15      	ldr	r3, [pc, #84]	@ (80065f0 <pxCurrentTCBConst>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	f01e 0f10 	tst.w	lr, #16
 80065a0:	bf08      	it	eq
 80065a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80065a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065aa:	6010      	str	r0, [r2, #0]
 80065ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80065b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80065b4:	f380 8811 	msr	BASEPRI, r0
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f001 f99c 	bl	80078fc <vTaskSwitchContext>
 80065c4:	f04f 0000 	mov.w	r0, #0
 80065c8:	f380 8811 	msr	BASEPRI, r0
 80065cc:	bc09      	pop	{r0, r3}
 80065ce:	6819      	ldr	r1, [r3, #0]
 80065d0:	6808      	ldr	r0, [r1, #0]
 80065d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d6:	f01e 0f10 	tst.w	lr, #16
 80065da:	bf08      	it	eq
 80065dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80065e0:	f380 8809 	msr	PSP, r0
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	f3af 8000 	nop.w

080065f0 <pxCurrentTCBConst>:
 80065f0:	24004494 	.word	0x24004494
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80065f4:	bf00      	nop
 80065f6:	bf00      	nop

080065f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	607b      	str	r3, [r7, #4]
}
 8006610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006612:	f001 f8b9 	bl	8007788 <xTaskIncrementTick>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800661c:	4b06      	ldr	r3, [pc, #24]	@ (8006638 <xPortSysTickHandler+0x40>)
 800661e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	2300      	movs	r3, #0
 8006626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	f383 8811 	msr	BASEPRI, r3
}
 800662e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006630:	bf00      	nop
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	e000ed04 	.word	0xe000ed04

0800663c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006640:	4b0b      	ldr	r3, [pc, #44]	@ (8006670 <vPortSetupTimerInterrupt+0x34>)
 8006642:	2200      	movs	r2, #0
 8006644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006646:	4b0b      	ldr	r3, [pc, #44]	@ (8006674 <vPortSetupTimerInterrupt+0x38>)
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800664c:	4b0a      	ldr	r3, [pc, #40]	@ (8006678 <vPortSetupTimerInterrupt+0x3c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a0a      	ldr	r2, [pc, #40]	@ (800667c <vPortSetupTimerInterrupt+0x40>)
 8006652:	fba2 2303 	umull	r2, r3, r2, r3
 8006656:	099b      	lsrs	r3, r3, #6
 8006658:	4a09      	ldr	r2, [pc, #36]	@ (8006680 <vPortSetupTimerInterrupt+0x44>)
 800665a:	3b01      	subs	r3, #1
 800665c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800665e:	4b04      	ldr	r3, [pc, #16]	@ (8006670 <vPortSetupTimerInterrupt+0x34>)
 8006660:	2207      	movs	r2, #7
 8006662:	601a      	str	r2, [r3, #0]
}
 8006664:	bf00      	nop
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	e000e010 	.word	0xe000e010
 8006674:	e000e018 	.word	0xe000e018
 8006678:	24000000 	.word	0x24000000
 800667c:	10624dd3 	.word	0x10624dd3
 8006680:	e000e014 	.word	0xe000e014

08006684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006684:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006694 <vPortEnableVFP+0x10>
 8006688:	6801      	ldr	r1, [r0, #0]
 800668a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800668e:	6001      	str	r1, [r0, #0]
 8006690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006692:	bf00      	nop
 8006694:	e000ed88 	.word	0xe000ed88

08006698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800669e:	f3ef 8305 	mrs	r3, IPSR
 80066a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2b0f      	cmp	r3, #15
 80066a8:	d915      	bls.n	80066d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80066aa:	4a18      	ldr	r2, [pc, #96]	@ (800670c <vPortValidateInterruptPriority+0x74>)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	4413      	add	r3, r2
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80066b4:	4b16      	ldr	r3, [pc, #88]	@ (8006710 <vPortValidateInterruptPriority+0x78>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	7afa      	ldrb	r2, [r7, #11]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	d20b      	bcs.n	80066d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80066be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	607b      	str	r3, [r7, #4]
}
 80066d0:	bf00      	nop
 80066d2:	bf00      	nop
 80066d4:	e7fd      	b.n	80066d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80066d6:	4b0f      	ldr	r3, [pc, #60]	@ (8006714 <vPortValidateInterruptPriority+0x7c>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80066de:	4b0e      	ldr	r3, [pc, #56]	@ (8006718 <vPortValidateInterruptPriority+0x80>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d90b      	bls.n	80066fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80066e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ea:	f383 8811 	msr	BASEPRI, r3
 80066ee:	f3bf 8f6f 	isb	sy
 80066f2:	f3bf 8f4f 	dsb	sy
 80066f6:	603b      	str	r3, [r7, #0]
}
 80066f8:	bf00      	nop
 80066fa:	bf00      	nop
 80066fc:	e7fd      	b.n	80066fa <vPortValidateInterruptPriority+0x62>
	}
 80066fe:	bf00      	nop
 8006700:	3714      	adds	r7, #20
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	e000e3f0 	.word	0xe000e3f0
 8006710:	2400444c 	.word	0x2400444c
 8006714:	e000ed0c 	.word	0xe000ed0c
 8006718:	24004450 	.word	0x24004450

0800671c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10b      	bne.n	8006748 <xQueueGenericReset+0x2c>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	60bb      	str	r3, [r7, #8]
}
 8006742:	bf00      	nop
 8006744:	bf00      	nop
 8006746:	e7fd      	b.n	8006744 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006748:	f7ff fec6 	bl	80064d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006754:	68f9      	ldr	r1, [r7, #12]
 8006756:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006758:	fb01 f303 	mul.w	r3, r1, r3
 800675c:	441a      	add	r2, r3
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	2200      	movs	r2, #0
 8006766:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006778:	3b01      	subs	r3, #1
 800677a:	68f9      	ldr	r1, [r7, #12]
 800677c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800677e:	fb01 f303 	mul.w	r3, r1, r3
 8006782:	441a      	add	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	22ff      	movs	r2, #255	@ 0xff
 800678c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	22ff      	movs	r2, #255	@ 0xff
 8006794:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d114      	bne.n	80067c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d01a      	beq.n	80067dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	3310      	adds	r3, #16
 80067aa:	4618      	mov	r0, r3
 80067ac:	f001 f956 	bl	8007a5c <xTaskRemoveFromEventList>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d012      	beq.n	80067dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80067b6:	4b0d      	ldr	r3, [pc, #52]	@ (80067ec <xQueueGenericReset+0xd0>)
 80067b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	e009      	b.n	80067dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3310      	adds	r3, #16
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7ff fc9b 	bl	8006108 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	3324      	adds	r3, #36	@ 0x24
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff fc96 	bl	8006108 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80067dc:	f7ff feae 	bl	800653c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80067e0:	2301      	movs	r3, #1
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	e000ed04 	.word	0xe000ed04

080067f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08e      	sub	sp, #56	@ 0x38
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
 80067fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10b      	bne.n	800681c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006816:	bf00      	nop
 8006818:	bf00      	nop
 800681a:	e7fd      	b.n	8006818 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10b      	bne.n	800683a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop
 8006838:	e7fd      	b.n	8006836 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <xQueueGenericCreateStatic+0x56>
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d001      	beq.n	800684a <xQueueGenericCreateStatic+0x5a>
 8006846:	2301      	movs	r3, #1
 8006848:	e000      	b.n	800684c <xQueueGenericCreateStatic+0x5c>
 800684a:	2300      	movs	r3, #0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10b      	bne.n	8006868 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	623b      	str	r3, [r7, #32]
}
 8006862:	bf00      	nop
 8006864:	bf00      	nop
 8006866:	e7fd      	b.n	8006864 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d102      	bne.n	8006874 <xQueueGenericCreateStatic+0x84>
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d101      	bne.n	8006878 <xQueueGenericCreateStatic+0x88>
 8006874:	2301      	movs	r3, #1
 8006876:	e000      	b.n	800687a <xQueueGenericCreateStatic+0x8a>
 8006878:	2300      	movs	r3, #0
 800687a:	2b00      	cmp	r3, #0
 800687c:	d10b      	bne.n	8006896 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800687e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006882:	f383 8811 	msr	BASEPRI, r3
 8006886:	f3bf 8f6f 	isb	sy
 800688a:	f3bf 8f4f 	dsb	sy
 800688e:	61fb      	str	r3, [r7, #28]
}
 8006890:	bf00      	nop
 8006892:	bf00      	nop
 8006894:	e7fd      	b.n	8006892 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006896:	2350      	movs	r3, #80	@ 0x50
 8006898:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	2b50      	cmp	r3, #80	@ 0x50
 800689e:	d00b      	beq.n	80068b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a4:	f383 8811 	msr	BASEPRI, r3
 80068a8:	f3bf 8f6f 	isb	sy
 80068ac:	f3bf 8f4f 	dsb	sy
 80068b0:	61bb      	str	r3, [r7, #24]
}
 80068b2:	bf00      	nop
 80068b4:	bf00      	nop
 80068b6:	e7fd      	b.n	80068b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80068b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80068be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00d      	beq.n	80068e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80068c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80068d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	4613      	mov	r3, r2
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	68b9      	ldr	r1, [r7, #8]
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 f840 	bl	8006960 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3730      	adds	r7, #48	@ 0x30
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b08a      	sub	sp, #40	@ 0x28
 80068ee:	af02      	add	r7, sp, #8
 80068f0:	60f8      	str	r0, [r7, #12]
 80068f2:	60b9      	str	r1, [r7, #8]
 80068f4:	4613      	mov	r3, r2
 80068f6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10b      	bne.n	8006916 <xQueueGenericCreate+0x2c>
	__asm volatile
 80068fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006902:	f383 8811 	msr	BASEPRI, r3
 8006906:	f3bf 8f6f 	isb	sy
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	613b      	str	r3, [r7, #16]
}
 8006910:	bf00      	nop
 8006912:	bf00      	nop
 8006914:	e7fd      	b.n	8006912 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	fb02 f303 	mul.w	r3, r2, r3
 800691e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	3350      	adds	r3, #80	@ 0x50
 8006924:	4618      	mov	r0, r3
 8006926:	f7ff fa01 	bl	8005d2c <pvPortMalloc>
 800692a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d011      	beq.n	8006956 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	3350      	adds	r3, #80	@ 0x50
 800693a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006944:	79fa      	ldrb	r2, [r7, #7]
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	4613      	mov	r3, r2
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	68b9      	ldr	r1, [r7, #8]
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f000 f805 	bl	8006960 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006956:	69bb      	ldr	r3, [r7, #24]
	}
 8006958:	4618      	mov	r0, r3
 800695a:	3720      	adds	r7, #32
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d103      	bne.n	800697c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	e002      	b.n	8006982 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800698e:	2101      	movs	r1, #1
 8006990:	69b8      	ldr	r0, [r7, #24]
 8006992:	f7ff fec3 	bl	800671c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	78fa      	ldrb	r2, [r7, #3]
 800699a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800699e:	bf00      	nop
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
	...

080069a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08e      	sub	sp, #56	@ 0x38
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
 80069b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80069b6:	2300      	movs	r3, #0
 80069b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80069be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d10b      	bne.n	80069dc <xQueueGenericSend+0x34>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c8:	f383 8811 	msr	BASEPRI, r3
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	f3bf 8f4f 	dsb	sy
 80069d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80069d6:	bf00      	nop
 80069d8:	bf00      	nop
 80069da:	e7fd      	b.n	80069d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d103      	bne.n	80069ea <xQueueGenericSend+0x42>
 80069e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d101      	bne.n	80069ee <xQueueGenericSend+0x46>
 80069ea:	2301      	movs	r3, #1
 80069ec:	e000      	b.n	80069f0 <xQueueGenericSend+0x48>
 80069ee:	2300      	movs	r3, #0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10b      	bne.n	8006a0c <xQueueGenericSend+0x64>
	__asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a06:	bf00      	nop
 8006a08:	bf00      	nop
 8006a0a:	e7fd      	b.n	8006a08 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	2b02      	cmp	r3, #2
 8006a10:	d103      	bne.n	8006a1a <xQueueGenericSend+0x72>
 8006a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d101      	bne.n	8006a1e <xQueueGenericSend+0x76>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e000      	b.n	8006a20 <xQueueGenericSend+0x78>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10b      	bne.n	8006a3c <xQueueGenericSend+0x94>
	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	623b      	str	r3, [r7, #32]
}
 8006a36:	bf00      	nop
 8006a38:	bf00      	nop
 8006a3a:	e7fd      	b.n	8006a38 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a3c:	f001 f9ce 	bl	8007ddc <xTaskGetSchedulerState>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d102      	bne.n	8006a4c <xQueueGenericSend+0xa4>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <xQueueGenericSend+0xa8>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e000      	b.n	8006a52 <xQueueGenericSend+0xaa>
 8006a50:	2300      	movs	r3, #0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d10b      	bne.n	8006a6e <xQueueGenericSend+0xc6>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	61fb      	str	r3, [r7, #28]
}
 8006a68:	bf00      	nop
 8006a6a:	bf00      	nop
 8006a6c:	e7fd      	b.n	8006a6a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a6e:	f7ff fd33 	bl	80064d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d302      	bcc.n	8006a84 <xQueueGenericSend+0xdc>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d129      	bne.n	8006ad8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a84:	683a      	ldr	r2, [r7, #0]
 8006a86:	68b9      	ldr	r1, [r7, #8]
 8006a88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a8a:	f000 fa0f 	bl	8006eac <prvCopyDataToQueue>
 8006a8e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d010      	beq.n	8006aba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a9a:	3324      	adds	r3, #36	@ 0x24
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f000 ffdd 	bl	8007a5c <xTaskRemoveFromEventList>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d013      	beq.n	8006ad0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006aa8:	4b3f      	ldr	r3, [pc, #252]	@ (8006ba8 <xQueueGenericSend+0x200>)
 8006aaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aae:	601a      	str	r2, [r3, #0]
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	e00a      	b.n	8006ad0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006aba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d007      	beq.n	8006ad0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ac0:	4b39      	ldr	r3, [pc, #228]	@ (8006ba8 <xQueueGenericSend+0x200>)
 8006ac2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	f3bf 8f4f 	dsb	sy
 8006acc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ad0:	f7ff fd34 	bl	800653c <vPortExitCritical>
				return pdPASS;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e063      	b.n	8006ba0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d103      	bne.n	8006ae6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ade:	f7ff fd2d 	bl	800653c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	e05c      	b.n	8006ba0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d106      	bne.n	8006afa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006aec:	f107 0314 	add.w	r3, r7, #20
 8006af0:	4618      	mov	r0, r3
 8006af2:	f001 f817 	bl	8007b24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006af6:	2301      	movs	r3, #1
 8006af8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006afa:	f7ff fd1f 	bl	800653c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006afe:	f000 fd87 	bl	8007610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b02:	f7ff fce9 	bl	80064d8 <vPortEnterCritical>
 8006b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b0c:	b25b      	sxtb	r3, r3
 8006b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b12:	d103      	bne.n	8006b1c <xQueueGenericSend+0x174>
 8006b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b16:	2200      	movs	r2, #0
 8006b18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b22:	b25b      	sxtb	r3, r3
 8006b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b28:	d103      	bne.n	8006b32 <xQueueGenericSend+0x18a>
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006b32:	f7ff fd03 	bl	800653c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b36:	1d3a      	adds	r2, r7, #4
 8006b38:	f107 0314 	add.w	r3, r7, #20
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f001 f806 	bl	8007b50 <xTaskCheckForTimeOut>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d124      	bne.n	8006b94 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b4c:	f000 faa6 	bl	800709c <prvIsQueueFull>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d018      	beq.n	8006b88 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b58:	3310      	adds	r3, #16
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	4611      	mov	r1, r2
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f000 ff2a 	bl	80079b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b66:	f000 fa31 	bl	8006fcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b6a:	f000 fd5f 	bl	800762c <xTaskResumeAll>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f47f af7c 	bne.w	8006a6e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006b76:	4b0c      	ldr	r3, [pc, #48]	@ (8006ba8 <xQueueGenericSend+0x200>)
 8006b78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b7c:	601a      	str	r2, [r3, #0]
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	e772      	b.n	8006a6e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b8a:	f000 fa1f 	bl	8006fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b8e:	f000 fd4d 	bl	800762c <xTaskResumeAll>
 8006b92:	e76c      	b.n	8006a6e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006b96:	f000 fa19 	bl	8006fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b9a:	f000 fd47 	bl	800762c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3738      	adds	r7, #56	@ 0x38
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	e000ed04 	.word	0xe000ed04

08006bac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b090      	sub	sp, #64	@ 0x40
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10b      	bne.n	8006bdc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006bd6:	bf00      	nop
 8006bd8:	bf00      	nop
 8006bda:	e7fd      	b.n	8006bd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d103      	bne.n	8006bea <xQueueGenericSendFromISR+0x3e>
 8006be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <xQueueGenericSendFromISR+0x42>
 8006bea:	2301      	movs	r3, #1
 8006bec:	e000      	b.n	8006bf0 <xQueueGenericSendFromISR+0x44>
 8006bee:	2300      	movs	r3, #0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10b      	bne.n	8006c0c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006bf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006c06:	bf00      	nop
 8006c08:	bf00      	nop
 8006c0a:	e7fd      	b.n	8006c08 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d103      	bne.n	8006c1a <xQueueGenericSendFromISR+0x6e>
 8006c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d101      	bne.n	8006c1e <xQueueGenericSendFromISR+0x72>
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e000      	b.n	8006c20 <xQueueGenericSendFromISR+0x74>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d10b      	bne.n	8006c3c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c28:	f383 8811 	msr	BASEPRI, r3
 8006c2c:	f3bf 8f6f 	isb	sy
 8006c30:	f3bf 8f4f 	dsb	sy
 8006c34:	623b      	str	r3, [r7, #32]
}
 8006c36:	bf00      	nop
 8006c38:	bf00      	nop
 8006c3a:	e7fd      	b.n	8006c38 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c3c:	f7ff fd2c 	bl	8006698 <vPortValidateInterruptPriority>
	__asm volatile
 8006c40:	f3ef 8211 	mrs	r2, BASEPRI
 8006c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c48:	f383 8811 	msr	BASEPRI, r3
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	f3bf 8f4f 	dsb	sy
 8006c54:	61fa      	str	r2, [r7, #28]
 8006c56:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006c58:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c5a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d302      	bcc.n	8006c6e <xQueueGenericSendFromISR+0xc2>
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d12f      	bne.n	8006cce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c7e:	683a      	ldr	r2, [r7, #0]
 8006c80:	68b9      	ldr	r1, [r7, #8]
 8006c82:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006c84:	f000 f912 	bl	8006eac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c88:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c90:	d112      	bne.n	8006cb8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d016      	beq.n	8006cc8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9c:	3324      	adds	r3, #36	@ 0x24
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 fedc 	bl	8007a5c <xTaskRemoveFromEventList>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00e      	beq.n	8006cc8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d00b      	beq.n	8006cc8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	601a      	str	r2, [r3, #0]
 8006cb6:	e007      	b.n	8006cc8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006cb8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	b25a      	sxtb	r2, r3
 8006cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006ccc:	e001      	b.n	8006cd2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cd4:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f383 8811 	msr	BASEPRI, r3
}
 8006cdc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3740      	adds	r7, #64	@ 0x40
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b08c      	sub	sp, #48	@ 0x30
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10b      	bne.n	8006d1a <xQueueReceive+0x32>
	__asm volatile
 8006d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d06:	f383 8811 	msr	BASEPRI, r3
 8006d0a:	f3bf 8f6f 	isb	sy
 8006d0e:	f3bf 8f4f 	dsb	sy
 8006d12:	623b      	str	r3, [r7, #32]
}
 8006d14:	bf00      	nop
 8006d16:	bf00      	nop
 8006d18:	e7fd      	b.n	8006d16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d103      	bne.n	8006d28 <xQueueReceive+0x40>
 8006d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <xQueueReceive+0x44>
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e000      	b.n	8006d2e <xQueueReceive+0x46>
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10b      	bne.n	8006d4a <xQueueReceive+0x62>
	__asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	61fb      	str	r3, [r7, #28]
}
 8006d44:	bf00      	nop
 8006d46:	bf00      	nop
 8006d48:	e7fd      	b.n	8006d46 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d4a:	f001 f847 	bl	8007ddc <xTaskGetSchedulerState>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d102      	bne.n	8006d5a <xQueueReceive+0x72>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d101      	bne.n	8006d5e <xQueueReceive+0x76>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e000      	b.n	8006d60 <xQueueReceive+0x78>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10b      	bne.n	8006d7c <xQueueReceive+0x94>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	61bb      	str	r3, [r7, #24]
}
 8006d76:	bf00      	nop
 8006d78:	bf00      	nop
 8006d7a:	e7fd      	b.n	8006d78 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d7c:	f7ff fbac 	bl	80064d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d84:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d01f      	beq.n	8006dcc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d90:	f000 f8f6 	bl	8006f80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d96:	1e5a      	subs	r2, r3, #1
 8006d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00f      	beq.n	8006dc4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006da6:	3310      	adds	r3, #16
 8006da8:	4618      	mov	r0, r3
 8006daa:	f000 fe57 	bl	8007a5c <xTaskRemoveFromEventList>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d007      	beq.n	8006dc4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006db4:	4b3c      	ldr	r3, [pc, #240]	@ (8006ea8 <xQueueReceive+0x1c0>)
 8006db6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006dc4:	f7ff fbba 	bl	800653c <vPortExitCritical>
				return pdPASS;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	e069      	b.n	8006ea0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d103      	bne.n	8006dda <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dd2:	f7ff fbb3 	bl	800653c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e062      	b.n	8006ea0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d106      	bne.n	8006dee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006de0:	f107 0310 	add.w	r3, r7, #16
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fe9d 	bl	8007b24 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dea:	2301      	movs	r3, #1
 8006dec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006dee:	f7ff fba5 	bl	800653c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006df2:	f000 fc0d 	bl	8007610 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006df6:	f7ff fb6f 	bl	80064d8 <vPortEnterCritical>
 8006dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e00:	b25b      	sxtb	r3, r3
 8006e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e06:	d103      	bne.n	8006e10 <xQueueReceive+0x128>
 8006e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e16:	b25b      	sxtb	r3, r3
 8006e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e1c:	d103      	bne.n	8006e26 <xQueueReceive+0x13e>
 8006e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e26:	f7ff fb89 	bl	800653c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e2a:	1d3a      	adds	r2, r7, #4
 8006e2c:	f107 0310 	add.w	r3, r7, #16
 8006e30:	4611      	mov	r1, r2
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 fe8c 	bl	8007b50 <xTaskCheckForTimeOut>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d123      	bne.n	8006e86 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e40:	f000 f916 	bl	8007070 <prvIsQueueEmpty>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d017      	beq.n	8006e7a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4c:	3324      	adds	r3, #36	@ 0x24
 8006e4e:	687a      	ldr	r2, [r7, #4]
 8006e50:	4611      	mov	r1, r2
 8006e52:	4618      	mov	r0, r3
 8006e54:	f000 fdb0 	bl	80079b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e5a:	f000 f8b7 	bl	8006fcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e5e:	f000 fbe5 	bl	800762c <xTaskResumeAll>
 8006e62:	4603      	mov	r3, r0
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d189      	bne.n	8006d7c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006e68:	4b0f      	ldr	r3, [pc, #60]	@ (8006ea8 <xQueueReceive+0x1c0>)
 8006e6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e6e:	601a      	str	r2, [r3, #0]
 8006e70:	f3bf 8f4f 	dsb	sy
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	e780      	b.n	8006d7c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e7c:	f000 f8a6 	bl	8006fcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e80:	f000 fbd4 	bl	800762c <xTaskResumeAll>
 8006e84:	e77a      	b.n	8006d7c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e88:	f000 f8a0 	bl	8006fcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e8c:	f000 fbce 	bl	800762c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e92:	f000 f8ed 	bl	8007070 <prvIsQueueEmpty>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f43f af6f 	beq.w	8006d7c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e9e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3730      	adds	r7, #48	@ 0x30
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	e000ed04 	.word	0xe000ed04

08006eac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b086      	sub	sp, #24
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ec0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10d      	bne.n	8006ee6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d14d      	bne.n	8006f6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	689b      	ldr	r3, [r3, #8]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f000 ff9e 	bl	8007e18 <xTaskPriorityDisinherit>
 8006edc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	609a      	str	r2, [r3, #8]
 8006ee4:	e043      	b.n	8006f6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d119      	bne.n	8006f20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6858      	ldr	r0, [r3, #4]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	68b9      	ldr	r1, [r7, #8]
 8006ef8:	f001 fbd8 	bl	80086ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	685a      	ldr	r2, [r3, #4]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f04:	441a      	add	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	685a      	ldr	r2, [r3, #4]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	689b      	ldr	r3, [r3, #8]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d32b      	bcc.n	8006f6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	605a      	str	r2, [r3, #4]
 8006f1e:	e026      	b.n	8006f6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	68d8      	ldr	r0, [r3, #12]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f28:	461a      	mov	r2, r3
 8006f2a:	68b9      	ldr	r1, [r7, #8]
 8006f2c:	f001 fbbe 	bl	80086ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f38:	425b      	negs	r3, r3
 8006f3a:	441a      	add	r2, r3
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	68da      	ldr	r2, [r3, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d207      	bcs.n	8006f5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f54:	425b      	negs	r3, r3
 8006f56:	441a      	add	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b02      	cmp	r3, #2
 8006f60:	d105      	bne.n	8006f6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	1c5a      	adds	r2, r3, #1
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006f76:	697b      	ldr	r3, [r7, #20]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3718      	adds	r7, #24
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d018      	beq.n	8006fc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f9a:	441a      	add	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	68da      	ldr	r2, [r3, #12]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d303      	bcc.n	8006fb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68d9      	ldr	r1, [r3, #12]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	6838      	ldr	r0, [r7, #0]
 8006fc0:	f001 fb74 	bl	80086ac <memcpy>
	}
}
 8006fc4:	bf00      	nop
 8006fc6:	3708      	adds	r7, #8
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fd4:	f7ff fa80 	bl	80064d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fe0:	e011      	b.n	8007006 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d012      	beq.n	8007010 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	3324      	adds	r3, #36	@ 0x24
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f000 fd34 	bl	8007a5c <xTaskRemoveFromEventList>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006ffa:	f000 fe0d 	bl	8007c18 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
 8007000:	3b01      	subs	r3, #1
 8007002:	b2db      	uxtb	r3, r3
 8007004:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800700a:	2b00      	cmp	r3, #0
 800700c:	dce9      	bgt.n	8006fe2 <prvUnlockQueue+0x16>
 800700e:	e000      	b.n	8007012 <prvUnlockQueue+0x46>
					break;
 8007010:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	22ff      	movs	r2, #255	@ 0xff
 8007016:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800701a:	f7ff fa8f 	bl	800653c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800701e:	f7ff fa5b 	bl	80064d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007028:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800702a:	e011      	b.n	8007050 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d012      	beq.n	800705a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	3310      	adds	r3, #16
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fd0f 	bl	8007a5c <xTaskRemoveFromEventList>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007044:	f000 fde8 	bl	8007c18 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007048:	7bbb      	ldrb	r3, [r7, #14]
 800704a:	3b01      	subs	r3, #1
 800704c:	b2db      	uxtb	r3, r3
 800704e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007050:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007054:	2b00      	cmp	r3, #0
 8007056:	dce9      	bgt.n	800702c <prvUnlockQueue+0x60>
 8007058:	e000      	b.n	800705c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800705a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	22ff      	movs	r2, #255	@ 0xff
 8007060:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007064:	f7ff fa6a 	bl	800653c <vPortExitCritical>
}
 8007068:	bf00      	nop
 800706a:	3710      	adds	r7, #16
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007078:	f7ff fa2e 	bl	80064d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007080:	2b00      	cmp	r3, #0
 8007082:	d102      	bne.n	800708a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007084:	2301      	movs	r3, #1
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	e001      	b.n	800708e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800708a:	2300      	movs	r3, #0
 800708c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800708e:	f7ff fa55 	bl	800653c <vPortExitCritical>

	return xReturn;
 8007092:	68fb      	ldr	r3, [r7, #12]
}
 8007094:	4618      	mov	r0, r3
 8007096:	3710      	adds	r7, #16
 8007098:	46bd      	mov	sp, r7
 800709a:	bd80      	pop	{r7, pc}

0800709c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b084      	sub	sp, #16
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80070a4:	f7ff fa18 	bl	80064d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d102      	bne.n	80070ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80070b4:	2301      	movs	r3, #1
 80070b6:	60fb      	str	r3, [r7, #12]
 80070b8:	e001      	b.n	80070be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80070be:	f7ff fa3d 	bl	800653c <vPortExitCritical>

	return xReturn;
 80070c2:	68fb      	ldr	r3, [r7, #12]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}

080070cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070d6:	2300      	movs	r3, #0
 80070d8:	60fb      	str	r3, [r7, #12]
 80070da:	e014      	b.n	8007106 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070dc:	4a0f      	ldr	r2, [pc, #60]	@ (800711c <vQueueAddToRegistry+0x50>)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10b      	bne.n	8007100 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070e8:	490c      	ldr	r1, [pc, #48]	@ (800711c <vQueueAddToRegistry+0x50>)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	683a      	ldr	r2, [r7, #0]
 80070ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070f2:	4a0a      	ldr	r2, [pc, #40]	@ (800711c <vQueueAddToRegistry+0x50>)
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	4413      	add	r3, r2
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80070fe:	e006      	b.n	800710e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3301      	adds	r3, #1
 8007104:	60fb      	str	r3, [r7, #12]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b07      	cmp	r3, #7
 800710a:	d9e7      	bls.n	80070dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800710c:	bf00      	nop
 800710e:	bf00      	nop
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	24004454 	.word	0x24004454

08007120 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007130:	f7ff f9d2 	bl	80064d8 <vPortEnterCritical>
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800713a:	b25b      	sxtb	r3, r3
 800713c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007140:	d103      	bne.n	800714a <vQueueWaitForMessageRestricted+0x2a>
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	2200      	movs	r2, #0
 8007146:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007150:	b25b      	sxtb	r3, r3
 8007152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007156:	d103      	bne.n	8007160 <vQueueWaitForMessageRestricted+0x40>
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	2200      	movs	r2, #0
 800715c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007160:	f7ff f9ec 	bl	800653c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007168:	2b00      	cmp	r3, #0
 800716a:	d106      	bne.n	800717a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	3324      	adds	r3, #36	@ 0x24
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	68b9      	ldr	r1, [r7, #8]
 8007174:	4618      	mov	r0, r3
 8007176:	f000 fc45 	bl	8007a04 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800717a:	6978      	ldr	r0, [r7, #20]
 800717c:	f7ff ff26 	bl	8006fcc <prvUnlockQueue>
	}
 8007180:	bf00      	nop
 8007182:	3718      	adds	r7, #24
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007188:	b580      	push	{r7, lr}
 800718a:	b08e      	sub	sp, #56	@ 0x38
 800718c:	af04      	add	r7, sp, #16
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007198:	2b00      	cmp	r3, #0
 800719a:	d10b      	bne.n	80071b4 <xTaskCreateStatic+0x2c>
	__asm volatile
 800719c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a0:	f383 8811 	msr	BASEPRI, r3
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	623b      	str	r3, [r7, #32]
}
 80071ae:	bf00      	nop
 80071b0:	bf00      	nop
 80071b2:	e7fd      	b.n	80071b0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80071b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10b      	bne.n	80071d2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80071ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	61fb      	str	r3, [r7, #28]
}
 80071cc:	bf00      	nop
 80071ce:	bf00      	nop
 80071d0:	e7fd      	b.n	80071ce <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071d2:	235c      	movs	r3, #92	@ 0x5c
 80071d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	2b5c      	cmp	r3, #92	@ 0x5c
 80071da:	d00b      	beq.n	80071f4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	61bb      	str	r3, [r7, #24]
}
 80071ee:	bf00      	nop
 80071f0:	bf00      	nop
 80071f2:	e7fd      	b.n	80071f0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80071f4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80071f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d01e      	beq.n	800723a <xTaskCreateStatic+0xb2>
 80071fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d01b      	beq.n	800723a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007204:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007208:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800720a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800720c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720e:	2202      	movs	r2, #2
 8007210:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007214:	2300      	movs	r3, #0
 8007216:	9303      	str	r3, [sp, #12]
 8007218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721a:	9302      	str	r3, [sp, #8]
 800721c:	f107 0314 	add.w	r3, r7, #20
 8007220:	9301      	str	r3, [sp, #4]
 8007222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007224:	9300      	str	r3, [sp, #0]
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	68b9      	ldr	r1, [r7, #8]
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 f850 	bl	80072d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007232:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007234:	f000 f8de 	bl	80073f4 <prvAddNewTaskToReadyList>
 8007238:	e001      	b.n	800723e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800723a:	2300      	movs	r3, #0
 800723c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800723e:	697b      	ldr	r3, [r7, #20]
	}
 8007240:	4618      	mov	r0, r3
 8007242:	3728      	adds	r7, #40	@ 0x28
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007248:	b580      	push	{r7, lr}
 800724a:	b08c      	sub	sp, #48	@ 0x30
 800724c:	af04      	add	r7, sp, #16
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	603b      	str	r3, [r7, #0]
 8007254:	4613      	mov	r3, r2
 8007256:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007258:	88fb      	ldrh	r3, [r7, #6]
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	4618      	mov	r0, r3
 800725e:	f7fe fd65 	bl	8005d2c <pvPortMalloc>
 8007262:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00e      	beq.n	8007288 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800726a:	205c      	movs	r0, #92	@ 0x5c
 800726c:	f7fe fd5e 	bl	8005d2c <pvPortMalloc>
 8007270:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	697a      	ldr	r2, [r7, #20]
 800727c:	631a      	str	r2, [r3, #48]	@ 0x30
 800727e:	e005      	b.n	800728c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007280:	6978      	ldr	r0, [r7, #20]
 8007282:	f7fe fe21 	bl	8005ec8 <vPortFree>
 8007286:	e001      	b.n	800728c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007288:	2300      	movs	r3, #0
 800728a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d017      	beq.n	80072c2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800729a:	88fa      	ldrh	r2, [r7, #6]
 800729c:	2300      	movs	r3, #0
 800729e:	9303      	str	r3, [sp, #12]
 80072a0:	69fb      	ldr	r3, [r7, #28]
 80072a2:	9302      	str	r3, [sp, #8]
 80072a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072a6:	9301      	str	r3, [sp, #4]
 80072a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	68b9      	ldr	r1, [r7, #8]
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 f80e 	bl	80072d2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80072b6:	69f8      	ldr	r0, [r7, #28]
 80072b8:	f000 f89c 	bl	80073f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80072bc:	2301      	movs	r3, #1
 80072be:	61bb      	str	r3, [r7, #24]
 80072c0:	e002      	b.n	80072c8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80072c2:	f04f 33ff 	mov.w	r3, #4294967295
 80072c6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80072c8:	69bb      	ldr	r3, [r7, #24]
	}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3720      	adds	r7, #32
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b088      	sub	sp, #32
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	60f8      	str	r0, [r7, #12]
 80072da:	60b9      	str	r1, [r7, #8]
 80072dc:	607a      	str	r2, [r7, #4]
 80072de:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80072e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	461a      	mov	r2, r3
 80072ea:	21a5      	movs	r1, #165	@ 0xa5
 80072ec:	f001 f9b2 	bl	8008654 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80072f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072f2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80072fa:	440b      	add	r3, r1
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	4413      	add	r3, r2
 8007300:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	f023 0307 	bic.w	r3, r3, #7
 8007308:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	f003 0307 	and.w	r3, r3, #7
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00b      	beq.n	800732c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007314:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	617b      	str	r3, [r7, #20]
}
 8007326:	bf00      	nop
 8007328:	bf00      	nop
 800732a:	e7fd      	b.n	8007328 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d01f      	beq.n	8007372 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007332:	2300      	movs	r3, #0
 8007334:	61fb      	str	r3, [r7, #28]
 8007336:	e012      	b.n	800735e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007338:	68ba      	ldr	r2, [r7, #8]
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	7819      	ldrb	r1, [r3, #0]
 8007340:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	4413      	add	r3, r2
 8007346:	3334      	adds	r3, #52	@ 0x34
 8007348:	460a      	mov	r2, r1
 800734a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	4413      	add	r3, r2
 8007352:	781b      	ldrb	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d006      	beq.n	8007366 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	3301      	adds	r3, #1
 800735c:	61fb      	str	r3, [r7, #28]
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	2b0f      	cmp	r3, #15
 8007362:	d9e9      	bls.n	8007338 <prvInitialiseNewTask+0x66>
 8007364:	e000      	b.n	8007368 <prvInitialiseNewTask+0x96>
			{
				break;
 8007366:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007370:	e003      	b.n	800737a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007374:	2200      	movs	r2, #0
 8007376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800737a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800737c:	2b37      	cmp	r3, #55	@ 0x37
 800737e:	d901      	bls.n	8007384 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007380:	2337      	movs	r3, #55	@ 0x37
 8007382:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007386:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007388:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800738a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800738c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800738e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007392:	2200      	movs	r2, #0
 8007394:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007398:	3304      	adds	r3, #4
 800739a:	4618      	mov	r0, r3
 800739c:	f7fe fed4 	bl	8006148 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80073a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073a2:	3318      	adds	r3, #24
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7fe fecf 	bl	8006148 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80073aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80073b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80073ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073be:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80073c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c2:	2200      	movs	r2, #0
 80073c4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	68f9      	ldr	r1, [r7, #12]
 80073d2:	69b8      	ldr	r0, [r7, #24]
 80073d4:	f7fe ff4c 	bl	8006270 <pxPortInitialiseStack>
 80073d8:	4602      	mov	r2, r0
 80073da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073dc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80073de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073e8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073ea:	bf00      	nop
 80073ec:	3720      	adds	r7, #32
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
	...

080073f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073fc:	f7ff f86c 	bl	80064d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007400:	4b2d      	ldr	r3, [pc, #180]	@ (80074b8 <prvAddNewTaskToReadyList+0xc4>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3301      	adds	r3, #1
 8007406:	4a2c      	ldr	r2, [pc, #176]	@ (80074b8 <prvAddNewTaskToReadyList+0xc4>)
 8007408:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800740a:	4b2c      	ldr	r3, [pc, #176]	@ (80074bc <prvAddNewTaskToReadyList+0xc8>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d109      	bne.n	8007426 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007412:	4a2a      	ldr	r2, [pc, #168]	@ (80074bc <prvAddNewTaskToReadyList+0xc8>)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007418:	4b27      	ldr	r3, [pc, #156]	@ (80074b8 <prvAddNewTaskToReadyList+0xc4>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2b01      	cmp	r3, #1
 800741e:	d110      	bne.n	8007442 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007420:	f000 fc1e 	bl	8007c60 <prvInitialiseTaskLists>
 8007424:	e00d      	b.n	8007442 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007426:	4b26      	ldr	r3, [pc, #152]	@ (80074c0 <prvAddNewTaskToReadyList+0xcc>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d109      	bne.n	8007442 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800742e:	4b23      	ldr	r3, [pc, #140]	@ (80074bc <prvAddNewTaskToReadyList+0xc8>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007438:	429a      	cmp	r2, r3
 800743a:	d802      	bhi.n	8007442 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800743c:	4a1f      	ldr	r2, [pc, #124]	@ (80074bc <prvAddNewTaskToReadyList+0xc8>)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007442:	4b20      	ldr	r3, [pc, #128]	@ (80074c4 <prvAddNewTaskToReadyList+0xd0>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3301      	adds	r3, #1
 8007448:	4a1e      	ldr	r2, [pc, #120]	@ (80074c4 <prvAddNewTaskToReadyList+0xd0>)
 800744a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800744c:	4b1d      	ldr	r3, [pc, #116]	@ (80074c4 <prvAddNewTaskToReadyList+0xd0>)
 800744e:	681a      	ldr	r2, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007458:	4b1b      	ldr	r3, [pc, #108]	@ (80074c8 <prvAddNewTaskToReadyList+0xd4>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	429a      	cmp	r2, r3
 800745e:	d903      	bls.n	8007468 <prvAddNewTaskToReadyList+0x74>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007464:	4a18      	ldr	r2, [pc, #96]	@ (80074c8 <prvAddNewTaskToReadyList+0xd4>)
 8007466:	6013      	str	r3, [r2, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800746c:	4613      	mov	r3, r2
 800746e:	009b      	lsls	r3, r3, #2
 8007470:	4413      	add	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4a15      	ldr	r2, [pc, #84]	@ (80074cc <prvAddNewTaskToReadyList+0xd8>)
 8007476:	441a      	add	r2, r3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3304      	adds	r3, #4
 800747c:	4619      	mov	r1, r3
 800747e:	4610      	mov	r0, r2
 8007480:	f7fe fe6f 	bl	8006162 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007484:	f7ff f85a 	bl	800653c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007488:	4b0d      	ldr	r3, [pc, #52]	@ (80074c0 <prvAddNewTaskToReadyList+0xcc>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d00e      	beq.n	80074ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007490:	4b0a      	ldr	r3, [pc, #40]	@ (80074bc <prvAddNewTaskToReadyList+0xc8>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749a:	429a      	cmp	r2, r3
 800749c:	d207      	bcs.n	80074ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800749e:	4b0c      	ldr	r3, [pc, #48]	@ (80074d0 <prvAddNewTaskToReadyList+0xdc>)
 80074a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074ae:	bf00      	nop
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	24004968 	.word	0x24004968
 80074bc:	24004494 	.word	0x24004494
 80074c0:	24004974 	.word	0x24004974
 80074c4:	24004984 	.word	0x24004984
 80074c8:	24004970 	.word	0x24004970
 80074cc:	24004498 	.word	0x24004498
 80074d0:	e000ed04 	.word	0xe000ed04

080074d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074dc:	2300      	movs	r3, #0
 80074de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d018      	beq.n	8007518 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074e6:	4b14      	ldr	r3, [pc, #80]	@ (8007538 <vTaskDelay+0x64>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d00b      	beq.n	8007506 <vTaskDelay+0x32>
	__asm volatile
 80074ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f2:	f383 8811 	msr	BASEPRI, r3
 80074f6:	f3bf 8f6f 	isb	sy
 80074fa:	f3bf 8f4f 	dsb	sy
 80074fe:	60bb      	str	r3, [r7, #8]
}
 8007500:	bf00      	nop
 8007502:	bf00      	nop
 8007504:	e7fd      	b.n	8007502 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007506:	f000 f883 	bl	8007610 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800750a:	2100      	movs	r1, #0
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fcf3 	bl	8007ef8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007512:	f000 f88b 	bl	800762c <xTaskResumeAll>
 8007516:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d107      	bne.n	800752e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800751e:	4b07      	ldr	r3, [pc, #28]	@ (800753c <vTaskDelay+0x68>)
 8007520:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007524:	601a      	str	r2, [r3, #0]
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800752e:	bf00      	nop
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	24004990 	.word	0x24004990
 800753c:	e000ed04 	.word	0xe000ed04

08007540 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b08a      	sub	sp, #40	@ 0x28
 8007544:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007546:	2300      	movs	r3, #0
 8007548:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800754a:	2300      	movs	r3, #0
 800754c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800754e:	463a      	mov	r2, r7
 8007550:	1d39      	adds	r1, r7, #4
 8007552:	f107 0308 	add.w	r3, r7, #8
 8007556:	4618      	mov	r0, r3
 8007558:	f7fe fbb4 	bl	8005cc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	9202      	str	r2, [sp, #8]
 8007564:	9301      	str	r3, [sp, #4]
 8007566:	2300      	movs	r3, #0
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	2300      	movs	r3, #0
 800756c:	460a      	mov	r2, r1
 800756e:	4922      	ldr	r1, [pc, #136]	@ (80075f8 <vTaskStartScheduler+0xb8>)
 8007570:	4822      	ldr	r0, [pc, #136]	@ (80075fc <vTaskStartScheduler+0xbc>)
 8007572:	f7ff fe09 	bl	8007188 <xTaskCreateStatic>
 8007576:	4603      	mov	r3, r0
 8007578:	4a21      	ldr	r2, [pc, #132]	@ (8007600 <vTaskStartScheduler+0xc0>)
 800757a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800757c:	4b20      	ldr	r3, [pc, #128]	@ (8007600 <vTaskStartScheduler+0xc0>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d002      	beq.n	800758a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007584:	2301      	movs	r3, #1
 8007586:	617b      	str	r3, [r7, #20]
 8007588:	e001      	b.n	800758e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800758a:	2300      	movs	r3, #0
 800758c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d102      	bne.n	800759a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007594:	f000 fd04 	bl	8007fa0 <xTimerCreateTimerTask>
 8007598:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d116      	bne.n	80075ce <vTaskStartScheduler+0x8e>
	__asm volatile
 80075a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a4:	f383 8811 	msr	BASEPRI, r3
 80075a8:	f3bf 8f6f 	isb	sy
 80075ac:	f3bf 8f4f 	dsb	sy
 80075b0:	613b      	str	r3, [r7, #16]
}
 80075b2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80075b4:	4b13      	ldr	r3, [pc, #76]	@ (8007604 <vTaskStartScheduler+0xc4>)
 80075b6:	f04f 32ff 	mov.w	r2, #4294967295
 80075ba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80075bc:	4b12      	ldr	r3, [pc, #72]	@ (8007608 <vTaskStartScheduler+0xc8>)
 80075be:	2201      	movs	r2, #1
 80075c0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80075c2:	4b12      	ldr	r3, [pc, #72]	@ (800760c <vTaskStartScheduler+0xcc>)
 80075c4:	2200      	movs	r2, #0
 80075c6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80075c8:	f7fe fee2 	bl	8006390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80075cc:	e00f      	b.n	80075ee <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d4:	d10b      	bne.n	80075ee <vTaskStartScheduler+0xae>
	__asm volatile
 80075d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	60fb      	str	r3, [r7, #12]
}
 80075e8:	bf00      	nop
 80075ea:	bf00      	nop
 80075ec:	e7fd      	b.n	80075ea <vTaskStartScheduler+0xaa>
}
 80075ee:	bf00      	nop
 80075f0:	3718      	adds	r7, #24
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	0800872c 	.word	0x0800872c
 80075fc:	08007c31 	.word	0x08007c31
 8007600:	2400498c 	.word	0x2400498c
 8007604:	24004988 	.word	0x24004988
 8007608:	24004974 	.word	0x24004974
 800760c:	2400496c 	.word	0x2400496c

08007610 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007610:	b480      	push	{r7}
 8007612:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007614:	4b04      	ldr	r3, [pc, #16]	@ (8007628 <vTaskSuspendAll+0x18>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	3301      	adds	r3, #1
 800761a:	4a03      	ldr	r2, [pc, #12]	@ (8007628 <vTaskSuspendAll+0x18>)
 800761c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800761e:	bf00      	nop
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	24004990 	.word	0x24004990

0800762c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007632:	2300      	movs	r3, #0
 8007634:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007636:	2300      	movs	r3, #0
 8007638:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800763a:	4b42      	ldr	r3, [pc, #264]	@ (8007744 <xTaskResumeAll+0x118>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10b      	bne.n	800765a <xTaskResumeAll+0x2e>
	__asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	603b      	str	r3, [r7, #0]
}
 8007654:	bf00      	nop
 8007656:	bf00      	nop
 8007658:	e7fd      	b.n	8007656 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800765a:	f7fe ff3d 	bl	80064d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800765e:	4b39      	ldr	r3, [pc, #228]	@ (8007744 <xTaskResumeAll+0x118>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	3b01      	subs	r3, #1
 8007664:	4a37      	ldr	r2, [pc, #220]	@ (8007744 <xTaskResumeAll+0x118>)
 8007666:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007668:	4b36      	ldr	r3, [pc, #216]	@ (8007744 <xTaskResumeAll+0x118>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d162      	bne.n	8007736 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007670:	4b35      	ldr	r3, [pc, #212]	@ (8007748 <xTaskResumeAll+0x11c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d05e      	beq.n	8007736 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007678:	e02f      	b.n	80076da <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800767a:	4b34      	ldr	r3, [pc, #208]	@ (800774c <xTaskResumeAll+0x120>)
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	3318      	adds	r3, #24
 8007686:	4618      	mov	r0, r3
 8007688:	f7fe fdc8 	bl	800621c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	3304      	adds	r3, #4
 8007690:	4618      	mov	r0, r3
 8007692:	f7fe fdc3 	bl	800621c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800769a:	4b2d      	ldr	r3, [pc, #180]	@ (8007750 <xTaskResumeAll+0x124>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d903      	bls.n	80076aa <xTaskResumeAll+0x7e>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a6:	4a2a      	ldr	r2, [pc, #168]	@ (8007750 <xTaskResumeAll+0x124>)
 80076a8:	6013      	str	r3, [r2, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ae:	4613      	mov	r3, r2
 80076b0:	009b      	lsls	r3, r3, #2
 80076b2:	4413      	add	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4a27      	ldr	r2, [pc, #156]	@ (8007754 <xTaskResumeAll+0x128>)
 80076b8:	441a      	add	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	3304      	adds	r3, #4
 80076be:	4619      	mov	r1, r3
 80076c0:	4610      	mov	r0, r2
 80076c2:	f7fe fd4e 	bl	8006162 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ca:	4b23      	ldr	r3, [pc, #140]	@ (8007758 <xTaskResumeAll+0x12c>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d302      	bcc.n	80076da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80076d4:	4b21      	ldr	r3, [pc, #132]	@ (800775c <xTaskResumeAll+0x130>)
 80076d6:	2201      	movs	r2, #1
 80076d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076da:	4b1c      	ldr	r3, [pc, #112]	@ (800774c <xTaskResumeAll+0x120>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1cb      	bne.n	800767a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d001      	beq.n	80076ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80076e8:	f000 fb58 	bl	8007d9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80076ec:	4b1c      	ldr	r3, [pc, #112]	@ (8007760 <xTaskResumeAll+0x134>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d010      	beq.n	800771a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80076f8:	f000 f846 	bl	8007788 <xTaskIncrementTick>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d002      	beq.n	8007708 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007702:	4b16      	ldr	r3, [pc, #88]	@ (800775c <xTaskResumeAll+0x130>)
 8007704:	2201      	movs	r2, #1
 8007706:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	3b01      	subs	r3, #1
 800770c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1f1      	bne.n	80076f8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007714:	4b12      	ldr	r3, [pc, #72]	@ (8007760 <xTaskResumeAll+0x134>)
 8007716:	2200      	movs	r2, #0
 8007718:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800771a:	4b10      	ldr	r3, [pc, #64]	@ (800775c <xTaskResumeAll+0x130>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d009      	beq.n	8007736 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007722:	2301      	movs	r3, #1
 8007724:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007726:	4b0f      	ldr	r3, [pc, #60]	@ (8007764 <xTaskResumeAll+0x138>)
 8007728:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800772c:	601a      	str	r2, [r3, #0]
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007736:	f7fe ff01 	bl	800653c <vPortExitCritical>

	return xAlreadyYielded;
 800773a:	68bb      	ldr	r3, [r7, #8]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}
 8007744:	24004990 	.word	0x24004990
 8007748:	24004968 	.word	0x24004968
 800774c:	24004928 	.word	0x24004928
 8007750:	24004970 	.word	0x24004970
 8007754:	24004498 	.word	0x24004498
 8007758:	24004494 	.word	0x24004494
 800775c:	2400497c 	.word	0x2400497c
 8007760:	24004978 	.word	0x24004978
 8007764:	e000ed04 	.word	0xe000ed04

08007768 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800776e:	4b05      	ldr	r3, [pc, #20]	@ (8007784 <xTaskGetTickCount+0x1c>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007774:	687b      	ldr	r3, [r7, #4]
}
 8007776:	4618      	mov	r0, r3
 8007778:	370c      	adds	r7, #12
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop
 8007784:	2400496c 	.word	0x2400496c

08007788 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800778e:	2300      	movs	r3, #0
 8007790:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007792:	4b4f      	ldr	r3, [pc, #316]	@ (80078d0 <xTaskIncrementTick+0x148>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	f040 8090 	bne.w	80078bc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800779c:	4b4d      	ldr	r3, [pc, #308]	@ (80078d4 <xTaskIncrementTick+0x14c>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3301      	adds	r3, #1
 80077a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80077a4:	4a4b      	ldr	r2, [pc, #300]	@ (80078d4 <xTaskIncrementTick+0x14c>)
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d121      	bne.n	80077f4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80077b0:	4b49      	ldr	r3, [pc, #292]	@ (80078d8 <xTaskIncrementTick+0x150>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d00b      	beq.n	80077d2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80077ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077be:	f383 8811 	msr	BASEPRI, r3
 80077c2:	f3bf 8f6f 	isb	sy
 80077c6:	f3bf 8f4f 	dsb	sy
 80077ca:	603b      	str	r3, [r7, #0]
}
 80077cc:	bf00      	nop
 80077ce:	bf00      	nop
 80077d0:	e7fd      	b.n	80077ce <xTaskIncrementTick+0x46>
 80077d2:	4b41      	ldr	r3, [pc, #260]	@ (80078d8 <xTaskIncrementTick+0x150>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	4b40      	ldr	r3, [pc, #256]	@ (80078dc <xTaskIncrementTick+0x154>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a3e      	ldr	r2, [pc, #248]	@ (80078d8 <xTaskIncrementTick+0x150>)
 80077de:	6013      	str	r3, [r2, #0]
 80077e0:	4a3e      	ldr	r2, [pc, #248]	@ (80078dc <xTaskIncrementTick+0x154>)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	4b3e      	ldr	r3, [pc, #248]	@ (80078e0 <xTaskIncrementTick+0x158>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3301      	adds	r3, #1
 80077ec:	4a3c      	ldr	r2, [pc, #240]	@ (80078e0 <xTaskIncrementTick+0x158>)
 80077ee:	6013      	str	r3, [r2, #0]
 80077f0:	f000 fad4 	bl	8007d9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80077f4:	4b3b      	ldr	r3, [pc, #236]	@ (80078e4 <xTaskIncrementTick+0x15c>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d349      	bcc.n	8007892 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077fe:	4b36      	ldr	r3, [pc, #216]	@ (80078d8 <xTaskIncrementTick+0x150>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d104      	bne.n	8007812 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007808:	4b36      	ldr	r3, [pc, #216]	@ (80078e4 <xTaskIncrementTick+0x15c>)
 800780a:	f04f 32ff 	mov.w	r2, #4294967295
 800780e:	601a      	str	r2, [r3, #0]
					break;
 8007810:	e03f      	b.n	8007892 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007812:	4b31      	ldr	r3, [pc, #196]	@ (80078d8 <xTaskIncrementTick+0x150>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	429a      	cmp	r2, r3
 8007828:	d203      	bcs.n	8007832 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800782a:	4a2e      	ldr	r2, [pc, #184]	@ (80078e4 <xTaskIncrementTick+0x15c>)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007830:	e02f      	b.n	8007892 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	3304      	adds	r3, #4
 8007836:	4618      	mov	r0, r3
 8007838:	f7fe fcf0 	bl	800621c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007840:	2b00      	cmp	r3, #0
 8007842:	d004      	beq.n	800784e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	3318      	adds	r3, #24
 8007848:	4618      	mov	r0, r3
 800784a:	f7fe fce7 	bl	800621c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007852:	4b25      	ldr	r3, [pc, #148]	@ (80078e8 <xTaskIncrementTick+0x160>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	429a      	cmp	r2, r3
 8007858:	d903      	bls.n	8007862 <xTaskIncrementTick+0xda>
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785e:	4a22      	ldr	r2, [pc, #136]	@ (80078e8 <xTaskIncrementTick+0x160>)
 8007860:	6013      	str	r3, [r2, #0]
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007866:	4613      	mov	r3, r2
 8007868:	009b      	lsls	r3, r3, #2
 800786a:	4413      	add	r3, r2
 800786c:	009b      	lsls	r3, r3, #2
 800786e:	4a1f      	ldr	r2, [pc, #124]	@ (80078ec <xTaskIncrementTick+0x164>)
 8007870:	441a      	add	r2, r3
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	3304      	adds	r3, #4
 8007876:	4619      	mov	r1, r3
 8007878:	4610      	mov	r0, r2
 800787a:	f7fe fc72 	bl	8006162 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800787e:	68bb      	ldr	r3, [r7, #8]
 8007880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007882:	4b1b      	ldr	r3, [pc, #108]	@ (80078f0 <xTaskIncrementTick+0x168>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007888:	429a      	cmp	r2, r3
 800788a:	d3b8      	bcc.n	80077fe <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800788c:	2301      	movs	r3, #1
 800788e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007890:	e7b5      	b.n	80077fe <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007892:	4b17      	ldr	r3, [pc, #92]	@ (80078f0 <xTaskIncrementTick+0x168>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007898:	4914      	ldr	r1, [pc, #80]	@ (80078ec <xTaskIncrementTick+0x164>)
 800789a:	4613      	mov	r3, r2
 800789c:	009b      	lsls	r3, r3, #2
 800789e:	4413      	add	r3, r2
 80078a0:	009b      	lsls	r3, r3, #2
 80078a2:	440b      	add	r3, r1
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b01      	cmp	r3, #1
 80078a8:	d901      	bls.n	80078ae <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80078aa:	2301      	movs	r3, #1
 80078ac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80078ae:	4b11      	ldr	r3, [pc, #68]	@ (80078f4 <xTaskIncrementTick+0x16c>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d007      	beq.n	80078c6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80078b6:	2301      	movs	r3, #1
 80078b8:	617b      	str	r3, [r7, #20]
 80078ba:	e004      	b.n	80078c6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80078bc:	4b0e      	ldr	r3, [pc, #56]	@ (80078f8 <xTaskIncrementTick+0x170>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3301      	adds	r3, #1
 80078c2:	4a0d      	ldr	r2, [pc, #52]	@ (80078f8 <xTaskIncrementTick+0x170>)
 80078c4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80078c6:	697b      	ldr	r3, [r7, #20]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3718      	adds	r7, #24
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	24004990 	.word	0x24004990
 80078d4:	2400496c 	.word	0x2400496c
 80078d8:	24004920 	.word	0x24004920
 80078dc:	24004924 	.word	0x24004924
 80078e0:	24004980 	.word	0x24004980
 80078e4:	24004988 	.word	0x24004988
 80078e8:	24004970 	.word	0x24004970
 80078ec:	24004498 	.word	0x24004498
 80078f0:	24004494 	.word	0x24004494
 80078f4:	2400497c 	.word	0x2400497c
 80078f8:	24004978 	.word	0x24004978

080078fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007902:	4b28      	ldr	r3, [pc, #160]	@ (80079a4 <vTaskSwitchContext+0xa8>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d003      	beq.n	8007912 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800790a:	4b27      	ldr	r3, [pc, #156]	@ (80079a8 <vTaskSwitchContext+0xac>)
 800790c:	2201      	movs	r2, #1
 800790e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007910:	e042      	b.n	8007998 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007912:	4b25      	ldr	r3, [pc, #148]	@ (80079a8 <vTaskSwitchContext+0xac>)
 8007914:	2200      	movs	r2, #0
 8007916:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007918:	4b24      	ldr	r3, [pc, #144]	@ (80079ac <vTaskSwitchContext+0xb0>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	60fb      	str	r3, [r7, #12]
 800791e:	e011      	b.n	8007944 <vTaskSwitchContext+0x48>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10b      	bne.n	800793e <vTaskSwitchContext+0x42>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	607b      	str	r3, [r7, #4]
}
 8007938:	bf00      	nop
 800793a:	bf00      	nop
 800793c:	e7fd      	b.n	800793a <vTaskSwitchContext+0x3e>
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	3b01      	subs	r3, #1
 8007942:	60fb      	str	r3, [r7, #12]
 8007944:	491a      	ldr	r1, [pc, #104]	@ (80079b0 <vTaskSwitchContext+0xb4>)
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	4613      	mov	r3, r2
 800794a:	009b      	lsls	r3, r3, #2
 800794c:	4413      	add	r3, r2
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	440b      	add	r3, r1
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d0e3      	beq.n	8007920 <vTaskSwitchContext+0x24>
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	4613      	mov	r3, r2
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	009b      	lsls	r3, r3, #2
 8007962:	4a13      	ldr	r2, [pc, #76]	@ (80079b0 <vTaskSwitchContext+0xb4>)
 8007964:	4413      	add	r3, r2
 8007966:	60bb      	str	r3, [r7, #8]
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	68bb      	ldr	r3, [r7, #8]
 8007970:	605a      	str	r2, [r3, #4]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	3308      	adds	r3, #8
 800797a:	429a      	cmp	r2, r3
 800797c:	d104      	bne.n	8007988 <vTaskSwitchContext+0x8c>
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	605a      	str	r2, [r3, #4]
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	4a09      	ldr	r2, [pc, #36]	@ (80079b4 <vTaskSwitchContext+0xb8>)
 8007990:	6013      	str	r3, [r2, #0]
 8007992:	4a06      	ldr	r2, [pc, #24]	@ (80079ac <vTaskSwitchContext+0xb0>)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6013      	str	r3, [r2, #0]
}
 8007998:	bf00      	nop
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	24004990 	.word	0x24004990
 80079a8:	2400497c 	.word	0x2400497c
 80079ac:	24004970 	.word	0x24004970
 80079b0:	24004498 	.word	0x24004498
 80079b4:	24004494 	.word	0x24004494

080079b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10b      	bne.n	80079e0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80079c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079cc:	f383 8811 	msr	BASEPRI, r3
 80079d0:	f3bf 8f6f 	isb	sy
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	60fb      	str	r3, [r7, #12]
}
 80079da:	bf00      	nop
 80079dc:	bf00      	nop
 80079de:	e7fd      	b.n	80079dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079e0:	4b07      	ldr	r3, [pc, #28]	@ (8007a00 <vTaskPlaceOnEventList+0x48>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	3318      	adds	r3, #24
 80079e6:	4619      	mov	r1, r3
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7fe fbde 	bl	80061aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079ee:	2101      	movs	r1, #1
 80079f0:	6838      	ldr	r0, [r7, #0]
 80079f2:	f000 fa81 	bl	8007ef8 <prvAddCurrentTaskToDelayedList>
}
 80079f6:	bf00      	nop
 80079f8:	3710      	adds	r7, #16
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	bf00      	nop
 8007a00:	24004494 	.word	0x24004494

08007a04 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d10b      	bne.n	8007a2e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a1a:	f383 8811 	msr	BASEPRI, r3
 8007a1e:	f3bf 8f6f 	isb	sy
 8007a22:	f3bf 8f4f 	dsb	sy
 8007a26:	617b      	str	r3, [r7, #20]
}
 8007a28:	bf00      	nop
 8007a2a:	bf00      	nop
 8007a2c:	e7fd      	b.n	8007a2a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a58 <vTaskPlaceOnEventListRestricted+0x54>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	3318      	adds	r3, #24
 8007a34:	4619      	mov	r1, r3
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f7fe fb93 	bl	8006162 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d002      	beq.n	8007a48 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007a42:	f04f 33ff 	mov.w	r3, #4294967295
 8007a46:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a48:	6879      	ldr	r1, [r7, #4]
 8007a4a:	68b8      	ldr	r0, [r7, #8]
 8007a4c:	f000 fa54 	bl	8007ef8 <prvAddCurrentTaskToDelayedList>
	}
 8007a50:	bf00      	nop
 8007a52:	3718      	adds	r7, #24
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	24004494 	.word	0x24004494

08007a5c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10b      	bne.n	8007a8a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	60fb      	str	r3, [r7, #12]
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop
 8007a88:	e7fd      	b.n	8007a86 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	3318      	adds	r3, #24
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fe fbc4 	bl	800621c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a94:	4b1d      	ldr	r3, [pc, #116]	@ (8007b0c <xTaskRemoveFromEventList+0xb0>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d11d      	bne.n	8007ad8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fe fbbb 	bl	800621c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aaa:	4b19      	ldr	r3, [pc, #100]	@ (8007b10 <xTaskRemoveFromEventList+0xb4>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d903      	bls.n	8007aba <xTaskRemoveFromEventList+0x5e>
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ab6:	4a16      	ldr	r2, [pc, #88]	@ (8007b10 <xTaskRemoveFromEventList+0xb4>)
 8007ab8:	6013      	str	r3, [r2, #0]
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007abe:	4613      	mov	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	4413      	add	r3, r2
 8007ac4:	009b      	lsls	r3, r3, #2
 8007ac6:	4a13      	ldr	r2, [pc, #76]	@ (8007b14 <xTaskRemoveFromEventList+0xb8>)
 8007ac8:	441a      	add	r2, r3
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	3304      	adds	r3, #4
 8007ace:	4619      	mov	r1, r3
 8007ad0:	4610      	mov	r0, r2
 8007ad2:	f7fe fb46 	bl	8006162 <vListInsertEnd>
 8007ad6:	e005      	b.n	8007ae4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	3318      	adds	r3, #24
 8007adc:	4619      	mov	r1, r3
 8007ade:	480e      	ldr	r0, [pc, #56]	@ (8007b18 <xTaskRemoveFromEventList+0xbc>)
 8007ae0:	f7fe fb3f 	bl	8006162 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8007b1c <xTaskRemoveFromEventList+0xc0>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d905      	bls.n	8007afe <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007af2:	2301      	movs	r3, #1
 8007af4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007af6:	4b0a      	ldr	r3, [pc, #40]	@ (8007b20 <xTaskRemoveFromEventList+0xc4>)
 8007af8:	2201      	movs	r2, #1
 8007afa:	601a      	str	r2, [r3, #0]
 8007afc:	e001      	b.n	8007b02 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007afe:	2300      	movs	r3, #0
 8007b00:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007b02:	697b      	ldr	r3, [r7, #20]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	24004990 	.word	0x24004990
 8007b10:	24004970 	.word	0x24004970
 8007b14:	24004498 	.word	0x24004498
 8007b18:	24004928 	.word	0x24004928
 8007b1c:	24004494 	.word	0x24004494
 8007b20:	2400497c 	.word	0x2400497c

08007b24 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b2c:	4b06      	ldr	r3, [pc, #24]	@ (8007b48 <vTaskInternalSetTimeOutState+0x24>)
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b34:	4b05      	ldr	r3, [pc, #20]	@ (8007b4c <vTaskInternalSetTimeOutState+0x28>)
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	605a      	str	r2, [r3, #4]
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr
 8007b48:	24004980 	.word	0x24004980
 8007b4c:	2400496c 	.word	0x2400496c

08007b50 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10b      	bne.n	8007b78 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	613b      	str	r3, [r7, #16]
}
 8007b72:	bf00      	nop
 8007b74:	bf00      	nop
 8007b76:	e7fd      	b.n	8007b74 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10b      	bne.n	8007b96 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	60fb      	str	r3, [r7, #12]
}
 8007b90:	bf00      	nop
 8007b92:	bf00      	nop
 8007b94:	e7fd      	b.n	8007b92 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007b96:	f7fe fc9f 	bl	80064d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b9a:	4b1d      	ldr	r3, [pc, #116]	@ (8007c10 <xTaskCheckForTimeOut+0xc0>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb2:	d102      	bne.n	8007bba <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	61fb      	str	r3, [r7, #28]
 8007bb8:	e023      	b.n	8007c02 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	4b15      	ldr	r3, [pc, #84]	@ (8007c14 <xTaskCheckForTimeOut+0xc4>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d007      	beq.n	8007bd6 <xTaskCheckForTimeOut+0x86>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	69ba      	ldr	r2, [r7, #24]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d302      	bcc.n	8007bd6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	61fb      	str	r3, [r7, #28]
 8007bd4:	e015      	b.n	8007c02 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d20b      	bcs.n	8007bf8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	1ad2      	subs	r2, r2, r3
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f7ff ff99 	bl	8007b24 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	61fb      	str	r3, [r7, #28]
 8007bf6:	e004      	b.n	8007c02 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007c02:	f7fe fc9b 	bl	800653c <vPortExitCritical>

	return xReturn;
 8007c06:	69fb      	ldr	r3, [r7, #28]
}
 8007c08:	4618      	mov	r0, r3
 8007c0a:	3720      	adds	r7, #32
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	bd80      	pop	{r7, pc}
 8007c10:	2400496c 	.word	0x2400496c
 8007c14:	24004980 	.word	0x24004980

08007c18 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007c18:	b480      	push	{r7}
 8007c1a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007c1c:	4b03      	ldr	r3, [pc, #12]	@ (8007c2c <vTaskMissedYield+0x14>)
 8007c1e:	2201      	movs	r2, #1
 8007c20:	601a      	str	r2, [r3, #0]
}
 8007c22:	bf00      	nop
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	2400497c 	.word	0x2400497c

08007c30 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c38:	f000 f852 	bl	8007ce0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c3c:	4b06      	ldr	r3, [pc, #24]	@ (8007c58 <prvIdleTask+0x28>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b01      	cmp	r3, #1
 8007c42:	d9f9      	bls.n	8007c38 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007c44:	4b05      	ldr	r3, [pc, #20]	@ (8007c5c <prvIdleTask+0x2c>)
 8007c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007c54:	e7f0      	b.n	8007c38 <prvIdleTask+0x8>
 8007c56:	bf00      	nop
 8007c58:	24004498 	.word	0x24004498
 8007c5c:	e000ed04 	.word	0xe000ed04

08007c60 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c66:	2300      	movs	r3, #0
 8007c68:	607b      	str	r3, [r7, #4]
 8007c6a:	e00c      	b.n	8007c86 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	4413      	add	r3, r2
 8007c74:	009b      	lsls	r3, r3, #2
 8007c76:	4a12      	ldr	r2, [pc, #72]	@ (8007cc0 <prvInitialiseTaskLists+0x60>)
 8007c78:	4413      	add	r3, r2
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fe fa44 	bl	8006108 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	3301      	adds	r3, #1
 8007c84:	607b      	str	r3, [r7, #4]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b37      	cmp	r3, #55	@ 0x37
 8007c8a:	d9ef      	bls.n	8007c6c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c8c:	480d      	ldr	r0, [pc, #52]	@ (8007cc4 <prvInitialiseTaskLists+0x64>)
 8007c8e:	f7fe fa3b 	bl	8006108 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c92:	480d      	ldr	r0, [pc, #52]	@ (8007cc8 <prvInitialiseTaskLists+0x68>)
 8007c94:	f7fe fa38 	bl	8006108 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c98:	480c      	ldr	r0, [pc, #48]	@ (8007ccc <prvInitialiseTaskLists+0x6c>)
 8007c9a:	f7fe fa35 	bl	8006108 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c9e:	480c      	ldr	r0, [pc, #48]	@ (8007cd0 <prvInitialiseTaskLists+0x70>)
 8007ca0:	f7fe fa32 	bl	8006108 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ca4:	480b      	ldr	r0, [pc, #44]	@ (8007cd4 <prvInitialiseTaskLists+0x74>)
 8007ca6:	f7fe fa2f 	bl	8006108 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007caa:	4b0b      	ldr	r3, [pc, #44]	@ (8007cd8 <prvInitialiseTaskLists+0x78>)
 8007cac:	4a05      	ldr	r2, [pc, #20]	@ (8007cc4 <prvInitialiseTaskLists+0x64>)
 8007cae:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8007cdc <prvInitialiseTaskLists+0x7c>)
 8007cb2:	4a05      	ldr	r2, [pc, #20]	@ (8007cc8 <prvInitialiseTaskLists+0x68>)
 8007cb4:	601a      	str	r2, [r3, #0]
}
 8007cb6:	bf00      	nop
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	24004498 	.word	0x24004498
 8007cc4:	240048f8 	.word	0x240048f8
 8007cc8:	2400490c 	.word	0x2400490c
 8007ccc:	24004928 	.word	0x24004928
 8007cd0:	2400493c 	.word	0x2400493c
 8007cd4:	24004954 	.word	0x24004954
 8007cd8:	24004920 	.word	0x24004920
 8007cdc:	24004924 	.word	0x24004924

08007ce0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ce6:	e019      	b.n	8007d1c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ce8:	f7fe fbf6 	bl	80064d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cec:	4b10      	ldr	r3, [pc, #64]	@ (8007d30 <prvCheckTasksWaitingTermination+0x50>)
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7fe fa8f 	bl	800621c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8007d34 <prvCheckTasksWaitingTermination+0x54>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	3b01      	subs	r3, #1
 8007d04:	4a0b      	ldr	r2, [pc, #44]	@ (8007d34 <prvCheckTasksWaitingTermination+0x54>)
 8007d06:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007d08:	4b0b      	ldr	r3, [pc, #44]	@ (8007d38 <prvCheckTasksWaitingTermination+0x58>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8007d38 <prvCheckTasksWaitingTermination+0x58>)
 8007d10:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007d12:	f7fe fc13 	bl	800653c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f810 	bl	8007d3c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d1c:	4b06      	ldr	r3, [pc, #24]	@ (8007d38 <prvCheckTasksWaitingTermination+0x58>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1e1      	bne.n	8007ce8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop
 8007d28:	3708      	adds	r7, #8
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	2400493c 	.word	0x2400493c
 8007d34:	24004968 	.word	0x24004968
 8007d38:	24004950 	.word	0x24004950

08007d3c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d108      	bne.n	8007d60 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7fe f8b8 	bl	8005ec8 <vPortFree>
				vPortFree( pxTCB );
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7fe f8b5 	bl	8005ec8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d5e:	e019      	b.n	8007d94 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d103      	bne.n	8007d72 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f7fe f8ac 	bl	8005ec8 <vPortFree>
	}
 8007d70:	e010      	b.n	8007d94 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007d78:	2b02      	cmp	r3, #2
 8007d7a:	d00b      	beq.n	8007d94 <prvDeleteTCB+0x58>
	__asm volatile
 8007d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d80:	f383 8811 	msr	BASEPRI, r3
 8007d84:	f3bf 8f6f 	isb	sy
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	60fb      	str	r3, [r7, #12]
}
 8007d8e:	bf00      	nop
 8007d90:	bf00      	nop
 8007d92:	e7fd      	b.n	8007d90 <prvDeleteTCB+0x54>
	}
 8007d94:	bf00      	nop
 8007d96:	3710      	adds	r7, #16
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007da2:	4b0c      	ldr	r3, [pc, #48]	@ (8007dd4 <prvResetNextTaskUnblockTime+0x38>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d104      	bne.n	8007db6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007dac:	4b0a      	ldr	r3, [pc, #40]	@ (8007dd8 <prvResetNextTaskUnblockTime+0x3c>)
 8007dae:	f04f 32ff 	mov.w	r2, #4294967295
 8007db2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007db4:	e008      	b.n	8007dc8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007db6:	4b07      	ldr	r3, [pc, #28]	@ (8007dd4 <prvResetNextTaskUnblockTime+0x38>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68db      	ldr	r3, [r3, #12]
 8007dbc:	68db      	ldr	r3, [r3, #12]
 8007dbe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	685b      	ldr	r3, [r3, #4]
 8007dc4:	4a04      	ldr	r2, [pc, #16]	@ (8007dd8 <prvResetNextTaskUnblockTime+0x3c>)
 8007dc6:	6013      	str	r3, [r2, #0]
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	24004920 	.word	0x24004920
 8007dd8:	24004988 	.word	0x24004988

08007ddc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007de2:	4b0b      	ldr	r3, [pc, #44]	@ (8007e10 <xTaskGetSchedulerState+0x34>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d102      	bne.n	8007df0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007dea:	2301      	movs	r3, #1
 8007dec:	607b      	str	r3, [r7, #4]
 8007dee:	e008      	b.n	8007e02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007df0:	4b08      	ldr	r3, [pc, #32]	@ (8007e14 <xTaskGetSchedulerState+0x38>)
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d102      	bne.n	8007dfe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007df8:	2302      	movs	r3, #2
 8007dfa:	607b      	str	r3, [r7, #4]
 8007dfc:	e001      	b.n	8007e02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007e02:	687b      	ldr	r3, [r7, #4]
	}
 8007e04:	4618      	mov	r0, r3
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr
 8007e10:	24004974 	.word	0x24004974
 8007e14:	24004990 	.word	0x24004990

08007e18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b086      	sub	sp, #24
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e24:	2300      	movs	r3, #0
 8007e26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d058      	beq.n	8007ee0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8007eec <xTaskPriorityDisinherit+0xd4>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d00b      	beq.n	8007e50 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e3c:	f383 8811 	msr	BASEPRI, r3
 8007e40:	f3bf 8f6f 	isb	sy
 8007e44:	f3bf 8f4f 	dsb	sy
 8007e48:	60fb      	str	r3, [r7, #12]
}
 8007e4a:	bf00      	nop
 8007e4c:	bf00      	nop
 8007e4e:	e7fd      	b.n	8007e4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10b      	bne.n	8007e70 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e5c:	f383 8811 	msr	BASEPRI, r3
 8007e60:	f3bf 8f6f 	isb	sy
 8007e64:	f3bf 8f4f 	dsb	sy
 8007e68:	60bb      	str	r3, [r7, #8]
}
 8007e6a:	bf00      	nop
 8007e6c:	bf00      	nop
 8007e6e:	e7fd      	b.n	8007e6c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e74:	1e5a      	subs	r2, r3, #1
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d02c      	beq.n	8007ee0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d128      	bne.n	8007ee0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	3304      	adds	r3, #4
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7fe f9c2 	bl	800621c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007ea8:	693b      	ldr	r3, [r7, #16]
 8007eaa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8007ef0 <xTaskPriorityDisinherit+0xd8>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d903      	bls.n	8007ec0 <xTaskPriorityDisinherit+0xa8>
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ebc:	4a0c      	ldr	r2, [pc, #48]	@ (8007ef0 <xTaskPriorityDisinherit+0xd8>)
 8007ebe:	6013      	str	r3, [r2, #0]
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	4413      	add	r3, r2
 8007eca:	009b      	lsls	r3, r3, #2
 8007ecc:	4a09      	ldr	r2, [pc, #36]	@ (8007ef4 <xTaskPriorityDisinherit+0xdc>)
 8007ece:	441a      	add	r2, r3
 8007ed0:	693b      	ldr	r3, [r7, #16]
 8007ed2:	3304      	adds	r3, #4
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	4610      	mov	r0, r2
 8007ed8:	f7fe f943 	bl	8006162 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007edc:	2301      	movs	r3, #1
 8007ede:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ee0:	697b      	ldr	r3, [r7, #20]
	}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	24004494 	.word	0x24004494
 8007ef0:	24004970 	.word	0x24004970
 8007ef4:	24004498 	.word	0x24004498

08007ef8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f02:	4b21      	ldr	r3, [pc, #132]	@ (8007f88 <prvAddCurrentTaskToDelayedList+0x90>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f08:	4b20      	ldr	r3, [pc, #128]	@ (8007f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	3304      	adds	r3, #4
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fe f984 	bl	800621c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f1a:	d10a      	bne.n	8007f32 <prvAddCurrentTaskToDelayedList+0x3a>
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d007      	beq.n	8007f32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f22:	4b1a      	ldr	r3, [pc, #104]	@ (8007f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	3304      	adds	r3, #4
 8007f28:	4619      	mov	r1, r3
 8007f2a:	4819      	ldr	r0, [pc, #100]	@ (8007f90 <prvAddCurrentTaskToDelayedList+0x98>)
 8007f2c:	f7fe f919 	bl	8006162 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f30:	e026      	b.n	8007f80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	4413      	add	r3, r2
 8007f38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f3a:	4b14      	ldr	r3, [pc, #80]	@ (8007f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f42:	68ba      	ldr	r2, [r7, #8]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d209      	bcs.n	8007f5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f4a:	4b12      	ldr	r3, [pc, #72]	@ (8007f94 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8007f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	3304      	adds	r3, #4
 8007f54:	4619      	mov	r1, r3
 8007f56:	4610      	mov	r0, r2
 8007f58:	f7fe f927 	bl	80061aa <vListInsert>
}
 8007f5c:	e010      	b.n	8007f80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f5e:	4b0e      	ldr	r3, [pc, #56]	@ (8007f98 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	4b0a      	ldr	r3, [pc, #40]	@ (8007f8c <prvAddCurrentTaskToDelayedList+0x94>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	3304      	adds	r3, #4
 8007f68:	4619      	mov	r1, r3
 8007f6a:	4610      	mov	r0, r2
 8007f6c:	f7fe f91d 	bl	80061aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007f70:	4b0a      	ldr	r3, [pc, #40]	@ (8007f9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d202      	bcs.n	8007f80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007f7a:	4a08      	ldr	r2, [pc, #32]	@ (8007f9c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	6013      	str	r3, [r2, #0]
}
 8007f80:	bf00      	nop
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}
 8007f88:	2400496c 	.word	0x2400496c
 8007f8c:	24004494 	.word	0x24004494
 8007f90:	24004954 	.word	0x24004954
 8007f94:	24004924 	.word	0x24004924
 8007f98:	24004920 	.word	0x24004920
 8007f9c:	24004988 	.word	0x24004988

08007fa0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b08a      	sub	sp, #40	@ 0x28
 8007fa4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007faa:	f000 fb13 	bl	80085d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007fae:	4b1d      	ldr	r3, [pc, #116]	@ (8008024 <xTimerCreateTimerTask+0x84>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d021      	beq.n	8007ffa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007fbe:	1d3a      	adds	r2, r7, #4
 8007fc0:	f107 0108 	add.w	r1, r7, #8
 8007fc4:	f107 030c 	add.w	r3, r7, #12
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7fd fe95 	bl	8005cf8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007fce:	6879      	ldr	r1, [r7, #4]
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	68fa      	ldr	r2, [r7, #12]
 8007fd4:	9202      	str	r2, [sp, #8]
 8007fd6:	9301      	str	r3, [sp, #4]
 8007fd8:	2302      	movs	r3, #2
 8007fda:	9300      	str	r3, [sp, #0]
 8007fdc:	2300      	movs	r3, #0
 8007fde:	460a      	mov	r2, r1
 8007fe0:	4911      	ldr	r1, [pc, #68]	@ (8008028 <xTimerCreateTimerTask+0x88>)
 8007fe2:	4812      	ldr	r0, [pc, #72]	@ (800802c <xTimerCreateTimerTask+0x8c>)
 8007fe4:	f7ff f8d0 	bl	8007188 <xTaskCreateStatic>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	4a11      	ldr	r2, [pc, #68]	@ (8008030 <xTimerCreateTimerTask+0x90>)
 8007fec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007fee:	4b10      	ldr	r3, [pc, #64]	@ (8008030 <xTimerCreateTimerTask+0x90>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d001      	beq.n	8007ffa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d10b      	bne.n	8008018 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008004:	f383 8811 	msr	BASEPRI, r3
 8008008:	f3bf 8f6f 	isb	sy
 800800c:	f3bf 8f4f 	dsb	sy
 8008010:	613b      	str	r3, [r7, #16]
}
 8008012:	bf00      	nop
 8008014:	bf00      	nop
 8008016:	e7fd      	b.n	8008014 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008018:	697b      	ldr	r3, [r7, #20]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	240049c4 	.word	0x240049c4
 8008028:	08008734 	.word	0x08008734
 800802c:	0800816d 	.word	0x0800816d
 8008030:	240049c8 	.word	0x240049c8

08008034 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b08a      	sub	sp, #40	@ 0x28
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
 8008040:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008042:	2300      	movs	r3, #0
 8008044:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d10b      	bne.n	8008064 <xTimerGenericCommand+0x30>
	__asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	623b      	str	r3, [r7, #32]
}
 800805e:	bf00      	nop
 8008060:	bf00      	nop
 8008062:	e7fd      	b.n	8008060 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008064:	4b19      	ldr	r3, [pc, #100]	@ (80080cc <xTimerGenericCommand+0x98>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d02a      	beq.n	80080c2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	2b05      	cmp	r3, #5
 800807c:	dc18      	bgt.n	80080b0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800807e:	f7ff fead 	bl	8007ddc <xTaskGetSchedulerState>
 8008082:	4603      	mov	r3, r0
 8008084:	2b02      	cmp	r3, #2
 8008086:	d109      	bne.n	800809c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008088:	4b10      	ldr	r3, [pc, #64]	@ (80080cc <xTimerGenericCommand+0x98>)
 800808a:	6818      	ldr	r0, [r3, #0]
 800808c:	f107 0110 	add.w	r1, r7, #16
 8008090:	2300      	movs	r3, #0
 8008092:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008094:	f7fe fc88 	bl	80069a8 <xQueueGenericSend>
 8008098:	6278      	str	r0, [r7, #36]	@ 0x24
 800809a:	e012      	b.n	80080c2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800809c:	4b0b      	ldr	r3, [pc, #44]	@ (80080cc <xTimerGenericCommand+0x98>)
 800809e:	6818      	ldr	r0, [r3, #0]
 80080a0:	f107 0110 	add.w	r1, r7, #16
 80080a4:	2300      	movs	r3, #0
 80080a6:	2200      	movs	r2, #0
 80080a8:	f7fe fc7e 	bl	80069a8 <xQueueGenericSend>
 80080ac:	6278      	str	r0, [r7, #36]	@ 0x24
 80080ae:	e008      	b.n	80080c2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80080b0:	4b06      	ldr	r3, [pc, #24]	@ (80080cc <xTimerGenericCommand+0x98>)
 80080b2:	6818      	ldr	r0, [r3, #0]
 80080b4:	f107 0110 	add.w	r1, r7, #16
 80080b8:	2300      	movs	r3, #0
 80080ba:	683a      	ldr	r2, [r7, #0]
 80080bc:	f7fe fd76 	bl	8006bac <xQueueGenericSendFromISR>
 80080c0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80080c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3728      	adds	r7, #40	@ 0x28
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	240049c4 	.word	0x240049c4

080080d0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b088      	sub	sp, #32
 80080d4:	af02      	add	r7, sp, #8
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080da:	4b23      	ldr	r3, [pc, #140]	@ (8008168 <prvProcessExpiredTimer+0x98>)
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	3304      	adds	r3, #4
 80080e8:	4618      	mov	r0, r3
 80080ea:	f7fe f897 	bl	800621c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080f4:	f003 0304 	and.w	r3, r3, #4
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d023      	beq.n	8008144 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	699a      	ldr	r2, [r3, #24]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	18d1      	adds	r1, r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	6978      	ldr	r0, [r7, #20]
 800810a:	f000 f8d5 	bl	80082b8 <prvInsertTimerInActiveList>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d020      	beq.n	8008156 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008114:	2300      	movs	r3, #0
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	2300      	movs	r3, #0
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	2100      	movs	r1, #0
 800811e:	6978      	ldr	r0, [r7, #20]
 8008120:	f7ff ff88 	bl	8008034 <xTimerGenericCommand>
 8008124:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d114      	bne.n	8008156 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	60fb      	str	r3, [r7, #12]
}
 800813e:	bf00      	nop
 8008140:	bf00      	nop
 8008142:	e7fd      	b.n	8008140 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800814a:	f023 0301 	bic.w	r3, r3, #1
 800814e:	b2da      	uxtb	r2, r3
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	6978      	ldr	r0, [r7, #20]
 800815c:	4798      	blx	r3
}
 800815e:	bf00      	nop
 8008160:	3718      	adds	r7, #24
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}
 8008166:	bf00      	nop
 8008168:	240049bc 	.word	0x240049bc

0800816c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008174:	f107 0308 	add.w	r3, r7, #8
 8008178:	4618      	mov	r0, r3
 800817a:	f000 f859 	bl	8008230 <prvGetNextExpireTime>
 800817e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	4619      	mov	r1, r3
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 f805 	bl	8008194 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800818a:	f000 f8d7 	bl	800833c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800818e:	bf00      	nop
 8008190:	e7f0      	b.n	8008174 <prvTimerTask+0x8>
	...

08008194 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b084      	sub	sp, #16
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800819e:	f7ff fa37 	bl	8007610 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081a2:	f107 0308 	add.w	r3, r7, #8
 80081a6:	4618      	mov	r0, r3
 80081a8:	f000 f866 	bl	8008278 <prvSampleTimeNow>
 80081ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d130      	bne.n	8008216 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d10a      	bne.n	80081d0 <prvProcessTimerOrBlockTask+0x3c>
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d806      	bhi.n	80081d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80081c2:	f7ff fa33 	bl	800762c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80081c6:	68f9      	ldr	r1, [r7, #12]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f7ff ff81 	bl	80080d0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80081ce:	e024      	b.n	800821a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d008      	beq.n	80081e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80081d6:	4b13      	ldr	r3, [pc, #76]	@ (8008224 <prvProcessTimerOrBlockTask+0x90>)
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <prvProcessTimerOrBlockTask+0x50>
 80081e0:	2301      	movs	r3, #1
 80081e2:	e000      	b.n	80081e6 <prvProcessTimerOrBlockTask+0x52>
 80081e4:	2300      	movs	r3, #0
 80081e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80081e8:	4b0f      	ldr	r3, [pc, #60]	@ (8008228 <prvProcessTimerOrBlockTask+0x94>)
 80081ea:	6818      	ldr	r0, [r3, #0]
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	4619      	mov	r1, r3
 80081f6:	f7fe ff93 	bl	8007120 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80081fa:	f7ff fa17 	bl	800762c <xTaskResumeAll>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d10a      	bne.n	800821a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008204:	4b09      	ldr	r3, [pc, #36]	@ (800822c <prvProcessTimerOrBlockTask+0x98>)
 8008206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800820a:	601a      	str	r2, [r3, #0]
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	f3bf 8f6f 	isb	sy
}
 8008214:	e001      	b.n	800821a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008216:	f7ff fa09 	bl	800762c <xTaskResumeAll>
}
 800821a:	bf00      	nop
 800821c:	3710      	adds	r7, #16
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	240049c0 	.word	0x240049c0
 8008228:	240049c4 	.word	0x240049c4
 800822c:	e000ed04 	.word	0xe000ed04

08008230 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008238:	4b0e      	ldr	r3, [pc, #56]	@ (8008274 <prvGetNextExpireTime+0x44>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <prvGetNextExpireTime+0x16>
 8008242:	2201      	movs	r2, #1
 8008244:	e000      	b.n	8008248 <prvGetNextExpireTime+0x18>
 8008246:	2200      	movs	r2, #0
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d105      	bne.n	8008260 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008254:	4b07      	ldr	r3, [pc, #28]	@ (8008274 <prvGetNextExpireTime+0x44>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	60fb      	str	r3, [r7, #12]
 800825e:	e001      	b.n	8008264 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008260:	2300      	movs	r3, #0
 8008262:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008264:	68fb      	ldr	r3, [r7, #12]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3714      	adds	r7, #20
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	240049bc 	.word	0x240049bc

08008278 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008280:	f7ff fa72 	bl	8007768 <xTaskGetTickCount>
 8008284:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008286:	4b0b      	ldr	r3, [pc, #44]	@ (80082b4 <prvSampleTimeNow+0x3c>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	429a      	cmp	r2, r3
 800828e:	d205      	bcs.n	800829c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008290:	f000 f93a 	bl	8008508 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	e002      	b.n	80082a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80082a2:	4a04      	ldr	r2, [pc, #16]	@ (80082b4 <prvSampleTimeNow+0x3c>)
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80082a8:	68fb      	ldr	r3, [r7, #12]
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}
 80082b2:	bf00      	nop
 80082b4:	240049cc 	.word	0x240049cc

080082b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b086      	sub	sp, #24
 80082bc:	af00      	add	r7, sp, #0
 80082be:	60f8      	str	r0, [r7, #12]
 80082c0:	60b9      	str	r1, [r7, #8]
 80082c2:	607a      	str	r2, [r7, #4]
 80082c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80082c6:	2300      	movs	r3, #0
 80082c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	68fa      	ldr	r2, [r7, #12]
 80082d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d812      	bhi.n	8008304 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	1ad2      	subs	r2, r2, r3
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	699b      	ldr	r3, [r3, #24]
 80082e8:	429a      	cmp	r2, r3
 80082ea:	d302      	bcc.n	80082f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80082ec:	2301      	movs	r3, #1
 80082ee:	617b      	str	r3, [r7, #20]
 80082f0:	e01b      	b.n	800832a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80082f2:	4b10      	ldr	r3, [pc, #64]	@ (8008334 <prvInsertTimerInActiveList+0x7c>)
 80082f4:	681a      	ldr	r2, [r3, #0]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	3304      	adds	r3, #4
 80082fa:	4619      	mov	r1, r3
 80082fc:	4610      	mov	r0, r2
 80082fe:	f7fd ff54 	bl	80061aa <vListInsert>
 8008302:	e012      	b.n	800832a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	429a      	cmp	r2, r3
 800830a:	d206      	bcs.n	800831a <prvInsertTimerInActiveList+0x62>
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	429a      	cmp	r2, r3
 8008312:	d302      	bcc.n	800831a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008314:	2301      	movs	r3, #1
 8008316:	617b      	str	r3, [r7, #20]
 8008318:	e007      	b.n	800832a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800831a:	4b07      	ldr	r3, [pc, #28]	@ (8008338 <prvInsertTimerInActiveList+0x80>)
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	3304      	adds	r3, #4
 8008322:	4619      	mov	r1, r3
 8008324:	4610      	mov	r0, r2
 8008326:	f7fd ff40 	bl	80061aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800832a:	697b      	ldr	r3, [r7, #20]
}
 800832c:	4618      	mov	r0, r3
 800832e:	3718      	adds	r7, #24
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	240049c0 	.word	0x240049c0
 8008338:	240049bc 	.word	0x240049bc

0800833c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b08e      	sub	sp, #56	@ 0x38
 8008340:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008342:	e0ce      	b.n	80084e2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2b00      	cmp	r3, #0
 8008348:	da19      	bge.n	800837e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800834a:	1d3b      	adds	r3, r7, #4
 800834c:	3304      	adds	r3, #4
 800834e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008352:	2b00      	cmp	r3, #0
 8008354:	d10b      	bne.n	800836e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835a:	f383 8811 	msr	BASEPRI, r3
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	61fb      	str	r3, [r7, #28]
}
 8008368:	bf00      	nop
 800836a:	bf00      	nop
 800836c:	e7fd      	b.n	800836a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800836e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008374:	6850      	ldr	r0, [r2, #4]
 8008376:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008378:	6892      	ldr	r2, [r2, #8]
 800837a:	4611      	mov	r1, r2
 800837c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2b00      	cmp	r3, #0
 8008382:	f2c0 80ae 	blt.w	80084e2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800838a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d004      	beq.n	800839c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008394:	3304      	adds	r3, #4
 8008396:	4618      	mov	r0, r3
 8008398:	f7fd ff40 	bl	800621c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800839c:	463b      	mov	r3, r7
 800839e:	4618      	mov	r0, r3
 80083a0:	f7ff ff6a 	bl	8008278 <prvSampleTimeNow>
 80083a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2b09      	cmp	r3, #9
 80083aa:	f200 8097 	bhi.w	80084dc <prvProcessReceivedCommands+0x1a0>
 80083ae:	a201      	add	r2, pc, #4	@ (adr r2, 80083b4 <prvProcessReceivedCommands+0x78>)
 80083b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083b4:	080083dd 	.word	0x080083dd
 80083b8:	080083dd 	.word	0x080083dd
 80083bc:	080083dd 	.word	0x080083dd
 80083c0:	08008453 	.word	0x08008453
 80083c4:	08008467 	.word	0x08008467
 80083c8:	080084b3 	.word	0x080084b3
 80083cc:	080083dd 	.word	0x080083dd
 80083d0:	080083dd 	.word	0x080083dd
 80083d4:	08008453 	.word	0x08008453
 80083d8:	08008467 	.word	0x08008467
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083e2:	f043 0301 	orr.w	r3, r3, #1
 80083e6:	b2da      	uxtb	r2, r3
 80083e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f2:	699b      	ldr	r3, [r3, #24]
 80083f4:	18d1      	adds	r1, r2, r3
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083fc:	f7ff ff5c 	bl	80082b8 <prvInsertTimerInActiveList>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d06c      	beq.n	80084e0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800840c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800840e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008410:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008414:	f003 0304 	and.w	r3, r3, #4
 8008418:	2b00      	cmp	r3, #0
 800841a:	d061      	beq.n	80084e0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800841c:	68ba      	ldr	r2, [r7, #8]
 800841e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	441a      	add	r2, r3
 8008424:	2300      	movs	r3, #0
 8008426:	9300      	str	r3, [sp, #0]
 8008428:	2300      	movs	r3, #0
 800842a:	2100      	movs	r1, #0
 800842c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800842e:	f7ff fe01 	bl	8008034 <xTimerGenericCommand>
 8008432:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008434:	6a3b      	ldr	r3, [r7, #32]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d152      	bne.n	80084e0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800843a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	61bb      	str	r3, [r7, #24]
}
 800844c:	bf00      	nop
 800844e:	bf00      	nop
 8008450:	e7fd      	b.n	800844e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008454:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008458:	f023 0301 	bic.w	r3, r3, #1
 800845c:	b2da      	uxtb	r2, r3
 800845e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008460:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008464:	e03d      	b.n	80084e2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008468:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800846c:	f043 0301 	orr.w	r3, r3, #1
 8008470:	b2da      	uxtb	r2, r3
 8008472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008474:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008478:	68ba      	ldr	r2, [r7, #8]
 800847a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800847c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800847e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008480:	699b      	ldr	r3, [r3, #24]
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10b      	bne.n	800849e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	617b      	str	r3, [r7, #20]
}
 8008498:	bf00      	nop
 800849a:	bf00      	nop
 800849c:	e7fd      	b.n	800849a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800849e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a0:	699a      	ldr	r2, [r3, #24]
 80084a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a4:	18d1      	adds	r1, r2, r3
 80084a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084ac:	f7ff ff04 	bl	80082b8 <prvInsertTimerInActiveList>
					break;
 80084b0:	e017      	b.n	80084e2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80084b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084b8:	f003 0302 	and.w	r3, r3, #2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d103      	bne.n	80084c8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80084c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084c2:	f7fd fd01 	bl	8005ec8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80084c6:	e00c      	b.n	80084e2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084ce:	f023 0301 	bic.w	r3, r3, #1
 80084d2:	b2da      	uxtb	r2, r3
 80084d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80084da:	e002      	b.n	80084e2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80084dc:	bf00      	nop
 80084de:	e000      	b.n	80084e2 <prvProcessReceivedCommands+0x1a6>
					break;
 80084e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084e2:	4b08      	ldr	r3, [pc, #32]	@ (8008504 <prvProcessReceivedCommands+0x1c8>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	1d39      	adds	r1, r7, #4
 80084e8:	2200      	movs	r2, #0
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fe fbfc 	bl	8006ce8 <xQueueReceive>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f47f af26 	bne.w	8008344 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80084f8:	bf00      	nop
 80084fa:	bf00      	nop
 80084fc:	3730      	adds	r7, #48	@ 0x30
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	240049c4 	.word	0x240049c4

08008508 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b088      	sub	sp, #32
 800850c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800850e:	e049      	b.n	80085a4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008510:	4b2e      	ldr	r3, [pc, #184]	@ (80085cc <prvSwitchTimerLists+0xc4>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800851a:	4b2c      	ldr	r3, [pc, #176]	@ (80085cc <prvSwitchTimerLists+0xc4>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	3304      	adds	r3, #4
 8008528:	4618      	mov	r0, r3
 800852a:	f7fd fe77 	bl	800621c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800853c:	f003 0304 	and.w	r3, r3, #4
 8008540:	2b00      	cmp	r3, #0
 8008542:	d02f      	beq.n	80085a4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	693a      	ldr	r2, [r7, #16]
 800854a:	4413      	add	r3, r2
 800854c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	429a      	cmp	r2, r3
 8008554:	d90e      	bls.n	8008574 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	68ba      	ldr	r2, [r7, #8]
 800855a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	68fa      	ldr	r2, [r7, #12]
 8008560:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008562:	4b1a      	ldr	r3, [pc, #104]	@ (80085cc <prvSwitchTimerLists+0xc4>)
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	3304      	adds	r3, #4
 800856a:	4619      	mov	r1, r3
 800856c:	4610      	mov	r0, r2
 800856e:	f7fd fe1c 	bl	80061aa <vListInsert>
 8008572:	e017      	b.n	80085a4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008574:	2300      	movs	r3, #0
 8008576:	9300      	str	r3, [sp, #0]
 8008578:	2300      	movs	r3, #0
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	2100      	movs	r1, #0
 800857e:	68f8      	ldr	r0, [r7, #12]
 8008580:	f7ff fd58 	bl	8008034 <xTimerGenericCommand>
 8008584:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10b      	bne.n	80085a4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	603b      	str	r3, [r7, #0]
}
 800859e:	bf00      	nop
 80085a0:	bf00      	nop
 80085a2:	e7fd      	b.n	80085a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085a4:	4b09      	ldr	r3, [pc, #36]	@ (80085cc <prvSwitchTimerLists+0xc4>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d1b0      	bne.n	8008510 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80085ae:	4b07      	ldr	r3, [pc, #28]	@ (80085cc <prvSwitchTimerLists+0xc4>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80085b4:	4b06      	ldr	r3, [pc, #24]	@ (80085d0 <prvSwitchTimerLists+0xc8>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a04      	ldr	r2, [pc, #16]	@ (80085cc <prvSwitchTimerLists+0xc4>)
 80085ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80085bc:	4a04      	ldr	r2, [pc, #16]	@ (80085d0 <prvSwitchTimerLists+0xc8>)
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	6013      	str	r3, [r2, #0]
}
 80085c2:	bf00      	nop
 80085c4:	3718      	adds	r7, #24
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	240049bc 	.word	0x240049bc
 80085d0:	240049c0 	.word	0x240049c0

080085d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80085da:	f7fd ff7d 	bl	80064d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80085de:	4b15      	ldr	r3, [pc, #84]	@ (8008634 <prvCheckForValidListAndQueue+0x60>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d120      	bne.n	8008628 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80085e6:	4814      	ldr	r0, [pc, #80]	@ (8008638 <prvCheckForValidListAndQueue+0x64>)
 80085e8:	f7fd fd8e 	bl	8006108 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80085ec:	4813      	ldr	r0, [pc, #76]	@ (800863c <prvCheckForValidListAndQueue+0x68>)
 80085ee:	f7fd fd8b 	bl	8006108 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80085f2:	4b13      	ldr	r3, [pc, #76]	@ (8008640 <prvCheckForValidListAndQueue+0x6c>)
 80085f4:	4a10      	ldr	r2, [pc, #64]	@ (8008638 <prvCheckForValidListAndQueue+0x64>)
 80085f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80085f8:	4b12      	ldr	r3, [pc, #72]	@ (8008644 <prvCheckForValidListAndQueue+0x70>)
 80085fa:	4a10      	ldr	r2, [pc, #64]	@ (800863c <prvCheckForValidListAndQueue+0x68>)
 80085fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80085fe:	2300      	movs	r3, #0
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	4b11      	ldr	r3, [pc, #68]	@ (8008648 <prvCheckForValidListAndQueue+0x74>)
 8008604:	4a11      	ldr	r2, [pc, #68]	@ (800864c <prvCheckForValidListAndQueue+0x78>)
 8008606:	2110      	movs	r1, #16
 8008608:	200a      	movs	r0, #10
 800860a:	f7fe f8f1 	bl	80067f0 <xQueueGenericCreateStatic>
 800860e:	4603      	mov	r3, r0
 8008610:	4a08      	ldr	r2, [pc, #32]	@ (8008634 <prvCheckForValidListAndQueue+0x60>)
 8008612:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008614:	4b07      	ldr	r3, [pc, #28]	@ (8008634 <prvCheckForValidListAndQueue+0x60>)
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d005      	beq.n	8008628 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800861c:	4b05      	ldr	r3, [pc, #20]	@ (8008634 <prvCheckForValidListAndQueue+0x60>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	490b      	ldr	r1, [pc, #44]	@ (8008650 <prvCheckForValidListAndQueue+0x7c>)
 8008622:	4618      	mov	r0, r3
 8008624:	f7fe fd52 	bl	80070cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008628:	f7fd ff88 	bl	800653c <vPortExitCritical>
}
 800862c:	bf00      	nop
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}
 8008632:	bf00      	nop
 8008634:	240049c4 	.word	0x240049c4
 8008638:	24004994 	.word	0x24004994
 800863c:	240049a8 	.word	0x240049a8
 8008640:	240049bc 	.word	0x240049bc
 8008644:	240049c0 	.word	0x240049c0
 8008648:	24004a70 	.word	0x24004a70
 800864c:	240049d0 	.word	0x240049d0
 8008650:	0800873c 	.word	0x0800873c

08008654 <memset>:
 8008654:	4402      	add	r2, r0
 8008656:	4603      	mov	r3, r0
 8008658:	4293      	cmp	r3, r2
 800865a:	d100      	bne.n	800865e <memset+0xa>
 800865c:	4770      	bx	lr
 800865e:	f803 1b01 	strb.w	r1, [r3], #1
 8008662:	e7f9      	b.n	8008658 <memset+0x4>

08008664 <__libc_init_array>:
 8008664:	b570      	push	{r4, r5, r6, lr}
 8008666:	4d0d      	ldr	r5, [pc, #52]	@ (800869c <__libc_init_array+0x38>)
 8008668:	4c0d      	ldr	r4, [pc, #52]	@ (80086a0 <__libc_init_array+0x3c>)
 800866a:	1b64      	subs	r4, r4, r5
 800866c:	10a4      	asrs	r4, r4, #2
 800866e:	2600      	movs	r6, #0
 8008670:	42a6      	cmp	r6, r4
 8008672:	d109      	bne.n	8008688 <__libc_init_array+0x24>
 8008674:	4d0b      	ldr	r5, [pc, #44]	@ (80086a4 <__libc_init_array+0x40>)
 8008676:	4c0c      	ldr	r4, [pc, #48]	@ (80086a8 <__libc_init_array+0x44>)
 8008678:	f000 f826 	bl	80086c8 <_init>
 800867c:	1b64      	subs	r4, r4, r5
 800867e:	10a4      	asrs	r4, r4, #2
 8008680:	2600      	movs	r6, #0
 8008682:	42a6      	cmp	r6, r4
 8008684:	d105      	bne.n	8008692 <__libc_init_array+0x2e>
 8008686:	bd70      	pop	{r4, r5, r6, pc}
 8008688:	f855 3b04 	ldr.w	r3, [r5], #4
 800868c:	4798      	blx	r3
 800868e:	3601      	adds	r6, #1
 8008690:	e7ee      	b.n	8008670 <__libc_init_array+0xc>
 8008692:	f855 3b04 	ldr.w	r3, [r5], #4
 8008696:	4798      	blx	r3
 8008698:	3601      	adds	r6, #1
 800869a:	e7f2      	b.n	8008682 <__libc_init_array+0x1e>
 800869c:	08008820 	.word	0x08008820
 80086a0:	08008820 	.word	0x08008820
 80086a4:	08008820 	.word	0x08008820
 80086a8:	08008824 	.word	0x08008824

080086ac <memcpy>:
 80086ac:	440a      	add	r2, r1
 80086ae:	4291      	cmp	r1, r2
 80086b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80086b4:	d100      	bne.n	80086b8 <memcpy+0xc>
 80086b6:	4770      	bx	lr
 80086b8:	b510      	push	{r4, lr}
 80086ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086c2:	4291      	cmp	r1, r2
 80086c4:	d1f9      	bne.n	80086ba <memcpy+0xe>
 80086c6:	bd10      	pop	{r4, pc}

080086c8 <_init>:
 80086c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ca:	bf00      	nop
 80086cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086ce:	bc08      	pop	{r3}
 80086d0:	469e      	mov	lr, r3
 80086d2:	4770      	bx	lr

080086d4 <_fini>:
 80086d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086d6:	bf00      	nop
 80086d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086da:	bc08      	pop	{r3}
 80086dc:	469e      	mov	lr, r3
 80086de:	4770      	bx	lr
