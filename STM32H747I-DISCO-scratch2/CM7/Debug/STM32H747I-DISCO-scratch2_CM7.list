
STM32H747I-DISCO-scratch2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006320  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  080065c0  080065c0  000075c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066c0  080066c0  00008014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080066c0  080066c0  00008014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080066c0  080066c0  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066c0  080066c0  000076c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066c4  080066c4  000076c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  24000000  080066c8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004984  24000014  080066dc  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004998  080066dc  00008998  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013517  00000000  00000000  00008042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cdd  00000000  00000000  0001b559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001020  00000000  00000000  0001e238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c2e  00000000  00000000  0001f258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ee5c  00000000  00000000  0001fe86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012902  00000000  00000000  0005ece2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001989db  00000000  00000000  000715e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00209fbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041c0  00000000  00000000  0020a004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  0020e1c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080065a8 	.word	0x080065a8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	080065a8 	.word	0x080065a8

080002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e4:	4b49      	ldr	r3, [pc, #292]	@ (800040c <SystemInit+0x12c>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002ea:	4a48      	ldr	r2, [pc, #288]	@ (800040c <SystemInit+0x12c>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002f4:	4b45      	ldr	r3, [pc, #276]	@ (800040c <SystemInit+0x12c>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a44      	ldr	r2, [pc, #272]	@ (800040c <SystemInit+0x12c>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000300:	4b43      	ldr	r3, [pc, #268]	@ (8000410 <SystemInit+0x130>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	2b06      	cmp	r3, #6
 800030a:	d807      	bhi.n	800031c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800030c:	4b40      	ldr	r3, [pc, #256]	@ (8000410 <SystemInit+0x130>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f023 030f 	bic.w	r3, r3, #15
 8000314:	4a3e      	ldr	r2, [pc, #248]	@ (8000410 <SystemInit+0x130>)
 8000316:	f043 0307 	orr.w	r3, r3, #7
 800031a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800031c:	4b3d      	ldr	r3, [pc, #244]	@ (8000414 <SystemInit+0x134>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a3c      	ldr	r2, [pc, #240]	@ (8000414 <SystemInit+0x134>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000328:	4b3a      	ldr	r3, [pc, #232]	@ (8000414 <SystemInit+0x134>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800032e:	4b39      	ldr	r3, [pc, #228]	@ (8000414 <SystemInit+0x134>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	4938      	ldr	r1, [pc, #224]	@ (8000414 <SystemInit+0x134>)
 8000334:	4b38      	ldr	r3, [pc, #224]	@ (8000418 <SystemInit+0x138>)
 8000336:	4013      	ands	r3, r2
 8000338:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800033a:	4b35      	ldr	r3, [pc, #212]	@ (8000410 <SystemInit+0x130>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0308 	and.w	r3, r3, #8
 8000342:	2b00      	cmp	r3, #0
 8000344:	d007      	beq.n	8000356 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000346:	4b32      	ldr	r3, [pc, #200]	@ (8000410 <SystemInit+0x130>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f023 030f 	bic.w	r3, r3, #15
 800034e:	4a30      	ldr	r2, [pc, #192]	@ (8000410 <SystemInit+0x130>)
 8000350:	f043 0307 	orr.w	r3, r3, #7
 8000354:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000356:	4b2f      	ldr	r3, [pc, #188]	@ (8000414 <SystemInit+0x134>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800035c:	4b2d      	ldr	r3, [pc, #180]	@ (8000414 <SystemInit+0x134>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000362:	4b2c      	ldr	r3, [pc, #176]	@ (8000414 <SystemInit+0x134>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000368:	4b2a      	ldr	r3, [pc, #168]	@ (8000414 <SystemInit+0x134>)
 800036a:	4a2c      	ldr	r2, [pc, #176]	@ (800041c <SystemInit+0x13c>)
 800036c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800036e:	4b29      	ldr	r3, [pc, #164]	@ (8000414 <SystemInit+0x134>)
 8000370:	4a2b      	ldr	r2, [pc, #172]	@ (8000420 <SystemInit+0x140>)
 8000372:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000374:	4b27      	ldr	r3, [pc, #156]	@ (8000414 <SystemInit+0x134>)
 8000376:	4a2b      	ldr	r2, [pc, #172]	@ (8000424 <SystemInit+0x144>)
 8000378:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800037a:	4b26      	ldr	r3, [pc, #152]	@ (8000414 <SystemInit+0x134>)
 800037c:	2200      	movs	r2, #0
 800037e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000380:	4b24      	ldr	r3, [pc, #144]	@ (8000414 <SystemInit+0x134>)
 8000382:	4a28      	ldr	r2, [pc, #160]	@ (8000424 <SystemInit+0x144>)
 8000384:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000386:	4b23      	ldr	r3, [pc, #140]	@ (8000414 <SystemInit+0x134>)
 8000388:	2200      	movs	r2, #0
 800038a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800038c:	4b21      	ldr	r3, [pc, #132]	@ (8000414 <SystemInit+0x134>)
 800038e:	4a25      	ldr	r2, [pc, #148]	@ (8000424 <SystemInit+0x144>)
 8000390:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000392:	4b20      	ldr	r3, [pc, #128]	@ (8000414 <SystemInit+0x134>)
 8000394:	2200      	movs	r2, #0
 8000396:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000398:	4b1e      	ldr	r3, [pc, #120]	@ (8000414 <SystemInit+0x134>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a1d      	ldr	r2, [pc, #116]	@ (8000414 <SystemInit+0x134>)
 800039e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80003a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80003a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000414 <SystemInit+0x134>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000428 <SystemInit+0x148>)
 80003ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000428 <SystemInit+0x148>)
 80003b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003b4:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003b6:	4b1d      	ldr	r3, [pc, #116]	@ (800042c <SystemInit+0x14c>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000430 <SystemInit+0x150>)
 80003bc:	4013      	ands	r3, r2
 80003be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003c2:	d202      	bcs.n	80003ca <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000434 <SystemInit+0x154>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80003ca:	4b12      	ldr	r3, [pc, #72]	@ (8000414 <SystemInit+0x134>)
 80003cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d113      	bne.n	8000400 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000414 <SystemInit+0x134>)
 80003da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003de:	4a0d      	ldr	r2, [pc, #52]	@ (8000414 <SystemInit+0x134>)
 80003e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003e8:	4b13      	ldr	r3, [pc, #76]	@ (8000438 <SystemInit+0x158>)
 80003ea:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003ee:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003f0:	4b08      	ldr	r3, [pc, #32]	@ (8000414 <SystemInit+0x134>)
 80003f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003f6:	4a07      	ldr	r2, [pc, #28]	@ (8000414 <SystemInit+0x134>)
 80003f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003fc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	e000ed00 	.word	0xe000ed00
 8000410:	52002000 	.word	0x52002000
 8000414:	58024400 	.word	0x58024400
 8000418:	eaf6ed7f 	.word	0xeaf6ed7f
 800041c:	02020200 	.word	0x02020200
 8000420:	01ff0000 	.word	0x01ff0000
 8000424:	01010280 	.word	0x01010280
 8000428:	580000c0 	.word	0x580000c0
 800042c:	5c001000 	.word	0x5c001000
 8000430:	ffff0000 	.word	0xffff0000
 8000434:	51008108 	.word	0x51008108
 8000438:	52004000 	.word	0x52004000

0800043c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000440:	4b09      	ldr	r3, [pc, #36]	@ (8000468 <ExitRun0Mode+0x2c>)
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	4a08      	ldr	r2, [pc, #32]	@ (8000468 <ExitRun0Mode+0x2c>)
 8000446:	f023 0302 	bic.w	r3, r3, #2
 800044a:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800044c:	bf00      	nop
 800044e:	4b06      	ldr	r3, [pc, #24]	@ (8000468 <ExitRun0Mode+0x2c>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0f9      	beq.n	800044e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800045a:	bf00      	nop
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	58024800 	.word	0x58024800

0800046c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000472:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000476:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000478:	bf00      	nop
 800047a:	4b38      	ldr	r3, [pc, #224]	@ (800055c <main+0xf0>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000482:	2b00      	cmp	r3, #0
 8000484:	d004      	beq.n	8000490 <main+0x24>
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	1e5a      	subs	r2, r3, #1
 800048a:	607a      	str	r2, [r7, #4]
 800048c:	2b00      	cmp	r3, #0
 800048e:	dcf4      	bgt.n	800047a <main+0xe>
  if ( timeout < 0 )
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b00      	cmp	r3, #0
 8000494:	da01      	bge.n	800049a <main+0x2e>
  {
  Error_Handler();
 8000496:	f000 f9ff 	bl	8000898 <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 fa75 	bl	8000988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049e:	f000 f879 	bl	8000594 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004a2:	f000 f8fd 	bl	80006a0 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80004a6:	4b2d      	ldr	r3, [pc, #180]	@ (800055c <main+0xf0>)
 80004a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004ac:	4a2b      	ldr	r2, [pc, #172]	@ (800055c <main+0xf0>)
 80004ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004b6:	4b29      	ldr	r3, [pc, #164]	@ (800055c <main+0xf0>)
 80004b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004c0:	603b      	str	r3, [r7, #0]
 80004c2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80004c4:	2000      	movs	r0, #0
 80004c6:	f000 fdab 	bl	8001020 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80004ca:	2100      	movs	r1, #0
 80004cc:	2000      	movs	r0, #0
 80004ce:	f000 fdc1 	bl	8001054 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004d6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004d8:	bf00      	nop
 80004da:	4b20      	ldr	r3, [pc, #128]	@ (800055c <main+0xf0>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d104      	bne.n	80004f0 <main+0x84>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	1e5a      	subs	r2, r3, #1
 80004ea:	607a      	str	r2, [r7, #4]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	dcf4      	bgt.n	80004da <main+0x6e>
if ( timeout < 0 )
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	da01      	bge.n	80004fa <main+0x8e>
{
Error_Handler();
 80004f6:	f000 f9cf 	bl	8000898 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 f901 	bl	8000700 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fe:	f003 f9ed 	bl	80038dc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of ledCmdQueue */
  ledCmdQueueHandle = osMessageQueueNew (8, 32, &ledCmdQueue_attributes);
 8000502:	4a17      	ldr	r2, [pc, #92]	@ (8000560 <main+0xf4>)
 8000504:	2120      	movs	r1, #32
 8000506:	2008      	movs	r0, #8
 8000508:	f003 fadf 	bl	8003aca <osMessageQueueNew>
 800050c:	4603      	mov	r3, r0
 800050e:	4a15      	ldr	r2, [pc, #84]	@ (8000564 <main+0xf8>)
 8000510:	6013      	str	r3, [r2, #0]

  /* creation of uart1RxDMAQueue */
  uart1RxDMAQueueHandle = osMessageQueueNew (8, 128, &uart1RxDMAQueue_attributes);
 8000512:	4a15      	ldr	r2, [pc, #84]	@ (8000568 <main+0xfc>)
 8000514:	2180      	movs	r1, #128	@ 0x80
 8000516:	2008      	movs	r0, #8
 8000518:	f003 fad7 	bl	8003aca <osMessageQueueNew>
 800051c:	4603      	mov	r3, r0
 800051e:	4a13      	ldr	r2, [pc, #76]	@ (800056c <main+0x100>)
 8000520:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of workerTask */
  workerTaskHandle = osThreadNew(StartDefaultTask, NULL, &workerTask_attributes);
 8000522:	4a13      	ldr	r2, [pc, #76]	@ (8000570 <main+0x104>)
 8000524:	2100      	movs	r1, #0
 8000526:	4813      	ldr	r0, [pc, #76]	@ (8000574 <main+0x108>)
 8000528:	f003 fa22 	bl	8003970 <osThreadNew>
 800052c:	4603      	mov	r3, r0
 800052e:	4a12      	ldr	r2, [pc, #72]	@ (8000578 <main+0x10c>)
 8000530:	6013      	str	r3, [r2, #0]

  /* creation of ledTask */
  ledTaskHandle = osThreadNew(StarLEDTask, NULL, &ledTask_attributes);
 8000532:	4a12      	ldr	r2, [pc, #72]	@ (800057c <main+0x110>)
 8000534:	2100      	movs	r1, #0
 8000536:	4812      	ldr	r0, [pc, #72]	@ (8000580 <main+0x114>)
 8000538:	f003 fa1a 	bl	8003970 <osThreadNew>
 800053c:	4603      	mov	r3, r0
 800053e:	4a11      	ldr	r2, [pc, #68]	@ (8000584 <main+0x118>)
 8000540:	6013      	str	r3, [r2, #0]

  /* creation of uart1Task */
  uart1TaskHandle = osThreadNew(StartUart1Task, NULL, &uart1Task_attributes);
 8000542:	4a11      	ldr	r2, [pc, #68]	@ (8000588 <main+0x11c>)
 8000544:	2100      	movs	r1, #0
 8000546:	4811      	ldr	r0, [pc, #68]	@ (800058c <main+0x120>)
 8000548:	f003 fa12 	bl	8003970 <osThreadNew>
 800054c:	4603      	mov	r3, r0
 800054e:	4a10      	ldr	r2, [pc, #64]	@ (8000590 <main+0x124>)
 8000550:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000552:	f003 f9e7 	bl	8003924 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000556:	bf00      	nop
 8000558:	e7fd      	b.n	8000556 <main+0xea>
 800055a:	bf00      	nop
 800055c:	58024400 	.word	0x58024400
 8000560:	08006690 	.word	0x08006690
 8000564:	2400003c 	.word	0x2400003c
 8000568:	080066a8 	.word	0x080066a8
 800056c:	24000040 	.word	0x24000040
 8000570:	08006624 	.word	0x08006624
 8000574:	08000829 	.word	0x08000829
 8000578:	24000030 	.word	0x24000030
 800057c:	08006648 	.word	0x08006648
 8000580:	08000839 	.word	0x08000839
 8000584:	24000034 	.word	0x24000034
 8000588:	0800666c 	.word	0x0800666c
 800058c:	08000889 	.word	0x08000889
 8000590:	24000038 	.word	0x24000038

08000594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b09c      	sub	sp, #112	@ 0x70
 8000598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800059a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800059e:	224c      	movs	r2, #76	@ 0x4c
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f005 ffc6 	bl	8006534 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a8:	1d3b      	adds	r3, r7, #4
 80005aa:	2220      	movs	r2, #32
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f005 ffc0 	bl	8006534 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80005b4:	2004      	movs	r0, #4
 80005b6:	f000 fd61 	bl	800107c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ba:	2300      	movs	r3, #0
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	4b36      	ldr	r3, [pc, #216]	@ (8000698 <SystemClock_Config+0x104>)
 80005c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005c2:	4a35      	ldr	r2, [pc, #212]	@ (8000698 <SystemClock_Config+0x104>)
 80005c4:	f023 0301 	bic.w	r3, r3, #1
 80005c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80005ca:	4b33      	ldr	r3, [pc, #204]	@ (8000698 <SystemClock_Config+0x104>)
 80005cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	603b      	str	r3, [r7, #0]
 80005d4:	4b31      	ldr	r3, [pc, #196]	@ (800069c <SystemClock_Config+0x108>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	4a30      	ldr	r2, [pc, #192]	@ (800069c <SystemClock_Config+0x108>)
 80005da:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005de:	6193      	str	r3, [r2, #24]
 80005e0:	4b2e      	ldr	r3, [pc, #184]	@ (800069c <SystemClock_Config+0x108>)
 80005e2:	699b      	ldr	r3, [r3, #24]
 80005e4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005e8:	603b      	str	r3, [r7, #0]
 80005ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005ec:	bf00      	nop
 80005ee:	4b2b      	ldr	r3, [pc, #172]	@ (800069c <SystemClock_Config+0x108>)
 80005f0:	699b      	ldr	r3, [r3, #24]
 80005f2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80005f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005fa:	d1f8      	bne.n	80005ee <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80005fc:	230b      	movs	r3, #11
 80005fe:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000600:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000604:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000606:	2301      	movs	r3, #1
 8000608:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060a:	2340      	movs	r3, #64	@ 0x40
 800060c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800060e:	2301      	movs	r3, #1
 8000610:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000612:	2302      	movs	r3, #2
 8000614:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000616:	2302      	movs	r3, #2
 8000618:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800061a:	2305      	movs	r3, #5
 800061c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 800061e:	2330      	movs	r3, #48	@ 0x30
 8000620:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000622:	2302      	movs	r3, #2
 8000624:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000626:	2305      	movs	r3, #5
 8000628:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800062a:	2302      	movs	r3, #2
 800062c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800062e:	2308      	movs	r3, #8
 8000630:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000632:	2300      	movs	r3, #0
 8000634:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800063e:	4618      	mov	r0, r3
 8000640:	f000 fd76 	bl	8001130 <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0xba>
  {
    Error_Handler();
 800064a:	f000 f925 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	233f      	movs	r3, #63	@ 0x3f
 8000650:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000652:	2300      	movs	r3, #0
 8000654:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 8000666:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800066a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2100      	movs	r1, #0
 8000674:	4618      	mov	r0, r3
 8000676:	f001 f9b5 	bl	80019e4 <HAL_RCC_ClockConfig>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000680:	f000 f90a 	bl	8000898 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000684:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000688:	2100      	movs	r1, #0
 800068a:	2000      	movs	r0, #0
 800068c:	f001 fb60 	bl	8001d50 <HAL_RCC_MCOConfig>
}
 8000690:	bf00      	nop
 8000692:	3770      	adds	r7, #112	@ 0x70
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	58000400 	.word	0x58000400
 800069c:	58024800 	.word	0x58024800

080006a0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b0b2      	sub	sp, #200	@ 0xc8
 80006a4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006a6:	463b      	mov	r3, r7
 80006a8:	22c8      	movs	r2, #200	@ 0xc8
 80006aa:	2100      	movs	r1, #0
 80006ac:	4618      	mov	r0, r3
 80006ae:	f005 ff41 	bl	8006534 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006b2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80006b6:	f04f 0300 	mov.w	r3, #0
 80006ba:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80006c2:	230c      	movs	r3, #12
 80006c4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80006ca:	2302      	movs	r3, #2
 80006cc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80006d2:	23c0      	movs	r3, #192	@ 0xc0
 80006d4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80006d6:	2320      	movs	r3, #32
 80006d8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80006de:	2300      	movs	r3, #0
 80006e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fd16 	bl	8002118 <HAL_RCCEx_PeriphCLKConfig>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80006f2:	f000 f8d1 	bl	8000898 <Error_Handler>
  }
}
 80006f6:	bf00      	nop
 80006f8:	37c8      	adds	r7, #200	@ 0xc8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b08a      	sub	sp, #40	@ 0x28
 8000704:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	f107 0314 	add.w	r3, r7, #20
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
 8000714:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000716:	4b40      	ldr	r3, [pc, #256]	@ (8000818 <MX_GPIO_Init+0x118>)
 8000718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071c:	4a3e      	ldr	r2, [pc, #248]	@ (8000818 <MX_GPIO_Init+0x118>)
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000726:	4b3c      	ldr	r3, [pc, #240]	@ (8000818 <MX_GPIO_Init+0x118>)
 8000728:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072c:	f003 0304 	and.w	r3, r3, #4
 8000730:	613b      	str	r3, [r7, #16]
 8000732:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000734:	4b38      	ldr	r3, [pc, #224]	@ (8000818 <MX_GPIO_Init+0x118>)
 8000736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073a:	4a37      	ldr	r2, [pc, #220]	@ (8000818 <MX_GPIO_Init+0x118>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000744:	4b34      	ldr	r3, [pc, #208]	@ (8000818 <MX_GPIO_Init+0x118>)
 8000746:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000752:	4b31      	ldr	r3, [pc, #196]	@ (8000818 <MX_GPIO_Init+0x118>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000758:	4a2f      	ldr	r2, [pc, #188]	@ (8000818 <MX_GPIO_Init+0x118>)
 800075a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800075e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000762:	4b2d      	ldr	r3, [pc, #180]	@ (8000818 <MX_GPIO_Init+0x118>)
 8000764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000770:	4b29      	ldr	r3, [pc, #164]	@ (8000818 <MX_GPIO_Init+0x118>)
 8000772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000776:	4a28      	ldr	r2, [pc, #160]	@ (8000818 <MX_GPIO_Init+0x118>)
 8000778:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800077c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000780:	4b25      	ldr	r3, [pc, #148]	@ (8000818 <MX_GPIO_Init+0x118>)
 8000782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000786:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800078e:	4b22      	ldr	r3, [pc, #136]	@ (8000818 <MX_GPIO_Init+0x118>)
 8000790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000794:	4a20      	ldr	r2, [pc, #128]	@ (8000818 <MX_GPIO_Init+0x118>)
 8000796:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800079a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800079e:	4b1e      	ldr	r3, [pc, #120]	@ (8000818 <MX_GPIO_Init+0x118>)
 80007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80007b2:	481a      	ldr	r0, [pc, #104]	@ (800081c <MX_GPIO_Init+0x11c>)
 80007b4:	f000 fc1a 	bl	8000fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 80007b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	4619      	mov	r1, r3
 80007d4:	4812      	ldr	r0, [pc, #72]	@ (8000820 <MX_GPIO_Init+0x120>)
 80007d6:	f000 fa59 	bl	8000c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80007da:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	480a      	ldr	r0, [pc, #40]	@ (800081c <MX_GPIO_Init+0x11c>)
 80007f4:	f000 fa4a 	bl	8000c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 80007f8:	2304      	movs	r3, #4
 80007fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000800:	2301      	movs	r3, #1
 8000802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4806      	ldr	r0, [pc, #24]	@ (8000824 <MX_GPIO_Init+0x124>)
 800080c:	f000 fa3e 	bl	8000c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000810:	bf00      	nop
 8000812:	3728      	adds	r7, #40	@ 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58024400 	.word	0x58024400
 800081c:	58022000 	.word	0x58022000
 8000820:	58020000 	.word	0x58020000
 8000824:	58022800 	.word	0x58022800

08000828 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000830:	2001      	movs	r0, #1
 8000832:	f003 f92f 	bl	8003a94 <osDelay>
 8000836:	e7fb      	b.n	8000830 <StartDefaultTask+0x8>

08000838 <StarLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StarLEDTask */
void StarLEDTask(void *argument)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StarLEDTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000840:	2201      	movs	r2, #1
 8000842:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000846:	480f      	ldr	r0, [pc, #60]	@ (8000884 <StarLEDTask+0x4c>)
 8000848:	f000 fbd0 	bl	8000fec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 800084c:	2201      	movs	r2, #1
 800084e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000852:	480c      	ldr	r0, [pc, #48]	@ (8000884 <StarLEDTask+0x4c>)
 8000854:	f000 fbca 	bl	8000fec <HAL_GPIO_WritePin>
	osDelay(1000);
 8000858:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800085c:	f003 f91a 	bl	8003a94 <osDelay>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000866:	4807      	ldr	r0, [pc, #28]	@ (8000884 <StarLEDTask+0x4c>)
 8000868:	f000 fbc0 	bl	8000fec <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000872:	4804      	ldr	r0, [pc, #16]	@ (8000884 <StarLEDTask+0x4c>)
 8000874:	f000 fbba 	bl	8000fec <HAL_GPIO_WritePin>
	osDelay(1000);
 8000878:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800087c:	f003 f90a 	bl	8003a94 <osDelay>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000880:	bf00      	nop
 8000882:	e7dd      	b.n	8000840 <StarLEDTask+0x8>
 8000884:	58022000 	.word	0x58022000

08000888 <StartUart1Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUart1Task */
void StartUart1Task(void *argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUart1Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000890:	2001      	movs	r0, #1
 8000892:	f003 f8ff 	bl	8003a94 <osDelay>
 8000896:	e7fb      	b.n	8000890 <StartUart1Task+0x8>

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	bf00      	nop
 80008a2:	e7fd      	b.n	80008a0 <Error_Handler+0x8>

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <HAL_MspInit+0x38>)
 80008ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008b0:	4a0a      	ldr	r2, [pc, #40]	@ (80008dc <HAL_MspInit+0x38>)
 80008b2:	f043 0302 	orr.w	r3, r3, #2
 80008b6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <HAL_MspInit+0x38>)
 80008bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008c0:	f003 0302 	and.w	r3, r3, #2
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008c8:	2200      	movs	r2, #0
 80008ca:	210f      	movs	r1, #15
 80008cc:	f06f 0001 	mvn.w	r0, #1
 80008d0:	f000 f9b5 	bl	8000c3e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	58024400 	.word	0x58024400

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <NMI_Handler+0x4>

080008e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ec:	bf00      	nop
 80008ee:	e7fd      	b.n	80008ec <HardFault_Handler+0x4>

080008f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <MemManage_Handler+0x4>

080008f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008fc:	bf00      	nop
 80008fe:	e7fd      	b.n	80008fc <BusFault_Handler+0x4>

08000900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <UsageFault_Handler+0x4>

08000908 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091a:	f000 f8a7 	bl	8000a6c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800091e:	f005 f9cd 	bl	8005cbc <xTaskGetSchedulerState>
 8000922:	4603      	mov	r3, r0
 8000924:	2b01      	cmp	r3, #1
 8000926:	d001      	beq.n	800092c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000928:	f003 fdd6 	bl	80044d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}

08000930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000930:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800096c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000934:	f7ff fd82 	bl	800043c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000938:	f7ff fcd2 	bl	80002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800093c:	480c      	ldr	r0, [pc, #48]	@ (8000970 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800093e:	490d      	ldr	r1, [pc, #52]	@ (8000974 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000940:	4a0d      	ldr	r2, [pc, #52]	@ (8000978 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000942:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000944:	e002      	b.n	800094c <LoopCopyDataInit>

08000946 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000946:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000948:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094a:	3304      	adds	r3, #4

0800094c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800094c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000950:	d3f9      	bcc.n	8000946 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000952:	4a0a      	ldr	r2, [pc, #40]	@ (800097c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000954:	4c0a      	ldr	r4, [pc, #40]	@ (8000980 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000956:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000958:	e001      	b.n	800095e <LoopFillZerobss>

0800095a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800095c:	3204      	adds	r2, #4

0800095e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000960:	d3fb      	bcc.n	800095a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000962:	f005 fdef 	bl	8006544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000966:	f7ff fd81 	bl	800046c <main>
  bx  lr
 800096a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800096c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000970:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000974:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000978:	080066c8 	.word	0x080066c8
  ldr r2, =_sbss
 800097c:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8000980:	24004998 	.word	0x24004998

08000984 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC3_IRQHandler>
	...

08000988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800098e:	2003      	movs	r0, #3
 8000990:	f000 f94a 	bl	8000c28 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000994:	f001 fa46 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8000998:	4602      	mov	r2, r0
 800099a:	4b15      	ldr	r3, [pc, #84]	@ (80009f0 <HAL_Init+0x68>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	0a1b      	lsrs	r3, r3, #8
 80009a0:	f003 030f 	and.w	r3, r3, #15
 80009a4:	4913      	ldr	r1, [pc, #76]	@ (80009f4 <HAL_Init+0x6c>)
 80009a6:	5ccb      	ldrb	r3, [r1, r3]
 80009a8:	f003 031f 	and.w	r3, r3, #31
 80009ac:	fa22 f303 	lsr.w	r3, r2, r3
 80009b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <HAL_Init+0x68>)
 80009b4:	699b      	ldr	r3, [r3, #24]
 80009b6:	f003 030f 	and.w	r3, r3, #15
 80009ba:	4a0e      	ldr	r2, [pc, #56]	@ (80009f4 <HAL_Init+0x6c>)
 80009bc:	5cd3      	ldrb	r3, [r2, r3]
 80009be:	f003 031f 	and.w	r3, r3, #31
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	fa22 f303 	lsr.w	r3, r2, r3
 80009c8:	4a0b      	ldr	r2, [pc, #44]	@ (80009f8 <HAL_Init+0x70>)
 80009ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80009cc:	4a0b      	ldr	r2, [pc, #44]	@ (80009fc <HAL_Init+0x74>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009d2:	200f      	movs	r0, #15
 80009d4:	f000 f814 	bl	8000a00 <HAL_InitTick>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e002      	b.n	80009e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80009e2:	f7ff ff5f 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	58024400 	.word	0x58024400
 80009f4:	08006614 	.word	0x08006614
 80009f8:	24000004 	.word	0x24000004
 80009fc:	24000000 	.word	0x24000000

08000a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a08:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <HAL_InitTick+0x60>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d101      	bne.n	8000a14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a10:	2301      	movs	r3, #1
 8000a12:	e021      	b.n	8000a58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a14:	4b13      	ldr	r3, [pc, #76]	@ (8000a64 <HAL_InitTick+0x64>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <HAL_InitTick+0x60>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f921 	bl	8000c72 <HAL_SYSTICK_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00e      	b.n	8000a58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b0f      	cmp	r3, #15
 8000a3e:	d80a      	bhi.n	8000a56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a40:	2200      	movs	r2, #0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f000 f8f9 	bl	8000c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a4c:	4a06      	ldr	r2, [pc, #24]	@ (8000a68 <HAL_InitTick+0x68>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2400000c 	.word	0x2400000c
 8000a64:	24000000 	.word	0x24000000
 8000a68:	24000008 	.word	0x24000008

08000a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <HAL_IncTick+0x20>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <HAL_IncTick+0x24>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a04      	ldr	r2, [pc, #16]	@ (8000a90 <HAL_IncTick+0x24>)
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	2400000c 	.word	0x2400000c
 8000a90:	24000044 	.word	0x24000044

08000a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return uwTick;
 8000a98:	4b03      	ldr	r3, [pc, #12]	@ (8000aa8 <HAL_GetTick+0x14>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	24000044 	.word	0x24000044

08000aac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ab0:	4b03      	ldr	r3, [pc, #12]	@ (8000ac0 <HAL_GetREVID+0x14>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	0c1b      	lsrs	r3, r3, #16
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	5c001000 	.word	0x5c001000

08000ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b04 <__NVIC_SetPriorityGrouping+0x40>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000aec:	4b06      	ldr	r3, [pc, #24]	@ (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000aee:	4313      	orrs	r3, r2
 8000af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af2:	4a04      	ldr	r2, [pc, #16]	@ (8000b04 <__NVIC_SetPriorityGrouping+0x40>)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	60d3      	str	r3, [r2, #12]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00
 8000b08:	05fa0000 	.word	0x05fa0000

08000b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b10:	4b04      	ldr	r3, [pc, #16]	@ (8000b24 <__NVIC_GetPriorityGrouping+0x18>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	0a1b      	lsrs	r3, r3, #8
 8000b16:	f003 0307 	and.w	r3, r3, #7
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	db0a      	blt.n	8000b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	490c      	ldr	r1, [pc, #48]	@ (8000b74 <__NVIC_SetPriority+0x4c>)
 8000b42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b46:	0112      	lsls	r2, r2, #4
 8000b48:	b2d2      	uxtb	r2, r2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b50:	e00a      	b.n	8000b68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4908      	ldr	r1, [pc, #32]	@ (8000b78 <__NVIC_SetPriority+0x50>)
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	f003 030f 	and.w	r3, r3, #15
 8000b5e:	3b04      	subs	r3, #4
 8000b60:	0112      	lsls	r2, r2, #4
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	440b      	add	r3, r1
 8000b66:	761a      	strb	r2, [r3, #24]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000e100 	.word	0xe000e100
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b089      	sub	sp, #36	@ 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	f1c3 0307 	rsb	r3, r3, #7
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	bf28      	it	cs
 8000b9a:	2304      	movcs	r3, #4
 8000b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d902      	bls.n	8000bac <NVIC_EncodePriority+0x30>
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3b03      	subs	r3, #3
 8000baa:	e000      	b.n	8000bae <NVIC_EncodePriority+0x32>
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	43d9      	mvns	r1, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	4313      	orrs	r3, r2
         );
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3724      	adds	r7, #36	@ 0x24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bf4:	d301      	bcc.n	8000bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00f      	b.n	8000c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <SysTick_Config+0x40>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c02:	210f      	movs	r1, #15
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f7ff ff8e 	bl	8000b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <SysTick_Config+0x40>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c12:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <SysTick_Config+0x40>)
 8000c14:	2207      	movs	r2, #7
 8000c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	e000e010 	.word	0xe000e010

08000c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ff47 	bl	8000ac4 <__NVIC_SetPriorityGrouping>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c4c:	f7ff ff5e 	bl	8000b0c <__NVIC_GetPriorityGrouping>
 8000c50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	68b9      	ldr	r1, [r7, #8]
 8000c56:	6978      	ldr	r0, [r7, #20]
 8000c58:	f7ff ff90 	bl	8000b7c <NVIC_EncodePriority>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff5f 	bl	8000b28 <__NVIC_SetPriority>
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ffb2 	bl	8000be4 <SysTick_Config>
 8000c80:	4603      	mov	r3, r0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b089      	sub	sp, #36	@ 0x24
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000c9a:	4b89      	ldr	r3, [pc, #548]	@ (8000ec0 <HAL_GPIO_Init+0x234>)
 8000c9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000c9e:	e194      	b.n	8000fca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cac:	4013      	ands	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	f000 8186 	beq.w	8000fc4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 0303 	and.w	r3, r3, #3
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d005      	beq.n	8000cd0 <HAL_GPIO_Init+0x44>
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d130      	bne.n	8000d32 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	2203      	movs	r2, #3
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	69ba      	ldr	r2, [r7, #24]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	68da      	ldr	r2, [r3, #12]
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	005b      	lsls	r3, r3, #1
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	69ba      	ldr	r2, [r7, #24]
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d06:	2201      	movs	r2, #1
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	091b      	lsrs	r3, r3, #4
 8000d1c:	f003 0201 	and.w	r2, r3, #1
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	69ba      	ldr	r2, [r7, #24]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	f003 0303 	and.w	r3, r3, #3
 8000d3a:	2b03      	cmp	r3, #3
 8000d3c:	d017      	beq.n	8000d6e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68db      	ldr	r3, [r3, #12]
 8000d42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	2203      	movs	r2, #3
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4013      	ands	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	689a      	ldr	r2, [r3, #8]
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	005b      	lsls	r3, r3, #1
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	69ba      	ldr	r2, [r7, #24]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f003 0303 	and.w	r3, r3, #3
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d123      	bne.n	8000dc2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	08da      	lsrs	r2, r3, #3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3208      	adds	r2, #8
 8000d82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	220f      	movs	r2, #15
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43db      	mvns	r3, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	691a      	ldr	r2, [r3, #16]
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	f003 0307 	and.w	r3, r3, #7
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	08da      	lsrs	r2, r3, #3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3208      	adds	r2, #8
 8000dbc:	69b9      	ldr	r1, [r7, #24]
 8000dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	2203      	movs	r2, #3
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0203 	and.w	r2, r3, #3
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	69ba      	ldr	r2, [r7, #24]
 8000dec:	4313      	orrs	r3, r2
 8000dee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	f000 80e0 	beq.w	8000fc4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e04:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec4 <HAL_GPIO_Init+0x238>)
 8000e06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e0a:	4a2e      	ldr	r2, [pc, #184]	@ (8000ec4 <HAL_GPIO_Init+0x238>)
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e14:	4b2b      	ldr	r3, [pc, #172]	@ (8000ec4 <HAL_GPIO_Init+0x238>)
 8000e16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e22:	4a29      	ldr	r2, [pc, #164]	@ (8000ec8 <HAL_GPIO_Init+0x23c>)
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	089b      	lsrs	r3, r3, #2
 8000e28:	3302      	adds	r3, #2
 8000e2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	220f      	movs	r2, #15
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a20      	ldr	r2, [pc, #128]	@ (8000ecc <HAL_GPIO_Init+0x240>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d052      	beq.n	8000ef4 <HAL_GPIO_Init+0x268>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a1f      	ldr	r2, [pc, #124]	@ (8000ed0 <HAL_GPIO_Init+0x244>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d031      	beq.n	8000eba <HAL_GPIO_Init+0x22e>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a1e      	ldr	r2, [pc, #120]	@ (8000ed4 <HAL_GPIO_Init+0x248>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d02b      	beq.n	8000eb6 <HAL_GPIO_Init+0x22a>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a1d      	ldr	r2, [pc, #116]	@ (8000ed8 <HAL_GPIO_Init+0x24c>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d025      	beq.n	8000eb2 <HAL_GPIO_Init+0x226>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a1c      	ldr	r2, [pc, #112]	@ (8000edc <HAL_GPIO_Init+0x250>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d01f      	beq.n	8000eae <HAL_GPIO_Init+0x222>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee0 <HAL_GPIO_Init+0x254>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d019      	beq.n	8000eaa <HAL_GPIO_Init+0x21e>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a1a      	ldr	r2, [pc, #104]	@ (8000ee4 <HAL_GPIO_Init+0x258>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d013      	beq.n	8000ea6 <HAL_GPIO_Init+0x21a>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a19      	ldr	r2, [pc, #100]	@ (8000ee8 <HAL_GPIO_Init+0x25c>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d00d      	beq.n	8000ea2 <HAL_GPIO_Init+0x216>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a18      	ldr	r2, [pc, #96]	@ (8000eec <HAL_GPIO_Init+0x260>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d007      	beq.n	8000e9e <HAL_GPIO_Init+0x212>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a17      	ldr	r2, [pc, #92]	@ (8000ef0 <HAL_GPIO_Init+0x264>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d101      	bne.n	8000e9a <HAL_GPIO_Init+0x20e>
 8000e96:	2309      	movs	r3, #9
 8000e98:	e02d      	b.n	8000ef6 <HAL_GPIO_Init+0x26a>
 8000e9a:	230a      	movs	r3, #10
 8000e9c:	e02b      	b.n	8000ef6 <HAL_GPIO_Init+0x26a>
 8000e9e:	2308      	movs	r3, #8
 8000ea0:	e029      	b.n	8000ef6 <HAL_GPIO_Init+0x26a>
 8000ea2:	2307      	movs	r3, #7
 8000ea4:	e027      	b.n	8000ef6 <HAL_GPIO_Init+0x26a>
 8000ea6:	2306      	movs	r3, #6
 8000ea8:	e025      	b.n	8000ef6 <HAL_GPIO_Init+0x26a>
 8000eaa:	2305      	movs	r3, #5
 8000eac:	e023      	b.n	8000ef6 <HAL_GPIO_Init+0x26a>
 8000eae:	2304      	movs	r3, #4
 8000eb0:	e021      	b.n	8000ef6 <HAL_GPIO_Init+0x26a>
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e01f      	b.n	8000ef6 <HAL_GPIO_Init+0x26a>
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	e01d      	b.n	8000ef6 <HAL_GPIO_Init+0x26a>
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e01b      	b.n	8000ef6 <HAL_GPIO_Init+0x26a>
 8000ebe:	bf00      	nop
 8000ec0:	58000080 	.word	0x58000080
 8000ec4:	58024400 	.word	0x58024400
 8000ec8:	58000400 	.word	0x58000400
 8000ecc:	58020000 	.word	0x58020000
 8000ed0:	58020400 	.word	0x58020400
 8000ed4:	58020800 	.word	0x58020800
 8000ed8:	58020c00 	.word	0x58020c00
 8000edc:	58021000 	.word	0x58021000
 8000ee0:	58021400 	.word	0x58021400
 8000ee4:	58021800 	.word	0x58021800
 8000ee8:	58021c00 	.word	0x58021c00
 8000eec:	58022000 	.word	0x58022000
 8000ef0:	58022400 	.word	0x58022400
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	69fa      	ldr	r2, [r7, #28]
 8000ef8:	f002 0203 	and.w	r2, r2, #3
 8000efc:	0092      	lsls	r2, r2, #2
 8000efe:	4093      	lsls	r3, r2
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f06:	4938      	ldr	r1, [pc, #224]	@ (8000fe8 <HAL_GPIO_Init+0x35c>)
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	089b      	lsrs	r3, r3, #2
 8000f0c:	3302      	adds	r3, #2
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000f3a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f3e:	69bb      	ldr	r3, [r7, #24]
 8000f40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000f42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f4a:	693b      	ldr	r3, [r7, #16]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d003      	beq.n	8000f68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000f68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f47f ae63 	bne.w	8000ca0 <HAL_GPIO_Init+0x14>
  }
}
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	3724      	adds	r7, #36	@ 0x24
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	58000400 	.word	0x58000400

08000fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ffc:	787b      	ldrb	r3, [r7, #1]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001002:	887a      	ldrh	r2, [r7, #2]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001008:	e003      	b.n	8001012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800100a:	887b      	ldrh	r3, [r7, #2]
 800100c:	041a      	lsls	r2, r3, #16
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	619a      	str	r2, [r3, #24]
}
 8001012:	bf00      	nop
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001028:	4a08      	ldr	r2, [pc, #32]	@ (800104c <HAL_HSEM_FastTake+0x2c>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3320      	adds	r3, #32
 800102e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001032:	4a07      	ldr	r2, [pc, #28]	@ (8001050 <HAL_HSEM_FastTake+0x30>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d101      	bne.n	800103c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001038:	2300      	movs	r3, #0
 800103a:	e000      	b.n	800103e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	58026400 	.word	0x58026400
 8001050:	80000300 	.word	0x80000300

08001054 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800105e:	4906      	ldr	r1, [pc, #24]	@ (8001078 <HAL_HSEM_Release+0x24>)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	58026400 	.word	0x58026400

0800107c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001084:	4b29      	ldr	r3, [pc, #164]	@ (800112c <HAL_PWREx_ConfigSupply+0xb0>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	2b06      	cmp	r3, #6
 800108e:	d00a      	beq.n	80010a6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001090:	4b26      	ldr	r3, [pc, #152]	@ (800112c <HAL_PWREx_ConfigSupply+0xb0>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	429a      	cmp	r2, r3
 800109c:	d001      	beq.n	80010a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e040      	b.n	8001124 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80010a2:	2300      	movs	r3, #0
 80010a4:	e03e      	b.n	8001124 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80010a6:	4b21      	ldr	r3, [pc, #132]	@ (800112c <HAL_PWREx_ConfigSupply+0xb0>)
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80010ae:	491f      	ldr	r1, [pc, #124]	@ (800112c <HAL_PWREx_ConfigSupply+0xb0>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80010b6:	f7ff fced 	bl	8000a94 <HAL_GetTick>
 80010ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010bc:	e009      	b.n	80010d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80010be:	f7ff fce9 	bl	8000a94 <HAL_GetTick>
 80010c2:	4602      	mov	r2, r0
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	1ad3      	subs	r3, r2, r3
 80010c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80010cc:	d901      	bls.n	80010d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e028      	b.n	8001124 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80010d2:	4b16      	ldr	r3, [pc, #88]	@ (800112c <HAL_PWREx_ConfigSupply+0xb0>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80010da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80010de:	d1ee      	bne.n	80010be <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b1e      	cmp	r3, #30
 80010e4:	d008      	beq.n	80010f8 <HAL_PWREx_ConfigSupply+0x7c>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80010ea:	d005      	beq.n	80010f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b1d      	cmp	r3, #29
 80010f0:	d002      	beq.n	80010f8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b2d      	cmp	r3, #45	@ 0x2d
 80010f6:	d114      	bne.n	8001122 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80010f8:	f7ff fccc 	bl	8000a94 <HAL_GetTick>
 80010fc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80010fe:	e009      	b.n	8001114 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001100:	f7ff fcc8 	bl	8000a94 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800110e:	d901      	bls.n	8001114 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e007      	b.n	8001124 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001114:	4b05      	ldr	r3, [pc, #20]	@ (800112c <HAL_PWREx_ConfigSupply+0xb0>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800111c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001120:	d1ee      	bne.n	8001100 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	58024800 	.word	0x58024800

08001130 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	@ 0x30
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d102      	bne.n	8001144 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	f000 bc48 	b.w	80019d4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	f000 8088 	beq.w	8001262 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001152:	4b99      	ldr	r3, [pc, #612]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800115a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800115c:	4b96      	ldr	r3, [pc, #600]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 800115e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001160:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001164:	2b10      	cmp	r3, #16
 8001166:	d007      	beq.n	8001178 <HAL_RCC_OscConfig+0x48>
 8001168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800116a:	2b18      	cmp	r3, #24
 800116c:	d111      	bne.n	8001192 <HAL_RCC_OscConfig+0x62>
 800116e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d10c      	bne.n	8001192 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001178:	4b8f      	ldr	r3, [pc, #572]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d06d      	beq.n	8001260 <HAL_RCC_OscConfig+0x130>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d169      	bne.n	8001260 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	f000 bc21 	b.w	80019d4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800119a:	d106      	bne.n	80011aa <HAL_RCC_OscConfig+0x7a>
 800119c:	4b86      	ldr	r3, [pc, #536]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a85      	ldr	r2, [pc, #532]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011a6:	6013      	str	r3, [r2, #0]
 80011a8:	e02e      	b.n	8001208 <HAL_RCC_OscConfig+0xd8>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d10c      	bne.n	80011cc <HAL_RCC_OscConfig+0x9c>
 80011b2:	4b81      	ldr	r3, [pc, #516]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a80      	ldr	r2, [pc, #512]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	4b7e      	ldr	r3, [pc, #504]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a7d      	ldr	r2, [pc, #500]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011c4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e01d      	b.n	8001208 <HAL_RCC_OscConfig+0xd8>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011d4:	d10c      	bne.n	80011f0 <HAL_RCC_OscConfig+0xc0>
 80011d6:	4b78      	ldr	r3, [pc, #480]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a77      	ldr	r2, [pc, #476]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	4b75      	ldr	r3, [pc, #468]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a74      	ldr	r2, [pc, #464]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011ec:	6013      	str	r3, [r2, #0]
 80011ee:	e00b      	b.n	8001208 <HAL_RCC_OscConfig+0xd8>
 80011f0:	4b71      	ldr	r3, [pc, #452]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a70      	ldr	r2, [pc, #448]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b6e      	ldr	r3, [pc, #440]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a6d      	ldr	r2, [pc, #436]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001202:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d013      	beq.n	8001238 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001210:	f7ff fc40 	bl	8000a94 <HAL_GetTick>
 8001214:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001218:	f7ff fc3c 	bl	8000a94 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b64      	cmp	r3, #100	@ 0x64
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e3d4      	b.n	80019d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800122a:	4b63      	ldr	r3, [pc, #396]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f0      	beq.n	8001218 <HAL_RCC_OscConfig+0xe8>
 8001236:	e014      	b.n	8001262 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001238:	f7ff fc2c 	bl	8000a94 <HAL_GetTick>
 800123c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001240:	f7ff fc28 	bl	8000a94 <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b64      	cmp	r3, #100	@ 0x64
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e3c0      	b.n	80019d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001252:	4b59      	ldr	r3, [pc, #356]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0x110>
 800125e:	e000      	b.n	8001262 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 80ca 	beq.w	8001404 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001270:	4b51      	ldr	r3, [pc, #324]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001272:	691b      	ldr	r3, [r3, #16]
 8001274:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001278:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800127a:	4b4f      	ldr	r3, [pc, #316]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 800127c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800127e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001280:	6a3b      	ldr	r3, [r7, #32]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d007      	beq.n	8001296 <HAL_RCC_OscConfig+0x166>
 8001286:	6a3b      	ldr	r3, [r7, #32]
 8001288:	2b18      	cmp	r3, #24
 800128a:	d156      	bne.n	800133a <HAL_RCC_OscConfig+0x20a>
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d151      	bne.n	800133a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001296:	4b48      	ldr	r3, [pc, #288]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0304 	and.w	r3, r3, #4
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d005      	beq.n	80012ae <HAL_RCC_OscConfig+0x17e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e392      	b.n	80019d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80012ae:	4b42      	ldr	r3, [pc, #264]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f023 0219 	bic.w	r2, r3, #25
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	493f      	ldr	r1, [pc, #252]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c0:	f7ff fbe8 	bl	8000a94 <HAL_GetTick>
 80012c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012c8:	f7ff fbe4 	bl	8000a94 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e37c      	b.n	80019d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012da:	4b37      	ldr	r3, [pc, #220]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d0f0      	beq.n	80012c8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012e6:	f7ff fbe1 	bl	8000aac <HAL_GetREVID>
 80012ea:	4603      	mov	r3, r0
 80012ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d817      	bhi.n	8001324 <HAL_RCC_OscConfig+0x1f4>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	2b40      	cmp	r3, #64	@ 0x40
 80012fa:	d108      	bne.n	800130e <HAL_RCC_OscConfig+0x1de>
 80012fc:	4b2e      	ldr	r3, [pc, #184]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001304:	4a2c      	ldr	r2, [pc, #176]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001306:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800130a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800130c:	e07a      	b.n	8001404 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130e:	4b2a      	ldr	r3, [pc, #168]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	691b      	ldr	r3, [r3, #16]
 800131a:	031b      	lsls	r3, r3, #12
 800131c:	4926      	ldr	r1, [pc, #152]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 800131e:	4313      	orrs	r3, r2
 8001320:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001322:	e06f      	b.n	8001404 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001324:	4b24      	ldr	r3, [pc, #144]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	061b      	lsls	r3, r3, #24
 8001332:	4921      	ldr	r1, [pc, #132]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001338:	e064      	b.n	8001404 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d047      	beq.n	80013d2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001342:	4b1d      	ldr	r3, [pc, #116]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 0219 	bic.w	r2, r3, #25
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	491a      	ldr	r1, [pc, #104]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001350:	4313      	orrs	r3, r2
 8001352:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001354:	f7ff fb9e 	bl	8000a94 <HAL_GetTick>
 8001358:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800135c:	f7ff fb9a 	bl	8000a94 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e332      	b.n	80019d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800136e:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0304 	and.w	r3, r3, #4
 8001376:	2b00      	cmp	r3, #0
 8001378:	d0f0      	beq.n	800135c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137a:	f7ff fb97 	bl	8000aac <HAL_GetREVID>
 800137e:	4603      	mov	r3, r0
 8001380:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001384:	4293      	cmp	r3, r2
 8001386:	d819      	bhi.n	80013bc <HAL_RCC_OscConfig+0x28c>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	2b40      	cmp	r3, #64	@ 0x40
 800138e:	d108      	bne.n	80013a2 <HAL_RCC_OscConfig+0x272>
 8001390:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001398:	4a07      	ldr	r2, [pc, #28]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 800139a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800139e:	6053      	str	r3, [r2, #4]
 80013a0:	e030      	b.n	8001404 <HAL_RCC_OscConfig+0x2d4>
 80013a2:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	031b      	lsls	r3, r3, #12
 80013b0:	4901      	ldr	r1, [pc, #4]	@ (80013b8 <HAL_RCC_OscConfig+0x288>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	604b      	str	r3, [r1, #4]
 80013b6:	e025      	b.n	8001404 <HAL_RCC_OscConfig+0x2d4>
 80013b8:	58024400 	.word	0x58024400
 80013bc:	4b9a      	ldr	r3, [pc, #616]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	691b      	ldr	r3, [r3, #16]
 80013c8:	061b      	lsls	r3, r3, #24
 80013ca:	4997      	ldr	r1, [pc, #604]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]
 80013d0:	e018      	b.n	8001404 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013d2:	4b95      	ldr	r3, [pc, #596]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a94      	ldr	r2, [pc, #592]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 80013d8:	f023 0301 	bic.w	r3, r3, #1
 80013dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013de:	f7ff fb59 	bl	8000a94 <HAL_GetTick>
 80013e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e6:	f7ff fb55 	bl	8000a94 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e2ed      	b.n	80019d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80013f8:	4b8b      	ldr	r3, [pc, #556]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f0      	bne.n	80013e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0310 	and.w	r3, r3, #16
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 80a9 	beq.w	8001564 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001412:	4b85      	ldr	r3, [pc, #532]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800141a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800141c:	4b82      	ldr	r3, [pc, #520]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 800141e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001420:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	2b08      	cmp	r3, #8
 8001426:	d007      	beq.n	8001438 <HAL_RCC_OscConfig+0x308>
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	2b18      	cmp	r3, #24
 800142c:	d13a      	bne.n	80014a4 <HAL_RCC_OscConfig+0x374>
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	f003 0303 	and.w	r3, r3, #3
 8001434:	2b01      	cmp	r3, #1
 8001436:	d135      	bne.n	80014a4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001438:	4b7b      	ldr	r3, [pc, #492]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001440:	2b00      	cmp	r3, #0
 8001442:	d005      	beq.n	8001450 <HAL_RCC_OscConfig+0x320>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	2b80      	cmp	r3, #128	@ 0x80
 800144a:	d001      	beq.n	8001450 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e2c1      	b.n	80019d4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001450:	f7ff fb2c 	bl	8000aac <HAL_GetREVID>
 8001454:	4603      	mov	r3, r0
 8001456:	f241 0203 	movw	r2, #4099	@ 0x1003
 800145a:	4293      	cmp	r3, r2
 800145c:	d817      	bhi.n	800148e <HAL_RCC_OscConfig+0x35e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	2b20      	cmp	r3, #32
 8001464:	d108      	bne.n	8001478 <HAL_RCC_OscConfig+0x348>
 8001466:	4b70      	ldr	r3, [pc, #448]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800146e:	4a6e      	ldr	r2, [pc, #440]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 8001470:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001474:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001476:	e075      	b.n	8001564 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001478:	4b6b      	ldr	r3, [pc, #428]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a1b      	ldr	r3, [r3, #32]
 8001484:	069b      	lsls	r3, r3, #26
 8001486:	4968      	ldr	r1, [pc, #416]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800148c:	e06a      	b.n	8001564 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800148e:	4b66      	ldr	r3, [pc, #408]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	061b      	lsls	r3, r3, #24
 800149c:	4962      	ldr	r1, [pc, #392]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014a2:	e05f      	b.n	8001564 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d042      	beq.n	8001532 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80014ac:	4b5e      	ldr	r3, [pc, #376]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a5d      	ldr	r2, [pc, #372]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 80014b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014b8:	f7ff faec 	bl	8000a94 <HAL_GetTick>
 80014bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80014c0:	f7ff fae8 	bl	8000a94 <HAL_GetTick>
 80014c4:	4602      	mov	r2, r0
 80014c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e280      	b.n	80019d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80014d2:	4b55      	ldr	r3, [pc, #340]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f0      	beq.n	80014c0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014de:	f7ff fae5 	bl	8000aac <HAL_GetREVID>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d817      	bhi.n	800151c <HAL_RCC_OscConfig+0x3ec>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	2b20      	cmp	r3, #32
 80014f2:	d108      	bne.n	8001506 <HAL_RCC_OscConfig+0x3d6>
 80014f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80014fc:	4a4a      	ldr	r2, [pc, #296]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 80014fe:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001502:	6053      	str	r3, [r2, #4]
 8001504:	e02e      	b.n	8001564 <HAL_RCC_OscConfig+0x434>
 8001506:	4b48      	ldr	r3, [pc, #288]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
 8001512:	069b      	lsls	r3, r3, #26
 8001514:	4944      	ldr	r1, [pc, #272]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 8001516:	4313      	orrs	r3, r2
 8001518:	604b      	str	r3, [r1, #4]
 800151a:	e023      	b.n	8001564 <HAL_RCC_OscConfig+0x434>
 800151c:	4b42      	ldr	r3, [pc, #264]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a1b      	ldr	r3, [r3, #32]
 8001528:	061b      	lsls	r3, r3, #24
 800152a:	493f      	ldr	r1, [pc, #252]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 800152c:	4313      	orrs	r3, r2
 800152e:	60cb      	str	r3, [r1, #12]
 8001530:	e018      	b.n	8001564 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001532:	4b3d      	ldr	r3, [pc, #244]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a3c      	ldr	r2, [pc, #240]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 8001538:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800153c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153e:	f7ff faa9 	bl	8000a94 <HAL_GetTick>
 8001542:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001544:	e008      	b.n	8001558 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001546:	f7ff faa5 	bl	8000a94 <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	2b02      	cmp	r3, #2
 8001552:	d901      	bls.n	8001558 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001554:	2303      	movs	r3, #3
 8001556:	e23d      	b.n	80019d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001558:	4b33      	ldr	r3, [pc, #204]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001560:	2b00      	cmp	r3, #0
 8001562:	d1f0      	bne.n	8001546 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0308 	and.w	r3, r3, #8
 800156c:	2b00      	cmp	r3, #0
 800156e:	d036      	beq.n	80015de <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d019      	beq.n	80015ac <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001578:	4b2b      	ldr	r3, [pc, #172]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 800157a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800157c:	4a2a      	ldr	r2, [pc, #168]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001584:	f7ff fa86 	bl	8000a94 <HAL_GetTick>
 8001588:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800158a:	e008      	b.n	800159e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800158c:	f7ff fa82 	bl	8000a94 <HAL_GetTick>
 8001590:	4602      	mov	r2, r0
 8001592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b02      	cmp	r3, #2
 8001598:	d901      	bls.n	800159e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e21a      	b.n	80019d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800159e:	4b22      	ldr	r3, [pc, #136]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 80015a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0f0      	beq.n	800158c <HAL_RCC_OscConfig+0x45c>
 80015aa:	e018      	b.n	80015de <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 80015ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 80015b2:	f023 0301 	bic.w	r3, r3, #1
 80015b6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b8:	f7ff fa6c 	bl	8000a94 <HAL_GetTick>
 80015bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c0:	f7ff fa68 	bl	8000a94 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e200      	b.n	80019d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015d2:	4b15      	ldr	r3, [pc, #84]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 80015d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0320 	and.w	r3, r3, #32
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d039      	beq.n	800165e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d01c      	beq.n	800162c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a0c      	ldr	r2, [pc, #48]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 80015f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80015fe:	f7ff fa49 	bl	8000a94 <HAL_GetTick>
 8001602:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001604:	e008      	b.n	8001618 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001606:	f7ff fa45 	bl	8000a94 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d901      	bls.n	8001618 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e1dd      	b.n	80019d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001618:	4b03      	ldr	r3, [pc, #12]	@ (8001628 <HAL_RCC_OscConfig+0x4f8>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_RCC_OscConfig+0x4d6>
 8001624:	e01b      	b.n	800165e <HAL_RCC_OscConfig+0x52e>
 8001626:	bf00      	nop
 8001628:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800162c:	4b9b      	ldr	r3, [pc, #620]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a9a      	ldr	r2, [pc, #616]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 8001632:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001636:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001638:	f7ff fa2c 	bl	8000a94 <HAL_GetTick>
 800163c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001640:	f7ff fa28 	bl	8000a94 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e1c0      	b.n	80019d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001652:	4b92      	ldr	r3, [pc, #584]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 8081 	beq.w	800176e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800166c:	4b8c      	ldr	r3, [pc, #560]	@ (80018a0 <HAL_RCC_OscConfig+0x770>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a8b      	ldr	r2, [pc, #556]	@ (80018a0 <HAL_RCC_OscConfig+0x770>)
 8001672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001676:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001678:	f7ff fa0c 	bl	8000a94 <HAL_GetTick>
 800167c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001680:	f7ff fa08 	bl	8000a94 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b64      	cmp	r3, #100	@ 0x64
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e1a0      	b.n	80019d4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001692:	4b83      	ldr	r3, [pc, #524]	@ (80018a0 <HAL_RCC_OscConfig+0x770>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800169a:	2b00      	cmp	r3, #0
 800169c:	d0f0      	beq.n	8001680 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d106      	bne.n	80016b4 <HAL_RCC_OscConfig+0x584>
 80016a6:	4b7d      	ldr	r3, [pc, #500]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 80016a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016aa:	4a7c      	ldr	r2, [pc, #496]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80016b2:	e02d      	b.n	8001710 <HAL_RCC_OscConfig+0x5e0>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10c      	bne.n	80016d6 <HAL_RCC_OscConfig+0x5a6>
 80016bc:	4b77      	ldr	r3, [pc, #476]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 80016be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016c0:	4a76      	ldr	r2, [pc, #472]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 80016c2:	f023 0301 	bic.w	r3, r3, #1
 80016c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80016c8:	4b74      	ldr	r3, [pc, #464]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 80016ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016cc:	4a73      	ldr	r2, [pc, #460]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 80016ce:	f023 0304 	bic.w	r3, r3, #4
 80016d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80016d4:	e01c      	b.n	8001710 <HAL_RCC_OscConfig+0x5e0>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	689b      	ldr	r3, [r3, #8]
 80016da:	2b05      	cmp	r3, #5
 80016dc:	d10c      	bne.n	80016f8 <HAL_RCC_OscConfig+0x5c8>
 80016de:	4b6f      	ldr	r3, [pc, #444]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 80016e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016e2:	4a6e      	ldr	r2, [pc, #440]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80016ea:	4b6c      	ldr	r3, [pc, #432]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 80016ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ee:	4a6b      	ldr	r2, [pc, #428]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 80016f0:	f043 0301 	orr.w	r3, r3, #1
 80016f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80016f6:	e00b      	b.n	8001710 <HAL_RCC_OscConfig+0x5e0>
 80016f8:	4b68      	ldr	r3, [pc, #416]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 80016fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016fc:	4a67      	ldr	r2, [pc, #412]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 80016fe:	f023 0301 	bic.w	r3, r3, #1
 8001702:	6713      	str	r3, [r2, #112]	@ 0x70
 8001704:	4b65      	ldr	r3, [pc, #404]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001708:	4a64      	ldr	r2, [pc, #400]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 800170a:	f023 0304 	bic.w	r3, r3, #4
 800170e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d015      	beq.n	8001744 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001718:	f7ff f9bc 	bl	8000a94 <HAL_GetTick>
 800171c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800171e:	e00a      	b.n	8001736 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001720:	f7ff f9b8 	bl	8000a94 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800172e:	4293      	cmp	r3, r2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e14e      	b.n	80019d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001736:	4b59      	ldr	r3, [pc, #356]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 8001738:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0ee      	beq.n	8001720 <HAL_RCC_OscConfig+0x5f0>
 8001742:	e014      	b.n	800176e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001744:	f7ff f9a6 	bl	8000a94 <HAL_GetTick>
 8001748:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800174a:	e00a      	b.n	8001762 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800174c:	f7ff f9a2 	bl	8000a94 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800175a:	4293      	cmp	r3, r2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e138      	b.n	80019d4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001762:	4b4e      	ldr	r3, [pc, #312]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 8001764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1ee      	bne.n	800174c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001772:	2b00      	cmp	r3, #0
 8001774:	f000 812d 	beq.w	80019d2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001778:	4b48      	ldr	r3, [pc, #288]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001780:	2b18      	cmp	r3, #24
 8001782:	f000 80bd 	beq.w	8001900 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800178a:	2b02      	cmp	r3, #2
 800178c:	f040 809e 	bne.w	80018cc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001790:	4b42      	ldr	r3, [pc, #264]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a41      	ldr	r2, [pc, #260]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 8001796:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800179a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff f97a 	bl	8000a94 <HAL_GetTick>
 80017a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a4:	f7ff f976 	bl	8000a94 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e10e      	b.n	80019d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80017b6:	4b39      	ldr	r3, [pc, #228]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1f0      	bne.n	80017a4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017c2:	4b36      	ldr	r3, [pc, #216]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 80017c4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80017c6:	4b37      	ldr	r3, [pc, #220]	@ (80018a4 <HAL_RCC_OscConfig+0x774>)
 80017c8:	4013      	ands	r3, r2
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80017d2:	0112      	lsls	r2, r2, #4
 80017d4:	430a      	orrs	r2, r1
 80017d6:	4931      	ldr	r1, [pc, #196]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	628b      	str	r3, [r1, #40]	@ 0x28
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e0:	3b01      	subs	r3, #1
 80017e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ea:	3b01      	subs	r3, #1
 80017ec:	025b      	lsls	r3, r3, #9
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	431a      	orrs	r2, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80017f6:	3b01      	subs	r3, #1
 80017f8:	041b      	lsls	r3, r3, #16
 80017fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80017fe:	431a      	orrs	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001804:	3b01      	subs	r3, #1
 8001806:	061b      	lsls	r3, r3, #24
 8001808:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800180c:	4923      	ldr	r1, [pc, #140]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 800180e:	4313      	orrs	r3, r2
 8001810:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001812:	4b22      	ldr	r3, [pc, #136]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 8001814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001816:	4a21      	ldr	r2, [pc, #132]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 8001818:	f023 0301 	bic.w	r3, r3, #1
 800181c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800181e:	4b1f      	ldr	r3, [pc, #124]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 8001820:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001822:	4b21      	ldr	r3, [pc, #132]	@ (80018a8 <HAL_RCC_OscConfig+0x778>)
 8001824:	4013      	ands	r3, r2
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800182a:	00d2      	lsls	r2, r2, #3
 800182c:	491b      	ldr	r1, [pc, #108]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 800182e:	4313      	orrs	r3, r2
 8001830:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001832:	4b1a      	ldr	r3, [pc, #104]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 8001834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001836:	f023 020c 	bic.w	r2, r3, #12
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183e:	4917      	ldr	r1, [pc, #92]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 8001840:	4313      	orrs	r3, r2
 8001842:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001844:	4b15      	ldr	r3, [pc, #84]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 8001846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001848:	f023 0202 	bic.w	r2, r3, #2
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001850:	4912      	ldr	r1, [pc, #72]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 8001852:	4313      	orrs	r3, r2
 8001854:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001856:	4b11      	ldr	r3, [pc, #68]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 8001858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185a:	4a10      	ldr	r2, [pc, #64]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 800185c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001860:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001862:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 8001864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001866:	4a0d      	ldr	r2, [pc, #52]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 8001868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800186c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800186e:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 8001870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001872:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 8001874:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001878:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800187a:	4b08      	ldr	r3, [pc, #32]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 800187c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187e:	4a07      	ldr	r2, [pc, #28]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 8001880:	f043 0301 	orr.w	r3, r3, #1
 8001884:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001886:	4b05      	ldr	r3, [pc, #20]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a04      	ldr	r2, [pc, #16]	@ (800189c <HAL_RCC_OscConfig+0x76c>)
 800188c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001892:	f7ff f8ff 	bl	8000a94 <HAL_GetTick>
 8001896:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001898:	e011      	b.n	80018be <HAL_RCC_OscConfig+0x78e>
 800189a:	bf00      	nop
 800189c:	58024400 	.word	0x58024400
 80018a0:	58024800 	.word	0x58024800
 80018a4:	fffffc0c 	.word	0xfffffc0c
 80018a8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ac:	f7ff f8f2 	bl	8000a94 <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e08a      	b.n	80019d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80018be:	4b47      	ldr	r3, [pc, #284]	@ (80019dc <HAL_RCC_OscConfig+0x8ac>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0x77c>
 80018ca:	e082      	b.n	80019d2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018cc:	4b43      	ldr	r3, [pc, #268]	@ (80019dc <HAL_RCC_OscConfig+0x8ac>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a42      	ldr	r2, [pc, #264]	@ (80019dc <HAL_RCC_OscConfig+0x8ac>)
 80018d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d8:	f7ff f8dc 	bl	8000a94 <HAL_GetTick>
 80018dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018de:	e008      	b.n	80018f2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e0:	f7ff f8d8 	bl	8000a94 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	2b02      	cmp	r3, #2
 80018ec:	d901      	bls.n	80018f2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e070      	b.n	80019d4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80018f2:	4b3a      	ldr	r3, [pc, #232]	@ (80019dc <HAL_RCC_OscConfig+0x8ac>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d1f0      	bne.n	80018e0 <HAL_RCC_OscConfig+0x7b0>
 80018fe:	e068      	b.n	80019d2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001900:	4b36      	ldr	r3, [pc, #216]	@ (80019dc <HAL_RCC_OscConfig+0x8ac>)
 8001902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001904:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001906:	4b35      	ldr	r3, [pc, #212]	@ (80019dc <HAL_RCC_OscConfig+0x8ac>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001910:	2b01      	cmp	r3, #1
 8001912:	d031      	beq.n	8001978 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	f003 0203 	and.w	r2, r3, #3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800191e:	429a      	cmp	r2, r3
 8001920:	d12a      	bne.n	8001978 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	091b      	lsrs	r3, r3, #4
 8001926:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192e:	429a      	cmp	r2, r3
 8001930:	d122      	bne.n	8001978 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800193e:	429a      	cmp	r2, r3
 8001940:	d11a      	bne.n	8001978 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	0a5b      	lsrs	r3, r3, #9
 8001946:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800194e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001950:	429a      	cmp	r2, r3
 8001952:	d111      	bne.n	8001978 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001960:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001962:	429a      	cmp	r2, r3
 8001964:	d108      	bne.n	8001978 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	0e1b      	lsrs	r3, r3, #24
 800196a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001972:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001974:	429a      	cmp	r2, r3
 8001976:	d001      	beq.n	800197c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e02b      	b.n	80019d4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800197c:	4b17      	ldr	r3, [pc, #92]	@ (80019dc <HAL_RCC_OscConfig+0x8ac>)
 800197e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001980:	08db      	lsrs	r3, r3, #3
 8001982:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001986:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	429a      	cmp	r2, r3
 8001990:	d01f      	beq.n	80019d2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001992:	4b12      	ldr	r3, [pc, #72]	@ (80019dc <HAL_RCC_OscConfig+0x8ac>)
 8001994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001996:	4a11      	ldr	r2, [pc, #68]	@ (80019dc <HAL_RCC_OscConfig+0x8ac>)
 8001998:	f023 0301 	bic.w	r3, r3, #1
 800199c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800199e:	f7ff f879 	bl	8000a94 <HAL_GetTick>
 80019a2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80019a4:	bf00      	nop
 80019a6:	f7ff f875 	bl	8000a94 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d0f9      	beq.n	80019a6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80019b2:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <HAL_RCC_OscConfig+0x8ac>)
 80019b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80019b6:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <HAL_RCC_OscConfig+0x8b0>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019be:	00d2      	lsls	r2, r2, #3
 80019c0:	4906      	ldr	r1, [pc, #24]	@ (80019dc <HAL_RCC_OscConfig+0x8ac>)
 80019c2:	4313      	orrs	r3, r2
 80019c4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80019c6:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <HAL_RCC_OscConfig+0x8ac>)
 80019c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ca:	4a04      	ldr	r2, [pc, #16]	@ (80019dc <HAL_RCC_OscConfig+0x8ac>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3730      	adds	r7, #48	@ 0x30
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	58024400 	.word	0x58024400
 80019e0:	ffff0007 	.word	0xffff0007

080019e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b086      	sub	sp, #24
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d101      	bne.n	80019f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e19c      	b.n	8001d32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019f8:	4b8a      	ldr	r3, [pc, #552]	@ (8001c24 <HAL_RCC_ClockConfig+0x240>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 030f 	and.w	r3, r3, #15
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d910      	bls.n	8001a28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a06:	4b87      	ldr	r3, [pc, #540]	@ (8001c24 <HAL_RCC_ClockConfig+0x240>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 020f 	bic.w	r2, r3, #15
 8001a0e:	4985      	ldr	r1, [pc, #532]	@ (8001c24 <HAL_RCC_ClockConfig+0x240>)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a16:	4b83      	ldr	r3, [pc, #524]	@ (8001c24 <HAL_RCC_ClockConfig+0x240>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e184      	b.n	8001d32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d010      	beq.n	8001a56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691a      	ldr	r2, [r3, #16]
 8001a38:	4b7b      	ldr	r3, [pc, #492]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d908      	bls.n	8001a56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001a44:	4b78      	ldr	r3, [pc, #480]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	4975      	ldr	r1, [pc, #468]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d010      	beq.n	8001a84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	4b70      	ldr	r3, [pc, #448]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001a68:	69db      	ldr	r3, [r3, #28]
 8001a6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d908      	bls.n	8001a84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001a72:	4b6d      	ldr	r3, [pc, #436]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001a74:	69db      	ldr	r3, [r3, #28]
 8001a76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695b      	ldr	r3, [r3, #20]
 8001a7e:	496a      	ldr	r1, [pc, #424]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d010      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	699a      	ldr	r2, [r3, #24]
 8001a94:	4b64      	ldr	r3, [pc, #400]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d908      	bls.n	8001ab2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001aa0:	4b61      	ldr	r3, [pc, #388]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	495e      	ldr	r1, [pc, #376]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0320 	and.w	r3, r3, #32
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d010      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	69da      	ldr	r2, [r3, #28]
 8001ac2:	4b59      	ldr	r3, [pc, #356]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d908      	bls.n	8001ae0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001ace:	4b56      	ldr	r3, [pc, #344]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	4953      	ldr	r1, [pc, #332]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d010      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	4b4d      	ldr	r3, [pc, #308]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	f003 030f 	and.w	r3, r3, #15
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d908      	bls.n	8001b0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001afc:	4b4a      	ldr	r3, [pc, #296]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f023 020f 	bic.w	r2, r3, #15
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	4947      	ldr	r1, [pc, #284]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d055      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b1a:	4b43      	ldr	r3, [pc, #268]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	4940      	ldr	r1, [pc, #256]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d107      	bne.n	8001b44 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b34:	4b3c      	ldr	r3, [pc, #240]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d121      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e0f6      	b.n	8001d32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d107      	bne.n	8001b5c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b4c:	4b36      	ldr	r3, [pc, #216]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d115      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e0ea      	b.n	8001d32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d107      	bne.n	8001b74 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b64:	4b30      	ldr	r3, [pc, #192]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d109      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0de      	b.n	8001d32 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b74:	4b2c      	ldr	r3, [pc, #176]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0304 	and.w	r3, r3, #4
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0d6      	b.n	8001d32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b84:	4b28      	ldr	r3, [pc, #160]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	f023 0207 	bic.w	r2, r3, #7
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	4925      	ldr	r1, [pc, #148]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b96:	f7fe ff7d 	bl	8000a94 <HAL_GetTick>
 8001b9a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b9c:	e00a      	b.n	8001bb4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9e:	f7fe ff79 	bl	8000a94 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e0be      	b.n	8001d32 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001bb6:	691b      	ldr	r3, [r3, #16]
 8001bb8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	00db      	lsls	r3, r3, #3
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d1eb      	bne.n	8001b9e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d010      	beq.n	8001bf4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	4b14      	ldr	r3, [pc, #80]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d208      	bcs.n	8001bf4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001be2:	4b11      	ldr	r3, [pc, #68]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	f023 020f 	bic.w	r2, r3, #15
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	490e      	ldr	r1, [pc, #56]	@ (8001c28 <HAL_RCC_ClockConfig+0x244>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c24 <HAL_RCC_ClockConfig+0x240>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 030f 	and.w	r3, r3, #15
 8001bfc:	683a      	ldr	r2, [r7, #0]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d214      	bcs.n	8001c2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c02:	4b08      	ldr	r3, [pc, #32]	@ (8001c24 <HAL_RCC_ClockConfig+0x240>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 020f 	bic.w	r2, r3, #15
 8001c0a:	4906      	ldr	r1, [pc, #24]	@ (8001c24 <HAL_RCC_ClockConfig+0x240>)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	4b04      	ldr	r3, [pc, #16]	@ (8001c24 <HAL_RCC_ClockConfig+0x240>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e086      	b.n	8001d32 <HAL_RCC_ClockConfig+0x34e>
 8001c24:	52002000 	.word	0x52002000
 8001c28:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d010      	beq.n	8001c5a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	4b3f      	ldr	r3, [pc, #252]	@ (8001d3c <HAL_RCC_ClockConfig+0x358>)
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d208      	bcs.n	8001c5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001c48:	4b3c      	ldr	r3, [pc, #240]	@ (8001d3c <HAL_RCC_ClockConfig+0x358>)
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	4939      	ldr	r1, [pc, #228]	@ (8001d3c <HAL_RCC_ClockConfig+0x358>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d010      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	695a      	ldr	r2, [r3, #20]
 8001c6a:	4b34      	ldr	r3, [pc, #208]	@ (8001d3c <HAL_RCC_ClockConfig+0x358>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d208      	bcs.n	8001c88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001c76:	4b31      	ldr	r3, [pc, #196]	@ (8001d3c <HAL_RCC_ClockConfig+0x358>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	492e      	ldr	r1, [pc, #184]	@ (8001d3c <HAL_RCC_ClockConfig+0x358>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0310 	and.w	r3, r3, #16
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d010      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699a      	ldr	r2, [r3, #24]
 8001c98:	4b28      	ldr	r3, [pc, #160]	@ (8001d3c <HAL_RCC_ClockConfig+0x358>)
 8001c9a:	69db      	ldr	r3, [r3, #28]
 8001c9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d208      	bcs.n	8001cb6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001ca4:	4b25      	ldr	r3, [pc, #148]	@ (8001d3c <HAL_RCC_ClockConfig+0x358>)
 8001ca6:	69db      	ldr	r3, [r3, #28]
 8001ca8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	4922      	ldr	r1, [pc, #136]	@ (8001d3c <HAL_RCC_ClockConfig+0x358>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0320 	and.w	r3, r3, #32
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d010      	beq.n	8001ce4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69da      	ldr	r2, [r3, #28]
 8001cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d3c <HAL_RCC_ClockConfig+0x358>)
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d208      	bcs.n	8001ce4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001cd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d3c <HAL_RCC_ClockConfig+0x358>)
 8001cd4:	6a1b      	ldr	r3, [r3, #32]
 8001cd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	4917      	ldr	r1, [pc, #92]	@ (8001d3c <HAL_RCC_ClockConfig+0x358>)
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ce4:	f000 f89e 	bl	8001e24 <HAL_RCC_GetSysClockFreq>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <HAL_RCC_ClockConfig+0x358>)
 8001cec:	699b      	ldr	r3, [r3, #24]
 8001cee:	0a1b      	lsrs	r3, r3, #8
 8001cf0:	f003 030f 	and.w	r3, r3, #15
 8001cf4:	4912      	ldr	r1, [pc, #72]	@ (8001d40 <HAL_RCC_ClockConfig+0x35c>)
 8001cf6:	5ccb      	ldrb	r3, [r1, r3]
 8001cf8:	f003 031f 	and.w	r3, r3, #31
 8001cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001d00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d02:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <HAL_RCC_ClockConfig+0x358>)
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	4a0d      	ldr	r2, [pc, #52]	@ (8001d40 <HAL_RCC_ClockConfig+0x35c>)
 8001d0c:	5cd3      	ldrb	r3, [r2, r3]
 8001d0e:	f003 031f 	and.w	r3, r3, #31
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	fa22 f303 	lsr.w	r3, r2, r3
 8001d18:	4a0a      	ldr	r2, [pc, #40]	@ (8001d44 <HAL_RCC_ClockConfig+0x360>)
 8001d1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d48 <HAL_RCC_ClockConfig+0x364>)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001d22:	4b0a      	ldr	r3, [pc, #40]	@ (8001d4c <HAL_RCC_ClockConfig+0x368>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fe6a 	bl	8000a00 <HAL_InitTick>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	58024400 	.word	0x58024400
 8001d40:	08006614 	.word	0x08006614
 8001d44:	24000004 	.word	0x24000004
 8001d48:	24000000 	.word	0x24000000
 8001d4c:	24000008 	.word	0x24000008

08001d50 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08c      	sub	sp, #48	@ 0x30
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d12a      	bne.n	8001db8 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8001d62:	4b2d      	ldr	r3, [pc, #180]	@ (8001e18 <HAL_RCC_MCOConfig+0xc8>)
 8001d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d68:	4a2b      	ldr	r2, [pc, #172]	@ (8001e18 <HAL_RCC_MCOConfig+0xc8>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d72:	4b29      	ldr	r3, [pc, #164]	@ (8001e18 <HAL_RCC_MCOConfig+0xc8>)
 8001d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	61bb      	str	r3, [r7, #24]
 8001d7e:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001d80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d86:	2302      	movs	r3, #2
 8001d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001d92:	2300      	movs	r3, #0
 8001d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001d96:	f107 031c 	add.w	r3, r7, #28
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	481f      	ldr	r0, [pc, #124]	@ (8001e1c <HAL_RCC_MCOConfig+0xcc>)
 8001d9e:	f7fe ff75 	bl	8000c8c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001da2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <HAL_RCC_MCOConfig+0xc8>)
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8001daa:	68b9      	ldr	r1, [r7, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	430b      	orrs	r3, r1
 8001db0:	4919      	ldr	r1, [pc, #100]	@ (8001e18 <HAL_RCC_MCOConfig+0xc8>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8001db6:	e02a      	b.n	8001e0e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8001db8:	4b17      	ldr	r3, [pc, #92]	@ (8001e18 <HAL_RCC_MCOConfig+0xc8>)
 8001dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dbe:	4a16      	ldr	r2, [pc, #88]	@ (8001e18 <HAL_RCC_MCOConfig+0xc8>)
 8001dc0:	f043 0304 	orr.w	r3, r3, #4
 8001dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001dc8:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <HAL_RCC_MCOConfig+0xc8>)
 8001dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dce:	f003 0304 	and.w	r3, r3, #4
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001dd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de0:	2303      	movs	r3, #3
 8001de2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001de8:	2300      	movs	r3, #0
 8001dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001dec:	f107 031c 	add.w	r3, r7, #28
 8001df0:	4619      	mov	r1, r3
 8001df2:	480b      	ldr	r0, [pc, #44]	@ (8001e20 <HAL_RCC_MCOConfig+0xd0>)
 8001df4:	f7fe ff4a 	bl	8000c8c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8001df8:	4b07      	ldr	r3, [pc, #28]	@ (8001e18 <HAL_RCC_MCOConfig+0xc8>)
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	01d9      	lsls	r1, r3, #7
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	430b      	orrs	r3, r1
 8001e08:	4903      	ldr	r1, [pc, #12]	@ (8001e18 <HAL_RCC_MCOConfig+0xc8>)
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	610b      	str	r3, [r1, #16]
}
 8001e0e:	bf00      	nop
 8001e10:	3730      	adds	r7, #48	@ 0x30
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	58024400 	.word	0x58024400
 8001e1c:	58020000 	.word	0x58020000
 8001e20:	58020800 	.word	0x58020800

08001e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	@ 0x24
 8001e28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e2a:	4bb3      	ldr	r3, [pc, #716]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e32:	2b18      	cmp	r3, #24
 8001e34:	f200 8155 	bhi.w	80020e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8001e38:	a201      	add	r2, pc, #4	@ (adr r2, 8001e40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e3e:	bf00      	nop
 8001e40:	08001ea5 	.word	0x08001ea5
 8001e44:	080020e3 	.word	0x080020e3
 8001e48:	080020e3 	.word	0x080020e3
 8001e4c:	080020e3 	.word	0x080020e3
 8001e50:	080020e3 	.word	0x080020e3
 8001e54:	080020e3 	.word	0x080020e3
 8001e58:	080020e3 	.word	0x080020e3
 8001e5c:	080020e3 	.word	0x080020e3
 8001e60:	08001ecb 	.word	0x08001ecb
 8001e64:	080020e3 	.word	0x080020e3
 8001e68:	080020e3 	.word	0x080020e3
 8001e6c:	080020e3 	.word	0x080020e3
 8001e70:	080020e3 	.word	0x080020e3
 8001e74:	080020e3 	.word	0x080020e3
 8001e78:	080020e3 	.word	0x080020e3
 8001e7c:	080020e3 	.word	0x080020e3
 8001e80:	08001ed1 	.word	0x08001ed1
 8001e84:	080020e3 	.word	0x080020e3
 8001e88:	080020e3 	.word	0x080020e3
 8001e8c:	080020e3 	.word	0x080020e3
 8001e90:	080020e3 	.word	0x080020e3
 8001e94:	080020e3 	.word	0x080020e3
 8001e98:	080020e3 	.word	0x080020e3
 8001e9c:	080020e3 	.word	0x080020e3
 8001ea0:	08001ed7 	.word	0x08001ed7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ea4:	4b94      	ldr	r3, [pc, #592]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0320 	and.w	r3, r3, #32
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d009      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001eb0:	4b91      	ldr	r3, [pc, #580]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	08db      	lsrs	r3, r3, #3
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	4a90      	ldr	r2, [pc, #576]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001ec2:	e111      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001ec4:	4b8d      	ldr	r3, [pc, #564]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ec6:	61bb      	str	r3, [r7, #24]
      break;
 8001ec8:	e10e      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001eca:	4b8d      	ldr	r3, [pc, #564]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001ecc:	61bb      	str	r3, [r7, #24]
      break;
 8001ece:	e10b      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001ed0:	4b8c      	ldr	r3, [pc, #560]	@ (8002104 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001ed2:	61bb      	str	r3, [r7, #24]
      break;
 8001ed4:	e108      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001ed6:	4b88      	ldr	r3, [pc, #544]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eda:	f003 0303 	and.w	r3, r3, #3
 8001ede:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001ee0:	4b85      	ldr	r3, [pc, #532]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee4:	091b      	lsrs	r3, r3, #4
 8001ee6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001eea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001eec:	4b82      	ldr	r3, [pc, #520]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001ef6:	4b80      	ldr	r3, [pc, #512]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001efa:	08db      	lsrs	r3, r3, #3
 8001efc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	fb02 f303 	mul.w	r3, r2, r3
 8001f06:	ee07 3a90 	vmov	s15, r3
 8001f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f0e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f000 80e1 	beq.w	80020dc <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	f000 8083 	beq.w	8002028 <HAL_RCC_GetSysClockFreq+0x204>
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	f200 80a1 	bhi.w	800206c <HAL_RCC_GetSysClockFreq+0x248>
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d003      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x114>
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d056      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001f36:	e099      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f38:	4b6f      	ldr	r3, [pc, #444]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0320 	and.w	r3, r3, #32
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d02d      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001f44:	4b6c      	ldr	r3, [pc, #432]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	08db      	lsrs	r3, r3, #3
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	4a6b      	ldr	r2, [pc, #428]	@ (80020fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f50:	fa22 f303 	lsr.w	r3, r2, r3
 8001f54:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	ee07 3a90 	vmov	s15, r3
 8001f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	ee07 3a90 	vmov	s15, r3
 8001f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f6e:	4b62      	ldr	r3, [pc, #392]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f76:	ee07 3a90 	vmov	s15, r3
 8001f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f82:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f9a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001f9e:	e087      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	ee07 3a90 	vmov	s15, r3
 8001fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001faa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800210c <HAL_RCC_GetSysClockFreq+0x2e8>
 8001fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fb2:	4b51      	ldr	r3, [pc, #324]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fba:	ee07 3a90 	vmov	s15, r3
 8001fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fc6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fe2:	e065      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	ee07 3a90 	vmov	s15, r3
 8001fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002110 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ff6:	4b40      	ldr	r3, [pc, #256]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001ffe:	ee07 3a90 	vmov	s15, r3
 8002002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002006:	ed97 6a02 	vldr	s12, [r7, #8]
 800200a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002108 <HAL_RCC_GetSysClockFreq+0x2e4>
 800200e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800201a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800201e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002022:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002026:	e043      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	ee07 3a90 	vmov	s15, r3
 800202e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002032:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002114 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800203a:	4b2f      	ldr	r3, [pc, #188]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002042:	ee07 3a90 	vmov	s15, r3
 8002046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800204a:	ed97 6a02 	vldr	s12, [r7, #8]
 800204e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800205a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800205e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002066:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800206a:	e021      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	ee07 3a90 	vmov	s15, r3
 8002072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002076:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002110 <HAL_RCC_GetSysClockFreq+0x2ec>
 800207a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800207e:	4b1e      	ldr	r3, [pc, #120]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002086:	ee07 3a90 	vmov	s15, r3
 800208a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800208e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002092:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800209a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800209e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80020ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80020b0:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b4:	0a5b      	lsrs	r3, r3, #9
 80020b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020ba:	3301      	adds	r3, #1
 80020bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	ee07 3a90 	vmov	s15, r3
 80020c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80020cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020d4:	ee17 3a90 	vmov	r3, s15
 80020d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80020da:	e005      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80020dc:	2300      	movs	r3, #0
 80020de:	61bb      	str	r3, [r7, #24]
      break;
 80020e0:	e002      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80020e2:	4b07      	ldr	r3, [pc, #28]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80020e4:	61bb      	str	r3, [r7, #24]
      break;
 80020e6:	bf00      	nop
  }

  return sysclockfreq;
 80020e8:	69bb      	ldr	r3, [r7, #24]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	@ 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	58024400 	.word	0x58024400
 80020fc:	03d09000 	.word	0x03d09000
 8002100:	003d0900 	.word	0x003d0900
 8002104:	017d7840 	.word	0x017d7840
 8002108:	46000000 	.word	0x46000000
 800210c:	4c742400 	.word	0x4c742400
 8002110:	4a742400 	.word	0x4a742400
 8002114:	4bbebc20 	.word	0x4bbebc20

08002118 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002118:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800211c:	b0cc      	sub	sp, #304	@ 0x130
 800211e:	af00      	add	r7, sp, #0
 8002120:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002124:	2300      	movs	r3, #0
 8002126:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800212a:	2300      	movs	r3, #0
 800212c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002130:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002138:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800213c:	2500      	movs	r5, #0
 800213e:	ea54 0305 	orrs.w	r3, r4, r5
 8002142:	d049      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002144:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800214a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800214e:	d02f      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002150:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002154:	d828      	bhi.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002156:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800215a:	d01a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800215c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002160:	d822      	bhi.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002166:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800216a:	d007      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800216c:	e01c      	b.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800216e:	4bb8      	ldr	r3, [pc, #736]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002172:	4ab7      	ldr	r2, [pc, #732]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002178:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800217a:	e01a      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800217c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002180:	3308      	adds	r3, #8
 8002182:	2102      	movs	r1, #2
 8002184:	4618      	mov	r0, r3
 8002186:	f001 fa11 	bl	80035ac <RCCEx_PLL2_Config>
 800218a:	4603      	mov	r3, r0
 800218c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002190:	e00f      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002192:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002196:	3328      	adds	r3, #40	@ 0x28
 8002198:	2102      	movs	r1, #2
 800219a:	4618      	mov	r0, r3
 800219c:	f001 fab8 	bl	8003710 <RCCEx_PLL3_Config>
 80021a0:	4603      	mov	r3, r0
 80021a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80021a6:	e004      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80021ae:	e000      	b.n	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80021b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80021b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10a      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80021ba:	4ba5      	ldr	r3, [pc, #660]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80021c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80021c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021c8:	4aa1      	ldr	r2, [pc, #644]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021ca:	430b      	orrs	r3, r1
 80021cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80021ce:	e003      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80021d4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80021d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80021dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80021e4:	f04f 0900 	mov.w	r9, #0
 80021e8:	ea58 0309 	orrs.w	r3, r8, r9
 80021ec:	d047      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80021ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80021f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f4:	2b04      	cmp	r3, #4
 80021f6:	d82a      	bhi.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80021f8:	a201      	add	r2, pc, #4	@ (adr r2, 8002200 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80021fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021fe:	bf00      	nop
 8002200:	08002215 	.word	0x08002215
 8002204:	08002223 	.word	0x08002223
 8002208:	08002239 	.word	0x08002239
 800220c:	08002257 	.word	0x08002257
 8002210:	08002257 	.word	0x08002257
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002214:	4b8e      	ldr	r3, [pc, #568]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002218:	4a8d      	ldr	r2, [pc, #564]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800221a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800221e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002220:	e01a      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002222:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002226:	3308      	adds	r3, #8
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f001 f9be 	bl	80035ac <RCCEx_PLL2_Config>
 8002230:	4603      	mov	r3, r0
 8002232:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002236:	e00f      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002238:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800223c:	3328      	adds	r3, #40	@ 0x28
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f001 fa65 	bl	8003710 <RCCEx_PLL3_Config>
 8002246:	4603      	mov	r3, r0
 8002248:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800224c:	e004      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002254:	e000      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002256:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002258:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10a      	bne.n	8002276 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002260:	4b7b      	ldr	r3, [pc, #492]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002262:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002264:	f023 0107 	bic.w	r1, r3, #7
 8002268:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800226c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226e:	4a78      	ldr	r2, [pc, #480]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002270:	430b      	orrs	r3, r1
 8002272:	6513      	str	r3, [r2, #80]	@ 0x50
 8002274:	e003      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002276:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800227a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800227e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002286:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800228a:	f04f 0b00 	mov.w	fp, #0
 800228e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002292:	d04c      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002294:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002298:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800229a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800229e:	d030      	beq.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80022a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80022a4:	d829      	bhi.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80022a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80022a8:	d02d      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80022aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80022ac:	d825      	bhi.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80022ae:	2b80      	cmp	r3, #128	@ 0x80
 80022b0:	d018      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80022b2:	2b80      	cmp	r3, #128	@ 0x80
 80022b4:	d821      	bhi.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80022ba:	2b40      	cmp	r3, #64	@ 0x40
 80022bc:	d007      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80022be:	e01c      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022c0:	4b63      	ldr	r3, [pc, #396]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c4:	4a62      	ldr	r2, [pc, #392]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80022cc:	e01c      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80022ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80022d2:	3308      	adds	r3, #8
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f001 f968 	bl	80035ac <RCCEx_PLL2_Config>
 80022dc:	4603      	mov	r3, r0
 80022de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80022e2:	e011      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80022e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80022e8:	3328      	adds	r3, #40	@ 0x28
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f001 fa0f 	bl	8003710 <RCCEx_PLL3_Config>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80022f8:	e006      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002300:	e002      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002302:	bf00      	nop
 8002304:	e000      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002308:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800230c:	2b00      	cmp	r3, #0
 800230e:	d10a      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002310:	4b4f      	ldr	r3, [pc, #316]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002314:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002318:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800231c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800231e:	4a4c      	ldr	r2, [pc, #304]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002320:	430b      	orrs	r3, r1
 8002322:	6513      	str	r3, [r2, #80]	@ 0x50
 8002324:	e003      	b.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002326:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800232a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800232e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002336:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800233a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800233e:	2300      	movs	r3, #0
 8002340:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002344:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8002348:	460b      	mov	r3, r1
 800234a:	4313      	orrs	r3, r2
 800234c:	d053      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800234e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002352:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002356:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800235a:	d035      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800235c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002360:	d82e      	bhi.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002362:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002366:	d031      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002368:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800236c:	d828      	bhi.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800236e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002372:	d01a      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002374:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002378:	d822      	bhi.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800237e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002382:	d007      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002384:	e01c      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002386:	4b32      	ldr	r3, [pc, #200]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238a:	4a31      	ldr	r2, [pc, #196]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800238c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002390:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002392:	e01c      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002394:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002398:	3308      	adds	r3, #8
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f001 f905 	bl	80035ac <RCCEx_PLL2_Config>
 80023a2:	4603      	mov	r3, r0
 80023a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80023a8:	e011      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80023aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023ae:	3328      	adds	r3, #40	@ 0x28
 80023b0:	2100      	movs	r1, #0
 80023b2:	4618      	mov	r0, r3
 80023b4:	f001 f9ac 	bl	8003710 <RCCEx_PLL3_Config>
 80023b8:	4603      	mov	r3, r0
 80023ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80023be:	e006      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80023c6:	e002      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80023c8:	bf00      	nop
 80023ca:	e000      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80023cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10b      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80023d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023da:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80023de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80023e6:	4a1a      	ldr	r2, [pc, #104]	@ (8002450 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80023e8:	430b      	orrs	r3, r1
 80023ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80023ec:	e003      	b.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80023f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80023f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023fe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002402:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800240c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002410:	460b      	mov	r3, r1
 8002412:	4313      	orrs	r3, r2
 8002414:	d056      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002416:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800241a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800241e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002422:	d038      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002424:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002428:	d831      	bhi.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800242a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800242e:	d034      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002430:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002434:	d82b      	bhi.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002436:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800243a:	d01d      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800243c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002440:	d825      	bhi.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002442:	2b00      	cmp	r3, #0
 8002444:	d006      	beq.n	8002454 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002446:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800244a:	d00a      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800244c:	e01f      	b.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800244e:	bf00      	nop
 8002450:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002454:	4ba2      	ldr	r3, [pc, #648]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002458:	4aa1      	ldr	r2, [pc, #644]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800245a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800245e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002460:	e01c      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002462:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002466:	3308      	adds	r3, #8
 8002468:	2100      	movs	r1, #0
 800246a:	4618      	mov	r0, r3
 800246c:	f001 f89e 	bl	80035ac <RCCEx_PLL2_Config>
 8002470:	4603      	mov	r3, r0
 8002472:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002476:	e011      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002478:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800247c:	3328      	adds	r3, #40	@ 0x28
 800247e:	2100      	movs	r1, #0
 8002480:	4618      	mov	r0, r3
 8002482:	f001 f945 	bl	8003710 <RCCEx_PLL3_Config>
 8002486:	4603      	mov	r3, r0
 8002488:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800248c:	e006      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002494:	e002      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002496:	bf00      	nop
 8002498:	e000      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800249a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800249c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10b      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80024a4:	4b8e      	ldr	r3, [pc, #568]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80024ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80024b4:	4a8a      	ldr	r2, [pc, #552]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024b6:	430b      	orrs	r3, r1
 80024b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80024ba:	e003      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80024c0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80024c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024cc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80024d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80024da:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80024de:	460b      	mov	r3, r1
 80024e0:	4313      	orrs	r3, r2
 80024e2:	d03a      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80024e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ea:	2b30      	cmp	r3, #48	@ 0x30
 80024ec:	d01f      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80024ee:	2b30      	cmp	r3, #48	@ 0x30
 80024f0:	d819      	bhi.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80024f2:	2b20      	cmp	r3, #32
 80024f4:	d00c      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80024f6:	2b20      	cmp	r3, #32
 80024f8:	d815      	bhi.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d019      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80024fe:	2b10      	cmp	r3, #16
 8002500:	d111      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002502:	4b77      	ldr	r3, [pc, #476]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002506:	4a76      	ldr	r2, [pc, #472]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002508:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800250c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800250e:	e011      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002510:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002514:	3308      	adds	r3, #8
 8002516:	2102      	movs	r1, #2
 8002518:	4618      	mov	r0, r3
 800251a:	f001 f847 	bl	80035ac <RCCEx_PLL2_Config>
 800251e:	4603      	mov	r3, r0
 8002520:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002524:	e006      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800252c:	e002      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800252e:	bf00      	nop
 8002530:	e000      	b.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002532:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002534:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10a      	bne.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800253c:	4b68      	ldr	r3, [pc, #416]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800253e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002540:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002544:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800254a:	4a65      	ldr	r2, [pc, #404]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800254c:	430b      	orrs	r3, r1
 800254e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002550:	e003      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002552:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002556:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800255a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800255e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002562:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002566:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800256a:	2300      	movs	r3, #0
 800256c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002570:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002574:	460b      	mov	r3, r1
 8002576:	4313      	orrs	r3, r2
 8002578:	d051      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800257a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800257e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002580:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002584:	d035      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002586:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800258a:	d82e      	bhi.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800258c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002590:	d031      	beq.n	80025f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002592:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002596:	d828      	bhi.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002598:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800259c:	d01a      	beq.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800259e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025a2:	d822      	bhi.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80025a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80025ac:	d007      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80025ae:	e01c      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025b0:	4b4b      	ldr	r3, [pc, #300]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b4:	4a4a      	ldr	r2, [pc, #296]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80025bc:	e01c      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025c2:	3308      	adds	r3, #8
 80025c4:	2100      	movs	r1, #0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 fff0 	bl	80035ac <RCCEx_PLL2_Config>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80025d2:	e011      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025d8:	3328      	adds	r3, #40	@ 0x28
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f001 f897 	bl	8003710 <RCCEx_PLL3_Config>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80025e8:	e006      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80025f0:	e002      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80025f2:	bf00      	nop
 80025f4:	e000      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80025f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80025f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10a      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002600:	4b37      	ldr	r3, [pc, #220]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002604:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002608:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800260c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800260e:	4a34      	ldr	r2, [pc, #208]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002610:	430b      	orrs	r3, r1
 8002612:	6513      	str	r3, [r2, #80]	@ 0x50
 8002614:	e003      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002616:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800261a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800261e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002626:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800262a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800262e:	2300      	movs	r3, #0
 8002630:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002634:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002638:	460b      	mov	r3, r1
 800263a:	4313      	orrs	r3, r2
 800263c:	d056      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800263e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002642:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002644:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002648:	d033      	beq.n	80026b2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800264a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800264e:	d82c      	bhi.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002650:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002654:	d02f      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002656:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800265a:	d826      	bhi.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 800265c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002660:	d02b      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002662:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002666:	d820      	bhi.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002668:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800266c:	d012      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800266e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002672:	d81a      	bhi.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002674:	2b00      	cmp	r3, #0
 8002676:	d022      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002678:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800267c:	d115      	bne.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800267e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002682:	3308      	adds	r3, #8
 8002684:	2101      	movs	r1, #1
 8002686:	4618      	mov	r0, r3
 8002688:	f000 ff90 	bl	80035ac <RCCEx_PLL2_Config>
 800268c:	4603      	mov	r3, r0
 800268e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002692:	e015      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002694:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002698:	3328      	adds	r3, #40	@ 0x28
 800269a:	2101      	movs	r1, #1
 800269c:	4618      	mov	r0, r3
 800269e:	f001 f837 	bl	8003710 <RCCEx_PLL3_Config>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80026a8:	e00a      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80026b0:	e006      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80026b2:	bf00      	nop
 80026b4:	e004      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80026b6:	bf00      	nop
 80026b8:	e002      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80026ba:	bf00      	nop
 80026bc:	e000      	b.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80026be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d10d      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80026c8:	4b05      	ldr	r3, [pc, #20]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026cc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80026d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026d6:	4a02      	ldr	r2, [pc, #8]	@ (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80026d8:	430b      	orrs	r3, r1
 80026da:	6513      	str	r3, [r2, #80]	@ 0x50
 80026dc:	e006      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80026de:	bf00      	nop
 80026e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80026e8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80026ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026f4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80026f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002702:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002706:	460b      	mov	r3, r1
 8002708:	4313      	orrs	r3, r2
 800270a:	d055      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800270c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002710:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002714:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002718:	d033      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800271a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800271e:	d82c      	bhi.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002724:	d02f      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800272a:	d826      	bhi.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800272c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002730:	d02b      	beq.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002732:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002736:	d820      	bhi.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002738:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800273c:	d012      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800273e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002742:	d81a      	bhi.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002744:	2b00      	cmp	r3, #0
 8002746:	d022      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002748:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800274c:	d115      	bne.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800274e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002752:	3308      	adds	r3, #8
 8002754:	2101      	movs	r1, #1
 8002756:	4618      	mov	r0, r3
 8002758:	f000 ff28 	bl	80035ac <RCCEx_PLL2_Config>
 800275c:	4603      	mov	r3, r0
 800275e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002762:	e015      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002764:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002768:	3328      	adds	r3, #40	@ 0x28
 800276a:	2101      	movs	r1, #1
 800276c:	4618      	mov	r0, r3
 800276e:	f000 ffcf 	bl	8003710 <RCCEx_PLL3_Config>
 8002772:	4603      	mov	r3, r0
 8002774:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002778:	e00a      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002780:	e006      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002782:	bf00      	nop
 8002784:	e004      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002786:	bf00      	nop
 8002788:	e002      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800278a:	bf00      	nop
 800278c:	e000      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800278e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002790:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10b      	bne.n	80027b0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002798:	4bb6      	ldr	r3, [pc, #728]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800279a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80027a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80027a8:	4ab2      	ldr	r2, [pc, #712]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80027aa:	430b      	orrs	r3, r1
 80027ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80027ae:	e003      	b.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80027b4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80027b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c0:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 80027c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027c8:	2300      	movs	r3, #0
 80027ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027ce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4313      	orrs	r3, r2
 80027d6:	d02a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 80027d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d011      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 80027e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027e6:	d10a      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80027e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027ec:	3308      	adds	r3, #8
 80027ee:	2101      	movs	r1, #1
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 fedb 	bl	80035ac <RCCEx_PLL2_Config>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 80027fc:	e004      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002804:	e000      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8002806:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002808:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10a      	bne.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002810:	4b98      	ldr	r3, [pc, #608]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002814:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8002818:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800281c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800281e:	4a95      	ldr	r2, [pc, #596]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002820:	430b      	orrs	r3, r1
 8002822:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002824:	e003      	b.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002826:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800282a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800282e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002836:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800283a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800283e:	2300      	movs	r3, #0
 8002840:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002844:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002848:	460b      	mov	r3, r1
 800284a:	4313      	orrs	r3, r2
 800284c:	d037      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800284e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002852:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002854:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002858:	d00e      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800285a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800285e:	d816      	bhi.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x776>
 8002860:	2b00      	cmp	r3, #0
 8002862:	d018      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002864:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002868:	d111      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800286a:	4b82      	ldr	r3, [pc, #520]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800286c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286e:	4a81      	ldr	r2, [pc, #516]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002874:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002876:	e00f      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002878:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800287c:	3308      	adds	r3, #8
 800287e:	2101      	movs	r1, #1
 8002880:	4618      	mov	r0, r3
 8002882:	f000 fe93 	bl	80035ac <RCCEx_PLL2_Config>
 8002886:	4603      	mov	r3, r0
 8002888:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800288c:	e004      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002894:	e000      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8002896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002898:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10a      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028a0:	4b74      	ldr	r3, [pc, #464]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80028a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028a4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80028a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ae:	4a71      	ldr	r2, [pc, #452]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80028b0:	430b      	orrs	r3, r1
 80028b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80028b4:	e003      	b.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80028ba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80028be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c6:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80028ca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028ce:	2300      	movs	r3, #0
 80028d0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80028d4:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80028d8:	460b      	mov	r3, r1
 80028da:	4313      	orrs	r3, r2
 80028dc:	d03a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80028de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028e4:	2b03      	cmp	r3, #3
 80028e6:	d81d      	bhi.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 80028e8:	a201      	add	r2, pc, #4	@ (adr r2, 80028f0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80028ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ee:	bf00      	nop
 80028f0:	0800292d 	.word	0x0800292d
 80028f4:	08002901 	.word	0x08002901
 80028f8:	0800290f 	.word	0x0800290f
 80028fc:	0800292d 	.word	0x0800292d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002900:	4b5c      	ldr	r3, [pc, #368]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002904:	4a5b      	ldr	r2, [pc, #364]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002906:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800290a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800290c:	e00f      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800290e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002912:	3308      	adds	r3, #8
 8002914:	2102      	movs	r1, #2
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fe48 	bl	80035ac <RCCEx_PLL2_Config>
 800291c:	4603      	mov	r3, r0
 800291e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002922:	e004      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800292a:	e000      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 800292c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800292e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10a      	bne.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002936:	4b4f      	ldr	r3, [pc, #316]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002938:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800293a:	f023 0103 	bic.w	r1, r3, #3
 800293e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002944:	4a4b      	ldr	r2, [pc, #300]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002946:	430b      	orrs	r3, r1
 8002948:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800294a:	e003      	b.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800294c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002950:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002954:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800295c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002960:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002964:	2300      	movs	r3, #0
 8002966:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800296a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800296e:	460b      	mov	r3, r1
 8002970:	4313      	orrs	r3, r2
 8002972:	f000 80a0 	beq.w	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002976:	4b40      	ldr	r3, [pc, #256]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a3f      	ldr	r2, [pc, #252]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800297c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002980:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002982:	f7fe f887 	bl	8000a94 <HAL_GetTick>
 8002986:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800298a:	e00b      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800298c:	f7fe f882 	bl	8000a94 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b64      	cmp	r3, #100	@ 0x64
 800299a:	d903      	bls.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80029a2:	e005      	b.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029a4:	4b34      	ldr	r3, [pc, #208]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0ed      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80029b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d17a      	bne.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80029b8:	4b2e      	ldr	r3, [pc, #184]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80029bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029c0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80029c4:	4053      	eors	r3, r2
 80029c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d015      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029ce:	4b29      	ldr	r3, [pc, #164]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029d6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029da:	4b26      	ldr	r3, [pc, #152]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029de:	4a25      	ldr	r2, [pc, #148]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029e4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029e6:	4b23      	ldr	r3, [pc, #140]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ea:	4a22      	ldr	r2, [pc, #136]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80029f2:	4a20      	ldr	r2, [pc, #128]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80029f8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80029fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029fe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002a02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a06:	d118      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fe f844 	bl	8000a94 <HAL_GetTick>
 8002a0c:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a10:	e00d      	b.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a12:	f7fe f83f 	bl	8000a94 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002a1c:	1ad2      	subs	r2, r2, r3
 8002a1e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d903      	bls.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8002a2c:	e005      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a2e:	4b11      	ldr	r3, [pc, #68]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d0eb      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8002a3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d130      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a4e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a52:	d115      	bne.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8002a54:	4b07      	ldr	r3, [pc, #28]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002a5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a60:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002a64:	091a      	lsrs	r2, r3, #4
 8002a66:	4b05      	ldr	r3, [pc, #20]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	4a02      	ldr	r2, [pc, #8]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002a6c:	430b      	orrs	r3, r1
 8002a6e:	6113      	str	r3, [r2, #16]
 8002a70:	e00c      	b.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x974>
 8002a72:	bf00      	nop
 8002a74:	58024400 	.word	0x58024400
 8002a78:	58024800 	.word	0x58024800
 8002a7c:	00ffffcf 	.word	0x00ffffcf
 8002a80:	4bd4      	ldr	r3, [pc, #848]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	4ad3      	ldr	r2, [pc, #844]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002a86:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002a8a:	6113      	str	r3, [r2, #16]
 8002a8c:	4bd1      	ldr	r3, [pc, #836]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002a8e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002a90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002a98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9c:	4acd      	ldr	r2, [pc, #820]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002a9e:	430b      	orrs	r3, r1
 8002aa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002aa4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002aa8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8002aac:	e003      	b.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ab2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002ab6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002abe:	f002 0301 	and.w	r3, r2, #1
 8002ac2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002acc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	f000 808b 	beq.w	8002bee <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002ad8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ae0:	2b28      	cmp	r3, #40	@ 0x28
 8002ae2:	d86b      	bhi.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8002aec <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8002ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aea:	bf00      	nop
 8002aec:	08002bc5 	.word	0x08002bc5
 8002af0:	08002bbd 	.word	0x08002bbd
 8002af4:	08002bbd 	.word	0x08002bbd
 8002af8:	08002bbd 	.word	0x08002bbd
 8002afc:	08002bbd 	.word	0x08002bbd
 8002b00:	08002bbd 	.word	0x08002bbd
 8002b04:	08002bbd 	.word	0x08002bbd
 8002b08:	08002bbd 	.word	0x08002bbd
 8002b0c:	08002b91 	.word	0x08002b91
 8002b10:	08002bbd 	.word	0x08002bbd
 8002b14:	08002bbd 	.word	0x08002bbd
 8002b18:	08002bbd 	.word	0x08002bbd
 8002b1c:	08002bbd 	.word	0x08002bbd
 8002b20:	08002bbd 	.word	0x08002bbd
 8002b24:	08002bbd 	.word	0x08002bbd
 8002b28:	08002bbd 	.word	0x08002bbd
 8002b2c:	08002ba7 	.word	0x08002ba7
 8002b30:	08002bbd 	.word	0x08002bbd
 8002b34:	08002bbd 	.word	0x08002bbd
 8002b38:	08002bbd 	.word	0x08002bbd
 8002b3c:	08002bbd 	.word	0x08002bbd
 8002b40:	08002bbd 	.word	0x08002bbd
 8002b44:	08002bbd 	.word	0x08002bbd
 8002b48:	08002bbd 	.word	0x08002bbd
 8002b4c:	08002bc5 	.word	0x08002bc5
 8002b50:	08002bbd 	.word	0x08002bbd
 8002b54:	08002bbd 	.word	0x08002bbd
 8002b58:	08002bbd 	.word	0x08002bbd
 8002b5c:	08002bbd 	.word	0x08002bbd
 8002b60:	08002bbd 	.word	0x08002bbd
 8002b64:	08002bbd 	.word	0x08002bbd
 8002b68:	08002bbd 	.word	0x08002bbd
 8002b6c:	08002bc5 	.word	0x08002bc5
 8002b70:	08002bbd 	.word	0x08002bbd
 8002b74:	08002bbd 	.word	0x08002bbd
 8002b78:	08002bbd 	.word	0x08002bbd
 8002b7c:	08002bbd 	.word	0x08002bbd
 8002b80:	08002bbd 	.word	0x08002bbd
 8002b84:	08002bbd 	.word	0x08002bbd
 8002b88:	08002bbd 	.word	0x08002bbd
 8002b8c:	08002bc5 	.word	0x08002bc5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b94:	3308      	adds	r3, #8
 8002b96:	2101      	movs	r1, #1
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 fd07 	bl	80035ac <RCCEx_PLL2_Config>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002ba4:	e00f      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ba6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002baa:	3328      	adds	r3, #40	@ 0x28
 8002bac:	2101      	movs	r1, #1
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fdae 	bl	8003710 <RCCEx_PLL3_Config>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002bba:	e004      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002bc2:	e000      	b.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8002bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bc6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10b      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002bce:	4b81      	ldr	r3, [pc, #516]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002bd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002bde:	4a7d      	ldr	r2, [pc, #500]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002be0:	430b      	orrs	r3, r1
 8002be2:	6553      	str	r3, [r2, #84]	@ 0x54
 8002be4:	e003      	b.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002bee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	f002 0302 	and.w	r3, r2, #2
 8002bfa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002c04:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002c08:	460b      	mov	r3, r1
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	d042      	beq.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002c0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	d825      	bhi.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8002c18:	a201      	add	r2, pc, #4	@ (adr r2, 8002c20 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8002c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1e:	bf00      	nop
 8002c20:	08002c6d 	.word	0x08002c6d
 8002c24:	08002c39 	.word	0x08002c39
 8002c28:	08002c4f 	.word	0x08002c4f
 8002c2c:	08002c6d 	.word	0x08002c6d
 8002c30:	08002c6d 	.word	0x08002c6d
 8002c34:	08002c6d 	.word	0x08002c6d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c3c:	3308      	adds	r3, #8
 8002c3e:	2101      	movs	r1, #1
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fcb3 	bl	80035ac <RCCEx_PLL2_Config>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002c4c:	e00f      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c52:	3328      	adds	r3, #40	@ 0x28
 8002c54:	2101      	movs	r1, #1
 8002c56:	4618      	mov	r0, r3
 8002c58:	f000 fd5a 	bl	8003710 <RCCEx_PLL3_Config>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002c62:	e004      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002c6a:	e000      	b.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8002c6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002c76:	4b57      	ldr	r3, [pc, #348]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002c78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c7a:	f023 0107 	bic.w	r1, r3, #7
 8002c7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c84:	4a53      	ldr	r2, [pc, #332]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002c86:	430b      	orrs	r3, r1
 8002c88:	6553      	str	r3, [r2, #84]	@ 0x54
 8002c8a:	e003      	b.n	8002c94 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c8c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c90:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9c:	f002 0304 	and.w	r3, r2, #4
 8002ca0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002caa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	d044      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002cb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002cbc:	2b05      	cmp	r3, #5
 8002cbe:	d825      	bhi.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8002cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8002cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc6:	bf00      	nop
 8002cc8:	08002d15 	.word	0x08002d15
 8002ccc:	08002ce1 	.word	0x08002ce1
 8002cd0:	08002cf7 	.word	0x08002cf7
 8002cd4:	08002d15 	.word	0x08002d15
 8002cd8:	08002d15 	.word	0x08002d15
 8002cdc:	08002d15 	.word	0x08002d15
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ce0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ce4:	3308      	adds	r3, #8
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fc5f 	bl	80035ac <RCCEx_PLL2_Config>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002cf4:	e00f      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002cf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cfa:	3328      	adds	r3, #40	@ 0x28
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f000 fd06 	bl	8003710 <RCCEx_PLL3_Config>
 8002d04:	4603      	mov	r3, r0
 8002d06:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002d0a:	e004      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002d12:	e000      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8002d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10b      	bne.n	8002d36 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d22:	f023 0107 	bic.w	r1, r3, #7
 8002d26:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002d2e:	4a29      	ldr	r2, [pc, #164]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002d30:	430b      	orrs	r3, r1
 8002d32:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d34:	e003      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d36:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d3a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d46:	f002 0320 	and.w	r3, r2, #32
 8002d4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d54:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	d057      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002d5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d6a:	d035      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8002d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d70:	d82c      	bhi.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d76:	d031      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8002d78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d7c:	d826      	bhi.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002d7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d82:	d02d      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8002d84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002d88:	d820      	bhi.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002d8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d8e:	d012      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8002d90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d94:	d81a      	bhi.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d024      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8002d9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d9e:	d115      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002da0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002da4:	3308      	adds	r3, #8
 8002da6:	2100      	movs	r1, #0
 8002da8:	4618      	mov	r0, r3
 8002daa:	f000 fbff 	bl	80035ac <RCCEx_PLL2_Config>
 8002dae:	4603      	mov	r3, r0
 8002db0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002db4:	e017      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002db6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dba:	3328      	adds	r3, #40	@ 0x28
 8002dbc:	2102      	movs	r1, #2
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fca6 	bl	8003710 <RCCEx_PLL3_Config>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002dca:	e00c      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002dd2:	e008      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8002dd4:	58024400 	.word	0x58024400
        break;
 8002dd8:	bf00      	nop
 8002dda:	e004      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8002ddc:	bf00      	nop
 8002dde:	e002      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8002de0:	bf00      	nop
 8002de2:	e000      	b.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8002de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002de6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10b      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dee:	4bc2      	ldr	r3, [pc, #776]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002df6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002dfe:	4abe      	ldr	r2, [pc, #760]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002e00:	430b      	orrs	r3, r1
 8002e02:	6553      	str	r3, [r2, #84]	@ 0x54
 8002e04:	e003      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e06:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e0a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002e0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e16:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002e1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002e24:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	d055      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002e2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002e36:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002e3a:	d033      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8002e3c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002e40:	d82c      	bhi.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8002e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e46:	d02f      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8002e48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e4c:	d826      	bhi.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8002e4e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e52:	d02b      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8002e54:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e58:	d820      	bhi.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8002e5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e5e:	d012      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8002e60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e64:	d81a      	bhi.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d022      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8002e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e6e:	d115      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e74:	3308      	adds	r3, #8
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f000 fb97 	bl	80035ac <RCCEx_PLL2_Config>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002e84:	e015      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002e86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e8a:	3328      	adds	r3, #40	@ 0x28
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f000 fc3e 	bl	8003710 <RCCEx_PLL3_Config>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002e9a:	e00a      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002ea2:	e006      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8002ea4:	bf00      	nop
 8002ea6:	e004      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8002ea8:	bf00      	nop
 8002eaa:	e002      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8002eac:	bf00      	nop
 8002eae:	e000      	b.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8002eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eb2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10b      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002eba:	4b8f      	ldr	r3, [pc, #572]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ebe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8002ec2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ec6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002eca:	4a8b      	ldr	r2, [pc, #556]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ed0:	e003      	b.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ed6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002eda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee2:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002ee6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002eea:	2300      	movs	r3, #0
 8002eec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ef0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	d055      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002efa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002efe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002f02:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002f06:	d033      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8002f08:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002f0c:	d82c      	bhi.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8002f0e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f12:	d02f      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8002f14:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002f18:	d826      	bhi.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8002f1a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002f1e:	d02b      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8002f20:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002f24:	d820      	bhi.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8002f26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f2a:	d012      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8002f2c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f30:	d81a      	bhi.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d022      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8002f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f3a:	d115      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f40:	3308      	adds	r3, #8
 8002f42:	2100      	movs	r1, #0
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 fb31 	bl	80035ac <RCCEx_PLL2_Config>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002f50:	e015      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002f52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f56:	3328      	adds	r3, #40	@ 0x28
 8002f58:	2102      	movs	r1, #2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fbd8 	bl	8003710 <RCCEx_PLL3_Config>
 8002f60:	4603      	mov	r3, r0
 8002f62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002f66:	e00a      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002f6e:	e006      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8002f70:	bf00      	nop
 8002f72:	e004      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8002f74:	bf00      	nop
 8002f76:	e002      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8002f78:	bf00      	nop
 8002f7a:	e000      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8002f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f7e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10b      	bne.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002f86:	4b5c      	ldr	r3, [pc, #368]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f8a:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8002f8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002f96:	4a58      	ldr	r2, [pc, #352]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f9c:	e003      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f9e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002fa2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002fa6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fae:	f002 0308 	and.w	r3, r2, #8
 8002fb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002fbc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	d01e      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8002fc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fd2:	d10c      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002fd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fd8:	3328      	adds	r3, #40	@ 0x28
 8002fda:	2102      	movs	r1, #2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 fb97 	bl	8003710 <RCCEx_PLL3_Config>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d002      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002fee:	4b42      	ldr	r3, [pc, #264]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ffe:	4a3e      	ldr	r2, [pc, #248]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003000:	430b      	orrs	r3, r1
 8003002:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003004:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	f002 0310 	and.w	r3, r2, #16
 8003010:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003014:	2300      	movs	r3, #0
 8003016:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800301a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800301e:	460b      	mov	r3, r1
 8003020:	4313      	orrs	r3, r2
 8003022:	d01e      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003024:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003028:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800302c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003030:	d10c      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003032:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003036:	3328      	adds	r3, #40	@ 0x28
 8003038:	2102      	movs	r1, #2
 800303a:	4618      	mov	r0, r3
 800303c:	f000 fb68 	bl	8003710 <RCCEx_PLL3_Config>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d002      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800304c:	4b2a      	ldr	r3, [pc, #168]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003050:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003054:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003058:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800305c:	4a26      	ldr	r2, [pc, #152]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800305e:	430b      	orrs	r3, r1
 8003060:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003062:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800306e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003072:	2300      	movs	r3, #0
 8003074:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003078:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800307c:	460b      	mov	r3, r1
 800307e:	4313      	orrs	r3, r2
 8003080:	d040      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003082:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003086:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800308a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800308e:	d022      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003090:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003094:	d81b      	bhi.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800309a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800309e:	d00b      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80030a0:	e015      	b.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030a6:	3308      	adds	r3, #8
 80030a8:	2100      	movs	r1, #0
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fa7e 	bl	80035ac <RCCEx_PLL2_Config>
 80030b0:	4603      	mov	r3, r0
 80030b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80030b6:	e00f      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030bc:	3328      	adds	r3, #40	@ 0x28
 80030be:	2102      	movs	r1, #2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 fb25 	bl	8003710 <RCCEx_PLL3_Config>
 80030c6:	4603      	mov	r3, r0
 80030c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80030cc:	e004      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80030d4:	e000      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80030d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10d      	bne.n	80030fc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030e0:	4b05      	ldr	r3, [pc, #20]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80030e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80030f0:	4a01      	ldr	r2, [pc, #4]	@ (80030f8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80030f2:	430b      	orrs	r3, r1
 80030f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80030f6:	e005      	b.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80030f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003100:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003104:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310c:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003110:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003112:	2300      	movs	r3, #0
 8003114:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003116:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800311a:	460b      	mov	r3, r1
 800311c:	4313      	orrs	r3, r2
 800311e:	d03b      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003120:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003124:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003128:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800312c:	d01f      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800312e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003132:	d818      	bhi.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003134:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003138:	d003      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800313a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800313e:	d007      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003140:	e011      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003142:	4b64      	ldr	r3, [pc, #400]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003146:	4a63      	ldr	r2, [pc, #396]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003148:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800314c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800314e:	e00f      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003150:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003154:	3328      	adds	r3, #40	@ 0x28
 8003156:	2101      	movs	r1, #1
 8003158:	4618      	mov	r0, r3
 800315a:	f000 fad9 	bl	8003710 <RCCEx_PLL3_Config>
 800315e:	4603      	mov	r3, r0
 8003160:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003164:	e004      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800316c:	e000      	b.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800316e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003170:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10b      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003178:	4b56      	ldr	r3, [pc, #344]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800317a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800317c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003180:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003188:	4a52      	ldr	r2, [pc, #328]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800318a:	430b      	orrs	r3, r1
 800318c:	6553      	str	r3, [r2, #84]	@ 0x54
 800318e:	e003      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003190:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003194:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003198:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800319c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a0:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80031a4:	673b      	str	r3, [r7, #112]	@ 0x70
 80031a6:	2300      	movs	r3, #0
 80031a8:	677b      	str	r3, [r7, #116]	@ 0x74
 80031aa:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80031ae:	460b      	mov	r3, r1
 80031b0:	4313      	orrs	r3, r2
 80031b2:	d031      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80031b4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80031be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031c2:	d007      	beq.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80031c4:	e011      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031c6:	4b43      	ldr	r3, [pc, #268]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80031c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ca:	4a42      	ldr	r2, [pc, #264]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80031cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80031d2:	e00e      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80031d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031d8:	3308      	adds	r3, #8
 80031da:	2102      	movs	r1, #2
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 f9e5 	bl	80035ac <RCCEx_PLL2_Config>
 80031e2:	4603      	mov	r3, r0
 80031e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80031e8:	e003      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80031f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10a      	bne.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80031fa:	4b36      	ldr	r3, [pc, #216]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80031fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003202:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003208:	4a32      	ldr	r2, [pc, #200]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800320a:	430b      	orrs	r3, r1
 800320c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800320e:	e003      	b.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003210:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003214:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003218:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003220:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003224:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003226:	2300      	movs	r3, #0
 8003228:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800322a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800322e:	460b      	mov	r3, r1
 8003230:	4313      	orrs	r3, r2
 8003232:	d00c      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003234:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003238:	3328      	adds	r3, #40	@ 0x28
 800323a:	2102      	movs	r1, #2
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fa67 	bl	8003710 <RCCEx_PLL3_Config>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800324e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003256:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800325a:	663b      	str	r3, [r7, #96]	@ 0x60
 800325c:	2300      	movs	r3, #0
 800325e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003260:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003264:	460b      	mov	r3, r1
 8003266:	4313      	orrs	r3, r2
 8003268:	d03a      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800326a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800326e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003272:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003276:	d018      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003278:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800327c:	d811      	bhi.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800327e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003282:	d014      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003284:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003288:	d80b      	bhi.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800328a:	2b00      	cmp	r3, #0
 800328c:	d011      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800328e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003292:	d106      	bne.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003294:	4b0f      	ldr	r3, [pc, #60]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003298:	4a0e      	ldr	r2, [pc, #56]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800329a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800329e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80032a0:	e008      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80032a8:	e004      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80032aa:	bf00      	nop
 80032ac:	e002      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80032ae:	bf00      	nop
 80032b0:	e000      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80032b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d10d      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032bc:	4b05      	ldr	r3, [pc, #20]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80032be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80032c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032cc:	4a01      	ldr	r2, [pc, #4]	@ (80032d4 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80032ce:	430b      	orrs	r3, r1
 80032d0:	6553      	str	r3, [r2, #84]	@ 0x54
 80032d2:	e005      	b.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80032d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032dc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80032e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80032ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80032ee:	2300      	movs	r3, #0
 80032f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80032f2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80032f6:	460b      	mov	r3, r1
 80032f8:	4313      	orrs	r3, r2
 80032fa:	d009      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80032fc:	4baa      	ldr	r3, [pc, #680]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80032fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003300:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003304:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003308:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800330a:	4aa7      	ldr	r2, [pc, #668]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800330c:	430b      	orrs	r3, r1
 800330e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003310:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003318:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800331c:	653b      	str	r3, [r7, #80]	@ 0x50
 800331e:	2300      	movs	r3, #0
 8003320:	657b      	str	r3, [r7, #84]	@ 0x54
 8003322:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003326:	460b      	mov	r3, r1
 8003328:	4313      	orrs	r3, r2
 800332a:	d00a      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800332c:	4b9e      	ldr	r3, [pc, #632]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003334:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003338:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800333c:	4a9a      	ldr	r2, [pc, #616]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800333e:	430b      	orrs	r3, r1
 8003340:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003342:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800334e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003350:	2300      	movs	r3, #0
 8003352:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003354:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003358:	460b      	mov	r3, r1
 800335a:	4313      	orrs	r3, r2
 800335c:	d009      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800335e:	4b92      	ldr	r3, [pc, #584]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003362:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003366:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800336a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336c:	4a8e      	ldr	r2, [pc, #568]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800336e:	430b      	orrs	r3, r1
 8003370:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003372:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800337e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003380:	2300      	movs	r3, #0
 8003382:	647b      	str	r3, [r7, #68]	@ 0x44
 8003384:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003388:	460b      	mov	r3, r1
 800338a:	4313      	orrs	r3, r2
 800338c:	d00e      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800338e:	4b86      	ldr	r3, [pc, #536]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	4a85      	ldr	r2, [pc, #532]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003394:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003398:	6113      	str	r3, [r2, #16]
 800339a:	4b83      	ldr	r3, [pc, #524]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800339c:	6919      	ldr	r1, [r3, #16]
 800339e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033a2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80033a6:	4a80      	ldr	r2, [pc, #512]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80033a8:	430b      	orrs	r3, r1
 80033aa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80033ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b4:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80033b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033ba:	2300      	movs	r3, #0
 80033bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033be:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80033c2:	460b      	mov	r3, r1
 80033c4:	4313      	orrs	r3, r2
 80033c6:	d009      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80033c8:	4b77      	ldr	r3, [pc, #476]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80033ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033cc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80033d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d6:	4a74      	ldr	r2, [pc, #464]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80033d8:	430b      	orrs	r3, r1
 80033da:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80033dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80033e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80033ea:	2300      	movs	r3, #0
 80033ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80033ee:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80033f2:	460b      	mov	r3, r1
 80033f4:	4313      	orrs	r3, r2
 80033f6:	d00a      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80033f8:	4b6b      	ldr	r3, [pc, #428]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80033fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033fc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003400:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003408:	4a67      	ldr	r2, [pc, #412]	@ (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800340a:	430b      	orrs	r3, r1
 800340c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800340e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003416:	2100      	movs	r1, #0
 8003418:	62b9      	str	r1, [r7, #40]	@ 0x28
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003420:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003424:	460b      	mov	r3, r1
 8003426:	4313      	orrs	r3, r2
 8003428:	d011      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800342a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800342e:	3308      	adds	r3, #8
 8003430:	2100      	movs	r1, #0
 8003432:	4618      	mov	r0, r3
 8003434:	f000 f8ba 	bl	80035ac <RCCEx_PLL2_Config>
 8003438:	4603      	mov	r3, r0
 800343a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800343e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003446:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800344a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800344e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003456:	2100      	movs	r1, #0
 8003458:	6239      	str	r1, [r7, #32]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003460:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003464:	460b      	mov	r3, r1
 8003466:	4313      	orrs	r3, r2
 8003468:	d011      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800346a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800346e:	3308      	adds	r3, #8
 8003470:	2101      	movs	r1, #1
 8003472:	4618      	mov	r0, r3
 8003474:	f000 f89a 	bl	80035ac <RCCEx_PLL2_Config>
 8003478:	4603      	mov	r3, r0
 800347a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800347e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003486:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800348a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800348e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003496:	2100      	movs	r1, #0
 8003498:	61b9      	str	r1, [r7, #24]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	61fb      	str	r3, [r7, #28]
 80034a0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80034a4:	460b      	mov	r3, r1
 80034a6:	4313      	orrs	r3, r2
 80034a8:	d011      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034ae:	3308      	adds	r3, #8
 80034b0:	2102      	movs	r1, #2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f87a 	bl	80035ac <RCCEx_PLL2_Config>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80034be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80034ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d6:	2100      	movs	r1, #0
 80034d8:	6139      	str	r1, [r7, #16]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	617b      	str	r3, [r7, #20]
 80034e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80034e4:	460b      	mov	r3, r1
 80034e6:	4313      	orrs	r3, r2
 80034e8:	d011      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034ee:	3328      	adds	r3, #40	@ 0x28
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 f90c 	bl	8003710 <RCCEx_PLL3_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80034fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003506:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800350a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800350e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003516:	2100      	movs	r1, #0
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003524:	460b      	mov	r3, r1
 8003526:	4313      	orrs	r3, r2
 8003528:	d011      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800352a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800352e:	3328      	adds	r3, #40	@ 0x28
 8003530:	2101      	movs	r1, #1
 8003532:	4618      	mov	r0, r3
 8003534:	f000 f8ec 	bl	8003710 <RCCEx_PLL3_Config>
 8003538:	4603      	mov	r3, r0
 800353a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800353e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003542:	2b00      	cmp	r3, #0
 8003544:	d003      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003546:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800354a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800354e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003556:	2100      	movs	r1, #0
 8003558:	6039      	str	r1, [r7, #0]
 800355a:	f003 0320 	and.w	r3, r3, #32
 800355e:	607b      	str	r3, [r7, #4]
 8003560:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003564:	460b      	mov	r3, r1
 8003566:	4313      	orrs	r3, r2
 8003568:	d011      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800356a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800356e:	3328      	adds	r3, #40	@ 0x28
 8003570:	2102      	movs	r1, #2
 8003572:	4618      	mov	r0, r3
 8003574:	f000 f8cc 	bl	8003710 <RCCEx_PLL3_Config>
 8003578:	4603      	mov	r3, r0
 800357a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800357e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003586:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800358a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 800358e:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003596:	2300      	movs	r3, #0
 8003598:	e000      	b.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
}
 800359c:	4618      	mov	r0, r3
 800359e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80035a2:	46bd      	mov	sp, r7
 80035a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035a8:	58024400 	.word	0x58024400

080035ac <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80035ba:	4b53      	ldr	r3, [pc, #332]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 80035bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	2b03      	cmp	r3, #3
 80035c4:	d101      	bne.n	80035ca <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e099      	b.n	80036fe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80035ca:	4b4f      	ldr	r3, [pc, #316]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a4e      	ldr	r2, [pc, #312]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 80035d0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80035d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d6:	f7fd fa5d 	bl	8000a94 <HAL_GetTick>
 80035da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80035dc:	e008      	b.n	80035f0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80035de:	f7fd fa59 	bl	8000a94 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d901      	bls.n	80035f0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80035ec:	2303      	movs	r3, #3
 80035ee:	e086      	b.n	80036fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80035f0:	4b45      	ldr	r3, [pc, #276]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d1f0      	bne.n	80035de <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80035fc:	4b42      	ldr	r3, [pc, #264]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 80035fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003600:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	031b      	lsls	r3, r3, #12
 800360a:	493f      	ldr	r1, [pc, #252]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 800360c:	4313      	orrs	r3, r2
 800360e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	3b01      	subs	r3, #1
 8003616:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	3b01      	subs	r3, #1
 8003620:	025b      	lsls	r3, r3, #9
 8003622:	b29b      	uxth	r3, r3
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	3b01      	subs	r3, #1
 800362c:	041b      	lsls	r3, r3, #16
 800362e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	3b01      	subs	r3, #1
 800363a:	061b      	lsls	r3, r3, #24
 800363c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003640:	4931      	ldr	r1, [pc, #196]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 8003642:	4313      	orrs	r3, r2
 8003644:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003646:	4b30      	ldr	r3, [pc, #192]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 8003648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	492d      	ldr	r1, [pc, #180]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 8003654:	4313      	orrs	r3, r2
 8003656:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003658:	4b2b      	ldr	r3, [pc, #172]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 800365a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365c:	f023 0220 	bic.w	r2, r3, #32
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	4928      	ldr	r1, [pc, #160]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 8003666:	4313      	orrs	r3, r2
 8003668:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800366a:	4b27      	ldr	r3, [pc, #156]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 800366c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366e:	4a26      	ldr	r2, [pc, #152]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 8003670:	f023 0310 	bic.w	r3, r3, #16
 8003674:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003676:	4b24      	ldr	r3, [pc, #144]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 8003678:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800367a:	4b24      	ldr	r3, [pc, #144]	@ (800370c <RCCEx_PLL2_Config+0x160>)
 800367c:	4013      	ands	r3, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	69d2      	ldr	r2, [r2, #28]
 8003682:	00d2      	lsls	r2, r2, #3
 8003684:	4920      	ldr	r1, [pc, #128]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 8003686:	4313      	orrs	r3, r2
 8003688:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800368a:	4b1f      	ldr	r3, [pc, #124]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 800368c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368e:	4a1e      	ldr	r2, [pc, #120]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 8003690:	f043 0310 	orr.w	r3, r3, #16
 8003694:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d106      	bne.n	80036aa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800369c:	4b1a      	ldr	r3, [pc, #104]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 800369e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a0:	4a19      	ldr	r2, [pc, #100]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 80036a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80036a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80036a8:	e00f      	b.n	80036ca <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d106      	bne.n	80036be <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80036b0:	4b15      	ldr	r3, [pc, #84]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 80036b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b4:	4a14      	ldr	r2, [pc, #80]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 80036b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036ba:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80036bc:	e005      	b.n	80036ca <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80036be:	4b12      	ldr	r3, [pc, #72]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 80036c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c2:	4a11      	ldr	r2, [pc, #68]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 80036c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80036c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80036ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a0e      	ldr	r2, [pc, #56]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 80036d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80036d4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d6:	f7fd f9dd 	bl	8000a94 <HAL_GetTick>
 80036da:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80036dc:	e008      	b.n	80036f0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80036de:	f7fd f9d9 	bl	8000a94 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e006      	b.n	80036fe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80036f0:	4b05      	ldr	r3, [pc, #20]	@ (8003708 <RCCEx_PLL2_Config+0x15c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80036fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	58024400 	.word	0x58024400
 800370c:	ffff0007 	.word	0xffff0007

08003710 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800371e:	4b53      	ldr	r3, [pc, #332]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 8003720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003722:	f003 0303 	and.w	r3, r3, #3
 8003726:	2b03      	cmp	r3, #3
 8003728:	d101      	bne.n	800372e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e099      	b.n	8003862 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800372e:	4b4f      	ldr	r3, [pc, #316]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a4e      	ldr	r2, [pc, #312]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 8003734:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003738:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800373a:	f7fd f9ab 	bl	8000a94 <HAL_GetTick>
 800373e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003740:	e008      	b.n	8003754 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003742:	f7fd f9a7 	bl	8000a94 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	2b02      	cmp	r3, #2
 800374e:	d901      	bls.n	8003754 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e086      	b.n	8003862 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003754:	4b45      	ldr	r3, [pc, #276]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1f0      	bne.n	8003742 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003760:	4b42      	ldr	r3, [pc, #264]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 8003762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003764:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	051b      	lsls	r3, r3, #20
 800376e:	493f      	ldr	r1, [pc, #252]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 8003770:	4313      	orrs	r3, r2
 8003772:	628b      	str	r3, [r1, #40]	@ 0x28
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	3b01      	subs	r3, #1
 800377a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	3b01      	subs	r3, #1
 8003784:	025b      	lsls	r3, r3, #9
 8003786:	b29b      	uxth	r3, r3
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	3b01      	subs	r3, #1
 8003790:	041b      	lsls	r3, r3, #16
 8003792:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	691b      	ldr	r3, [r3, #16]
 800379c:	3b01      	subs	r3, #1
 800379e:	061b      	lsls	r3, r3, #24
 80037a0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80037a4:	4931      	ldr	r1, [pc, #196]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80037aa:	4b30      	ldr	r3, [pc, #192]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 80037ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	492d      	ldr	r1, [pc, #180]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 80037b8:	4313      	orrs	r3, r2
 80037ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80037bc:	4b2b      	ldr	r3, [pc, #172]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 80037be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	4928      	ldr	r1, [pc, #160]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 80037ca:	4313      	orrs	r3, r2
 80037cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80037ce:	4b27      	ldr	r3, [pc, #156]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 80037d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d2:	4a26      	ldr	r2, [pc, #152]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 80037d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80037d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80037da:	4b24      	ldr	r3, [pc, #144]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 80037dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037de:	4b24      	ldr	r3, [pc, #144]	@ (8003870 <RCCEx_PLL3_Config+0x160>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	69d2      	ldr	r2, [r2, #28]
 80037e6:	00d2      	lsls	r2, r2, #3
 80037e8:	4920      	ldr	r1, [pc, #128]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80037ee:	4b1f      	ldr	r3, [pc, #124]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 80037f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f2:	4a1e      	ldr	r2, [pc, #120]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 80037f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d106      	bne.n	800380e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003800:	4b1a      	ldr	r3, [pc, #104]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 8003802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003804:	4a19      	ldr	r2, [pc, #100]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 8003806:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800380a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800380c:	e00f      	b.n	800382e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d106      	bne.n	8003822 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003814:	4b15      	ldr	r3, [pc, #84]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 8003816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003818:	4a14      	ldr	r2, [pc, #80]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 800381a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800381e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003820:	e005      	b.n	800382e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003822:	4b12      	ldr	r3, [pc, #72]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 8003824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003826:	4a11      	ldr	r2, [pc, #68]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 8003828:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800382c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800382e:	4b0f      	ldr	r3, [pc, #60]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a0e      	ldr	r2, [pc, #56]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 8003834:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003838:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800383a:	f7fd f92b 	bl	8000a94 <HAL_GetTick>
 800383e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003840:	e008      	b.n	8003854 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003842:	f7fd f927 	bl	8000a94 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e006      	b.n	8003862 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003854:	4b05      	ldr	r3, [pc, #20]	@ (800386c <RCCEx_PLL3_Config+0x15c>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d0f0      	beq.n	8003842 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003860:	7bfb      	ldrb	r3, [r7, #15]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	58024400 	.word	0x58024400
 8003870:	ffff0007 	.word	0xffff0007

08003874 <__NVIC_SetPriority>:
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	6039      	str	r1, [r7, #0]
 800387e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003880:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003884:	2b00      	cmp	r3, #0
 8003886:	db0a      	blt.n	800389e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	b2da      	uxtb	r2, r3
 800388c:	490c      	ldr	r1, [pc, #48]	@ (80038c0 <__NVIC_SetPriority+0x4c>)
 800388e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003892:	0112      	lsls	r2, r2, #4
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	440b      	add	r3, r1
 8003898:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800389c:	e00a      	b.n	80038b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	4908      	ldr	r1, [pc, #32]	@ (80038c4 <__NVIC_SetPriority+0x50>)
 80038a4:	88fb      	ldrh	r3, [r7, #6]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	3b04      	subs	r3, #4
 80038ac:	0112      	lsls	r2, r2, #4
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	440b      	add	r3, r1
 80038b2:	761a      	strb	r2, [r3, #24]
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000e100 	.word	0xe000e100
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80038cc:	2100      	movs	r1, #0
 80038ce:	f06f 0004 	mvn.w	r0, #4
 80038d2:	f7ff ffcf 	bl	8003874 <__NVIC_SetPriority>
#endif
}
 80038d6:	bf00      	nop
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038e2:	f3ef 8305 	mrs	r3, IPSR
 80038e6:	603b      	str	r3, [r7, #0]
  return(result);
 80038e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d003      	beq.n	80038f6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80038ee:	f06f 0305 	mvn.w	r3, #5
 80038f2:	607b      	str	r3, [r7, #4]
 80038f4:	e00c      	b.n	8003910 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80038f6:	4b0a      	ldr	r3, [pc, #40]	@ (8003920 <osKernelInitialize+0x44>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d105      	bne.n	800390a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80038fe:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <osKernelInitialize+0x44>)
 8003900:	2201      	movs	r2, #1
 8003902:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003904:	2300      	movs	r3, #0
 8003906:	607b      	str	r3, [r7, #4]
 8003908:	e002      	b.n	8003910 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800390a:	f04f 33ff 	mov.w	r3, #4294967295
 800390e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003910:	687b      	ldr	r3, [r7, #4]
}
 8003912:	4618      	mov	r0, r3
 8003914:	370c      	adds	r7, #12
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	24000048 	.word	0x24000048

08003924 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800392a:	f3ef 8305 	mrs	r3, IPSR
 800392e:	603b      	str	r3, [r7, #0]
  return(result);
 8003930:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003932:	2b00      	cmp	r3, #0
 8003934:	d003      	beq.n	800393e <osKernelStart+0x1a>
    stat = osErrorISR;
 8003936:	f06f 0305 	mvn.w	r3, #5
 800393a:	607b      	str	r3, [r7, #4]
 800393c:	e010      	b.n	8003960 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800393e:	4b0b      	ldr	r3, [pc, #44]	@ (800396c <osKernelStart+0x48>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d109      	bne.n	800395a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003946:	f7ff ffbf 	bl	80038c8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800394a:	4b08      	ldr	r3, [pc, #32]	@ (800396c <osKernelStart+0x48>)
 800394c:	2202      	movs	r2, #2
 800394e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003950:	f001 fd66 	bl	8005420 <vTaskStartScheduler>
      stat = osOK;
 8003954:	2300      	movs	r3, #0
 8003956:	607b      	str	r3, [r7, #4]
 8003958:	e002      	b.n	8003960 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800395a:	f04f 33ff 	mov.w	r3, #4294967295
 800395e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003960:	687b      	ldr	r3, [r7, #4]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	24000048 	.word	0x24000048

08003970 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003970:	b580      	push	{r7, lr}
 8003972:	b08e      	sub	sp, #56	@ 0x38
 8003974:	af04      	add	r7, sp, #16
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800397c:	2300      	movs	r3, #0
 800397e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003980:	f3ef 8305 	mrs	r3, IPSR
 8003984:	617b      	str	r3, [r7, #20]
  return(result);
 8003986:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003988:	2b00      	cmp	r3, #0
 800398a:	d17e      	bne.n	8003a8a <osThreadNew+0x11a>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d07b      	beq.n	8003a8a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003992:	2380      	movs	r3, #128	@ 0x80
 8003994:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003996:	2318      	movs	r3, #24
 8003998:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800399a:	2300      	movs	r3, #0
 800399c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800399e:	f04f 33ff 	mov.w	r3, #4294967295
 80039a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d045      	beq.n	8003a36 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <osThreadNew+0x48>
        name = attr->name;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	699b      	ldr	r3, [r3, #24]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <osThreadNew+0x6e>
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	2b38      	cmp	r3, #56	@ 0x38
 80039d0:	d805      	bhi.n	80039de <osThreadNew+0x6e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f003 0301 	and.w	r3, r3, #1
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d001      	beq.n	80039e2 <osThreadNew+0x72>
        return (NULL);
 80039de:	2300      	movs	r3, #0
 80039e0:	e054      	b.n	8003a8c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	089b      	lsrs	r3, r3, #2
 80039f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00e      	beq.n	8003a18 <osThreadNew+0xa8>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	2b5b      	cmp	r3, #91	@ 0x5b
 8003a00:	d90a      	bls.n	8003a18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d006      	beq.n	8003a18 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <osThreadNew+0xa8>
        mem = 1;
 8003a12:	2301      	movs	r3, #1
 8003a14:	61bb      	str	r3, [r7, #24]
 8003a16:	e010      	b.n	8003a3a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10c      	bne.n	8003a3a <osThreadNew+0xca>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	68db      	ldr	r3, [r3, #12]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d108      	bne.n	8003a3a <osThreadNew+0xca>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d104      	bne.n	8003a3a <osThreadNew+0xca>
          mem = 0;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61bb      	str	r3, [r7, #24]
 8003a34:	e001      	b.n	8003a3a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d110      	bne.n	8003a62 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a48:	9202      	str	r2, [sp, #8]
 8003a4a:	9301      	str	r3, [sp, #4]
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	9300      	str	r3, [sp, #0]
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	6a3a      	ldr	r2, [r7, #32]
 8003a54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f001 fb06 	bl	8005068 <xTaskCreateStatic>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	613b      	str	r3, [r7, #16]
 8003a60:	e013      	b.n	8003a8a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d110      	bne.n	8003a8a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	b29a      	uxth	r2, r3
 8003a6c:	f107 0310 	add.w	r3, r7, #16
 8003a70:	9301      	str	r3, [sp, #4]
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f001 fb54 	bl	8005128 <xTaskCreate>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d001      	beq.n	8003a8a <osThreadNew+0x11a>
            hTask = NULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a8a:	693b      	ldr	r3, [r7, #16]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3728      	adds	r7, #40	@ 0x28
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a9c:	f3ef 8305 	mrs	r3, IPSR
 8003aa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d003      	beq.n	8003ab0 <osDelay+0x1c>
    stat = osErrorISR;
 8003aa8:	f06f 0305 	mvn.w	r3, #5
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	e007      	b.n	8003ac0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f001 fc7a 	bl	80053b4 <vTaskDelay>
    }
  }

  return (stat);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003aca:	b580      	push	{r7, lr}
 8003acc:	b08a      	sub	sp, #40	@ 0x28
 8003ace:	af02      	add	r7, sp, #8
 8003ad0:	60f8      	str	r0, [r7, #12]
 8003ad2:	60b9      	str	r1, [r7, #8]
 8003ad4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ada:	f3ef 8305 	mrs	r3, IPSR
 8003ade:	613b      	str	r3, [r7, #16]
  return(result);
 8003ae0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d15f      	bne.n	8003ba6 <osMessageQueueNew+0xdc>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d05c      	beq.n	8003ba6 <osMessageQueueNew+0xdc>
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d059      	beq.n	8003ba6 <osMessageQueueNew+0xdc>
    mem = -1;
 8003af2:	f04f 33ff 	mov.w	r3, #4294967295
 8003af6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d029      	beq.n	8003b52 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d012      	beq.n	8003b2c <osMessageQueueNew+0x62>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	2b4f      	cmp	r3, #79	@ 0x4f
 8003b0c:	d90e      	bls.n	8003b2c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	68b9      	ldr	r1, [r7, #8]
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d302      	bcc.n	8003b2c <osMessageQueueNew+0x62>
        mem = 1;
 8003b26:	2301      	movs	r3, #1
 8003b28:	61bb      	str	r3, [r7, #24]
 8003b2a:	e014      	b.n	8003b56 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d110      	bne.n	8003b56 <osMessageQueueNew+0x8c>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10c      	bne.n	8003b56 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d108      	bne.n	8003b56 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d104      	bne.n	8003b56 <osMessageQueueNew+0x8c>
          mem = 0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	e001      	b.n	8003b56 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d10b      	bne.n	8003b74 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	2100      	movs	r1, #0
 8003b66:	9100      	str	r1, [sp, #0]
 8003b68:	68b9      	ldr	r1, [r7, #8]
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fdb0 	bl	80046d0 <xQueueGenericCreateStatic>
 8003b70:	61f8      	str	r0, [r7, #28]
 8003b72:	e008      	b.n	8003b86 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d105      	bne.n	8003b86 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	68b9      	ldr	r1, [r7, #8]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 fe23 	bl	80047ca <xQueueGenericCreate>
 8003b84:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00c      	beq.n	8003ba6 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <osMessageQueueNew+0xd0>
        name = attr->name;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	e001      	b.n	8003b9e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8003b9e:	6979      	ldr	r1, [r7, #20]
 8003ba0:	69f8      	ldr	r0, [r7, #28]
 8003ba2:	f001 fa03 	bl	8004fac <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003ba6:	69fb      	ldr	r3, [r7, #28]
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3720      	adds	r7, #32
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4a07      	ldr	r2, [pc, #28]	@ (8003bdc <vApplicationGetIdleTaskMemory+0x2c>)
 8003bc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4a06      	ldr	r2, [pc, #24]	@ (8003be0 <vApplicationGetIdleTaskMemory+0x30>)
 8003bc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2280      	movs	r2, #128	@ 0x80
 8003bcc:	601a      	str	r2, [r3, #0]
}
 8003bce:	bf00      	nop
 8003bd0:	3714      	adds	r7, #20
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	2400004c 	.word	0x2400004c
 8003be0:	240000a8 	.word	0x240000a8

08003be4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003be4:	b480      	push	{r7}
 8003be6:	b085      	sub	sp, #20
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	4a07      	ldr	r2, [pc, #28]	@ (8003c10 <vApplicationGetTimerTaskMemory+0x2c>)
 8003bf4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	4a06      	ldr	r2, [pc, #24]	@ (8003c14 <vApplicationGetTimerTaskMemory+0x30>)
 8003bfa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c02:	601a      	str	r2, [r3, #0]
}
 8003c04:	bf00      	nop
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	240002a8 	.word	0x240002a8
 8003c14:	24000304 	.word	0x24000304

08003c18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08a      	sub	sp, #40	@ 0x28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c24:	f001 fc64 	bl	80054f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c28:	4b5c      	ldr	r3, [pc, #368]	@ (8003d9c <pvPortMalloc+0x184>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d101      	bne.n	8003c34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c30:	f000 f924 	bl	8003e7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c34:	4b5a      	ldr	r3, [pc, #360]	@ (8003da0 <pvPortMalloc+0x188>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f040 8095 	bne.w	8003d6c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d01e      	beq.n	8003c86 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003c48:	2208      	movs	r2, #8
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d015      	beq.n	8003c86 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f023 0307 	bic.w	r3, r3, #7
 8003c60:	3308      	adds	r3, #8
 8003c62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f003 0307 	and.w	r3, r3, #7
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00b      	beq.n	8003c86 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003c80:	bf00      	nop
 8003c82:	bf00      	nop
 8003c84:	e7fd      	b.n	8003c82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d06f      	beq.n	8003d6c <pvPortMalloc+0x154>
 8003c8c:	4b45      	ldr	r3, [pc, #276]	@ (8003da4 <pvPortMalloc+0x18c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d86a      	bhi.n	8003d6c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003c96:	4b44      	ldr	r3, [pc, #272]	@ (8003da8 <pvPortMalloc+0x190>)
 8003c98:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003c9a:	4b43      	ldr	r3, [pc, #268]	@ (8003da8 <pvPortMalloc+0x190>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003ca0:	e004      	b.n	8003cac <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d903      	bls.n	8003cbe <pvPortMalloc+0xa6>
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1f1      	bne.n	8003ca2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003cbe:	4b37      	ldr	r3, [pc, #220]	@ (8003d9c <pvPortMalloc+0x184>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d051      	beq.n	8003d6c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2208      	movs	r2, #8
 8003cce:	4413      	add	r3, r2
 8003cd0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	685a      	ldr	r2, [r3, #4]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	1ad2      	subs	r2, r2, r3
 8003ce2:	2308      	movs	r3, #8
 8003ce4:	005b      	lsls	r3, r3, #1
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d920      	bls.n	8003d2c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4413      	add	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	f003 0307 	and.w	r3, r3, #7
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d00b      	beq.n	8003d14 <pvPortMalloc+0xfc>
	__asm volatile
 8003cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d00:	f383 8811 	msr	BASEPRI, r3
 8003d04:	f3bf 8f6f 	isb	sy
 8003d08:	f3bf 8f4f 	dsb	sy
 8003d0c:	613b      	str	r3, [r7, #16]
}
 8003d0e:	bf00      	nop
 8003d10:	bf00      	nop
 8003d12:	e7fd      	b.n	8003d10 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	1ad2      	subs	r2, r2, r3
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d26:	69b8      	ldr	r0, [r7, #24]
 8003d28:	f000 f90a 	bl	8003f40 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003da4 <pvPortMalloc+0x18c>)
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	4a1b      	ldr	r2, [pc, #108]	@ (8003da4 <pvPortMalloc+0x18c>)
 8003d38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d3a:	4b1a      	ldr	r3, [pc, #104]	@ (8003da4 <pvPortMalloc+0x18c>)
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dac <pvPortMalloc+0x194>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d203      	bcs.n	8003d4e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d46:	4b17      	ldr	r3, [pc, #92]	@ (8003da4 <pvPortMalloc+0x18c>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a18      	ldr	r2, [pc, #96]	@ (8003dac <pvPortMalloc+0x194>)
 8003d4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d50:	685a      	ldr	r2, [r3, #4]
 8003d52:	4b13      	ldr	r3, [pc, #76]	@ (8003da0 <pvPortMalloc+0x188>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	431a      	orrs	r2, r3
 8003d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003d62:	4b13      	ldr	r3, [pc, #76]	@ (8003db0 <pvPortMalloc+0x198>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3301      	adds	r3, #1
 8003d68:	4a11      	ldr	r2, [pc, #68]	@ (8003db0 <pvPortMalloc+0x198>)
 8003d6a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003d6c:	f001 fbce 	bl	800550c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d70:	69fb      	ldr	r3, [r7, #28]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d00b      	beq.n	8003d92 <pvPortMalloc+0x17a>
	__asm volatile
 8003d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d7e:	f383 8811 	msr	BASEPRI, r3
 8003d82:	f3bf 8f6f 	isb	sy
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	60fb      	str	r3, [r7, #12]
}
 8003d8c:	bf00      	nop
 8003d8e:	bf00      	nop
 8003d90:	e7fd      	b.n	8003d8e <pvPortMalloc+0x176>
	return pvReturn;
 8003d92:	69fb      	ldr	r3, [r7, #28]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3728      	adds	r7, #40	@ 0x28
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	2400430c 	.word	0x2400430c
 8003da0:	24004320 	.word	0x24004320
 8003da4:	24004310 	.word	0x24004310
 8003da8:	24004304 	.word	0x24004304
 8003dac:	24004314 	.word	0x24004314
 8003db0:	24004318 	.word	0x24004318

08003db4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b086      	sub	sp, #24
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d04f      	beq.n	8003e66 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003dc6:	2308      	movs	r3, #8
 8003dc8:	425b      	negs	r3, r3
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4413      	add	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	4b25      	ldr	r3, [pc, #148]	@ (8003e70 <vPortFree+0xbc>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4013      	ands	r3, r2
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10b      	bne.n	8003dfa <vPortFree+0x46>
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	60fb      	str	r3, [r7, #12]
}
 8003df4:	bf00      	nop
 8003df6:	bf00      	nop
 8003df8:	e7fd      	b.n	8003df6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00b      	beq.n	8003e1a <vPortFree+0x66>
	__asm volatile
 8003e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e06:	f383 8811 	msr	BASEPRI, r3
 8003e0a:	f3bf 8f6f 	isb	sy
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	60bb      	str	r3, [r7, #8]
}
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop
 8003e18:	e7fd      	b.n	8003e16 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	4b14      	ldr	r3, [pc, #80]	@ (8003e70 <vPortFree+0xbc>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4013      	ands	r3, r2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d01e      	beq.n	8003e66 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d11a      	bne.n	8003e66 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	4b0e      	ldr	r3, [pc, #56]	@ (8003e70 <vPortFree+0xbc>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	401a      	ands	r2, r3
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e40:	f001 fb56 	bl	80054f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	685a      	ldr	r2, [r3, #4]
 8003e48:	4b0a      	ldr	r3, [pc, #40]	@ (8003e74 <vPortFree+0xc0>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	4a09      	ldr	r2, [pc, #36]	@ (8003e74 <vPortFree+0xc0>)
 8003e50:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003e52:	6938      	ldr	r0, [r7, #16]
 8003e54:	f000 f874 	bl	8003f40 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003e58:	4b07      	ldr	r3, [pc, #28]	@ (8003e78 <vPortFree+0xc4>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	4a06      	ldr	r2, [pc, #24]	@ (8003e78 <vPortFree+0xc4>)
 8003e60:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003e62:	f001 fb53 	bl	800550c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003e66:	bf00      	nop
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	24004320 	.word	0x24004320
 8003e74:	24004310 	.word	0x24004310
 8003e78:	2400431c 	.word	0x2400431c

08003e7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003e82:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003e86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003e88:	4b27      	ldr	r3, [pc, #156]	@ (8003f28 <prvHeapInit+0xac>)
 8003e8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00c      	beq.n	8003eb0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	3307      	adds	r3, #7
 8003e9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 0307 	bic.w	r3, r3, #7
 8003ea2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ea4:	68ba      	ldr	r2, [r7, #8]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8003f28 <prvHeapInit+0xac>)
 8003eac:	4413      	add	r3, r2
 8003eae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8003f2c <prvHeapInit+0xb0>)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003eba:	4b1c      	ldr	r3, [pc, #112]	@ (8003f2c <prvHeapInit+0xb0>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003ec8:	2208      	movs	r2, #8
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f023 0307 	bic.w	r3, r3, #7
 8003ed6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4a15      	ldr	r2, [pc, #84]	@ (8003f30 <prvHeapInit+0xb4>)
 8003edc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003ede:	4b14      	ldr	r3, [pc, #80]	@ (8003f30 <prvHeapInit+0xb4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003ee6:	4b12      	ldr	r3, [pc, #72]	@ (8003f30 <prvHeapInit+0xb4>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2200      	movs	r2, #0
 8003eec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	1ad2      	subs	r2, r2, r3
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003efc:	4b0c      	ldr	r3, [pc, #48]	@ (8003f30 <prvHeapInit+0xb4>)
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	4a0a      	ldr	r2, [pc, #40]	@ (8003f34 <prvHeapInit+0xb8>)
 8003f0a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4a09      	ldr	r2, [pc, #36]	@ (8003f38 <prvHeapInit+0xbc>)
 8003f12:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f14:	4b09      	ldr	r3, [pc, #36]	@ (8003f3c <prvHeapInit+0xc0>)
 8003f16:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003f1a:	601a      	str	r2, [r3, #0]
}
 8003f1c:	bf00      	nop
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr
 8003f28:	24000704 	.word	0x24000704
 8003f2c:	24004304 	.word	0x24004304
 8003f30:	2400430c 	.word	0x2400430c
 8003f34:	24004314 	.word	0x24004314
 8003f38:	24004310 	.word	0x24004310
 8003f3c:	24004320 	.word	0x24004320

08003f40 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003f48:	4b28      	ldr	r3, [pc, #160]	@ (8003fec <prvInsertBlockIntoFreeList+0xac>)
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	e002      	b.n	8003f54 <prvInsertBlockIntoFreeList+0x14>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d8f7      	bhi.n	8003f4e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	68ba      	ldr	r2, [r7, #8]
 8003f68:	4413      	add	r3, r2
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d108      	bne.n	8003f82 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	441a      	add	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	68ba      	ldr	r2, [r7, #8]
 8003f8c:	441a      	add	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d118      	bne.n	8003fc8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	4b15      	ldr	r3, [pc, #84]	@ (8003ff0 <prvInsertBlockIntoFreeList+0xb0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d00d      	beq.n	8003fbe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	441a      	add	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	601a      	str	r2, [r3, #0]
 8003fbc:	e008      	b.n	8003fd0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8003ff0 <prvInsertBlockIntoFreeList+0xb0>)
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	e003      	b.n	8003fd0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d002      	beq.n	8003fde <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003fde:	bf00      	nop
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	24004304 	.word	0x24004304
 8003ff0:	2400430c 	.word	0x2400430c

08003ff4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f103 0208 	add.w	r2, r3, #8
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f04f 32ff 	mov.w	r2, #4294967295
 800400c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f103 0208 	add.w	r2, r3, #8
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f103 0208 	add.w	r2, r3, #8
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004032:	4770      	bx	lr

08004034 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800404e:	b480      	push	{r7}
 8004050:	b085      	sub	sp, #20
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	683a      	ldr	r2, [r7, #0]
 8004078:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	601a      	str	r2, [r3, #0]
}
 800408a:	bf00      	nop
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004096:	b480      	push	{r7}
 8004098:	b085      	sub	sp, #20
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
 800409e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d103      	bne.n	80040b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	e00c      	b.n	80040d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	3308      	adds	r3, #8
 80040ba:	60fb      	str	r3, [r7, #12]
 80040bc:	e002      	b.n	80040c4 <vListInsert+0x2e>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d2f6      	bcs.n	80040be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	1c5a      	adds	r2, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	601a      	str	r2, [r3, #0]
}
 80040fc:	bf00      	nop
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6892      	ldr	r2, [r2, #8]
 800411e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6852      	ldr	r2, [r2, #4]
 8004128:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	429a      	cmp	r2, r3
 8004132:	d103      	bne.n	800413c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689a      	ldr	r2, [r3, #8]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	1e5a      	subs	r2, r3, #1
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3714      	adds	r7, #20
 8004154:	46bd      	mov	sp, r7
 8004156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415a:	4770      	bx	lr

0800415c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3b04      	subs	r3, #4
 800416c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004174:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3b04      	subs	r3, #4
 800417a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f023 0201 	bic.w	r2, r3, #1
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	3b04      	subs	r3, #4
 800418a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800418c:	4a0c      	ldr	r2, [pc, #48]	@ (80041c0 <pxPortInitialiseStack+0x64>)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3b14      	subs	r3, #20
 8004196:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3b04      	subs	r3, #4
 80041a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f06f 0202 	mvn.w	r2, #2
 80041aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	3b20      	subs	r3, #32
 80041b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80041b2:	68fb      	ldr	r3, [r7, #12]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	080041c5 	.word	0x080041c5

080041c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80041ca:	2300      	movs	r3, #0
 80041cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80041ce:	4b13      	ldr	r3, [pc, #76]	@ (800421c <prvTaskExitError+0x58>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d6:	d00b      	beq.n	80041f0 <prvTaskExitError+0x2c>
	__asm volatile
 80041d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041dc:	f383 8811 	msr	BASEPRI, r3
 80041e0:	f3bf 8f6f 	isb	sy
 80041e4:	f3bf 8f4f 	dsb	sy
 80041e8:	60fb      	str	r3, [r7, #12]
}
 80041ea:	bf00      	nop
 80041ec:	bf00      	nop
 80041ee:	e7fd      	b.n	80041ec <prvTaskExitError+0x28>
	__asm volatile
 80041f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f4:	f383 8811 	msr	BASEPRI, r3
 80041f8:	f3bf 8f6f 	isb	sy
 80041fc:	f3bf 8f4f 	dsb	sy
 8004200:	60bb      	str	r3, [r7, #8]
}
 8004202:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004204:	bf00      	nop
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0fc      	beq.n	8004206 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	24000010 	.word	0x24000010

08004220 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004220:	4b07      	ldr	r3, [pc, #28]	@ (8004240 <pxCurrentTCBConst2>)
 8004222:	6819      	ldr	r1, [r3, #0]
 8004224:	6808      	ldr	r0, [r1, #0]
 8004226:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800422a:	f380 8809 	msr	PSP, r0
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f380 8811 	msr	BASEPRI, r0
 800423a:	4770      	bx	lr
 800423c:	f3af 8000 	nop.w

08004240 <pxCurrentTCBConst2>:
 8004240:	2400436c 	.word	0x2400436c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004244:	bf00      	nop
 8004246:	bf00      	nop

08004248 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004248:	4808      	ldr	r0, [pc, #32]	@ (800426c <prvPortStartFirstTask+0x24>)
 800424a:	6800      	ldr	r0, [r0, #0]
 800424c:	6800      	ldr	r0, [r0, #0]
 800424e:	f380 8808 	msr	MSP, r0
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f380 8814 	msr	CONTROL, r0
 800425a:	b662      	cpsie	i
 800425c:	b661      	cpsie	f
 800425e:	f3bf 8f4f 	dsb	sy
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	df00      	svc	0
 8004268:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800426a:	bf00      	nop
 800426c:	e000ed08 	.word	0xe000ed08

08004270 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004276:	4b47      	ldr	r3, [pc, #284]	@ (8004394 <xPortStartScheduler+0x124>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a47      	ldr	r2, [pc, #284]	@ (8004398 <xPortStartScheduler+0x128>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d10b      	bne.n	8004298 <xPortStartScheduler+0x28>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	60fb      	str	r3, [r7, #12]
}
 8004292:	bf00      	nop
 8004294:	bf00      	nop
 8004296:	e7fd      	b.n	8004294 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004298:	4b3e      	ldr	r3, [pc, #248]	@ (8004394 <xPortStartScheduler+0x124>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a3f      	ldr	r2, [pc, #252]	@ (800439c <xPortStartScheduler+0x12c>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d10b      	bne.n	80042ba <xPortStartScheduler+0x4a>
	__asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	613b      	str	r3, [r7, #16]
}
 80042b4:	bf00      	nop
 80042b6:	bf00      	nop
 80042b8:	e7fd      	b.n	80042b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042ba:	4b39      	ldr	r3, [pc, #228]	@ (80043a0 <xPortStartScheduler+0x130>)
 80042bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	22ff      	movs	r2, #255	@ 0xff
 80042ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042d4:	78fb      	ldrb	r3, [r7, #3]
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	4b31      	ldr	r3, [pc, #196]	@ (80043a4 <xPortStartScheduler+0x134>)
 80042e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042e2:	4b31      	ldr	r3, [pc, #196]	@ (80043a8 <xPortStartScheduler+0x138>)
 80042e4:	2207      	movs	r2, #7
 80042e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042e8:	e009      	b.n	80042fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80042ea:	4b2f      	ldr	r3, [pc, #188]	@ (80043a8 <xPortStartScheduler+0x138>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3b01      	subs	r3, #1
 80042f0:	4a2d      	ldr	r2, [pc, #180]	@ (80043a8 <xPortStartScheduler+0x138>)
 80042f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042fe:	78fb      	ldrb	r3, [r7, #3]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004306:	2b80      	cmp	r3, #128	@ 0x80
 8004308:	d0ef      	beq.n	80042ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800430a:	4b27      	ldr	r3, [pc, #156]	@ (80043a8 <xPortStartScheduler+0x138>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f1c3 0307 	rsb	r3, r3, #7
 8004312:	2b04      	cmp	r3, #4
 8004314:	d00b      	beq.n	800432e <xPortStartScheduler+0xbe>
	__asm volatile
 8004316:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431a:	f383 8811 	msr	BASEPRI, r3
 800431e:	f3bf 8f6f 	isb	sy
 8004322:	f3bf 8f4f 	dsb	sy
 8004326:	60bb      	str	r3, [r7, #8]
}
 8004328:	bf00      	nop
 800432a:	bf00      	nop
 800432c:	e7fd      	b.n	800432a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800432e:	4b1e      	ldr	r3, [pc, #120]	@ (80043a8 <xPortStartScheduler+0x138>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	4a1c      	ldr	r2, [pc, #112]	@ (80043a8 <xPortStartScheduler+0x138>)
 8004336:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004338:	4b1b      	ldr	r3, [pc, #108]	@ (80043a8 <xPortStartScheduler+0x138>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004340:	4a19      	ldr	r2, [pc, #100]	@ (80043a8 <xPortStartScheduler+0x138>)
 8004342:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	b2da      	uxtb	r2, r3
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800434c:	4b17      	ldr	r3, [pc, #92]	@ (80043ac <xPortStartScheduler+0x13c>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a16      	ldr	r2, [pc, #88]	@ (80043ac <xPortStartScheduler+0x13c>)
 8004352:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004356:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004358:	4b14      	ldr	r3, [pc, #80]	@ (80043ac <xPortStartScheduler+0x13c>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a13      	ldr	r2, [pc, #76]	@ (80043ac <xPortStartScheduler+0x13c>)
 800435e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004362:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004364:	f000 f8da 	bl	800451c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004368:	4b11      	ldr	r3, [pc, #68]	@ (80043b0 <xPortStartScheduler+0x140>)
 800436a:	2200      	movs	r2, #0
 800436c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800436e:	f000 f8f9 	bl	8004564 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004372:	4b10      	ldr	r3, [pc, #64]	@ (80043b4 <xPortStartScheduler+0x144>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a0f      	ldr	r2, [pc, #60]	@ (80043b4 <xPortStartScheduler+0x144>)
 8004378:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800437c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800437e:	f7ff ff63 	bl	8004248 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004382:	f001 fa2b 	bl	80057dc <vTaskSwitchContext>
	prvTaskExitError();
 8004386:	f7ff ff1d 	bl	80041c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	e000ed00 	.word	0xe000ed00
 8004398:	410fc271 	.word	0x410fc271
 800439c:	410fc270 	.word	0x410fc270
 80043a0:	e000e400 	.word	0xe000e400
 80043a4:	24004324 	.word	0x24004324
 80043a8:	24004328 	.word	0x24004328
 80043ac:	e000ed20 	.word	0xe000ed20
 80043b0:	24000010 	.word	0x24000010
 80043b4:	e000ef34 	.word	0xe000ef34

080043b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
	__asm volatile
 80043be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043c2:	f383 8811 	msr	BASEPRI, r3
 80043c6:	f3bf 8f6f 	isb	sy
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	607b      	str	r3, [r7, #4]
}
 80043d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80043d2:	4b10      	ldr	r3, [pc, #64]	@ (8004414 <vPortEnterCritical+0x5c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	3301      	adds	r3, #1
 80043d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004414 <vPortEnterCritical+0x5c>)
 80043da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80043dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004414 <vPortEnterCritical+0x5c>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d110      	bne.n	8004406 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004418 <vPortEnterCritical+0x60>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00b      	beq.n	8004406 <vPortEnterCritical+0x4e>
	__asm volatile
 80043ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043f2:	f383 8811 	msr	BASEPRI, r3
 80043f6:	f3bf 8f6f 	isb	sy
 80043fa:	f3bf 8f4f 	dsb	sy
 80043fe:	603b      	str	r3, [r7, #0]
}
 8004400:	bf00      	nop
 8004402:	bf00      	nop
 8004404:	e7fd      	b.n	8004402 <vPortEnterCritical+0x4a>
	}
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	24000010 	.word	0x24000010
 8004418:	e000ed04 	.word	0xe000ed04

0800441c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004422:	4b12      	ldr	r3, [pc, #72]	@ (800446c <vPortExitCritical+0x50>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10b      	bne.n	8004442 <vPortExitCritical+0x26>
	__asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	607b      	str	r3, [r7, #4]
}
 800443c:	bf00      	nop
 800443e:	bf00      	nop
 8004440:	e7fd      	b.n	800443e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004442:	4b0a      	ldr	r3, [pc, #40]	@ (800446c <vPortExitCritical+0x50>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3b01      	subs	r3, #1
 8004448:	4a08      	ldr	r2, [pc, #32]	@ (800446c <vPortExitCritical+0x50>)
 800444a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800444c:	4b07      	ldr	r3, [pc, #28]	@ (800446c <vPortExitCritical+0x50>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d105      	bne.n	8004460 <vPortExitCritical+0x44>
 8004454:	2300      	movs	r3, #0
 8004456:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800445e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	24000010 	.word	0x24000010

08004470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004470:	f3ef 8009 	mrs	r0, PSP
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	4b15      	ldr	r3, [pc, #84]	@ (80044d0 <pxCurrentTCBConst>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	f01e 0f10 	tst.w	lr, #16
 8004480:	bf08      	it	eq
 8004482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448a:	6010      	str	r0, [r2, #0]
 800448c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004490:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004494:	f380 8811 	msr	BASEPRI, r0
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f001 f99c 	bl	80057dc <vTaskSwitchContext>
 80044a4:	f04f 0000 	mov.w	r0, #0
 80044a8:	f380 8811 	msr	BASEPRI, r0
 80044ac:	bc09      	pop	{r0, r3}
 80044ae:	6819      	ldr	r1, [r3, #0]
 80044b0:	6808      	ldr	r0, [r1, #0]
 80044b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044b6:	f01e 0f10 	tst.w	lr, #16
 80044ba:	bf08      	it	eq
 80044bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044c0:	f380 8809 	msr	PSP, r0
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	f3af 8000 	nop.w

080044d0 <pxCurrentTCBConst>:
 80044d0:	2400436c 	.word	0x2400436c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop

080044d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
	__asm volatile
 80044de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e2:	f383 8811 	msr	BASEPRI, r3
 80044e6:	f3bf 8f6f 	isb	sy
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	607b      	str	r3, [r7, #4]
}
 80044f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80044f2:	f001 f8b9 	bl	8005668 <xTaskIncrementTick>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80044fc:	4b06      	ldr	r3, [pc, #24]	@ (8004518 <xPortSysTickHandler+0x40>)
 80044fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	2300      	movs	r3, #0
 8004506:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	f383 8811 	msr	BASEPRI, r3
}
 800450e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004510:	bf00      	nop
 8004512:	3708      	adds	r7, #8
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	e000ed04 	.word	0xe000ed04

0800451c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004520:	4b0b      	ldr	r3, [pc, #44]	@ (8004550 <vPortSetupTimerInterrupt+0x34>)
 8004522:	2200      	movs	r2, #0
 8004524:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004526:	4b0b      	ldr	r3, [pc, #44]	@ (8004554 <vPortSetupTimerInterrupt+0x38>)
 8004528:	2200      	movs	r2, #0
 800452a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800452c:	4b0a      	ldr	r3, [pc, #40]	@ (8004558 <vPortSetupTimerInterrupt+0x3c>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a0a      	ldr	r2, [pc, #40]	@ (800455c <vPortSetupTimerInterrupt+0x40>)
 8004532:	fba2 2303 	umull	r2, r3, r2, r3
 8004536:	099b      	lsrs	r3, r3, #6
 8004538:	4a09      	ldr	r2, [pc, #36]	@ (8004560 <vPortSetupTimerInterrupt+0x44>)
 800453a:	3b01      	subs	r3, #1
 800453c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800453e:	4b04      	ldr	r3, [pc, #16]	@ (8004550 <vPortSetupTimerInterrupt+0x34>)
 8004540:	2207      	movs	r2, #7
 8004542:	601a      	str	r2, [r3, #0]
}
 8004544:	bf00      	nop
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
 800454e:	bf00      	nop
 8004550:	e000e010 	.word	0xe000e010
 8004554:	e000e018 	.word	0xe000e018
 8004558:	24000000 	.word	0x24000000
 800455c:	10624dd3 	.word	0x10624dd3
 8004560:	e000e014 	.word	0xe000e014

08004564 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004564:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004574 <vPortEnableVFP+0x10>
 8004568:	6801      	ldr	r1, [r0, #0]
 800456a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800456e:	6001      	str	r1, [r0, #0]
 8004570:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004572:	bf00      	nop
 8004574:	e000ed88 	.word	0xe000ed88

08004578 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800457e:	f3ef 8305 	mrs	r3, IPSR
 8004582:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b0f      	cmp	r3, #15
 8004588:	d915      	bls.n	80045b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800458a:	4a18      	ldr	r2, [pc, #96]	@ (80045ec <vPortValidateInterruptPriority+0x74>)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004594:	4b16      	ldr	r3, [pc, #88]	@ (80045f0 <vPortValidateInterruptPriority+0x78>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	7afa      	ldrb	r2, [r7, #11]
 800459a:	429a      	cmp	r2, r3
 800459c:	d20b      	bcs.n	80045b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800459e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	607b      	str	r3, [r7, #4]
}
 80045b0:	bf00      	nop
 80045b2:	bf00      	nop
 80045b4:	e7fd      	b.n	80045b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045b6:	4b0f      	ldr	r3, [pc, #60]	@ (80045f4 <vPortValidateInterruptPriority+0x7c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80045be:	4b0e      	ldr	r3, [pc, #56]	@ (80045f8 <vPortValidateInterruptPriority+0x80>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	429a      	cmp	r2, r3
 80045c4:	d90b      	bls.n	80045de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80045c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	603b      	str	r3, [r7, #0]
}
 80045d8:	bf00      	nop
 80045da:	bf00      	nop
 80045dc:	e7fd      	b.n	80045da <vPortValidateInterruptPriority+0x62>
	}
 80045de:	bf00      	nop
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	e000e3f0 	.word	0xe000e3f0
 80045f0:	24004324 	.word	0x24004324
 80045f4:	e000ed0c 	.word	0xe000ed0c
 80045f8:	24004328 	.word	0x24004328

080045fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10b      	bne.n	8004628 <xQueueGenericReset+0x2c>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	60bb      	str	r3, [r7, #8]
}
 8004622:	bf00      	nop
 8004624:	bf00      	nop
 8004626:	e7fd      	b.n	8004624 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004628:	f7ff fec6 	bl	80043b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004634:	68f9      	ldr	r1, [r7, #12]
 8004636:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004638:	fb01 f303 	mul.w	r3, r1, r3
 800463c:	441a      	add	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004658:	3b01      	subs	r3, #1
 800465a:	68f9      	ldr	r1, [r7, #12]
 800465c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800465e:	fb01 f303 	mul.w	r3, r1, r3
 8004662:	441a      	add	r2, r3
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	22ff      	movs	r2, #255	@ 0xff
 800466c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	22ff      	movs	r2, #255	@ 0xff
 8004674:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d114      	bne.n	80046a8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d01a      	beq.n	80046bc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3310      	adds	r3, #16
 800468a:	4618      	mov	r0, r3
 800468c:	f001 f956 	bl	800593c <xTaskRemoveFromEventList>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d012      	beq.n	80046bc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004696:	4b0d      	ldr	r3, [pc, #52]	@ (80046cc <xQueueGenericReset+0xd0>)
 8004698:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800469c:	601a      	str	r2, [r3, #0]
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	e009      	b.n	80046bc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	3310      	adds	r3, #16
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff fca1 	bl	8003ff4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3324      	adds	r3, #36	@ 0x24
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff fc9c 	bl	8003ff4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80046bc:	f7ff feae 	bl	800441c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80046c0:	2301      	movs	r3, #1
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	e000ed04 	.word	0xe000ed04

080046d0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b08e      	sub	sp, #56	@ 0x38
 80046d4:	af02      	add	r7, sp, #8
 80046d6:	60f8      	str	r0, [r7, #12]
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10b      	bne.n	80046fc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80046e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80046f6:	bf00      	nop
 80046f8:	bf00      	nop
 80046fa:	e7fd      	b.n	80046f8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10b      	bne.n	800471a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004714:	bf00      	nop
 8004716:	bf00      	nop
 8004718:	e7fd      	b.n	8004716 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d002      	beq.n	8004726 <xQueueGenericCreateStatic+0x56>
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <xQueueGenericCreateStatic+0x5a>
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <xQueueGenericCreateStatic+0x5c>
 800472a:	2300      	movs	r3, #0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10b      	bne.n	8004748 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004734:	f383 8811 	msr	BASEPRI, r3
 8004738:	f3bf 8f6f 	isb	sy
 800473c:	f3bf 8f4f 	dsb	sy
 8004740:	623b      	str	r3, [r7, #32]
}
 8004742:	bf00      	nop
 8004744:	bf00      	nop
 8004746:	e7fd      	b.n	8004744 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d102      	bne.n	8004754 <xQueueGenericCreateStatic+0x84>
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <xQueueGenericCreateStatic+0x88>
 8004754:	2301      	movs	r3, #1
 8004756:	e000      	b.n	800475a <xQueueGenericCreateStatic+0x8a>
 8004758:	2300      	movs	r3, #0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10b      	bne.n	8004776 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	61fb      	str	r3, [r7, #28]
}
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	e7fd      	b.n	8004772 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004776:	2350      	movs	r3, #80	@ 0x50
 8004778:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b50      	cmp	r3, #80	@ 0x50
 800477e:	d00b      	beq.n	8004798 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	61bb      	str	r3, [r7, #24]
}
 8004792:	bf00      	nop
 8004794:	bf00      	nop
 8004796:	e7fd      	b.n	8004794 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004798:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800479e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00d      	beq.n	80047c0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80047a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047ac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80047b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b2:	9300      	str	r3, [sp, #0]
 80047b4:	4613      	mov	r3, r2
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f000 f840 	bl	8004840 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80047c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3730      	adds	r7, #48	@ 0x30
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b08a      	sub	sp, #40	@ 0x28
 80047ce:	af02      	add	r7, sp, #8
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	4613      	mov	r3, r2
 80047d6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10b      	bne.n	80047f6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	613b      	str	r3, [r7, #16]
}
 80047f0:	bf00      	nop
 80047f2:	bf00      	nop
 80047f4:	e7fd      	b.n	80047f2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	68ba      	ldr	r2, [r7, #8]
 80047fa:	fb02 f303 	mul.w	r3, r2, r3
 80047fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	3350      	adds	r3, #80	@ 0x50
 8004804:	4618      	mov	r0, r3
 8004806:	f7ff fa07 	bl	8003c18 <pvPortMalloc>
 800480a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d011      	beq.n	8004836 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	3350      	adds	r3, #80	@ 0x50
 800481a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004824:	79fa      	ldrb	r2, [r7, #7]
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	9300      	str	r3, [sp, #0]
 800482a:	4613      	mov	r3, r2
 800482c:	697a      	ldr	r2, [r7, #20]
 800482e:	68b9      	ldr	r1, [r7, #8]
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f000 f805 	bl	8004840 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004836:	69bb      	ldr	r3, [r7, #24]
	}
 8004838:	4618      	mov	r0, r3
 800483a:	3720      	adds	r7, #32
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d103      	bne.n	800485c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	e002      	b.n	8004862 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	68ba      	ldr	r2, [r7, #8]
 800486c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800486e:	2101      	movs	r1, #1
 8004870:	69b8      	ldr	r0, [r7, #24]
 8004872:	f7ff fec3 	bl	80045fc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004876:	69bb      	ldr	r3, [r7, #24]
 8004878:	78fa      	ldrb	r2, [r7, #3]
 800487a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800487e:	bf00      	nop
 8004880:	3710      	adds	r7, #16
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b08e      	sub	sp, #56	@ 0x38
 800488c:	af00      	add	r7, sp, #0
 800488e:	60f8      	str	r0, [r7, #12]
 8004890:	60b9      	str	r1, [r7, #8]
 8004892:	607a      	str	r2, [r7, #4]
 8004894:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004896:	2300      	movs	r3, #0
 8004898:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800489e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d10b      	bne.n	80048bc <xQueueGenericSend+0x34>
	__asm volatile
 80048a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a8:	f383 8811 	msr	BASEPRI, r3
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80048b6:	bf00      	nop
 80048b8:	bf00      	nop
 80048ba:	e7fd      	b.n	80048b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d103      	bne.n	80048ca <xQueueGenericSend+0x42>
 80048c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d101      	bne.n	80048ce <xQueueGenericSend+0x46>
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <xQueueGenericSend+0x48>
 80048ce:	2300      	movs	r3, #0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10b      	bne.n	80048ec <xQueueGenericSend+0x64>
	__asm volatile
 80048d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80048e6:	bf00      	nop
 80048e8:	bf00      	nop
 80048ea:	e7fd      	b.n	80048e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d103      	bne.n	80048fa <xQueueGenericSend+0x72>
 80048f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d101      	bne.n	80048fe <xQueueGenericSend+0x76>
 80048fa:	2301      	movs	r3, #1
 80048fc:	e000      	b.n	8004900 <xQueueGenericSend+0x78>
 80048fe:	2300      	movs	r3, #0
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10b      	bne.n	800491c <xQueueGenericSend+0x94>
	__asm volatile
 8004904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	623b      	str	r3, [r7, #32]
}
 8004916:	bf00      	nop
 8004918:	bf00      	nop
 800491a:	e7fd      	b.n	8004918 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800491c:	f001 f9ce 	bl	8005cbc <xTaskGetSchedulerState>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d102      	bne.n	800492c <xQueueGenericSend+0xa4>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d101      	bne.n	8004930 <xQueueGenericSend+0xa8>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <xQueueGenericSend+0xaa>
 8004930:	2300      	movs	r3, #0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d10b      	bne.n	800494e <xQueueGenericSend+0xc6>
	__asm volatile
 8004936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800493a:	f383 8811 	msr	BASEPRI, r3
 800493e:	f3bf 8f6f 	isb	sy
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	61fb      	str	r3, [r7, #28]
}
 8004948:	bf00      	nop
 800494a:	bf00      	nop
 800494c:	e7fd      	b.n	800494a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800494e:	f7ff fd33 	bl	80043b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004954:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800495a:	429a      	cmp	r2, r3
 800495c:	d302      	bcc.n	8004964 <xQueueGenericSend+0xdc>
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	2b02      	cmp	r3, #2
 8004962:	d129      	bne.n	80049b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004964:	683a      	ldr	r2, [r7, #0]
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800496a:	f000 fa0f 	bl	8004d8c <prvCopyDataToQueue>
 800496e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004974:	2b00      	cmp	r3, #0
 8004976:	d010      	beq.n	800499a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800497a:	3324      	adds	r3, #36	@ 0x24
 800497c:	4618      	mov	r0, r3
 800497e:	f000 ffdd 	bl	800593c <xTaskRemoveFromEventList>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d013      	beq.n	80049b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004988:	4b3f      	ldr	r3, [pc, #252]	@ (8004a88 <xQueueGenericSend+0x200>)
 800498a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800498e:	601a      	str	r2, [r3, #0]
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	e00a      	b.n	80049b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800499a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d007      	beq.n	80049b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80049a0:	4b39      	ldr	r3, [pc, #228]	@ (8004a88 <xQueueGenericSend+0x200>)
 80049a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80049b0:	f7ff fd34 	bl	800441c <vPortExitCritical>
				return pdPASS;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e063      	b.n	8004a80 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d103      	bne.n	80049c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049be:	f7ff fd2d 	bl	800441c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80049c2:	2300      	movs	r3, #0
 80049c4:	e05c      	b.n	8004a80 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d106      	bne.n	80049da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049cc:	f107 0314 	add.w	r3, r7, #20
 80049d0:	4618      	mov	r0, r3
 80049d2:	f001 f817 	bl	8005a04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049d6:	2301      	movs	r3, #1
 80049d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049da:	f7ff fd1f 	bl	800441c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049de:	f000 fd87 	bl	80054f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049e2:	f7ff fce9 	bl	80043b8 <vPortEnterCritical>
 80049e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80049ec:	b25b      	sxtb	r3, r3
 80049ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049f2:	d103      	bne.n	80049fc <xQueueGenericSend+0x174>
 80049f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a02:	b25b      	sxtb	r3, r3
 8004a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a08:	d103      	bne.n	8004a12 <xQueueGenericSend+0x18a>
 8004a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004a12:	f7ff fd03 	bl	800441c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a16:	1d3a      	adds	r2, r7, #4
 8004a18:	f107 0314 	add.w	r3, r7, #20
 8004a1c:	4611      	mov	r1, r2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f001 f806 	bl	8005a30 <xTaskCheckForTimeOut>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d124      	bne.n	8004a74 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004a2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a2c:	f000 faa6 	bl	8004f7c <prvIsQueueFull>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d018      	beq.n	8004a68 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a38:	3310      	adds	r3, #16
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	4611      	mov	r1, r2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 ff2a 	bl	8005898 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004a44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a46:	f000 fa31 	bl	8004eac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004a4a:	f000 fd5f 	bl	800550c <xTaskResumeAll>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f47f af7c 	bne.w	800494e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004a56:	4b0c      	ldr	r3, [pc, #48]	@ (8004a88 <xQueueGenericSend+0x200>)
 8004a58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a5c:	601a      	str	r2, [r3, #0]
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	e772      	b.n	800494e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004a68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a6a:	f000 fa1f 	bl	8004eac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a6e:	f000 fd4d 	bl	800550c <xTaskResumeAll>
 8004a72:	e76c      	b.n	800494e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004a76:	f000 fa19 	bl	8004eac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a7a:	f000 fd47 	bl	800550c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3738      	adds	r7, #56	@ 0x38
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	e000ed04 	.word	0xe000ed04

08004a8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b090      	sub	sp, #64	@ 0x40
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10b      	bne.n	8004abc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ab6:	bf00      	nop
 8004ab8:	bf00      	nop
 8004aba:	e7fd      	b.n	8004ab8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d103      	bne.n	8004aca <xQueueGenericSendFromISR+0x3e>
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <xQueueGenericSendFromISR+0x42>
 8004aca:	2301      	movs	r3, #1
 8004acc:	e000      	b.n	8004ad0 <xQueueGenericSendFromISR+0x44>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10b      	bne.n	8004aec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ae6:	bf00      	nop
 8004ae8:	bf00      	nop
 8004aea:	e7fd      	b.n	8004ae8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d103      	bne.n	8004afa <xQueueGenericSendFromISR+0x6e>
 8004af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004af4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <xQueueGenericSendFromISR+0x72>
 8004afa:	2301      	movs	r3, #1
 8004afc:	e000      	b.n	8004b00 <xQueueGenericSendFromISR+0x74>
 8004afe:	2300      	movs	r3, #0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d10b      	bne.n	8004b1c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	623b      	str	r3, [r7, #32]
}
 8004b16:	bf00      	nop
 8004b18:	bf00      	nop
 8004b1a:	e7fd      	b.n	8004b18 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b1c:	f7ff fd2c 	bl	8004578 <vPortValidateInterruptPriority>
	__asm volatile
 8004b20:	f3ef 8211 	mrs	r2, BASEPRI
 8004b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	61fa      	str	r2, [r7, #28]
 8004b36:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004b38:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b3a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d302      	bcc.n	8004b4e <xQueueGenericSendFromISR+0xc2>
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	2b02      	cmp	r3, #2
 8004b4c:	d12f      	bne.n	8004bae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b50:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b54:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b5e:	683a      	ldr	r2, [r7, #0]
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004b64:	f000 f912 	bl	8004d8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004b68:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b70:	d112      	bne.n	8004b98 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d016      	beq.n	8004ba8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b7c:	3324      	adds	r3, #36	@ 0x24
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fedc 	bl	800593c <xTaskRemoveFromEventList>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00e      	beq.n	8004ba8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00b      	beq.n	8004ba8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	601a      	str	r2, [r3, #0]
 8004b96:	e007      	b.n	8004ba8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	b2db      	uxtb	r3, r3
 8004ba0:	b25a      	sxtb	r2, r3
 8004ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004bac:	e001      	b.n	8004bb2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bb4:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f383 8811 	msr	BASEPRI, r3
}
 8004bbc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3740      	adds	r7, #64	@ 0x40
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08c      	sub	sp, #48	@ 0x30
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10b      	bne.n	8004bfa <xQueueReceive+0x32>
	__asm volatile
 8004be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	623b      	str	r3, [r7, #32]
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop
 8004bf8:	e7fd      	b.n	8004bf6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d103      	bne.n	8004c08 <xQueueReceive+0x40>
 8004c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <xQueueReceive+0x44>
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e000      	b.n	8004c0e <xQueueReceive+0x46>
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10b      	bne.n	8004c2a <xQueueReceive+0x62>
	__asm volatile
 8004c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c16:	f383 8811 	msr	BASEPRI, r3
 8004c1a:	f3bf 8f6f 	isb	sy
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	61fb      	str	r3, [r7, #28]
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop
 8004c28:	e7fd      	b.n	8004c26 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c2a:	f001 f847 	bl	8005cbc <xTaskGetSchedulerState>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d102      	bne.n	8004c3a <xQueueReceive+0x72>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d101      	bne.n	8004c3e <xQueueReceive+0x76>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e000      	b.n	8004c40 <xQueueReceive+0x78>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10b      	bne.n	8004c5c <xQueueReceive+0x94>
	__asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	61bb      	str	r3, [r7, #24]
}
 8004c56:	bf00      	nop
 8004c58:	bf00      	nop
 8004c5a:	e7fd      	b.n	8004c58 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c5c:	f7ff fbac 	bl	80043b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c64:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01f      	beq.n	8004cac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c70:	f000 f8f6 	bl	8004e60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c76:	1e5a      	subs	r2, r3, #1
 8004c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00f      	beq.n	8004ca4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c86:	3310      	adds	r3, #16
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 fe57 	bl	800593c <xTaskRemoveFromEventList>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c94:	4b3c      	ldr	r3, [pc, #240]	@ (8004d88 <xQueueReceive+0x1c0>)
 8004c96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004ca4:	f7ff fbba 	bl	800441c <vPortExitCritical>
				return pdPASS;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e069      	b.n	8004d80 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d103      	bne.n	8004cba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004cb2:	f7ff fbb3 	bl	800441c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	e062      	b.n	8004d80 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d106      	bne.n	8004cce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004cc0:	f107 0310 	add.w	r3, r7, #16
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fe9d 	bl	8005a04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004cce:	f7ff fba5 	bl	800441c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004cd2:	f000 fc0d 	bl	80054f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004cd6:	f7ff fb6f 	bl	80043b8 <vPortEnterCritical>
 8004cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ce0:	b25b      	sxtb	r3, r3
 8004ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce6:	d103      	bne.n	8004cf0 <xQueueReceive+0x128>
 8004ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cf6:	b25b      	sxtb	r3, r3
 8004cf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cfc:	d103      	bne.n	8004d06 <xQueueReceive+0x13e>
 8004cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004d06:	f7ff fb89 	bl	800441c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004d0a:	1d3a      	adds	r2, r7, #4
 8004d0c:	f107 0310 	add.w	r3, r7, #16
 8004d10:	4611      	mov	r1, r2
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 fe8c 	bl	8005a30 <xTaskCheckForTimeOut>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d123      	bne.n	8004d66 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d20:	f000 f916 	bl	8004f50 <prvIsQueueEmpty>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d017      	beq.n	8004d5a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2c:	3324      	adds	r3, #36	@ 0x24
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	4611      	mov	r1, r2
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fdb0 	bl	8005898 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004d38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d3a:	f000 f8b7 	bl	8004eac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004d3e:	f000 fbe5 	bl	800550c <xTaskResumeAll>
 8004d42:	4603      	mov	r3, r0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d189      	bne.n	8004c5c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004d48:	4b0f      	ldr	r3, [pc, #60]	@ (8004d88 <xQueueReceive+0x1c0>)
 8004d4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	f3bf 8f4f 	dsb	sy
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	e780      	b.n	8004c5c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004d5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d5c:	f000 f8a6 	bl	8004eac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d60:	f000 fbd4 	bl	800550c <xTaskResumeAll>
 8004d64:	e77a      	b.n	8004c5c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004d66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d68:	f000 f8a0 	bl	8004eac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d6c:	f000 fbce 	bl	800550c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d72:	f000 f8ed 	bl	8004f50 <prvIsQueueEmpty>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f43f af6f 	beq.w	8004c5c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3730      	adds	r7, #48	@ 0x30
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	e000ed04 	.word	0xe000ed04

08004d8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004da0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d10d      	bne.n	8004dc6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d14d      	bne.n	8004e4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 ff9e 	bl	8005cf8 <xTaskPriorityDisinherit>
 8004dbc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	609a      	str	r2, [r3, #8]
 8004dc4:	e043      	b.n	8004e4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d119      	bne.n	8004e00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6858      	ldr	r0, [r3, #4]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd4:	461a      	mov	r2, r3
 8004dd6:	68b9      	ldr	r1, [r7, #8]
 8004dd8:	f001 fbd8 	bl	800658c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de4:	441a      	add	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d32b      	bcc.n	8004e4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	605a      	str	r2, [r3, #4]
 8004dfe:	e026      	b.n	8004e4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	68d8      	ldr	r0, [r3, #12]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e08:	461a      	mov	r2, r3
 8004e0a:	68b9      	ldr	r1, [r7, #8]
 8004e0c:	f001 fbbe 	bl	800658c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e18:	425b      	negs	r3, r3
 8004e1a:	441a      	add	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	68da      	ldr	r2, [r3, #12]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	d207      	bcs.n	8004e3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e34:	425b      	negs	r3, r3
 8004e36:	441a      	add	r2, r3
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d105      	bne.n	8004e4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004e56:	697b      	ldr	r3, [r7, #20]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d018      	beq.n	8004ea4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7a:	441a      	add	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68da      	ldr	r2, [r3, #12]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d303      	bcc.n	8004e94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681a      	ldr	r2, [r3, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68d9      	ldr	r1, [r3, #12]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9c:	461a      	mov	r2, r3
 8004e9e:	6838      	ldr	r0, [r7, #0]
 8004ea0:	f001 fb74 	bl	800658c <memcpy>
	}
}
 8004ea4:	bf00      	nop
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004eb4:	f7ff fa80 	bl	80043b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ebe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ec0:	e011      	b.n	8004ee6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d012      	beq.n	8004ef0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3324      	adds	r3, #36	@ 0x24
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fd34 	bl	800593c <xTaskRemoveFromEventList>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004eda:	f000 fe0d 	bl	8005af8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	dce9      	bgt.n	8004ec2 <prvUnlockQueue+0x16>
 8004eee:	e000      	b.n	8004ef2 <prvUnlockQueue+0x46>
					break;
 8004ef0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	22ff      	movs	r2, #255	@ 0xff
 8004ef6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004efa:	f7ff fa8f 	bl	800441c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004efe:	f7ff fa5b 	bl	80043b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f08:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f0a:	e011      	b.n	8004f30 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d012      	beq.n	8004f3a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3310      	adds	r3, #16
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f000 fd0f 	bl	800593c <xTaskRemoveFromEventList>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004f24:	f000 fde8 	bl	8005af8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004f28:	7bbb      	ldrb	r3, [r7, #14]
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	dce9      	bgt.n	8004f0c <prvUnlockQueue+0x60>
 8004f38:	e000      	b.n	8004f3c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004f3a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	22ff      	movs	r2, #255	@ 0xff
 8004f40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004f44:	f7ff fa6a 	bl	800441c <vPortExitCritical>
}
 8004f48:	bf00      	nop
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f58:	f7ff fa2e 	bl	80043b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d102      	bne.n	8004f6a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004f64:	2301      	movs	r3, #1
 8004f66:	60fb      	str	r3, [r7, #12]
 8004f68:	e001      	b.n	8004f6e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f6e:	f7ff fa55 	bl	800441c <vPortExitCritical>

	return xReturn;
 8004f72:	68fb      	ldr	r3, [r7, #12]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f84:	f7ff fa18 	bl	80043b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d102      	bne.n	8004f9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f94:	2301      	movs	r3, #1
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	e001      	b.n	8004f9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f9e:	f7ff fa3d 	bl	800441c <vPortExitCritical>

	return xReturn;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	e014      	b.n	8004fe6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004fbc:	4a0f      	ldr	r2, [pc, #60]	@ (8004ffc <vQueueAddToRegistry+0x50>)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d10b      	bne.n	8004fe0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004fc8:	490c      	ldr	r1, [pc, #48]	@ (8004ffc <vQueueAddToRegistry+0x50>)
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8004ffc <vQueueAddToRegistry+0x50>)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	4413      	add	r3, r2
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004fde:	e006      	b.n	8004fee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b07      	cmp	r3, #7
 8004fea:	d9e7      	bls.n	8004fbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004fec:	bf00      	nop
 8004fee:	bf00      	nop
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	2400432c 	.word	0x2400432c

08005000 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af00      	add	r7, sp, #0
 8005006:	60f8      	str	r0, [r7, #12]
 8005008:	60b9      	str	r1, [r7, #8]
 800500a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005010:	f7ff f9d2 	bl	80043b8 <vPortEnterCritical>
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800501a:	b25b      	sxtb	r3, r3
 800501c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005020:	d103      	bne.n	800502a <vQueueWaitForMessageRestricted+0x2a>
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005030:	b25b      	sxtb	r3, r3
 8005032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005036:	d103      	bne.n	8005040 <vQueueWaitForMessageRestricted+0x40>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005040:	f7ff f9ec 	bl	800441c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005048:	2b00      	cmp	r3, #0
 800504a:	d106      	bne.n	800505a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	3324      	adds	r3, #36	@ 0x24
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	68b9      	ldr	r1, [r7, #8]
 8005054:	4618      	mov	r0, r3
 8005056:	f000 fc45 	bl	80058e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800505a:	6978      	ldr	r0, [r7, #20]
 800505c:	f7ff ff26 	bl	8004eac <prvUnlockQueue>
	}
 8005060:	bf00      	nop
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08e      	sub	sp, #56	@ 0x38
 800506c:	af04      	add	r7, sp, #16
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005076:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10b      	bne.n	8005094 <xTaskCreateStatic+0x2c>
	__asm volatile
 800507c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	623b      	str	r3, [r7, #32]
}
 800508e:	bf00      	nop
 8005090:	bf00      	nop
 8005092:	e7fd      	b.n	8005090 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10b      	bne.n	80050b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800509a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509e:	f383 8811 	msr	BASEPRI, r3
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	f3bf 8f4f 	dsb	sy
 80050aa:	61fb      	str	r3, [r7, #28]
}
 80050ac:	bf00      	nop
 80050ae:	bf00      	nop
 80050b0:	e7fd      	b.n	80050ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050b2:	235c      	movs	r3, #92	@ 0x5c
 80050b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80050ba:	d00b      	beq.n	80050d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	61bb      	str	r3, [r7, #24]
}
 80050ce:	bf00      	nop
 80050d0:	bf00      	nop
 80050d2:	e7fd      	b.n	80050d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d01e      	beq.n	800511a <xTaskCreateStatic+0xb2>
 80050dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d01b      	beq.n	800511a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80050e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80050ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80050ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ee:	2202      	movs	r2, #2
 80050f0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80050f4:	2300      	movs	r3, #0
 80050f6:	9303      	str	r3, [sp, #12]
 80050f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fa:	9302      	str	r3, [sp, #8]
 80050fc:	f107 0314 	add.w	r3, r7, #20
 8005100:	9301      	str	r3, [sp, #4]
 8005102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005104:	9300      	str	r3, [sp, #0]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 f850 	bl	80051b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005112:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005114:	f000 f8de 	bl	80052d4 <prvAddNewTaskToReadyList>
 8005118:	e001      	b.n	800511e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800511e:	697b      	ldr	r3, [r7, #20]
	}
 8005120:	4618      	mov	r0, r3
 8005122:	3728      	adds	r7, #40	@ 0x28
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08c      	sub	sp, #48	@ 0x30
 800512c:	af04      	add	r7, sp, #16
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	4613      	mov	r3, r2
 8005136:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005138:	88fb      	ldrh	r3, [r7, #6]
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4618      	mov	r0, r3
 800513e:	f7fe fd6b 	bl	8003c18 <pvPortMalloc>
 8005142:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00e      	beq.n	8005168 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800514a:	205c      	movs	r0, #92	@ 0x5c
 800514c:	f7fe fd64 	bl	8003c18 <pvPortMalloc>
 8005150:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	631a      	str	r2, [r3, #48]	@ 0x30
 800515e:	e005      	b.n	800516c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005160:	6978      	ldr	r0, [r7, #20]
 8005162:	f7fe fe27 	bl	8003db4 <vPortFree>
 8005166:	e001      	b.n	800516c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005168:	2300      	movs	r3, #0
 800516a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d017      	beq.n	80051a2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800517a:	88fa      	ldrh	r2, [r7, #6]
 800517c:	2300      	movs	r3, #0
 800517e:	9303      	str	r3, [sp, #12]
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	9302      	str	r3, [sp, #8]
 8005184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005186:	9301      	str	r3, [sp, #4]
 8005188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518a:	9300      	str	r3, [sp, #0]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	68b9      	ldr	r1, [r7, #8]
 8005190:	68f8      	ldr	r0, [r7, #12]
 8005192:	f000 f80e 	bl	80051b2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005196:	69f8      	ldr	r0, [r7, #28]
 8005198:	f000 f89c 	bl	80052d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800519c:	2301      	movs	r3, #1
 800519e:	61bb      	str	r3, [r7, #24]
 80051a0:	e002      	b.n	80051a8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051a2:	f04f 33ff 	mov.w	r3, #4294967295
 80051a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051a8:	69bb      	ldr	r3, [r7, #24]
	}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3720      	adds	r7, #32
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b088      	sub	sp, #32
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	60f8      	str	r0, [r7, #12]
 80051ba:	60b9      	str	r1, [r7, #8]
 80051bc:	607a      	str	r2, [r7, #4]
 80051be:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	461a      	mov	r2, r3
 80051ca:	21a5      	movs	r1, #165	@ 0xa5
 80051cc:	f001 f9b2 	bl	8006534 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051d4:	6879      	ldr	r1, [r7, #4]
 80051d6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80051da:	440b      	add	r3, r1
 80051dc:	009b      	lsls	r3, r3, #2
 80051de:	4413      	add	r3, r2
 80051e0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	f023 0307 	bic.w	r3, r3, #7
 80051e8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d00b      	beq.n	800520c <prvInitialiseNewTask+0x5a>
	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	617b      	str	r3, [r7, #20]
}
 8005206:	bf00      	nop
 8005208:	bf00      	nop
 800520a:	e7fd      	b.n	8005208 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d01f      	beq.n	8005252 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005212:	2300      	movs	r3, #0
 8005214:	61fb      	str	r3, [r7, #28]
 8005216:	e012      	b.n	800523e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	4413      	add	r3, r2
 800521e:	7819      	ldrb	r1, [r3, #0]
 8005220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	4413      	add	r3, r2
 8005226:	3334      	adds	r3, #52	@ 0x34
 8005228:	460a      	mov	r2, r1
 800522a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	69fb      	ldr	r3, [r7, #28]
 8005230:	4413      	add	r3, r2
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d006      	beq.n	8005246 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	3301      	adds	r3, #1
 800523c:	61fb      	str	r3, [r7, #28]
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	2b0f      	cmp	r3, #15
 8005242:	d9e9      	bls.n	8005218 <prvInitialiseNewTask+0x66>
 8005244:	e000      	b.n	8005248 <prvInitialiseNewTask+0x96>
			{
				break;
 8005246:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524a:	2200      	movs	r2, #0
 800524c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005250:	e003      	b.n	800525a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005254:	2200      	movs	r2, #0
 8005256:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800525a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525c:	2b37      	cmp	r3, #55	@ 0x37
 800525e:	d901      	bls.n	8005264 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005260:	2337      	movs	r3, #55	@ 0x37
 8005262:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005266:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005268:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800526a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800526e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005272:	2200      	movs	r2, #0
 8005274:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005278:	3304      	adds	r3, #4
 800527a:	4618      	mov	r0, r3
 800527c:	f7fe feda 	bl	8004034 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005280:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005282:	3318      	adds	r3, #24
 8005284:	4618      	mov	r0, r3
 8005286:	f7fe fed5 	bl	8004034 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800528a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800528e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005292:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005298:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800529a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800529e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a2:	2200      	movs	r2, #0
 80052a4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	68f9      	ldr	r1, [r7, #12]
 80052b2:	69b8      	ldr	r0, [r7, #24]
 80052b4:	f7fe ff52 	bl	800415c <pxPortInitialiseStack>
 80052b8:	4602      	mov	r2, r0
 80052ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d002      	beq.n	80052ca <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052ca:	bf00      	nop
 80052cc:	3720      	adds	r7, #32
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052dc:	f7ff f86c 	bl	80043b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052e0:	4b2d      	ldr	r3, [pc, #180]	@ (8005398 <prvAddNewTaskToReadyList+0xc4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3301      	adds	r3, #1
 80052e6:	4a2c      	ldr	r2, [pc, #176]	@ (8005398 <prvAddNewTaskToReadyList+0xc4>)
 80052e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052ea:	4b2c      	ldr	r3, [pc, #176]	@ (800539c <prvAddNewTaskToReadyList+0xc8>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d109      	bne.n	8005306 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80052f2:	4a2a      	ldr	r2, [pc, #168]	@ (800539c <prvAddNewTaskToReadyList+0xc8>)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052f8:	4b27      	ldr	r3, [pc, #156]	@ (8005398 <prvAddNewTaskToReadyList+0xc4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	d110      	bne.n	8005322 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005300:	f000 fc1e 	bl	8005b40 <prvInitialiseTaskLists>
 8005304:	e00d      	b.n	8005322 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005306:	4b26      	ldr	r3, [pc, #152]	@ (80053a0 <prvAddNewTaskToReadyList+0xcc>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d109      	bne.n	8005322 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800530e:	4b23      	ldr	r3, [pc, #140]	@ (800539c <prvAddNewTaskToReadyList+0xc8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005318:	429a      	cmp	r2, r3
 800531a:	d802      	bhi.n	8005322 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800531c:	4a1f      	ldr	r2, [pc, #124]	@ (800539c <prvAddNewTaskToReadyList+0xc8>)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005322:	4b20      	ldr	r3, [pc, #128]	@ (80053a4 <prvAddNewTaskToReadyList+0xd0>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3301      	adds	r3, #1
 8005328:	4a1e      	ldr	r2, [pc, #120]	@ (80053a4 <prvAddNewTaskToReadyList+0xd0>)
 800532a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800532c:	4b1d      	ldr	r3, [pc, #116]	@ (80053a4 <prvAddNewTaskToReadyList+0xd0>)
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005338:	4b1b      	ldr	r3, [pc, #108]	@ (80053a8 <prvAddNewTaskToReadyList+0xd4>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d903      	bls.n	8005348 <prvAddNewTaskToReadyList+0x74>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005344:	4a18      	ldr	r2, [pc, #96]	@ (80053a8 <prvAddNewTaskToReadyList+0xd4>)
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4a15      	ldr	r2, [pc, #84]	@ (80053ac <prvAddNewTaskToReadyList+0xd8>)
 8005356:	441a      	add	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	3304      	adds	r3, #4
 800535c:	4619      	mov	r1, r3
 800535e:	4610      	mov	r0, r2
 8005360:	f7fe fe75 	bl	800404e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005364:	f7ff f85a 	bl	800441c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005368:	4b0d      	ldr	r3, [pc, #52]	@ (80053a0 <prvAddNewTaskToReadyList+0xcc>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00e      	beq.n	800538e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005370:	4b0a      	ldr	r3, [pc, #40]	@ (800539c <prvAddNewTaskToReadyList+0xc8>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537a:	429a      	cmp	r2, r3
 800537c:	d207      	bcs.n	800538e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800537e:	4b0c      	ldr	r3, [pc, #48]	@ (80053b0 <prvAddNewTaskToReadyList+0xdc>)
 8005380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	f3bf 8f4f 	dsb	sy
 800538a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800538e:	bf00      	nop
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	24004840 	.word	0x24004840
 800539c:	2400436c 	.word	0x2400436c
 80053a0:	2400484c 	.word	0x2400484c
 80053a4:	2400485c 	.word	0x2400485c
 80053a8:	24004848 	.word	0x24004848
 80053ac:	24004370 	.word	0x24004370
 80053b0:	e000ed04 	.word	0xe000ed04

080053b4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053bc:	2300      	movs	r3, #0
 80053be:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d018      	beq.n	80053f8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053c6:	4b14      	ldr	r3, [pc, #80]	@ (8005418 <vTaskDelay+0x64>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00b      	beq.n	80053e6 <vTaskDelay+0x32>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	60bb      	str	r3, [r7, #8]
}
 80053e0:	bf00      	nop
 80053e2:	bf00      	nop
 80053e4:	e7fd      	b.n	80053e2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80053e6:	f000 f883 	bl	80054f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053ea:	2100      	movs	r1, #0
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 fcf3 	bl	8005dd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053f2:	f000 f88b 	bl	800550c <xTaskResumeAll>
 80053f6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d107      	bne.n	800540e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80053fe:	4b07      	ldr	r3, [pc, #28]	@ (800541c <vTaskDelay+0x68>)
 8005400:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800540e:	bf00      	nop
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	24004868 	.word	0x24004868
 800541c:	e000ed04 	.word	0xe000ed04

08005420 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08a      	sub	sp, #40	@ 0x28
 8005424:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005426:	2300      	movs	r3, #0
 8005428:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800542a:	2300      	movs	r3, #0
 800542c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800542e:	463a      	mov	r2, r7
 8005430:	1d39      	adds	r1, r7, #4
 8005432:	f107 0308 	add.w	r3, r7, #8
 8005436:	4618      	mov	r0, r3
 8005438:	f7fe fbba 	bl	8003bb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800543c:	6839      	ldr	r1, [r7, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68ba      	ldr	r2, [r7, #8]
 8005442:	9202      	str	r2, [sp, #8]
 8005444:	9301      	str	r3, [sp, #4]
 8005446:	2300      	movs	r3, #0
 8005448:	9300      	str	r3, [sp, #0]
 800544a:	2300      	movs	r3, #0
 800544c:	460a      	mov	r2, r1
 800544e:	4922      	ldr	r1, [pc, #136]	@ (80054d8 <vTaskStartScheduler+0xb8>)
 8005450:	4822      	ldr	r0, [pc, #136]	@ (80054dc <vTaskStartScheduler+0xbc>)
 8005452:	f7ff fe09 	bl	8005068 <xTaskCreateStatic>
 8005456:	4603      	mov	r3, r0
 8005458:	4a21      	ldr	r2, [pc, #132]	@ (80054e0 <vTaskStartScheduler+0xc0>)
 800545a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800545c:	4b20      	ldr	r3, [pc, #128]	@ (80054e0 <vTaskStartScheduler+0xc0>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005464:	2301      	movs	r3, #1
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	e001      	b.n	800546e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800546a:	2300      	movs	r3, #0
 800546c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2b01      	cmp	r3, #1
 8005472:	d102      	bne.n	800547a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005474:	f000 fd04 	bl	8005e80 <xTimerCreateTimerTask>
 8005478:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d116      	bne.n	80054ae <vTaskStartScheduler+0x8e>
	__asm volatile
 8005480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	613b      	str	r3, [r7, #16]
}
 8005492:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005494:	4b13      	ldr	r3, [pc, #76]	@ (80054e4 <vTaskStartScheduler+0xc4>)
 8005496:	f04f 32ff 	mov.w	r2, #4294967295
 800549a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800549c:	4b12      	ldr	r3, [pc, #72]	@ (80054e8 <vTaskStartScheduler+0xc8>)
 800549e:	2201      	movs	r2, #1
 80054a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80054a2:	4b12      	ldr	r3, [pc, #72]	@ (80054ec <vTaskStartScheduler+0xcc>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054a8:	f7fe fee2 	bl	8004270 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054ac:	e00f      	b.n	80054ce <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b4:	d10b      	bne.n	80054ce <vTaskStartScheduler+0xae>
	__asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	60fb      	str	r3, [r7, #12]
}
 80054c8:	bf00      	nop
 80054ca:	bf00      	nop
 80054cc:	e7fd      	b.n	80054ca <vTaskStartScheduler+0xaa>
}
 80054ce:	bf00      	nop
 80054d0:	3718      	adds	r7, #24
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	080065fc 	.word	0x080065fc
 80054dc:	08005b11 	.word	0x08005b11
 80054e0:	24004864 	.word	0x24004864
 80054e4:	24004860 	.word	0x24004860
 80054e8:	2400484c 	.word	0x2400484c
 80054ec:	24004844 	.word	0x24004844

080054f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054f0:	b480      	push	{r7}
 80054f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054f4:	4b04      	ldr	r3, [pc, #16]	@ (8005508 <vTaskSuspendAll+0x18>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	3301      	adds	r3, #1
 80054fa:	4a03      	ldr	r2, [pc, #12]	@ (8005508 <vTaskSuspendAll+0x18>)
 80054fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054fe:	bf00      	nop
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	24004868 	.word	0x24004868

0800550c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005512:	2300      	movs	r3, #0
 8005514:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005516:	2300      	movs	r3, #0
 8005518:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800551a:	4b42      	ldr	r3, [pc, #264]	@ (8005624 <xTaskResumeAll+0x118>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10b      	bne.n	800553a <xTaskResumeAll+0x2e>
	__asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	603b      	str	r3, [r7, #0]
}
 8005534:	bf00      	nop
 8005536:	bf00      	nop
 8005538:	e7fd      	b.n	8005536 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800553a:	f7fe ff3d 	bl	80043b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800553e:	4b39      	ldr	r3, [pc, #228]	@ (8005624 <xTaskResumeAll+0x118>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	3b01      	subs	r3, #1
 8005544:	4a37      	ldr	r2, [pc, #220]	@ (8005624 <xTaskResumeAll+0x118>)
 8005546:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005548:	4b36      	ldr	r3, [pc, #216]	@ (8005624 <xTaskResumeAll+0x118>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d162      	bne.n	8005616 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005550:	4b35      	ldr	r3, [pc, #212]	@ (8005628 <xTaskResumeAll+0x11c>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d05e      	beq.n	8005616 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005558:	e02f      	b.n	80055ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800555a:	4b34      	ldr	r3, [pc, #208]	@ (800562c <xTaskResumeAll+0x120>)
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	3318      	adds	r3, #24
 8005566:	4618      	mov	r0, r3
 8005568:	f7fe fdce 	bl	8004108 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	3304      	adds	r3, #4
 8005570:	4618      	mov	r0, r3
 8005572:	f7fe fdc9 	bl	8004108 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800557a:	4b2d      	ldr	r3, [pc, #180]	@ (8005630 <xTaskResumeAll+0x124>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d903      	bls.n	800558a <xTaskResumeAll+0x7e>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005586:	4a2a      	ldr	r2, [pc, #168]	@ (8005630 <xTaskResumeAll+0x124>)
 8005588:	6013      	str	r3, [r2, #0]
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800558e:	4613      	mov	r3, r2
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	4a27      	ldr	r2, [pc, #156]	@ (8005634 <xTaskResumeAll+0x128>)
 8005598:	441a      	add	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	3304      	adds	r3, #4
 800559e:	4619      	mov	r1, r3
 80055a0:	4610      	mov	r0, r2
 80055a2:	f7fe fd54 	bl	800404e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055aa:	4b23      	ldr	r3, [pc, #140]	@ (8005638 <xTaskResumeAll+0x12c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d302      	bcc.n	80055ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80055b4:	4b21      	ldr	r3, [pc, #132]	@ (800563c <xTaskResumeAll+0x130>)
 80055b6:	2201      	movs	r2, #1
 80055b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055ba:	4b1c      	ldr	r3, [pc, #112]	@ (800562c <xTaskResumeAll+0x120>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1cb      	bne.n	800555a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055c8:	f000 fb58 	bl	8005c7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055cc:	4b1c      	ldr	r3, [pc, #112]	@ (8005640 <xTaskResumeAll+0x134>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d010      	beq.n	80055fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055d8:	f000 f846 	bl	8005668 <xTaskIncrementTick>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d002      	beq.n	80055e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80055e2:	4b16      	ldr	r3, [pc, #88]	@ (800563c <xTaskResumeAll+0x130>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	3b01      	subs	r3, #1
 80055ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1f1      	bne.n	80055d8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80055f4:	4b12      	ldr	r3, [pc, #72]	@ (8005640 <xTaskResumeAll+0x134>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055fa:	4b10      	ldr	r3, [pc, #64]	@ (800563c <xTaskResumeAll+0x130>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d009      	beq.n	8005616 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005602:	2301      	movs	r3, #1
 8005604:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005606:	4b0f      	ldr	r3, [pc, #60]	@ (8005644 <xTaskResumeAll+0x138>)
 8005608:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800560c:	601a      	str	r2, [r3, #0]
 800560e:	f3bf 8f4f 	dsb	sy
 8005612:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005616:	f7fe ff01 	bl	800441c <vPortExitCritical>

	return xAlreadyYielded;
 800561a:	68bb      	ldr	r3, [r7, #8]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	24004868 	.word	0x24004868
 8005628:	24004840 	.word	0x24004840
 800562c:	24004800 	.word	0x24004800
 8005630:	24004848 	.word	0x24004848
 8005634:	24004370 	.word	0x24004370
 8005638:	2400436c 	.word	0x2400436c
 800563c:	24004854 	.word	0x24004854
 8005640:	24004850 	.word	0x24004850
 8005644:	e000ed04 	.word	0xe000ed04

08005648 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005648:	b480      	push	{r7}
 800564a:	b083      	sub	sp, #12
 800564c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800564e:	4b05      	ldr	r3, [pc, #20]	@ (8005664 <xTaskGetTickCount+0x1c>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005654:	687b      	ldr	r3, [r7, #4]
}
 8005656:	4618      	mov	r0, r3
 8005658:	370c      	adds	r7, #12
 800565a:	46bd      	mov	sp, r7
 800565c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005660:	4770      	bx	lr
 8005662:	bf00      	nop
 8005664:	24004844 	.word	0x24004844

08005668 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b086      	sub	sp, #24
 800566c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800566e:	2300      	movs	r3, #0
 8005670:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005672:	4b4f      	ldr	r3, [pc, #316]	@ (80057b0 <xTaskIncrementTick+0x148>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	f040 8090 	bne.w	800579c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800567c:	4b4d      	ldr	r3, [pc, #308]	@ (80057b4 <xTaskIncrementTick+0x14c>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	3301      	adds	r3, #1
 8005682:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005684:	4a4b      	ldr	r2, [pc, #300]	@ (80057b4 <xTaskIncrementTick+0x14c>)
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d121      	bne.n	80056d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005690:	4b49      	ldr	r3, [pc, #292]	@ (80057b8 <xTaskIncrementTick+0x150>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00b      	beq.n	80056b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800569e:	f383 8811 	msr	BASEPRI, r3
 80056a2:	f3bf 8f6f 	isb	sy
 80056a6:	f3bf 8f4f 	dsb	sy
 80056aa:	603b      	str	r3, [r7, #0]
}
 80056ac:	bf00      	nop
 80056ae:	bf00      	nop
 80056b0:	e7fd      	b.n	80056ae <xTaskIncrementTick+0x46>
 80056b2:	4b41      	ldr	r3, [pc, #260]	@ (80057b8 <xTaskIncrementTick+0x150>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60fb      	str	r3, [r7, #12]
 80056b8:	4b40      	ldr	r3, [pc, #256]	@ (80057bc <xTaskIncrementTick+0x154>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a3e      	ldr	r2, [pc, #248]	@ (80057b8 <xTaskIncrementTick+0x150>)
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	4a3e      	ldr	r2, [pc, #248]	@ (80057bc <xTaskIncrementTick+0x154>)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	4b3e      	ldr	r3, [pc, #248]	@ (80057c0 <xTaskIncrementTick+0x158>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3301      	adds	r3, #1
 80056cc:	4a3c      	ldr	r2, [pc, #240]	@ (80057c0 <xTaskIncrementTick+0x158>)
 80056ce:	6013      	str	r3, [r2, #0]
 80056d0:	f000 fad4 	bl	8005c7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056d4:	4b3b      	ldr	r3, [pc, #236]	@ (80057c4 <xTaskIncrementTick+0x15c>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d349      	bcc.n	8005772 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056de:	4b36      	ldr	r3, [pc, #216]	@ (80057b8 <xTaskIncrementTick+0x150>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d104      	bne.n	80056f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056e8:	4b36      	ldr	r3, [pc, #216]	@ (80057c4 <xTaskIncrementTick+0x15c>)
 80056ea:	f04f 32ff 	mov.w	r2, #4294967295
 80056ee:	601a      	str	r2, [r3, #0]
					break;
 80056f0:	e03f      	b.n	8005772 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056f2:	4b31      	ldr	r3, [pc, #196]	@ (80057b8 <xTaskIncrementTick+0x150>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	429a      	cmp	r2, r3
 8005708:	d203      	bcs.n	8005712 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800570a:	4a2e      	ldr	r2, [pc, #184]	@ (80057c4 <xTaskIncrementTick+0x15c>)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005710:	e02f      	b.n	8005772 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	3304      	adds	r3, #4
 8005716:	4618      	mov	r0, r3
 8005718:	f7fe fcf6 	bl	8004108 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005720:	2b00      	cmp	r3, #0
 8005722:	d004      	beq.n	800572e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	3318      	adds	r3, #24
 8005728:	4618      	mov	r0, r3
 800572a:	f7fe fced 	bl	8004108 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005732:	4b25      	ldr	r3, [pc, #148]	@ (80057c8 <xTaskIncrementTick+0x160>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	429a      	cmp	r2, r3
 8005738:	d903      	bls.n	8005742 <xTaskIncrementTick+0xda>
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573e:	4a22      	ldr	r2, [pc, #136]	@ (80057c8 <xTaskIncrementTick+0x160>)
 8005740:	6013      	str	r3, [r2, #0]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005746:	4613      	mov	r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	4413      	add	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4a1f      	ldr	r2, [pc, #124]	@ (80057cc <xTaskIncrementTick+0x164>)
 8005750:	441a      	add	r2, r3
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	3304      	adds	r3, #4
 8005756:	4619      	mov	r1, r3
 8005758:	4610      	mov	r0, r2
 800575a:	f7fe fc78 	bl	800404e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005762:	4b1b      	ldr	r3, [pc, #108]	@ (80057d0 <xTaskIncrementTick+0x168>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005768:	429a      	cmp	r2, r3
 800576a:	d3b8      	bcc.n	80056de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800576c:	2301      	movs	r3, #1
 800576e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005770:	e7b5      	b.n	80056de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005772:	4b17      	ldr	r3, [pc, #92]	@ (80057d0 <xTaskIncrementTick+0x168>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005778:	4914      	ldr	r1, [pc, #80]	@ (80057cc <xTaskIncrementTick+0x164>)
 800577a:	4613      	mov	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	4413      	add	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2b01      	cmp	r3, #1
 8005788:	d901      	bls.n	800578e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800578a:	2301      	movs	r3, #1
 800578c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800578e:	4b11      	ldr	r3, [pc, #68]	@ (80057d4 <xTaskIncrementTick+0x16c>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d007      	beq.n	80057a6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005796:	2301      	movs	r3, #1
 8005798:	617b      	str	r3, [r7, #20]
 800579a:	e004      	b.n	80057a6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800579c:	4b0e      	ldr	r3, [pc, #56]	@ (80057d8 <xTaskIncrementTick+0x170>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3301      	adds	r3, #1
 80057a2:	4a0d      	ldr	r2, [pc, #52]	@ (80057d8 <xTaskIncrementTick+0x170>)
 80057a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80057a6:	697b      	ldr	r3, [r7, #20]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3718      	adds	r7, #24
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	24004868 	.word	0x24004868
 80057b4:	24004844 	.word	0x24004844
 80057b8:	240047f8 	.word	0x240047f8
 80057bc:	240047fc 	.word	0x240047fc
 80057c0:	24004858 	.word	0x24004858
 80057c4:	24004860 	.word	0x24004860
 80057c8:	24004848 	.word	0x24004848
 80057cc:	24004370 	.word	0x24004370
 80057d0:	2400436c 	.word	0x2400436c
 80057d4:	24004854 	.word	0x24004854
 80057d8:	24004850 	.word	0x24004850

080057dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057dc:	b480      	push	{r7}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057e2:	4b28      	ldr	r3, [pc, #160]	@ (8005884 <vTaskSwitchContext+0xa8>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057ea:	4b27      	ldr	r3, [pc, #156]	@ (8005888 <vTaskSwitchContext+0xac>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057f0:	e042      	b.n	8005878 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80057f2:	4b25      	ldr	r3, [pc, #148]	@ (8005888 <vTaskSwitchContext+0xac>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057f8:	4b24      	ldr	r3, [pc, #144]	@ (800588c <vTaskSwitchContext+0xb0>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	e011      	b.n	8005824 <vTaskSwitchContext+0x48>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10b      	bne.n	800581e <vTaskSwitchContext+0x42>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	607b      	str	r3, [r7, #4]
}
 8005818:	bf00      	nop
 800581a:	bf00      	nop
 800581c:	e7fd      	b.n	800581a <vTaskSwitchContext+0x3e>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	3b01      	subs	r3, #1
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	491a      	ldr	r1, [pc, #104]	@ (8005890 <vTaskSwitchContext+0xb4>)
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	4613      	mov	r3, r2
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	440b      	add	r3, r1
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d0e3      	beq.n	8005800 <vTaskSwitchContext+0x24>
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	4613      	mov	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	4413      	add	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4a13      	ldr	r2, [pc, #76]	@ (8005890 <vTaskSwitchContext+0xb4>)
 8005844:	4413      	add	r3, r2
 8005846:	60bb      	str	r3, [r7, #8]
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	685a      	ldr	r2, [r3, #4]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	605a      	str	r2, [r3, #4]
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	3308      	adds	r3, #8
 800585a:	429a      	cmp	r2, r3
 800585c:	d104      	bne.n	8005868 <vTaskSwitchContext+0x8c>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	685a      	ldr	r2, [r3, #4]
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	605a      	str	r2, [r3, #4]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	68db      	ldr	r3, [r3, #12]
 800586e:	4a09      	ldr	r2, [pc, #36]	@ (8005894 <vTaskSwitchContext+0xb8>)
 8005870:	6013      	str	r3, [r2, #0]
 8005872:	4a06      	ldr	r2, [pc, #24]	@ (800588c <vTaskSwitchContext+0xb0>)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6013      	str	r3, [r2, #0]
}
 8005878:	bf00      	nop
 800587a:	3714      	adds	r7, #20
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	24004868 	.word	0x24004868
 8005888:	24004854 	.word	0x24004854
 800588c:	24004848 	.word	0x24004848
 8005890:	24004370 	.word	0x24004370
 8005894:	2400436c 	.word	0x2400436c

08005898 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10b      	bne.n	80058c0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80058a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	60fb      	str	r3, [r7, #12]
}
 80058ba:	bf00      	nop
 80058bc:	bf00      	nop
 80058be:	e7fd      	b.n	80058bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058c0:	4b07      	ldr	r3, [pc, #28]	@ (80058e0 <vTaskPlaceOnEventList+0x48>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	3318      	adds	r3, #24
 80058c6:	4619      	mov	r1, r3
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7fe fbe4 	bl	8004096 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058ce:	2101      	movs	r1, #1
 80058d0:	6838      	ldr	r0, [r7, #0]
 80058d2:	f000 fa81 	bl	8005dd8 <prvAddCurrentTaskToDelayedList>
}
 80058d6:	bf00      	nop
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	2400436c 	.word	0x2400436c

080058e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10b      	bne.n	800590e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80058f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fa:	f383 8811 	msr	BASEPRI, r3
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	617b      	str	r3, [r7, #20]
}
 8005908:	bf00      	nop
 800590a:	bf00      	nop
 800590c:	e7fd      	b.n	800590a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800590e:	4b0a      	ldr	r3, [pc, #40]	@ (8005938 <vTaskPlaceOnEventListRestricted+0x54>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	3318      	adds	r3, #24
 8005914:	4619      	mov	r1, r3
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f7fe fb99 	bl	800404e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005922:	f04f 33ff 	mov.w	r3, #4294967295
 8005926:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005928:	6879      	ldr	r1, [r7, #4]
 800592a:	68b8      	ldr	r0, [r7, #8]
 800592c:	f000 fa54 	bl	8005dd8 <prvAddCurrentTaskToDelayedList>
	}
 8005930:	bf00      	nop
 8005932:	3718      	adds	r7, #24
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	2400436c 	.word	0x2400436c

0800593c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800594c:	693b      	ldr	r3, [r7, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10b      	bne.n	800596a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005956:	f383 8811 	msr	BASEPRI, r3
 800595a:	f3bf 8f6f 	isb	sy
 800595e:	f3bf 8f4f 	dsb	sy
 8005962:	60fb      	str	r3, [r7, #12]
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop
 8005968:	e7fd      	b.n	8005966 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	3318      	adds	r3, #24
 800596e:	4618      	mov	r0, r3
 8005970:	f7fe fbca 	bl	8004108 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005974:	4b1d      	ldr	r3, [pc, #116]	@ (80059ec <xTaskRemoveFromEventList+0xb0>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d11d      	bne.n	80059b8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	3304      	adds	r3, #4
 8005980:	4618      	mov	r0, r3
 8005982:	f7fe fbc1 	bl	8004108 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800598a:	4b19      	ldr	r3, [pc, #100]	@ (80059f0 <xTaskRemoveFromEventList+0xb4>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	429a      	cmp	r2, r3
 8005990:	d903      	bls.n	800599a <xTaskRemoveFromEventList+0x5e>
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005996:	4a16      	ldr	r2, [pc, #88]	@ (80059f0 <xTaskRemoveFromEventList+0xb4>)
 8005998:	6013      	str	r3, [r2, #0]
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800599e:	4613      	mov	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	009b      	lsls	r3, r3, #2
 80059a6:	4a13      	ldr	r2, [pc, #76]	@ (80059f4 <xTaskRemoveFromEventList+0xb8>)
 80059a8:	441a      	add	r2, r3
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	3304      	adds	r3, #4
 80059ae:	4619      	mov	r1, r3
 80059b0:	4610      	mov	r0, r2
 80059b2:	f7fe fb4c 	bl	800404e <vListInsertEnd>
 80059b6:	e005      	b.n	80059c4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	3318      	adds	r3, #24
 80059bc:	4619      	mov	r1, r3
 80059be:	480e      	ldr	r0, [pc, #56]	@ (80059f8 <xTaskRemoveFromEventList+0xbc>)
 80059c0:	f7fe fb45 	bl	800404e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059c8:	4b0c      	ldr	r3, [pc, #48]	@ (80059fc <xTaskRemoveFromEventList+0xc0>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d905      	bls.n	80059de <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059d2:	2301      	movs	r3, #1
 80059d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005a00 <xTaskRemoveFromEventList+0xc4>)
 80059d8:	2201      	movs	r2, #1
 80059da:	601a      	str	r2, [r3, #0]
 80059dc:	e001      	b.n	80059e2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80059e2:	697b      	ldr	r3, [r7, #20]
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3718      	adds	r7, #24
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	24004868 	.word	0x24004868
 80059f0:	24004848 	.word	0x24004848
 80059f4:	24004370 	.word	0x24004370
 80059f8:	24004800 	.word	0x24004800
 80059fc:	2400436c 	.word	0x2400436c
 8005a00:	24004854 	.word	0x24004854

08005a04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005a0c:	4b06      	ldr	r3, [pc, #24]	@ (8005a28 <vTaskInternalSetTimeOutState+0x24>)
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005a14:	4b05      	ldr	r3, [pc, #20]	@ (8005a2c <vTaskInternalSetTimeOutState+0x28>)
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	605a      	str	r2, [r3, #4]
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	24004858 	.word	0x24004858
 8005a2c:	24004844 	.word	0x24004844

08005a30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10b      	bne.n	8005a58 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	613b      	str	r3, [r7, #16]
}
 8005a52:	bf00      	nop
 8005a54:	bf00      	nop
 8005a56:	e7fd      	b.n	8005a54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10b      	bne.n	8005a76 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a62:	f383 8811 	msr	BASEPRI, r3
 8005a66:	f3bf 8f6f 	isb	sy
 8005a6a:	f3bf 8f4f 	dsb	sy
 8005a6e:	60fb      	str	r3, [r7, #12]
}
 8005a70:	bf00      	nop
 8005a72:	bf00      	nop
 8005a74:	e7fd      	b.n	8005a72 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005a76:	f7fe fc9f 	bl	80043b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8005af0 <xTaskCheckForTimeOut+0xc0>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a92:	d102      	bne.n	8005a9a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a94:	2300      	movs	r3, #0
 8005a96:	61fb      	str	r3, [r7, #28]
 8005a98:	e023      	b.n	8005ae2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	4b15      	ldr	r3, [pc, #84]	@ (8005af4 <xTaskCheckForTimeOut+0xc4>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d007      	beq.n	8005ab6 <xTaskCheckForTimeOut+0x86>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	69ba      	ldr	r2, [r7, #24]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d302      	bcc.n	8005ab6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	61fb      	str	r3, [r7, #28]
 8005ab4:	e015      	b.n	8005ae2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d20b      	bcs.n	8005ad8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	1ad2      	subs	r2, r2, r3
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff ff99 	bl	8005a04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61fb      	str	r3, [r7, #28]
 8005ad6:	e004      	b.n	8005ae2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2200      	movs	r2, #0
 8005adc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005ae2:	f7fe fc9b 	bl	800441c <vPortExitCritical>

	return xReturn;
 8005ae6:	69fb      	ldr	r3, [r7, #28]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3720      	adds	r7, #32
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	24004844 	.word	0x24004844
 8005af4:	24004858 	.word	0x24004858

08005af8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005afc:	4b03      	ldr	r3, [pc, #12]	@ (8005b0c <vTaskMissedYield+0x14>)
 8005afe:	2201      	movs	r2, #1
 8005b00:	601a      	str	r2, [r3, #0]
}
 8005b02:	bf00      	nop
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	24004854 	.word	0x24004854

08005b10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005b18:	f000 f852 	bl	8005bc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005b1c:	4b06      	ldr	r3, [pc, #24]	@ (8005b38 <prvIdleTask+0x28>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d9f9      	bls.n	8005b18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005b24:	4b05      	ldr	r3, [pc, #20]	@ (8005b3c <prvIdleTask+0x2c>)
 8005b26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b2a:	601a      	str	r2, [r3, #0]
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b34:	e7f0      	b.n	8005b18 <prvIdleTask+0x8>
 8005b36:	bf00      	nop
 8005b38:	24004370 	.word	0x24004370
 8005b3c:	e000ed04 	.word	0xe000ed04

08005b40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b46:	2300      	movs	r3, #0
 8005b48:	607b      	str	r3, [r7, #4]
 8005b4a:	e00c      	b.n	8005b66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	4a12      	ldr	r2, [pc, #72]	@ (8005ba0 <prvInitialiseTaskLists+0x60>)
 8005b58:	4413      	add	r3, r2
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fe fa4a 	bl	8003ff4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3301      	adds	r3, #1
 8005b64:	607b      	str	r3, [r7, #4]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2b37      	cmp	r3, #55	@ 0x37
 8005b6a:	d9ef      	bls.n	8005b4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b6c:	480d      	ldr	r0, [pc, #52]	@ (8005ba4 <prvInitialiseTaskLists+0x64>)
 8005b6e:	f7fe fa41 	bl	8003ff4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b72:	480d      	ldr	r0, [pc, #52]	@ (8005ba8 <prvInitialiseTaskLists+0x68>)
 8005b74:	f7fe fa3e 	bl	8003ff4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b78:	480c      	ldr	r0, [pc, #48]	@ (8005bac <prvInitialiseTaskLists+0x6c>)
 8005b7a:	f7fe fa3b 	bl	8003ff4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b7e:	480c      	ldr	r0, [pc, #48]	@ (8005bb0 <prvInitialiseTaskLists+0x70>)
 8005b80:	f7fe fa38 	bl	8003ff4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b84:	480b      	ldr	r0, [pc, #44]	@ (8005bb4 <prvInitialiseTaskLists+0x74>)
 8005b86:	f7fe fa35 	bl	8003ff4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb8 <prvInitialiseTaskLists+0x78>)
 8005b8c:	4a05      	ldr	r2, [pc, #20]	@ (8005ba4 <prvInitialiseTaskLists+0x64>)
 8005b8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b90:	4b0a      	ldr	r3, [pc, #40]	@ (8005bbc <prvInitialiseTaskLists+0x7c>)
 8005b92:	4a05      	ldr	r2, [pc, #20]	@ (8005ba8 <prvInitialiseTaskLists+0x68>)
 8005b94:	601a      	str	r2, [r3, #0]
}
 8005b96:	bf00      	nop
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	24004370 	.word	0x24004370
 8005ba4:	240047d0 	.word	0x240047d0
 8005ba8:	240047e4 	.word	0x240047e4
 8005bac:	24004800 	.word	0x24004800
 8005bb0:	24004814 	.word	0x24004814
 8005bb4:	2400482c 	.word	0x2400482c
 8005bb8:	240047f8 	.word	0x240047f8
 8005bbc:	240047fc 	.word	0x240047fc

08005bc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bc6:	e019      	b.n	8005bfc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005bc8:	f7fe fbf6 	bl	80043b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bcc:	4b10      	ldr	r3, [pc, #64]	@ (8005c10 <prvCheckTasksWaitingTermination+0x50>)
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	3304      	adds	r3, #4
 8005bd8:	4618      	mov	r0, r3
 8005bda:	f7fe fa95 	bl	8004108 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005bde:	4b0d      	ldr	r3, [pc, #52]	@ (8005c14 <prvCheckTasksWaitingTermination+0x54>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	3b01      	subs	r3, #1
 8005be4:	4a0b      	ldr	r2, [pc, #44]	@ (8005c14 <prvCheckTasksWaitingTermination+0x54>)
 8005be6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005be8:	4b0b      	ldr	r3, [pc, #44]	@ (8005c18 <prvCheckTasksWaitingTermination+0x58>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	3b01      	subs	r3, #1
 8005bee:	4a0a      	ldr	r2, [pc, #40]	@ (8005c18 <prvCheckTasksWaitingTermination+0x58>)
 8005bf0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bf2:	f7fe fc13 	bl	800441c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f810 	bl	8005c1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bfc:	4b06      	ldr	r3, [pc, #24]	@ (8005c18 <prvCheckTasksWaitingTermination+0x58>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1e1      	bne.n	8005bc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	24004814 	.word	0x24004814
 8005c14:	24004840 	.word	0x24004840
 8005c18:	24004828 	.word	0x24004828

08005c1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d108      	bne.n	8005c40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c32:	4618      	mov	r0, r3
 8005c34:	f7fe f8be 	bl	8003db4 <vPortFree>
				vPortFree( pxTCB );
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7fe f8bb 	bl	8003db4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c3e:	e019      	b.n	8005c74 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d103      	bne.n	8005c52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f7fe f8b2 	bl	8003db4 <vPortFree>
	}
 8005c50:	e010      	b.n	8005c74 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d00b      	beq.n	8005c74 <prvDeleteTCB+0x58>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	60fb      	str	r3, [r7, #12]
}
 8005c6e:	bf00      	nop
 8005c70:	bf00      	nop
 8005c72:	e7fd      	b.n	8005c70 <prvDeleteTCB+0x54>
	}
 8005c74:	bf00      	nop
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c82:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb4 <prvResetNextTaskUnblockTime+0x38>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d104      	bne.n	8005c96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8005cb8 <prvResetNextTaskUnblockTime+0x3c>)
 8005c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c94:	e008      	b.n	8005ca8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c96:	4b07      	ldr	r3, [pc, #28]	@ (8005cb4 <prvResetNextTaskUnblockTime+0x38>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	4a04      	ldr	r2, [pc, #16]	@ (8005cb8 <prvResetNextTaskUnblockTime+0x3c>)
 8005ca6:	6013      	str	r3, [r2, #0]
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr
 8005cb4:	240047f8 	.word	0x240047f8
 8005cb8:	24004860 	.word	0x24004860

08005cbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b083      	sub	sp, #12
 8005cc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf0 <xTaskGetSchedulerState+0x34>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d102      	bne.n	8005cd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	607b      	str	r3, [r7, #4]
 8005cce:	e008      	b.n	8005ce2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cd0:	4b08      	ldr	r3, [pc, #32]	@ (8005cf4 <xTaskGetSchedulerState+0x38>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d102      	bne.n	8005cde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005cd8:	2302      	movs	r3, #2
 8005cda:	607b      	str	r3, [r7, #4]
 8005cdc:	e001      	b.n	8005ce2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ce2:	687b      	ldr	r3, [r7, #4]
	}
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr
 8005cf0:	2400484c 	.word	0x2400484c
 8005cf4:	24004868 	.word	0x24004868

08005cf8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d04:	2300      	movs	r3, #0
 8005d06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d058      	beq.n	8005dc0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8005dcc <xTaskPriorityDisinherit+0xd4>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	693a      	ldr	r2, [r7, #16]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d00b      	beq.n	8005d30 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	60fb      	str	r3, [r7, #12]
}
 8005d2a:	bf00      	nop
 8005d2c:	bf00      	nop
 8005d2e:	e7fd      	b.n	8005d2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10b      	bne.n	8005d50 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005d38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3c:	f383 8811 	msr	BASEPRI, r3
 8005d40:	f3bf 8f6f 	isb	sy
 8005d44:	f3bf 8f4f 	dsb	sy
 8005d48:	60bb      	str	r3, [r7, #8]
}
 8005d4a:	bf00      	nop
 8005d4c:	bf00      	nop
 8005d4e:	e7fd      	b.n	8005d4c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005d50:	693b      	ldr	r3, [r7, #16]
 8005d52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d54:	1e5a      	subs	r2, r3, #1
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d02c      	beq.n	8005dc0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d128      	bne.n	8005dc0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	3304      	adds	r3, #4
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fe f9c8 	bl	8004108 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d90:	4b0f      	ldr	r3, [pc, #60]	@ (8005dd0 <xTaskPriorityDisinherit+0xd8>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d903      	bls.n	8005da0 <xTaskPriorityDisinherit+0xa8>
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d9c:	4a0c      	ldr	r2, [pc, #48]	@ (8005dd0 <xTaskPriorityDisinherit+0xd8>)
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005da4:	4613      	mov	r3, r2
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	4413      	add	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4a09      	ldr	r2, [pc, #36]	@ (8005dd4 <xTaskPriorityDisinherit+0xdc>)
 8005dae:	441a      	add	r2, r3
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	3304      	adds	r3, #4
 8005db4:	4619      	mov	r1, r3
 8005db6:	4610      	mov	r0, r2
 8005db8:	f7fe f949 	bl	800404e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005dc0:	697b      	ldr	r3, [r7, #20]
	}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3718      	adds	r7, #24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	2400436c 	.word	0x2400436c
 8005dd0:	24004848 	.word	0x24004848
 8005dd4:	24004370 	.word	0x24004370

08005dd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005dd8:	b580      	push	{r7, lr}
 8005dda:	b084      	sub	sp, #16
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005de2:	4b21      	ldr	r3, [pc, #132]	@ (8005e68 <prvAddCurrentTaskToDelayedList+0x90>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005de8:	4b20      	ldr	r3, [pc, #128]	@ (8005e6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3304      	adds	r3, #4
 8005dee:	4618      	mov	r0, r3
 8005df0:	f7fe f98a 	bl	8004108 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dfa:	d10a      	bne.n	8005e12 <prvAddCurrentTaskToDelayedList+0x3a>
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d007      	beq.n	8005e12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e02:	4b1a      	ldr	r3, [pc, #104]	@ (8005e6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4819      	ldr	r0, [pc, #100]	@ (8005e70 <prvAddCurrentTaskToDelayedList+0x98>)
 8005e0c:	f7fe f91f 	bl	800404e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005e10:	e026      	b.n	8005e60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4413      	add	r3, r2
 8005e18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005e1a:	4b14      	ldr	r3, [pc, #80]	@ (8005e6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d209      	bcs.n	8005e3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e2a:	4b12      	ldr	r3, [pc, #72]	@ (8005e74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8005e6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3304      	adds	r3, #4
 8005e34:	4619      	mov	r1, r3
 8005e36:	4610      	mov	r0, r2
 8005e38:	f7fe f92d 	bl	8004096 <vListInsert>
}
 8005e3c:	e010      	b.n	8005e60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8005e78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	4b0a      	ldr	r3, [pc, #40]	@ (8005e6c <prvAddCurrentTaskToDelayedList+0x94>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3304      	adds	r3, #4
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	f7fe f923 	bl	8004096 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005e50:	4b0a      	ldr	r3, [pc, #40]	@ (8005e7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d202      	bcs.n	8005e60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005e5a:	4a08      	ldr	r2, [pc, #32]	@ (8005e7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	6013      	str	r3, [r2, #0]
}
 8005e60:	bf00      	nop
 8005e62:	3710      	adds	r7, #16
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	24004844 	.word	0x24004844
 8005e6c:	2400436c 	.word	0x2400436c
 8005e70:	2400482c 	.word	0x2400482c
 8005e74:	240047fc 	.word	0x240047fc
 8005e78:	240047f8 	.word	0x240047f8
 8005e7c:	24004860 	.word	0x24004860

08005e80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08a      	sub	sp, #40	@ 0x28
 8005e84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005e86:	2300      	movs	r3, #0
 8005e88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005e8a:	f000 fb13 	bl	80064b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005e8e:	4b1d      	ldr	r3, [pc, #116]	@ (8005f04 <xTimerCreateTimerTask+0x84>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d021      	beq.n	8005eda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005e96:	2300      	movs	r3, #0
 8005e98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005e9e:	1d3a      	adds	r2, r7, #4
 8005ea0:	f107 0108 	add.w	r1, r7, #8
 8005ea4:	f107 030c 	add.w	r3, r7, #12
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f7fd fe9b 	bl	8003be4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005eae:	6879      	ldr	r1, [r7, #4]
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	68fa      	ldr	r2, [r7, #12]
 8005eb4:	9202      	str	r2, [sp, #8]
 8005eb6:	9301      	str	r3, [sp, #4]
 8005eb8:	2302      	movs	r3, #2
 8005eba:	9300      	str	r3, [sp, #0]
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	460a      	mov	r2, r1
 8005ec0:	4911      	ldr	r1, [pc, #68]	@ (8005f08 <xTimerCreateTimerTask+0x88>)
 8005ec2:	4812      	ldr	r0, [pc, #72]	@ (8005f0c <xTimerCreateTimerTask+0x8c>)
 8005ec4:	f7ff f8d0 	bl	8005068 <xTaskCreateStatic>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	4a11      	ldr	r2, [pc, #68]	@ (8005f10 <xTimerCreateTimerTask+0x90>)
 8005ecc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ece:	4b10      	ldr	r3, [pc, #64]	@ (8005f10 <xTimerCreateTimerTask+0x90>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d001      	beq.n	8005eda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d10b      	bne.n	8005ef8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	613b      	str	r3, [r7, #16]
}
 8005ef2:	bf00      	nop
 8005ef4:	bf00      	nop
 8005ef6:	e7fd      	b.n	8005ef4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005ef8:	697b      	ldr	r3, [r7, #20]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3718      	adds	r7, #24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
 8005f02:	bf00      	nop
 8005f04:	2400489c 	.word	0x2400489c
 8005f08:	08006604 	.word	0x08006604
 8005f0c:	0800604d 	.word	0x0800604d
 8005f10:	240048a0 	.word	0x240048a0

08005f14 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b08a      	sub	sp, #40	@ 0x28
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
 8005f20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005f22:	2300      	movs	r3, #0
 8005f24:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d10b      	bne.n	8005f44 <xTimerGenericCommand+0x30>
	__asm volatile
 8005f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f30:	f383 8811 	msr	BASEPRI, r3
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	f3bf 8f4f 	dsb	sy
 8005f3c:	623b      	str	r3, [r7, #32]
}
 8005f3e:	bf00      	nop
 8005f40:	bf00      	nop
 8005f42:	e7fd      	b.n	8005f40 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f44:	4b19      	ldr	r3, [pc, #100]	@ (8005fac <xTimerGenericCommand+0x98>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d02a      	beq.n	8005fa2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b05      	cmp	r3, #5
 8005f5c:	dc18      	bgt.n	8005f90 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f5e:	f7ff fead 	bl	8005cbc <xTaskGetSchedulerState>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d109      	bne.n	8005f7c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f68:	4b10      	ldr	r3, [pc, #64]	@ (8005fac <xTimerGenericCommand+0x98>)
 8005f6a:	6818      	ldr	r0, [r3, #0]
 8005f6c:	f107 0110 	add.w	r1, r7, #16
 8005f70:	2300      	movs	r3, #0
 8005f72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f74:	f7fe fc88 	bl	8004888 <xQueueGenericSend>
 8005f78:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f7a:	e012      	b.n	8005fa2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005fac <xTimerGenericCommand+0x98>)
 8005f7e:	6818      	ldr	r0, [r3, #0]
 8005f80:	f107 0110 	add.w	r1, r7, #16
 8005f84:	2300      	movs	r3, #0
 8005f86:	2200      	movs	r2, #0
 8005f88:	f7fe fc7e 	bl	8004888 <xQueueGenericSend>
 8005f8c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005f8e:	e008      	b.n	8005fa2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f90:	4b06      	ldr	r3, [pc, #24]	@ (8005fac <xTimerGenericCommand+0x98>)
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	f107 0110 	add.w	r1, r7, #16
 8005f98:	2300      	movs	r3, #0
 8005f9a:	683a      	ldr	r2, [r7, #0]
 8005f9c:	f7fe fd76 	bl	8004a8c <xQueueGenericSendFromISR>
 8005fa0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3728      	adds	r7, #40	@ 0x28
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	2400489c 	.word	0x2400489c

08005fb0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b088      	sub	sp, #32
 8005fb4:	af02      	add	r7, sp, #8
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fba:	4b23      	ldr	r3, [pc, #140]	@ (8006048 <prvProcessExpiredTimer+0x98>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	3304      	adds	r3, #4
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f7fe f89d 	bl	8004108 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d023      	beq.n	8006024 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	699a      	ldr	r2, [r3, #24]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	18d1      	adds	r1, r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	6978      	ldr	r0, [r7, #20]
 8005fea:	f000 f8d5 	bl	8006198 <prvInsertTimerInActiveList>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d020      	beq.n	8006036 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	6978      	ldr	r0, [r7, #20]
 8006000:	f7ff ff88 	bl	8005f14 <xTimerGenericCommand>
 8006004:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d114      	bne.n	8006036 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800600c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006010:	f383 8811 	msr	BASEPRI, r3
 8006014:	f3bf 8f6f 	isb	sy
 8006018:	f3bf 8f4f 	dsb	sy
 800601c:	60fb      	str	r3, [r7, #12]
}
 800601e:	bf00      	nop
 8006020:	bf00      	nop
 8006022:	e7fd      	b.n	8006020 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800602a:	f023 0301 	bic.w	r3, r3, #1
 800602e:	b2da      	uxtb	r2, r3
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	6978      	ldr	r0, [r7, #20]
 800603c:	4798      	blx	r3
}
 800603e:	bf00      	nop
 8006040:	3718      	adds	r7, #24
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	24004894 	.word	0x24004894

0800604c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006054:	f107 0308 	add.w	r3, r7, #8
 8006058:	4618      	mov	r0, r3
 800605a:	f000 f859 	bl	8006110 <prvGetNextExpireTime>
 800605e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	4619      	mov	r1, r3
 8006064:	68f8      	ldr	r0, [r7, #12]
 8006066:	f000 f805 	bl	8006074 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800606a:	f000 f8d7 	bl	800621c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800606e:	bf00      	nop
 8006070:	e7f0      	b.n	8006054 <prvTimerTask+0x8>
	...

08006074 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800607e:	f7ff fa37 	bl	80054f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006082:	f107 0308 	add.w	r3, r7, #8
 8006086:	4618      	mov	r0, r3
 8006088:	f000 f866 	bl	8006158 <prvSampleTimeNow>
 800608c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d130      	bne.n	80060f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d10a      	bne.n	80060b0 <prvProcessTimerOrBlockTask+0x3c>
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d806      	bhi.n	80060b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80060a2:	f7ff fa33 	bl	800550c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80060a6:	68f9      	ldr	r1, [r7, #12]
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7ff ff81 	bl	8005fb0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80060ae:	e024      	b.n	80060fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d008      	beq.n	80060c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80060b6:	4b13      	ldr	r3, [pc, #76]	@ (8006104 <prvProcessTimerOrBlockTask+0x90>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <prvProcessTimerOrBlockTask+0x50>
 80060c0:	2301      	movs	r3, #1
 80060c2:	e000      	b.n	80060c6 <prvProcessTimerOrBlockTask+0x52>
 80060c4:	2300      	movs	r3, #0
 80060c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80060c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006108 <prvProcessTimerOrBlockTask+0x94>)
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	4619      	mov	r1, r3
 80060d6:	f7fe ff93 	bl	8005000 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80060da:	f7ff fa17 	bl	800550c <xTaskResumeAll>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d10a      	bne.n	80060fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80060e4:	4b09      	ldr	r3, [pc, #36]	@ (800610c <prvProcessTimerOrBlockTask+0x98>)
 80060e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060ea:	601a      	str	r2, [r3, #0]
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	f3bf 8f6f 	isb	sy
}
 80060f4:	e001      	b.n	80060fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060f6:	f7ff fa09 	bl	800550c <xTaskResumeAll>
}
 80060fa:	bf00      	nop
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	24004898 	.word	0x24004898
 8006108:	2400489c 	.word	0x2400489c
 800610c:	e000ed04 	.word	0xe000ed04

08006110 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006118:	4b0e      	ldr	r3, [pc, #56]	@ (8006154 <prvGetNextExpireTime+0x44>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <prvGetNextExpireTime+0x16>
 8006122:	2201      	movs	r2, #1
 8006124:	e000      	b.n	8006128 <prvGetNextExpireTime+0x18>
 8006126:	2200      	movs	r2, #0
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d105      	bne.n	8006140 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006134:	4b07      	ldr	r3, [pc, #28]	@ (8006154 <prvGetNextExpireTime+0x44>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	e001      	b.n	8006144 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006144:	68fb      	ldr	r3, [r7, #12]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	24004894 	.word	0x24004894

08006158 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006160:	f7ff fa72 	bl	8005648 <xTaskGetTickCount>
 8006164:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006166:	4b0b      	ldr	r3, [pc, #44]	@ (8006194 <prvSampleTimeNow+0x3c>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	429a      	cmp	r2, r3
 800616e:	d205      	bcs.n	800617c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006170:	f000 f93a 	bl	80063e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	601a      	str	r2, [r3, #0]
 800617a:	e002      	b.n	8006182 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006182:	4a04      	ldr	r2, [pc, #16]	@ (8006194 <prvSampleTimeNow+0x3c>)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006188:	68fb      	ldr	r3, [r7, #12]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	240048a4 	.word	0x240048a4

08006198 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80061a6:	2300      	movs	r3, #0
 80061a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d812      	bhi.n	80061e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	1ad2      	subs	r2, r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d302      	bcc.n	80061d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80061cc:	2301      	movs	r3, #1
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	e01b      	b.n	800620a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80061d2:	4b10      	ldr	r3, [pc, #64]	@ (8006214 <prvInsertTimerInActiveList+0x7c>)
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	3304      	adds	r3, #4
 80061da:	4619      	mov	r1, r3
 80061dc:	4610      	mov	r0, r2
 80061de:	f7fd ff5a 	bl	8004096 <vListInsert>
 80061e2:	e012      	b.n	800620a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d206      	bcs.n	80061fa <prvInsertTimerInActiveList+0x62>
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d302      	bcc.n	80061fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80061f4:	2301      	movs	r3, #1
 80061f6:	617b      	str	r3, [r7, #20]
 80061f8:	e007      	b.n	800620a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061fa:	4b07      	ldr	r3, [pc, #28]	@ (8006218 <prvInsertTimerInActiveList+0x80>)
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3304      	adds	r3, #4
 8006202:	4619      	mov	r1, r3
 8006204:	4610      	mov	r0, r2
 8006206:	f7fd ff46 	bl	8004096 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800620a:	697b      	ldr	r3, [r7, #20]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3718      	adds	r7, #24
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	24004898 	.word	0x24004898
 8006218:	24004894 	.word	0x24004894

0800621c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b08e      	sub	sp, #56	@ 0x38
 8006220:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006222:	e0ce      	b.n	80063c2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	da19      	bge.n	800625e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800622a:	1d3b      	adds	r3, r7, #4
 800622c:	3304      	adds	r3, #4
 800622e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10b      	bne.n	800624e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	61fb      	str	r3, [r7, #28]
}
 8006248:	bf00      	nop
 800624a:	bf00      	nop
 800624c:	e7fd      	b.n	800624a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800624e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006254:	6850      	ldr	r0, [r2, #4]
 8006256:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006258:	6892      	ldr	r2, [r2, #8]
 800625a:	4611      	mov	r1, r2
 800625c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	f2c0 80ae 	blt.w	80063c2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800626a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626c:	695b      	ldr	r3, [r3, #20]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d004      	beq.n	800627c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006274:	3304      	adds	r3, #4
 8006276:	4618      	mov	r0, r3
 8006278:	f7fd ff46 	bl	8004108 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800627c:	463b      	mov	r3, r7
 800627e:	4618      	mov	r0, r3
 8006280:	f7ff ff6a 	bl	8006158 <prvSampleTimeNow>
 8006284:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2b09      	cmp	r3, #9
 800628a:	f200 8097 	bhi.w	80063bc <prvProcessReceivedCommands+0x1a0>
 800628e:	a201      	add	r2, pc, #4	@ (adr r2, 8006294 <prvProcessReceivedCommands+0x78>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	080062bd 	.word	0x080062bd
 8006298:	080062bd 	.word	0x080062bd
 800629c:	080062bd 	.word	0x080062bd
 80062a0:	08006333 	.word	0x08006333
 80062a4:	08006347 	.word	0x08006347
 80062a8:	08006393 	.word	0x08006393
 80062ac:	080062bd 	.word	0x080062bd
 80062b0:	080062bd 	.word	0x080062bd
 80062b4:	08006333 	.word	0x08006333
 80062b8:	08006347 	.word	0x08006347
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80062bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062c2:	f043 0301 	orr.w	r3, r3, #1
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d2:	699b      	ldr	r3, [r3, #24]
 80062d4:	18d1      	adds	r1, r2, r3
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062dc:	f7ff ff5c 	bl	8006198 <prvInsertTimerInActiveList>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d06c      	beq.n	80063c0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80062f4:	f003 0304 	and.w	r3, r3, #4
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d061      	beq.n	80063c0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062fc:	68ba      	ldr	r2, [r7, #8]
 80062fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	441a      	add	r2, r3
 8006304:	2300      	movs	r3, #0
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	2300      	movs	r3, #0
 800630a:	2100      	movs	r1, #0
 800630c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800630e:	f7ff fe01 	bl	8005f14 <xTimerGenericCommand>
 8006312:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d152      	bne.n	80063c0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800631a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800631e:	f383 8811 	msr	BASEPRI, r3
 8006322:	f3bf 8f6f 	isb	sy
 8006326:	f3bf 8f4f 	dsb	sy
 800632a:	61bb      	str	r3, [r7, #24]
}
 800632c:	bf00      	nop
 800632e:	bf00      	nop
 8006330:	e7fd      	b.n	800632e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006334:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006338:	f023 0301 	bic.w	r3, r3, #1
 800633c:	b2da      	uxtb	r2, r3
 800633e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006340:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006344:	e03d      	b.n	80063c2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006348:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800634c:	f043 0301 	orr.w	r3, r3, #1
 8006350:	b2da      	uxtb	r2, r3
 8006352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006354:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006358:	68ba      	ldr	r2, [r7, #8]
 800635a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800635c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800635e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10b      	bne.n	800637e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	617b      	str	r3, [r7, #20]
}
 8006378:	bf00      	nop
 800637a:	bf00      	nop
 800637c:	e7fd      	b.n	800637a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800637e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006384:	18d1      	adds	r1, r2, r3
 8006386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006388:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800638a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800638c:	f7ff ff04 	bl	8006198 <prvInsertTimerInActiveList>
					break;
 8006390:	e017      	b.n	80063c2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006394:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006398:	f003 0302 	and.w	r3, r3, #2
 800639c:	2b00      	cmp	r3, #0
 800639e:	d103      	bne.n	80063a8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80063a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063a2:	f7fd fd07 	bl	8003db4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80063a6:	e00c      	b.n	80063c2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063ae:	f023 0301 	bic.w	r3, r3, #1
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80063ba:	e002      	b.n	80063c2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80063bc:	bf00      	nop
 80063be:	e000      	b.n	80063c2 <prvProcessReceivedCommands+0x1a6>
					break;
 80063c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80063c2:	4b08      	ldr	r3, [pc, #32]	@ (80063e4 <prvProcessReceivedCommands+0x1c8>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	1d39      	adds	r1, r7, #4
 80063c8:	2200      	movs	r2, #0
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fe fbfc 	bl	8004bc8 <xQueueReceive>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f47f af26 	bne.w	8006224 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80063d8:	bf00      	nop
 80063da:	bf00      	nop
 80063dc:	3730      	adds	r7, #48	@ 0x30
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
 80063e2:	bf00      	nop
 80063e4:	2400489c 	.word	0x2400489c

080063e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b088      	sub	sp, #32
 80063ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063ee:	e049      	b.n	8006484 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063f0:	4b2e      	ldr	r3, [pc, #184]	@ (80064ac <prvSwitchTimerLists+0xc4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68db      	ldr	r3, [r3, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063fa:	4b2c      	ldr	r3, [pc, #176]	@ (80064ac <prvSwitchTimerLists+0xc4>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3304      	adds	r3, #4
 8006408:	4618      	mov	r0, r3
 800640a:	f7fd fe7d 	bl	8004108 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	6a1b      	ldr	r3, [r3, #32]
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800641c:	f003 0304 	and.w	r3, r3, #4
 8006420:	2b00      	cmp	r3, #0
 8006422:	d02f      	beq.n	8006484 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	4413      	add	r3, r2
 800642c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	429a      	cmp	r2, r3
 8006434:	d90e      	bls.n	8006454 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006442:	4b1a      	ldr	r3, [pc, #104]	@ (80064ac <prvSwitchTimerLists+0xc4>)
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	3304      	adds	r3, #4
 800644a:	4619      	mov	r1, r3
 800644c:	4610      	mov	r0, r2
 800644e:	f7fd fe22 	bl	8004096 <vListInsert>
 8006452:	e017      	b.n	8006484 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006454:	2300      	movs	r3, #0
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	2300      	movs	r3, #0
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	2100      	movs	r1, #0
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f7ff fd58 	bl	8005f14 <xTimerGenericCommand>
 8006464:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d10b      	bne.n	8006484 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800646c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	603b      	str	r3, [r7, #0]
}
 800647e:	bf00      	nop
 8006480:	bf00      	nop
 8006482:	e7fd      	b.n	8006480 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006484:	4b09      	ldr	r3, [pc, #36]	@ (80064ac <prvSwitchTimerLists+0xc4>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1b0      	bne.n	80063f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800648e:	4b07      	ldr	r3, [pc, #28]	@ (80064ac <prvSwitchTimerLists+0xc4>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006494:	4b06      	ldr	r3, [pc, #24]	@ (80064b0 <prvSwitchTimerLists+0xc8>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a04      	ldr	r2, [pc, #16]	@ (80064ac <prvSwitchTimerLists+0xc4>)
 800649a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800649c:	4a04      	ldr	r2, [pc, #16]	@ (80064b0 <prvSwitchTimerLists+0xc8>)
 800649e:	697b      	ldr	r3, [r7, #20]
 80064a0:	6013      	str	r3, [r2, #0]
}
 80064a2:	bf00      	nop
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	24004894 	.word	0x24004894
 80064b0:	24004898 	.word	0x24004898

080064b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80064ba:	f7fd ff7d 	bl	80043b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80064be:	4b15      	ldr	r3, [pc, #84]	@ (8006514 <prvCheckForValidListAndQueue+0x60>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d120      	bne.n	8006508 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80064c6:	4814      	ldr	r0, [pc, #80]	@ (8006518 <prvCheckForValidListAndQueue+0x64>)
 80064c8:	f7fd fd94 	bl	8003ff4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80064cc:	4813      	ldr	r0, [pc, #76]	@ (800651c <prvCheckForValidListAndQueue+0x68>)
 80064ce:	f7fd fd91 	bl	8003ff4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80064d2:	4b13      	ldr	r3, [pc, #76]	@ (8006520 <prvCheckForValidListAndQueue+0x6c>)
 80064d4:	4a10      	ldr	r2, [pc, #64]	@ (8006518 <prvCheckForValidListAndQueue+0x64>)
 80064d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80064d8:	4b12      	ldr	r3, [pc, #72]	@ (8006524 <prvCheckForValidListAndQueue+0x70>)
 80064da:	4a10      	ldr	r2, [pc, #64]	@ (800651c <prvCheckForValidListAndQueue+0x68>)
 80064dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80064de:	2300      	movs	r3, #0
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	4b11      	ldr	r3, [pc, #68]	@ (8006528 <prvCheckForValidListAndQueue+0x74>)
 80064e4:	4a11      	ldr	r2, [pc, #68]	@ (800652c <prvCheckForValidListAndQueue+0x78>)
 80064e6:	2110      	movs	r1, #16
 80064e8:	200a      	movs	r0, #10
 80064ea:	f7fe f8f1 	bl	80046d0 <xQueueGenericCreateStatic>
 80064ee:	4603      	mov	r3, r0
 80064f0:	4a08      	ldr	r2, [pc, #32]	@ (8006514 <prvCheckForValidListAndQueue+0x60>)
 80064f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80064f4:	4b07      	ldr	r3, [pc, #28]	@ (8006514 <prvCheckForValidListAndQueue+0x60>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d005      	beq.n	8006508 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064fc:	4b05      	ldr	r3, [pc, #20]	@ (8006514 <prvCheckForValidListAndQueue+0x60>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	490b      	ldr	r1, [pc, #44]	@ (8006530 <prvCheckForValidListAndQueue+0x7c>)
 8006502:	4618      	mov	r0, r3
 8006504:	f7fe fd52 	bl	8004fac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006508:	f7fd ff88 	bl	800441c <vPortExitCritical>
}
 800650c:	bf00      	nop
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	2400489c 	.word	0x2400489c
 8006518:	2400486c 	.word	0x2400486c
 800651c:	24004880 	.word	0x24004880
 8006520:	24004894 	.word	0x24004894
 8006524:	24004898 	.word	0x24004898
 8006528:	24004948 	.word	0x24004948
 800652c:	240048a8 	.word	0x240048a8
 8006530:	0800660c 	.word	0x0800660c

08006534 <memset>:
 8006534:	4402      	add	r2, r0
 8006536:	4603      	mov	r3, r0
 8006538:	4293      	cmp	r3, r2
 800653a:	d100      	bne.n	800653e <memset+0xa>
 800653c:	4770      	bx	lr
 800653e:	f803 1b01 	strb.w	r1, [r3], #1
 8006542:	e7f9      	b.n	8006538 <memset+0x4>

08006544 <__libc_init_array>:
 8006544:	b570      	push	{r4, r5, r6, lr}
 8006546:	4d0d      	ldr	r5, [pc, #52]	@ (800657c <__libc_init_array+0x38>)
 8006548:	4c0d      	ldr	r4, [pc, #52]	@ (8006580 <__libc_init_array+0x3c>)
 800654a:	1b64      	subs	r4, r4, r5
 800654c:	10a4      	asrs	r4, r4, #2
 800654e:	2600      	movs	r6, #0
 8006550:	42a6      	cmp	r6, r4
 8006552:	d109      	bne.n	8006568 <__libc_init_array+0x24>
 8006554:	4d0b      	ldr	r5, [pc, #44]	@ (8006584 <__libc_init_array+0x40>)
 8006556:	4c0c      	ldr	r4, [pc, #48]	@ (8006588 <__libc_init_array+0x44>)
 8006558:	f000 f826 	bl	80065a8 <_init>
 800655c:	1b64      	subs	r4, r4, r5
 800655e:	10a4      	asrs	r4, r4, #2
 8006560:	2600      	movs	r6, #0
 8006562:	42a6      	cmp	r6, r4
 8006564:	d105      	bne.n	8006572 <__libc_init_array+0x2e>
 8006566:	bd70      	pop	{r4, r5, r6, pc}
 8006568:	f855 3b04 	ldr.w	r3, [r5], #4
 800656c:	4798      	blx	r3
 800656e:	3601      	adds	r6, #1
 8006570:	e7ee      	b.n	8006550 <__libc_init_array+0xc>
 8006572:	f855 3b04 	ldr.w	r3, [r5], #4
 8006576:	4798      	blx	r3
 8006578:	3601      	adds	r6, #1
 800657a:	e7f2      	b.n	8006562 <__libc_init_array+0x1e>
 800657c:	080066c0 	.word	0x080066c0
 8006580:	080066c0 	.word	0x080066c0
 8006584:	080066c0 	.word	0x080066c0
 8006588:	080066c4 	.word	0x080066c4

0800658c <memcpy>:
 800658c:	440a      	add	r2, r1
 800658e:	4291      	cmp	r1, r2
 8006590:	f100 33ff 	add.w	r3, r0, #4294967295
 8006594:	d100      	bne.n	8006598 <memcpy+0xc>
 8006596:	4770      	bx	lr
 8006598:	b510      	push	{r4, lr}
 800659a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800659e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065a2:	4291      	cmp	r1, r2
 80065a4:	d1f9      	bne.n	800659a <memcpy+0xe>
 80065a6:	bd10      	pop	{r4, pc}

080065a8 <_init>:
 80065a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065aa:	bf00      	nop
 80065ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ae:	bc08      	pop	{r3}
 80065b0:	469e      	mov	lr, r3
 80065b2:	4770      	bx	lr

080065b4 <_fini>:
 80065b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065b6:	bf00      	nop
 80065b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065ba:	bc08      	pop	{r3}
 80065bc:	469e      	mov	lr, r3
 80065be:	4770      	bx	lr
