
STM32H747I-DISCO-scratch2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006118  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  080063b8  080063b8  000073b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800643c  0800643c  00008014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800643c  0800643c  00008014  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800643c  0800643c  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800643c  0800643c  0000743c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006440  08006440  00007440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  24000000  08006444  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004978  24000014  08006458  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400498c  08006458  0000898c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000133cc  00000000  00000000  00008042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cde  00000000  00000000  0001b40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  0001e0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c28  00000000  00000000  0001f108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ee5c  00000000  00000000  0001fd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128c1  00000000  00000000  0005eb8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001988f4  00000000  00000000  0007144d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00209d41  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a0  00000000  00000000  00209d84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  0020df24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080063a0 	.word	0x080063a0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	080063a0 	.word	0x080063a0

080002e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002e4:	4b49      	ldr	r3, [pc, #292]	@ (800040c <SystemInit+0x12c>)
 80002e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002ea:	4a48      	ldr	r2, [pc, #288]	@ (800040c <SystemInit+0x12c>)
 80002ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002f4:	4b45      	ldr	r3, [pc, #276]	@ (800040c <SystemInit+0x12c>)
 80002f6:	691b      	ldr	r3, [r3, #16]
 80002f8:	4a44      	ldr	r2, [pc, #272]	@ (800040c <SystemInit+0x12c>)
 80002fa:	f043 0310 	orr.w	r3, r3, #16
 80002fe:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000300:	4b43      	ldr	r3, [pc, #268]	@ (8000410 <SystemInit+0x130>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	f003 030f 	and.w	r3, r3, #15
 8000308:	2b06      	cmp	r3, #6
 800030a:	d807      	bhi.n	800031c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800030c:	4b40      	ldr	r3, [pc, #256]	@ (8000410 <SystemInit+0x130>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f023 030f 	bic.w	r3, r3, #15
 8000314:	4a3e      	ldr	r2, [pc, #248]	@ (8000410 <SystemInit+0x130>)
 8000316:	f043 0307 	orr.w	r3, r3, #7
 800031a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800031c:	4b3d      	ldr	r3, [pc, #244]	@ (8000414 <SystemInit+0x134>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	4a3c      	ldr	r2, [pc, #240]	@ (8000414 <SystemInit+0x134>)
 8000322:	f043 0301 	orr.w	r3, r3, #1
 8000326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000328:	4b3a      	ldr	r3, [pc, #232]	@ (8000414 <SystemInit+0x134>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800032e:	4b39      	ldr	r3, [pc, #228]	@ (8000414 <SystemInit+0x134>)
 8000330:	681a      	ldr	r2, [r3, #0]
 8000332:	4938      	ldr	r1, [pc, #224]	@ (8000414 <SystemInit+0x134>)
 8000334:	4b38      	ldr	r3, [pc, #224]	@ (8000418 <SystemInit+0x138>)
 8000336:	4013      	ands	r3, r2
 8000338:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800033a:	4b35      	ldr	r3, [pc, #212]	@ (8000410 <SystemInit+0x130>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	f003 0308 	and.w	r3, r3, #8
 8000342:	2b00      	cmp	r3, #0
 8000344:	d007      	beq.n	8000356 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000346:	4b32      	ldr	r3, [pc, #200]	@ (8000410 <SystemInit+0x130>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f023 030f 	bic.w	r3, r3, #15
 800034e:	4a30      	ldr	r2, [pc, #192]	@ (8000410 <SystemInit+0x130>)
 8000350:	f043 0307 	orr.w	r3, r3, #7
 8000354:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000356:	4b2f      	ldr	r3, [pc, #188]	@ (8000414 <SystemInit+0x134>)
 8000358:	2200      	movs	r2, #0
 800035a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800035c:	4b2d      	ldr	r3, [pc, #180]	@ (8000414 <SystemInit+0x134>)
 800035e:	2200      	movs	r2, #0
 8000360:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000362:	4b2c      	ldr	r3, [pc, #176]	@ (8000414 <SystemInit+0x134>)
 8000364:	2200      	movs	r2, #0
 8000366:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000368:	4b2a      	ldr	r3, [pc, #168]	@ (8000414 <SystemInit+0x134>)
 800036a:	4a2c      	ldr	r2, [pc, #176]	@ (800041c <SystemInit+0x13c>)
 800036c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800036e:	4b29      	ldr	r3, [pc, #164]	@ (8000414 <SystemInit+0x134>)
 8000370:	4a2b      	ldr	r2, [pc, #172]	@ (8000420 <SystemInit+0x140>)
 8000372:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000374:	4b27      	ldr	r3, [pc, #156]	@ (8000414 <SystemInit+0x134>)
 8000376:	4a2b      	ldr	r2, [pc, #172]	@ (8000424 <SystemInit+0x144>)
 8000378:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800037a:	4b26      	ldr	r3, [pc, #152]	@ (8000414 <SystemInit+0x134>)
 800037c:	2200      	movs	r2, #0
 800037e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000380:	4b24      	ldr	r3, [pc, #144]	@ (8000414 <SystemInit+0x134>)
 8000382:	4a28      	ldr	r2, [pc, #160]	@ (8000424 <SystemInit+0x144>)
 8000384:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000386:	4b23      	ldr	r3, [pc, #140]	@ (8000414 <SystemInit+0x134>)
 8000388:	2200      	movs	r2, #0
 800038a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800038c:	4b21      	ldr	r3, [pc, #132]	@ (8000414 <SystemInit+0x134>)
 800038e:	4a25      	ldr	r2, [pc, #148]	@ (8000424 <SystemInit+0x144>)
 8000390:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000392:	4b20      	ldr	r3, [pc, #128]	@ (8000414 <SystemInit+0x134>)
 8000394:	2200      	movs	r2, #0
 8000396:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000398:	4b1e      	ldr	r3, [pc, #120]	@ (8000414 <SystemInit+0x134>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a1d      	ldr	r2, [pc, #116]	@ (8000414 <SystemInit+0x134>)
 800039e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80003a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80003a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000414 <SystemInit+0x134>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000428 <SystemInit+0x148>)
 80003ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80003ae:	4a1e      	ldr	r2, [pc, #120]	@ (8000428 <SystemInit+0x148>)
 80003b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80003b4:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003b6:	4b1d      	ldr	r3, [pc, #116]	@ (800042c <SystemInit+0x14c>)
 80003b8:	681a      	ldr	r2, [r3, #0]
 80003ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000430 <SystemInit+0x150>)
 80003bc:	4013      	ands	r3, r2
 80003be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80003c2:	d202      	bcs.n	80003ca <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000434 <SystemInit+0x154>)
 80003c6:	2201      	movs	r2, #1
 80003c8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80003ca:	4b12      	ldr	r3, [pc, #72]	@ (8000414 <SystemInit+0x134>)
 80003cc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d113      	bne.n	8000400 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000414 <SystemInit+0x134>)
 80003da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003de:	4a0d      	ldr	r2, [pc, #52]	@ (8000414 <SystemInit+0x134>)
 80003e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80003e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003e8:	4b13      	ldr	r3, [pc, #76]	@ (8000438 <SystemInit+0x158>)
 80003ea:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80003ee:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80003f0:	4b08      	ldr	r3, [pc, #32]	@ (8000414 <SystemInit+0x134>)
 80003f2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80003f6:	4a07      	ldr	r2, [pc, #28]	@ (8000414 <SystemInit+0x134>)
 80003f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003fc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr
 800040a:	bf00      	nop
 800040c:	e000ed00 	.word	0xe000ed00
 8000410:	52002000 	.word	0x52002000
 8000414:	58024400 	.word	0x58024400
 8000418:	eaf6ed7f 	.word	0xeaf6ed7f
 800041c:	02020200 	.word	0x02020200
 8000420:	01ff0000 	.word	0x01ff0000
 8000424:	01010280 	.word	0x01010280
 8000428:	580000c0 	.word	0x580000c0
 800042c:	5c001000 	.word	0x5c001000
 8000430:	ffff0000 	.word	0xffff0000
 8000434:	51008108 	.word	0x51008108
 8000438:	52004000 	.word	0x52004000

0800043c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000440:	4b09      	ldr	r3, [pc, #36]	@ (8000468 <ExitRun0Mode+0x2c>)
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	4a08      	ldr	r2, [pc, #32]	@ (8000468 <ExitRun0Mode+0x2c>)
 8000446:	f023 0302 	bic.w	r3, r3, #2
 800044a:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 800044c:	bf00      	nop
 800044e:	4b06      	ldr	r3, [pc, #24]	@ (8000468 <ExitRun0Mode+0x2c>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0f9      	beq.n	800044e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800045a:	bf00      	nop
 800045c:	bf00      	nop
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop
 8000468:	58024800 	.word	0x58024800

0800046c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000472:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000476:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000478:	bf00      	nop
 800047a:	4b2c      	ldr	r3, [pc, #176]	@ (800052c <main+0xc0>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000482:	2b00      	cmp	r3, #0
 8000484:	d004      	beq.n	8000490 <main+0x24>
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	1e5a      	subs	r2, r3, #1
 800048a:	607a      	str	r2, [r7, #4]
 800048c:	2b00      	cmp	r3, #0
 800048e:	dcf4      	bgt.n	800047a <main+0xe>
  if ( timeout < 0 )
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	2b00      	cmp	r3, #0
 8000494:	da01      	bge.n	800049a <main+0x2e>
  {
  Error_Handler();
 8000496:	f000 f9a9 	bl	80007ec <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 fa1f 	bl	80008dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800049e:	f000 f853 	bl	8000548 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004a2:	f000 f8d7 	bl	8000654 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80004a6:	4b21      	ldr	r3, [pc, #132]	@ (800052c <main+0xc0>)
 80004a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004ac:	4a1f      	ldr	r2, [pc, #124]	@ (800052c <main+0xc0>)
 80004ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80004b6:	4b1d      	ldr	r3, [pc, #116]	@ (800052c <main+0xc0>)
 80004b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80004bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80004c0:	603b      	str	r3, [r7, #0]
 80004c2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80004c4:	2000      	movs	r0, #0
 80004c6:	f000 fd55 	bl	8000f74 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80004ca:	2100      	movs	r1, #0
 80004cc:	2000      	movs	r0, #0
 80004ce:	f000 fd6b 	bl	8000fa8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80004d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80004d6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80004d8:	bf00      	nop
 80004da:	4b14      	ldr	r3, [pc, #80]	@ (800052c <main+0xc0>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d104      	bne.n	80004f0 <main+0x84>
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	1e5a      	subs	r2, r3, #1
 80004ea:	607a      	str	r2, [r7, #4]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	dcf4      	bgt.n	80004da <main+0x6e>
if ( timeout < 0 )
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	da01      	bge.n	80004fa <main+0x8e>
{
Error_Handler();
 80004f6:	f000 f979 	bl	80007ec <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fa:	f000 f8db 	bl	80006b4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004fe:	f003 f997 	bl	8003830 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of workerTask */
  workerTaskHandle = osThreadNew(StartDefaultTask, NULL, &workerTask_attributes);
 8000502:	4a0b      	ldr	r2, [pc, #44]	@ (8000530 <main+0xc4>)
 8000504:	2100      	movs	r1, #0
 8000506:	480b      	ldr	r0, [pc, #44]	@ (8000534 <main+0xc8>)
 8000508:	f003 f9dc 	bl	80038c4 <osThreadNew>
 800050c:	4603      	mov	r3, r0
 800050e:	4a0a      	ldr	r2, [pc, #40]	@ (8000538 <main+0xcc>)
 8000510:	6013      	str	r3, [r2, #0]

  /* creation of ledTask */
  ledTaskHandle = osThreadNew(StarLEDTask, NULL, &ledTask_attributes);
 8000512:	4a0a      	ldr	r2, [pc, #40]	@ (800053c <main+0xd0>)
 8000514:	2100      	movs	r1, #0
 8000516:	480a      	ldr	r0, [pc, #40]	@ (8000540 <main+0xd4>)
 8000518:	f003 f9d4 	bl	80038c4 <osThreadNew>
 800051c:	4603      	mov	r3, r0
 800051e:	4a09      	ldr	r2, [pc, #36]	@ (8000544 <main+0xd8>)
 8000520:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000522:	f003 f9a9 	bl	8003878 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000526:	bf00      	nop
 8000528:	e7fd      	b.n	8000526 <main+0xba>
 800052a:	bf00      	nop
 800052c:	58024400 	.word	0x58024400
 8000530:	080063f4 	.word	0x080063f4
 8000534:	080007a5 	.word	0x080007a5
 8000538:	24000030 	.word	0x24000030
 800053c:	08006418 	.word	0x08006418
 8000540:	080007b5 	.word	0x080007b5
 8000544:	24000034 	.word	0x24000034

08000548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b09c      	sub	sp, #112	@ 0x70
 800054c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800054e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000552:	224c      	movs	r2, #76	@ 0x4c
 8000554:	2100      	movs	r1, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f005 fee8 	bl	800632c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2220      	movs	r2, #32
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f005 fee2 	bl	800632c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000568:	2004      	movs	r0, #4
 800056a:	f000 fd31 	bl	8000fd0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800056e:	2300      	movs	r3, #0
 8000570:	603b      	str	r3, [r7, #0]
 8000572:	4b36      	ldr	r3, [pc, #216]	@ (800064c <SystemClock_Config+0x104>)
 8000574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000576:	4a35      	ldr	r2, [pc, #212]	@ (800064c <SystemClock_Config+0x104>)
 8000578:	f023 0301 	bic.w	r3, r3, #1
 800057c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800057e:	4b33      	ldr	r3, [pc, #204]	@ (800064c <SystemClock_Config+0x104>)
 8000580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000582:	f003 0301 	and.w	r3, r3, #1
 8000586:	603b      	str	r3, [r7, #0]
 8000588:	4b31      	ldr	r3, [pc, #196]	@ (8000650 <SystemClock_Config+0x108>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	4a30      	ldr	r2, [pc, #192]	@ (8000650 <SystemClock_Config+0x108>)
 800058e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000592:	6193      	str	r3, [r2, #24]
 8000594:	4b2e      	ldr	r3, [pc, #184]	@ (8000650 <SystemClock_Config+0x108>)
 8000596:	699b      	ldr	r3, [r3, #24]
 8000598:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800059c:	603b      	str	r3, [r7, #0]
 800059e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005a0:	bf00      	nop
 80005a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000650 <SystemClock_Config+0x108>)
 80005a4:	699b      	ldr	r3, [r3, #24]
 80005a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80005aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005ae:	d1f8      	bne.n	80005a2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80005b0:	230b      	movs	r3, #11
 80005b2:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005ba:	2301      	movs	r3, #1
 80005bc:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005be:	2340      	movs	r3, #64	@ 0x40
 80005c0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005c2:	2301      	movs	r3, #1
 80005c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80005ce:	2305      	movs	r3, #5
 80005d0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 80005d2:	2330      	movs	r3, #48	@ 0x30
 80005d4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80005da:	2305      	movs	r3, #5
 80005dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005de:	2302      	movs	r3, #2
 80005e0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80005e2:	2308      	movs	r3, #8
 80005e4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 fd46 	bl	8001084 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xba>
  {
    Error_Handler();
 80005fe:	f000 f8f5 	bl	80007ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	233f      	movs	r3, #63	@ 0x3f
 8000604:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000606:	2300      	movs	r3, #0
 8000608:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 800061a:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800061e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f001 f985 	bl	8001938 <HAL_RCC_ClockConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000634:	f000 f8da 	bl	80007ec <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000638:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800063c:	2100      	movs	r1, #0
 800063e:	2000      	movs	r0, #0
 8000640:	f001 fb30 	bl	8001ca4 <HAL_RCC_MCOConfig>
}
 8000644:	bf00      	nop
 8000646:	3770      	adds	r7, #112	@ 0x70
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	58000400 	.word	0x58000400
 8000650:	58024800 	.word	0x58024800

08000654 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b0b2      	sub	sp, #200	@ 0xc8
 8000658:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800065a:	463b      	mov	r3, r7
 800065c:	22c8      	movs	r2, #200	@ 0xc8
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f005 fe63 	bl	800632c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000666:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800066a:	f04f 0300 	mov.w	r3, #0
 800066e:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000672:	2302      	movs	r3, #2
 8000674:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000676:	230c      	movs	r3, #12
 8000678:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800067a:	2302      	movs	r3, #2
 800067c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800067e:	2302      	movs	r3, #2
 8000680:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000682:	2302      	movs	r3, #2
 8000684:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000686:	23c0      	movs	r3, #192	@ 0xc0
 8000688:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800068a:	2320      	movs	r3, #32
 800068c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000692:	2300      	movs	r3, #0
 8000694:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fce6 	bl	800206c <HAL_RCCEx_PeriphCLKConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 80006a6:	f000 f8a1 	bl	80007ec <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	37c8      	adds	r7, #200	@ 0xc8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
	...

080006b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	@ 0x28
 80006b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	4b33      	ldr	r3, [pc, #204]	@ (8000798 <MX_GPIO_Init+0xe4>)
 80006cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d0:	4a31      	ldr	r2, [pc, #196]	@ (8000798 <MX_GPIO_Init+0xe4>)
 80006d2:	f043 0304 	orr.w	r3, r3, #4
 80006d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006da:	4b2f      	ldr	r3, [pc, #188]	@ (8000798 <MX_GPIO_Init+0xe4>)
 80006dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000798 <MX_GPIO_Init+0xe4>)
 80006ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006ee:	4a2a      	ldr	r2, [pc, #168]	@ (8000798 <MX_GPIO_Init+0xe4>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006f8:	4b27      	ldr	r3, [pc, #156]	@ (8000798 <MX_GPIO_Init+0xe4>)
 80006fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000706:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <MX_GPIO_Init+0xe4>)
 8000708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800070c:	4a22      	ldr	r2, [pc, #136]	@ (8000798 <MX_GPIO_Init+0xe4>)
 800070e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000712:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000716:	4b20      	ldr	r3, [pc, #128]	@ (8000798 <MX_GPIO_Init+0xe4>)
 8000718:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800071c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000720:	60bb      	str	r3, [r7, #8]
 8000722:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000724:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <MX_GPIO_Init+0xe4>)
 8000726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072a:	4a1b      	ldr	r2, [pc, #108]	@ (8000798 <MX_GPIO_Init+0xe4>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000730:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000734:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <MX_GPIO_Init+0xe4>)
 8000736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000742:	2201      	movs	r2, #1
 8000744:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000748:	4814      	ldr	r0, [pc, #80]	@ (800079c <MX_GPIO_Init+0xe8>)
 800074a:	f000 fbf9 	bl	8000f40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 800074e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000754:	2302      	movs	r3, #2
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000760:	2300      	movs	r3, #0
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	480d      	ldr	r0, [pc, #52]	@ (80007a0 <MX_GPIO_Init+0xec>)
 800076c:	f000 fa38 	bl	8000be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000776:	2301      	movs	r3, #1
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	4804      	ldr	r0, [pc, #16]	@ (800079c <MX_GPIO_Init+0xe8>)
 800078a:	f000 fa29 	bl	8000be0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800078e:	bf00      	nop
 8000790:	3728      	adds	r7, #40	@ 0x28
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	58024400 	.word	0x58024400
 800079c:	58022000 	.word	0x58022000
 80007a0:	58020000 	.word	0x58020000

080007a4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007ac:	2001      	movs	r0, #1
 80007ae:	f003 f91b 	bl	80039e8 <osDelay>
 80007b2:	e7fb      	b.n	80007ac <StartDefaultTask+0x8>

080007b4 <StarLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StarLEDTask */
void StarLEDTask(void *argument)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StarLEDTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007c2:	4809      	ldr	r0, [pc, #36]	@ (80007e8 <StarLEDTask+0x34>)
 80007c4:	f000 fbbc 	bl	8000f40 <HAL_GPIO_WritePin>
    osDelay(1000);
 80007c8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007cc:	f003 f90c 	bl	80039e8 <osDelay>
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80007d0:	2200      	movs	r2, #0
 80007d2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007d6:	4804      	ldr	r0, [pc, #16]	@ (80007e8 <StarLEDTask+0x34>)
 80007d8:	f000 fbb2 	bl	8000f40 <HAL_GPIO_WritePin>
    osDelay(1000);
 80007dc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007e0:	f003 f902 	bl	80039e8 <osDelay>
	  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 80007e4:	bf00      	nop
 80007e6:	e7e9      	b.n	80007bc <StarLEDTask+0x8>
 80007e8:	58022000 	.word	0x58022000

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <Error_Handler+0x8>

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000830 <HAL_MspInit+0x38>)
 8000800:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000804:	4a0a      	ldr	r2, [pc, #40]	@ (8000830 <HAL_MspInit+0x38>)
 8000806:	f043 0302 	orr.w	r3, r3, #2
 800080a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800080e:	4b08      	ldr	r3, [pc, #32]	@ (8000830 <HAL_MspInit+0x38>)
 8000810:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000814:	f003 0302 	and.w	r3, r3, #2
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	210f      	movs	r1, #15
 8000820:	f06f 0001 	mvn.w	r0, #1
 8000824:	f000 f9b5 	bl	8000b92 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	58024400 	.word	0x58024400

08000834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <NMI_Handler+0x4>

0800083c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000840:	bf00      	nop
 8000842:	e7fd      	b.n	8000840 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <MemManage_Handler+0x4>

0800084c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000850:	bf00      	nop
 8000852:	e7fd      	b.n	8000850 <BusFault_Handler+0x4>

08000854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <UsageFault_Handler+0x4>

0800085c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800086e:	f000 f8a7 	bl	80009c0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000872:	f005 f91f 	bl	8005ab4 <xTaskGetSchedulerState>
 8000876:	4603      	mov	r3, r0
 8000878:	2b01      	cmp	r3, #1
 800087a:	d001      	beq.n	8000880 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800087c:	f003 fd64 	bl	8004348 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000884:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80008c0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000888:	f7ff fdd8 	bl	800043c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800088c:	f7ff fd28 	bl	80002e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000890:	480c      	ldr	r0, [pc, #48]	@ (80008c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000892:	490d      	ldr	r1, [pc, #52]	@ (80008c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000894:	4a0d      	ldr	r2, [pc, #52]	@ (80008cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000898:	e002      	b.n	80008a0 <LoopCopyDataInit>

0800089a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800089c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089e:	3304      	adds	r3, #4

080008a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a4:	d3f9      	bcc.n	800089a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a6:	4a0a      	ldr	r2, [pc, #40]	@ (80008d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008a8:	4c0a      	ldr	r4, [pc, #40]	@ (80008d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ac:	e001      	b.n	80008b2 <LoopFillZerobss>

080008ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b0:	3204      	adds	r2, #4

080008b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b4:	d3fb      	bcc.n	80008ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008b6:	f005 fd41 	bl	800633c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ba:	f7ff fdd7 	bl	800046c <main>
  bx  lr
 80008be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80008c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80008c8:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80008cc:	08006444 	.word	0x08006444
  ldr r2, =_sbss
 80008d0:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 80008d4:	2400498c 	.word	0x2400498c

080008d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC3_IRQHandler>
	...

080008dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008e2:	2003      	movs	r0, #3
 80008e4:	f000 f94a 	bl	8000b7c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80008e8:	f001 fa46 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 80008ec:	4602      	mov	r2, r0
 80008ee:	4b15      	ldr	r3, [pc, #84]	@ (8000944 <HAL_Init+0x68>)
 80008f0:	699b      	ldr	r3, [r3, #24]
 80008f2:	0a1b      	lsrs	r3, r3, #8
 80008f4:	f003 030f 	and.w	r3, r3, #15
 80008f8:	4913      	ldr	r1, [pc, #76]	@ (8000948 <HAL_Init+0x6c>)
 80008fa:	5ccb      	ldrb	r3, [r1, r3]
 80008fc:	f003 031f 	and.w	r3, r3, #31
 8000900:	fa22 f303 	lsr.w	r3, r2, r3
 8000904:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000906:	4b0f      	ldr	r3, [pc, #60]	@ (8000944 <HAL_Init+0x68>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f003 030f 	and.w	r3, r3, #15
 800090e:	4a0e      	ldr	r2, [pc, #56]	@ (8000948 <HAL_Init+0x6c>)
 8000910:	5cd3      	ldrb	r3, [r2, r3]
 8000912:	f003 031f 	and.w	r3, r3, #31
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	fa22 f303 	lsr.w	r3, r2, r3
 800091c:	4a0b      	ldr	r2, [pc, #44]	@ (800094c <HAL_Init+0x70>)
 800091e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000920:	4a0b      	ldr	r2, [pc, #44]	@ (8000950 <HAL_Init+0x74>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000926:	200f      	movs	r0, #15
 8000928:	f000 f814 	bl	8000954 <HAL_InitTick>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
 8000934:	e002      	b.n	800093c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000936:	f7ff ff5f 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800093a:	2300      	movs	r3, #0
}
 800093c:	4618      	mov	r0, r3
 800093e:	3708      	adds	r7, #8
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	58024400 	.word	0x58024400
 8000948:	080063e4 	.word	0x080063e4
 800094c:	24000004 	.word	0x24000004
 8000950:	24000000 	.word	0x24000000

08000954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800095c:	4b15      	ldr	r3, [pc, #84]	@ (80009b4 <HAL_InitTick+0x60>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d101      	bne.n	8000968 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000964:	2301      	movs	r3, #1
 8000966:	e021      	b.n	80009ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000968:	4b13      	ldr	r3, [pc, #76]	@ (80009b8 <HAL_InitTick+0x64>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b11      	ldr	r3, [pc, #68]	@ (80009b4 <HAL_InitTick+0x60>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000976:	fbb3 f3f1 	udiv	r3, r3, r1
 800097a:	fbb2 f3f3 	udiv	r3, r2, r3
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f921 	bl	8000bc6 <HAL_SYSTICK_Config>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e00e      	b.n	80009ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b0f      	cmp	r3, #15
 8000992:	d80a      	bhi.n	80009aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000994:	2200      	movs	r2, #0
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	f000 f8f9 	bl	8000b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a0:	4a06      	ldr	r2, [pc, #24]	@ (80009bc <HAL_InitTick+0x68>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
 80009a8:	e000      	b.n	80009ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	2400000c 	.word	0x2400000c
 80009b8:	24000000 	.word	0x24000000
 80009bc:	24000008 	.word	0x24000008

080009c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <HAL_IncTick+0x20>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <HAL_IncTick+0x24>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	4a04      	ldr	r2, [pc, #16]	@ (80009e4 <HAL_IncTick+0x24>)
 80009d2:	6013      	str	r3, [r2, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	2400000c 	.word	0x2400000c
 80009e4:	24000038 	.word	0x24000038

080009e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  return uwTick;
 80009ec:	4b03      	ldr	r3, [pc, #12]	@ (80009fc <HAL_GetTick+0x14>)
 80009ee:	681b      	ldr	r3, [r3, #0]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	24000038 	.word	0x24000038

08000a00 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a04:	4b03      	ldr	r3, [pc, #12]	@ (8000a14 <HAL_GetREVID+0x14>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	0c1b      	lsrs	r3, r3, #16
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	5c001000 	.word	0x5c001000

08000a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b085      	sub	sp, #20
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a28:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <__NVIC_SetPriorityGrouping+0x40>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a2e:	68ba      	ldr	r2, [r7, #8]
 8000a30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a34:	4013      	ands	r3, r2
 8000a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <__NVIC_SetPriorityGrouping+0x44>)
 8000a42:	4313      	orrs	r3, r2
 8000a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a46:	4a04      	ldr	r2, [pc, #16]	@ (8000a58 <__NVIC_SetPriorityGrouping+0x40>)
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	60d3      	str	r3, [r2, #12]
}
 8000a4c:	bf00      	nop
 8000a4e:	3714      	adds	r7, #20
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00
 8000a5c:	05fa0000 	.word	0x05fa0000

08000a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a64:	4b04      	ldr	r3, [pc, #16]	@ (8000a78 <__NVIC_GetPriorityGrouping+0x18>)
 8000a66:	68db      	ldr	r3, [r3, #12]
 8000a68:	0a1b      	lsrs	r3, r3, #8
 8000a6a:	f003 0307 	and.w	r3, r3, #7
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db0a      	blt.n	8000aa6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	490c      	ldr	r1, [pc, #48]	@ (8000ac8 <__NVIC_SetPriority+0x4c>)
 8000a96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a9a:	0112      	lsls	r2, r2, #4
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aa4:	e00a      	b.n	8000abc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4908      	ldr	r1, [pc, #32]	@ (8000acc <__NVIC_SetPriority+0x50>)
 8000aac:	88fb      	ldrh	r3, [r7, #6]
 8000aae:	f003 030f 	and.w	r3, r3, #15
 8000ab2:	3b04      	subs	r3, #4
 8000ab4:	0112      	lsls	r2, r2, #4
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	440b      	add	r3, r1
 8000aba:	761a      	strb	r2, [r3, #24]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000e100 	.word	0xe000e100
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	@ 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	f1c3 0307 	rsb	r3, r3, #7
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	bf28      	it	cs
 8000aee:	2304      	movcs	r3, #4
 8000af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3304      	adds	r3, #4
 8000af6:	2b06      	cmp	r3, #6
 8000af8:	d902      	bls.n	8000b00 <NVIC_EncodePriority+0x30>
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3b03      	subs	r3, #3
 8000afe:	e000      	b.n	8000b02 <NVIC_EncodePriority+0x32>
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	f04f 32ff 	mov.w	r2, #4294967295
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	401a      	ands	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b18:	f04f 31ff 	mov.w	r1, #4294967295
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	43d9      	mvns	r1, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	4313      	orrs	r3, r2
         );
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3724      	adds	r7, #36	@ 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b48:	d301      	bcc.n	8000b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	e00f      	b.n	8000b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b78 <SysTick_Config+0x40>)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	3b01      	subs	r3, #1
 8000b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b56:	210f      	movs	r1, #15
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	f7ff ff8e 	bl	8000a7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b60:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <SysTick_Config+0x40>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b66:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <SysTick_Config+0x40>)
 8000b68:	2207      	movs	r2, #7
 8000b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	e000e010 	.word	0xe000e010

08000b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff ff47 	bl	8000a18 <__NVIC_SetPriorityGrouping>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b086      	sub	sp, #24
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	4603      	mov	r3, r0
 8000b9a:	60b9      	str	r1, [r7, #8]
 8000b9c:	607a      	str	r2, [r7, #4]
 8000b9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ba0:	f7ff ff5e 	bl	8000a60 <__NVIC_GetPriorityGrouping>
 8000ba4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ba6:	687a      	ldr	r2, [r7, #4]
 8000ba8:	68b9      	ldr	r1, [r7, #8]
 8000baa:	6978      	ldr	r0, [r7, #20]
 8000bac:	f7ff ff90 	bl	8000ad0 <NVIC_EncodePriority>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000bb6:	4611      	mov	r1, r2
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff5f 	bl	8000a7c <__NVIC_SetPriority>
}
 8000bbe:	bf00      	nop
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffb2 	bl	8000b38 <SysTick_Config>
 8000bd4:	4603      	mov	r3, r0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
	...

08000be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b089      	sub	sp, #36	@ 0x24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000bee:	4b89      	ldr	r3, [pc, #548]	@ (8000e14 <HAL_GPIO_Init+0x234>)
 8000bf0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000bf2:	e194      	b.n	8000f1e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	69fb      	ldr	r3, [r7, #28]
 8000bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000c04:	693b      	ldr	r3, [r7, #16]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f000 8186 	beq.w	8000f18 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f003 0303 	and.w	r3, r3, #3
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d005      	beq.n	8000c24 <HAL_GPIO_Init+0x44>
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d130      	bne.n	8000c86 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	2203      	movs	r2, #3
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	43db      	mvns	r3, r3
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	69fb      	ldr	r3, [r7, #28]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43db      	mvns	r3, r3
 8000c64:	69ba      	ldr	r2, [r7, #24]
 8000c66:	4013      	ands	r3, r2
 8000c68:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	091b      	lsrs	r3, r3, #4
 8000c70:	f003 0201 	and.w	r2, r3, #1
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 0303 	and.w	r3, r3, #3
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	d017      	beq.n	8000cc2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c98:	69fb      	ldr	r3, [r7, #28]
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	2203      	movs	r2, #3
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43db      	mvns	r3, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	689a      	ldr	r2, [r3, #8]
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	69ba      	ldr	r2, [r7, #24]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	685b      	ldr	r3, [r3, #4]
 8000cc6:	f003 0303 	and.w	r3, r3, #3
 8000cca:	2b02      	cmp	r3, #2
 8000ccc:	d123      	bne.n	8000d16 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	08da      	lsrs	r2, r3, #3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	3208      	adds	r2, #8
 8000cd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000cdc:	69fb      	ldr	r3, [r7, #28]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	009b      	lsls	r3, r3, #2
 8000ce4:	220f      	movs	r2, #15
 8000ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cea:	43db      	mvns	r3, r3
 8000cec:	69ba      	ldr	r2, [r7, #24]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	691a      	ldr	r2, [r3, #16]
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	f003 0307 	and.w	r3, r3, #7
 8000cfc:	009b      	lsls	r3, r3, #2
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	69ba      	ldr	r2, [r7, #24]
 8000d04:	4313      	orrs	r3, r2
 8000d06:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	08da      	lsrs	r2, r3, #3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3208      	adds	r2, #8
 8000d10:	69b9      	ldr	r1, [r7, #24]
 8000d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	2203      	movs	r2, #3
 8000d22:	fa02 f303 	lsl.w	r3, r2, r3
 8000d26:	43db      	mvns	r3, r3
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 0203 	and.w	r2, r3, #3
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	f000 80e0 	beq.w	8000f18 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d58:	4b2f      	ldr	r3, [pc, #188]	@ (8000e18 <HAL_GPIO_Init+0x238>)
 8000d5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d5e:	4a2e      	ldr	r2, [pc, #184]	@ (8000e18 <HAL_GPIO_Init+0x238>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d68:	4b2b      	ldr	r3, [pc, #172]	@ (8000e18 <HAL_GPIO_Init+0x238>)
 8000d6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d6e:	f003 0302 	and.w	r3, r3, #2
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d76:	4a29      	ldr	r2, [pc, #164]	@ (8000e1c <HAL_GPIO_Init+0x23c>)
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	089b      	lsrs	r3, r3, #2
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a20      	ldr	r2, [pc, #128]	@ (8000e20 <HAL_GPIO_Init+0x240>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d052      	beq.n	8000e48 <HAL_GPIO_Init+0x268>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a1f      	ldr	r2, [pc, #124]	@ (8000e24 <HAL_GPIO_Init+0x244>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d031      	beq.n	8000e0e <HAL_GPIO_Init+0x22e>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a1e      	ldr	r2, [pc, #120]	@ (8000e28 <HAL_GPIO_Init+0x248>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d02b      	beq.n	8000e0a <HAL_GPIO_Init+0x22a>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a1d      	ldr	r2, [pc, #116]	@ (8000e2c <HAL_GPIO_Init+0x24c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d025      	beq.n	8000e06 <HAL_GPIO_Init+0x226>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a1c      	ldr	r2, [pc, #112]	@ (8000e30 <HAL_GPIO_Init+0x250>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d01f      	beq.n	8000e02 <HAL_GPIO_Init+0x222>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e34 <HAL_GPIO_Init+0x254>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d019      	beq.n	8000dfe <HAL_GPIO_Init+0x21e>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8000e38 <HAL_GPIO_Init+0x258>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d013      	beq.n	8000dfa <HAL_GPIO_Init+0x21a>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a19      	ldr	r2, [pc, #100]	@ (8000e3c <HAL_GPIO_Init+0x25c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d00d      	beq.n	8000df6 <HAL_GPIO_Init+0x216>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a18      	ldr	r2, [pc, #96]	@ (8000e40 <HAL_GPIO_Init+0x260>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d007      	beq.n	8000df2 <HAL_GPIO_Init+0x212>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a17      	ldr	r2, [pc, #92]	@ (8000e44 <HAL_GPIO_Init+0x264>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d101      	bne.n	8000dee <HAL_GPIO_Init+0x20e>
 8000dea:	2309      	movs	r3, #9
 8000dec:	e02d      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000dee:	230a      	movs	r3, #10
 8000df0:	e02b      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000df2:	2308      	movs	r3, #8
 8000df4:	e029      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000df6:	2307      	movs	r3, #7
 8000df8:	e027      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000dfa:	2306      	movs	r3, #6
 8000dfc:	e025      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000dfe:	2305      	movs	r3, #5
 8000e00:	e023      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000e02:	2304      	movs	r3, #4
 8000e04:	e021      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000e06:	2303      	movs	r3, #3
 8000e08:	e01f      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	e01d      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e01b      	b.n	8000e4a <HAL_GPIO_Init+0x26a>
 8000e12:	bf00      	nop
 8000e14:	58000080 	.word	0x58000080
 8000e18:	58024400 	.word	0x58024400
 8000e1c:	58000400 	.word	0x58000400
 8000e20:	58020000 	.word	0x58020000
 8000e24:	58020400 	.word	0x58020400
 8000e28:	58020800 	.word	0x58020800
 8000e2c:	58020c00 	.word	0x58020c00
 8000e30:	58021000 	.word	0x58021000
 8000e34:	58021400 	.word	0x58021400
 8000e38:	58021800 	.word	0x58021800
 8000e3c:	58021c00 	.word	0x58021c00
 8000e40:	58022000 	.word	0x58022000
 8000e44:	58022400 	.word	0x58022400
 8000e48:	2300      	movs	r3, #0
 8000e4a:	69fa      	ldr	r2, [r7, #28]
 8000e4c:	f002 0203 	and.w	r2, r2, #3
 8000e50:	0092      	lsls	r2, r2, #2
 8000e52:	4093      	lsls	r3, r2
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e5a:	4938      	ldr	r1, [pc, #224]	@ (8000f3c <HAL_GPIO_Init+0x35c>)
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d003      	beq.n	8000e8e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8000e8e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8000ebc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d003      	beq.n	8000ee8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4013      	ands	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d003      	beq.n	8000f12 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	681a      	ldr	r2, [r3, #0]
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	fa22 f303 	lsr.w	r3, r2, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	f47f ae63 	bne.w	8000bf4 <HAL_GPIO_Init+0x14>
  }
}
 8000f2e:	bf00      	nop
 8000f30:	bf00      	nop
 8000f32:	3724      	adds	r7, #36	@ 0x24
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	58000400 	.word	0x58000400

08000f40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	460b      	mov	r3, r1
 8000f4a:	807b      	strh	r3, [r7, #2]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f50:	787b      	ldrb	r3, [r7, #1]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d003      	beq.n	8000f5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f56:	887a      	ldrh	r2, [r7, #2]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8000f5c:	e003      	b.n	8000f66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f5e:	887b      	ldrh	r3, [r7, #2]
 8000f60:	041a      	lsls	r2, r3, #16
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	619a      	str	r2, [r3, #24]
}
 8000f66:	bf00      	nop
 8000f68:	370c      	adds	r7, #12
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8000f7c:	4a08      	ldr	r2, [pc, #32]	@ (8000fa0 <HAL_HSEM_FastTake+0x2c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3320      	adds	r3, #32
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	4a07      	ldr	r2, [pc, #28]	@ (8000fa4 <HAL_HSEM_FastTake+0x30>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d101      	bne.n	8000f90 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e000      	b.n	8000f92 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	58026400 	.word	0x58026400
 8000fa4:	80000300 	.word	0x80000300

08000fa8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8000fb2:	4906      	ldr	r1, [pc, #24]	@ (8000fcc <HAL_HSEM_Release+0x24>)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	58026400 	.word	0x58026400

08000fd0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8000fd8:	4b29      	ldr	r3, [pc, #164]	@ (8001080 <HAL_PWREx_ConfigSupply+0xb0>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	2b06      	cmp	r3, #6
 8000fe2:	d00a      	beq.n	8000ffa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8000fe4:	4b26      	ldr	r3, [pc, #152]	@ (8001080 <HAL_PWREx_ConfigSupply+0xb0>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000fec:	687a      	ldr	r2, [r7, #4]
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d001      	beq.n	8000ff6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e040      	b.n	8001078 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	e03e      	b.n	8001078 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8000ffa:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <HAL_PWREx_ConfigSupply+0xb0>)
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001002:	491f      	ldr	r1, [pc, #124]	@ (8001080 <HAL_PWREx_ConfigSupply+0xb0>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4313      	orrs	r3, r2
 8001008:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800100a:	f7ff fced 	bl	80009e8 <HAL_GetTick>
 800100e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001010:	e009      	b.n	8001026 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001012:	f7ff fce9 	bl	80009e8 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001020:	d901      	bls.n	8001026 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e028      	b.n	8001078 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001026:	4b16      	ldr	r3, [pc, #88]	@ (8001080 <HAL_PWREx_ConfigSupply+0xb0>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800102e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001032:	d1ee      	bne.n	8001012 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b1e      	cmp	r3, #30
 8001038:	d008      	beq.n	800104c <HAL_PWREx_ConfigSupply+0x7c>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b2e      	cmp	r3, #46	@ 0x2e
 800103e:	d005      	beq.n	800104c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b1d      	cmp	r3, #29
 8001044:	d002      	beq.n	800104c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b2d      	cmp	r3, #45	@ 0x2d
 800104a:	d114      	bne.n	8001076 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800104c:	f7ff fccc 	bl	80009e8 <HAL_GetTick>
 8001050:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001052:	e009      	b.n	8001068 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001054:	f7ff fcc8 	bl	80009e8 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001062:	d901      	bls.n	8001068 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e007      	b.n	8001078 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001068:	4b05      	ldr	r3, [pc, #20]	@ (8001080 <HAL_PWREx_ConfigSupply+0xb0>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001070:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001074:	d1ee      	bne.n	8001054 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001076:	2300      	movs	r3, #0
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	58024800 	.word	0x58024800

08001084 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08c      	sub	sp, #48	@ 0x30
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	f000 bc48 	b.w	8001928 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	f000 8088 	beq.w	80011b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010a6:	4b99      	ldr	r3, [pc, #612]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 80010a8:	691b      	ldr	r3, [r3, #16]
 80010aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80010ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80010b0:	4b96      	ldr	r3, [pc, #600]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 80010b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80010b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010b8:	2b10      	cmp	r3, #16
 80010ba:	d007      	beq.n	80010cc <HAL_RCC_OscConfig+0x48>
 80010bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010be:	2b18      	cmp	r3, #24
 80010c0:	d111      	bne.n	80010e6 <HAL_RCC_OscConfig+0x62>
 80010c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d10c      	bne.n	80010e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010cc:	4b8f      	ldr	r3, [pc, #572]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d06d      	beq.n	80011b4 <HAL_RCC_OscConfig+0x130>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d169      	bne.n	80011b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	f000 bc21 	b.w	8001928 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010ee:	d106      	bne.n	80010fe <HAL_RCC_OscConfig+0x7a>
 80010f0:	4b86      	ldr	r3, [pc, #536]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a85      	ldr	r2, [pc, #532]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 80010f6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	e02e      	b.n	800115c <HAL_RCC_OscConfig+0xd8>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10c      	bne.n	8001120 <HAL_RCC_OscConfig+0x9c>
 8001106:	4b81      	ldr	r3, [pc, #516]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a80      	ldr	r2, [pc, #512]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 800110c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001110:	6013      	str	r3, [r2, #0]
 8001112:	4b7e      	ldr	r3, [pc, #504]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a7d      	ldr	r2, [pc, #500]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 8001118:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800111c:	6013      	str	r3, [r2, #0]
 800111e:	e01d      	b.n	800115c <HAL_RCC_OscConfig+0xd8>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001128:	d10c      	bne.n	8001144 <HAL_RCC_OscConfig+0xc0>
 800112a:	4b78      	ldr	r3, [pc, #480]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a77      	ldr	r2, [pc, #476]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 8001130:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001134:	6013      	str	r3, [r2, #0]
 8001136:	4b75      	ldr	r3, [pc, #468]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a74      	ldr	r2, [pc, #464]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 800113c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001140:	6013      	str	r3, [r2, #0]
 8001142:	e00b      	b.n	800115c <HAL_RCC_OscConfig+0xd8>
 8001144:	4b71      	ldr	r3, [pc, #452]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a70      	ldr	r2, [pc, #448]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 800114a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800114e:	6013      	str	r3, [r2, #0]
 8001150:	4b6e      	ldr	r3, [pc, #440]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a6d      	ldr	r2, [pc, #436]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 8001156:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800115a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d013      	beq.n	800118c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001164:	f7ff fc40 	bl	80009e8 <HAL_GetTick>
 8001168:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800116c:	f7ff fc3c 	bl	80009e8 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b64      	cmp	r3, #100	@ 0x64
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e3d4      	b.n	8001928 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800117e:	4b63      	ldr	r3, [pc, #396]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f0      	beq.n	800116c <HAL_RCC_OscConfig+0xe8>
 800118a:	e014      	b.n	80011b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118c:	f7ff fc2c 	bl	80009e8 <HAL_GetTick>
 8001190:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff fc28 	bl	80009e8 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	@ 0x64
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e3c0      	b.n	8001928 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011a6:	4b59      	ldr	r3, [pc, #356]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1f0      	bne.n	8001194 <HAL_RCC_OscConfig+0x110>
 80011b2:	e000      	b.n	80011b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 80ca 	beq.w	8001358 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011c4:	4b51      	ldr	r3, [pc, #324]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80011cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011ce:	4b4f      	ldr	r3, [pc, #316]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 80011d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80011d4:	6a3b      	ldr	r3, [r7, #32]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d007      	beq.n	80011ea <HAL_RCC_OscConfig+0x166>
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	2b18      	cmp	r3, #24
 80011de:	d156      	bne.n	800128e <HAL_RCC_OscConfig+0x20a>
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f003 0303 	and.w	r3, r3, #3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d151      	bne.n	800128e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011ea:	4b48      	ldr	r3, [pc, #288]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d005      	beq.n	8001202 <HAL_RCC_OscConfig+0x17e>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d101      	bne.n	8001202 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e392      	b.n	8001928 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001202:	4b42      	ldr	r3, [pc, #264]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f023 0219 	bic.w	r2, r3, #25
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	68db      	ldr	r3, [r3, #12]
 800120e:	493f      	ldr	r1, [pc, #252]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 8001210:	4313      	orrs	r3, r2
 8001212:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001214:	f7ff fbe8 	bl	80009e8 <HAL_GetTick>
 8001218:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800121c:	f7ff fbe4 	bl	80009e8 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e37c      	b.n	8001928 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800122e:	4b37      	ldr	r3, [pc, #220]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0304 	and.w	r3, r3, #4
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0f0      	beq.n	800121c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800123a:	f7ff fbe1 	bl	8000a00 <HAL_GetREVID>
 800123e:	4603      	mov	r3, r0
 8001240:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001244:	4293      	cmp	r3, r2
 8001246:	d817      	bhi.n	8001278 <HAL_RCC_OscConfig+0x1f4>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	2b40      	cmp	r3, #64	@ 0x40
 800124e:	d108      	bne.n	8001262 <HAL_RCC_OscConfig+0x1de>
 8001250:	4b2e      	ldr	r3, [pc, #184]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001258:	4a2c      	ldr	r2, [pc, #176]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 800125a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800125e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001260:	e07a      	b.n	8001358 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001262:	4b2a      	ldr	r3, [pc, #168]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	691b      	ldr	r3, [r3, #16]
 800126e:	031b      	lsls	r3, r3, #12
 8001270:	4926      	ldr	r1, [pc, #152]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 8001272:	4313      	orrs	r3, r2
 8001274:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001276:	e06f      	b.n	8001358 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001278:	4b24      	ldr	r3, [pc, #144]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	061b      	lsls	r3, r3, #24
 8001286:	4921      	ldr	r1, [pc, #132]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 8001288:	4313      	orrs	r3, r2
 800128a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800128c:	e064      	b.n	8001358 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d047      	beq.n	8001326 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001296:	4b1d      	ldr	r3, [pc, #116]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f023 0219 	bic.w	r2, r3, #25
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	491a      	ldr	r1, [pc, #104]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 80012a4:	4313      	orrs	r3, r2
 80012a6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a8:	f7ff fb9e 	bl	80009e8 <HAL_GetTick>
 80012ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b0:	f7ff fb9a 	bl	80009e8 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e332      	b.n	8001928 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012c2:	4b12      	ldr	r3, [pc, #72]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d0f0      	beq.n	80012b0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ce:	f7ff fb97 	bl	8000a00 <HAL_GetREVID>
 80012d2:	4603      	mov	r3, r0
 80012d4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80012d8:	4293      	cmp	r3, r2
 80012da:	d819      	bhi.n	8001310 <HAL_RCC_OscConfig+0x28c>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	2b40      	cmp	r3, #64	@ 0x40
 80012e2:	d108      	bne.n	80012f6 <HAL_RCC_OscConfig+0x272>
 80012e4:	4b09      	ldr	r3, [pc, #36]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80012ec:	4a07      	ldr	r2, [pc, #28]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 80012ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012f2:	6053      	str	r3, [r2, #4]
 80012f4:	e030      	b.n	8001358 <HAL_RCC_OscConfig+0x2d4>
 80012f6:	4b05      	ldr	r3, [pc, #20]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	031b      	lsls	r3, r3, #12
 8001304:	4901      	ldr	r1, [pc, #4]	@ (800130c <HAL_RCC_OscConfig+0x288>)
 8001306:	4313      	orrs	r3, r2
 8001308:	604b      	str	r3, [r1, #4]
 800130a:	e025      	b.n	8001358 <HAL_RCC_OscConfig+0x2d4>
 800130c:	58024400 	.word	0x58024400
 8001310:	4b9a      	ldr	r3, [pc, #616]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691b      	ldr	r3, [r3, #16]
 800131c:	061b      	lsls	r3, r3, #24
 800131e:	4997      	ldr	r1, [pc, #604]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001320:	4313      	orrs	r3, r2
 8001322:	604b      	str	r3, [r1, #4]
 8001324:	e018      	b.n	8001358 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001326:	4b95      	ldr	r3, [pc, #596]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a94      	ldr	r2, [pc, #592]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 800132c:	f023 0301 	bic.w	r3, r3, #1
 8001330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001332:	f7ff fb59 	bl	80009e8 <HAL_GetTick>
 8001336:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800133a:	f7ff fb55 	bl	80009e8 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e2ed      	b.n	8001928 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800134c:	4b8b      	ldr	r3, [pc, #556]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	2b00      	cmp	r3, #0
 8001356:	d1f0      	bne.n	800133a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0310 	and.w	r3, r3, #16
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 80a9 	beq.w	80014b8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001366:	4b85      	ldr	r3, [pc, #532]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800136e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001370:	4b82      	ldr	r3, [pc, #520]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001374:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	2b08      	cmp	r3, #8
 800137a:	d007      	beq.n	800138c <HAL_RCC_OscConfig+0x308>
 800137c:	69bb      	ldr	r3, [r7, #24]
 800137e:	2b18      	cmp	r3, #24
 8001380:	d13a      	bne.n	80013f8 <HAL_RCC_OscConfig+0x374>
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f003 0303 	and.w	r3, r3, #3
 8001388:	2b01      	cmp	r3, #1
 800138a:	d135      	bne.n	80013f8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800138c:	4b7b      	ldr	r3, [pc, #492]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001394:	2b00      	cmp	r3, #0
 8001396:	d005      	beq.n	80013a4 <HAL_RCC_OscConfig+0x320>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	2b80      	cmp	r3, #128	@ 0x80
 800139e:	d001      	beq.n	80013a4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e2c1      	b.n	8001928 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013a4:	f7ff fb2c 	bl	8000a00 <HAL_GetREVID>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f241 0203 	movw	r2, #4099	@ 0x1003
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d817      	bhi.n	80013e2 <HAL_RCC_OscConfig+0x35e>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	2b20      	cmp	r3, #32
 80013b8:	d108      	bne.n	80013cc <HAL_RCC_OscConfig+0x348>
 80013ba:	4b70      	ldr	r3, [pc, #448]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80013c2:	4a6e      	ldr	r2, [pc, #440]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 80013c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80013c8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013ca:	e075      	b.n	80014b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013cc:	4b6b      	ldr	r3, [pc, #428]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6a1b      	ldr	r3, [r3, #32]
 80013d8:	069b      	lsls	r3, r3, #26
 80013da:	4968      	ldr	r1, [pc, #416]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 80013dc:	4313      	orrs	r3, r2
 80013de:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013e0:	e06a      	b.n	80014b8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80013e2:	4b66      	ldr	r3, [pc, #408]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a1b      	ldr	r3, [r3, #32]
 80013ee:	061b      	lsls	r3, r3, #24
 80013f0:	4962      	ldr	r1, [pc, #392]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80013f6:	e05f      	b.n	80014b8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d042      	beq.n	8001486 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001400:	4b5e      	ldr	r3, [pc, #376]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a5d      	ldr	r2, [pc, #372]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001406:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800140a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff faec 	bl	80009e8 <HAL_GetTick>
 8001410:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001414:	f7ff fae8 	bl	80009e8 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e280      	b.n	8001928 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001426:	4b55      	ldr	r3, [pc, #340]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001432:	f7ff fae5 	bl	8000a00 <HAL_GetREVID>
 8001436:	4603      	mov	r3, r0
 8001438:	f241 0203 	movw	r2, #4099	@ 0x1003
 800143c:	4293      	cmp	r3, r2
 800143e:	d817      	bhi.n	8001470 <HAL_RCC_OscConfig+0x3ec>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a1b      	ldr	r3, [r3, #32]
 8001444:	2b20      	cmp	r3, #32
 8001446:	d108      	bne.n	800145a <HAL_RCC_OscConfig+0x3d6>
 8001448:	4b4c      	ldr	r3, [pc, #304]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001450:	4a4a      	ldr	r2, [pc, #296]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001452:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001456:	6053      	str	r3, [r2, #4]
 8001458:	e02e      	b.n	80014b8 <HAL_RCC_OscConfig+0x434>
 800145a:	4b48      	ldr	r3, [pc, #288]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	069b      	lsls	r3, r3, #26
 8001468:	4944      	ldr	r1, [pc, #272]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 800146a:	4313      	orrs	r3, r2
 800146c:	604b      	str	r3, [r1, #4]
 800146e:	e023      	b.n	80014b8 <HAL_RCC_OscConfig+0x434>
 8001470:	4b42      	ldr	r3, [pc, #264]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a1b      	ldr	r3, [r3, #32]
 800147c:	061b      	lsls	r3, r3, #24
 800147e:	493f      	ldr	r1, [pc, #252]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001480:	4313      	orrs	r3, r2
 8001482:	60cb      	str	r3, [r1, #12]
 8001484:	e018      	b.n	80014b8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001486:	4b3d      	ldr	r3, [pc, #244]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a3c      	ldr	r2, [pc, #240]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 800148c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001490:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001492:	f7ff faa9 	bl	80009e8 <HAL_GetTick>
 8001496:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800149a:	f7ff faa5 	bl	80009e8 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e23d      	b.n	8001928 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80014ac:	4b33      	ldr	r3, [pc, #204]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1f0      	bne.n	800149a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0308 	and.w	r3, r3, #8
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d036      	beq.n	8001532 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	695b      	ldr	r3, [r3, #20]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d019      	beq.n	8001500 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014cc:	4b2b      	ldr	r3, [pc, #172]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 80014ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014d0:	4a2a      	ldr	r2, [pc, #168]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014d8:	f7ff fa86 	bl	80009e8 <HAL_GetTick>
 80014dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014e0:	f7ff fa82 	bl	80009e8 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e21a      	b.n	8001928 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014f2:	4b22      	ldr	r3, [pc, #136]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 80014f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014f6:	f003 0302 	and.w	r3, r3, #2
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x45c>
 80014fe:	e018      	b.n	8001532 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001500:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001502:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001504:	4a1d      	ldr	r2, [pc, #116]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001506:	f023 0301 	bic.w	r3, r3, #1
 800150a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150c:	f7ff fa6c 	bl	80009e8 <HAL_GetTick>
 8001510:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001514:	f7ff fa68 	bl	80009e8 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e200      	b.n	8001928 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001526:	4b15      	ldr	r3, [pc, #84]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0320 	and.w	r3, r3, #32
 800153a:	2b00      	cmp	r3, #0
 800153c:	d039      	beq.n	80015b2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	699b      	ldr	r3, [r3, #24]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d01c      	beq.n	8001580 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001546:	4b0d      	ldr	r3, [pc, #52]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a0c      	ldr	r2, [pc, #48]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 800154c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001550:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001552:	f7ff fa49 	bl	80009e8 <HAL_GetTick>
 8001556:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001558:	e008      	b.n	800156c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800155a:	f7ff fa45 	bl	80009e8 <HAL_GetTick>
 800155e:	4602      	mov	r2, r0
 8001560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001562:	1ad3      	subs	r3, r2, r3
 8001564:	2b02      	cmp	r3, #2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e1dd      	b.n	8001928 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800156c:	4b03      	ldr	r3, [pc, #12]	@ (800157c <HAL_RCC_OscConfig+0x4f8>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0f0      	beq.n	800155a <HAL_RCC_OscConfig+0x4d6>
 8001578:	e01b      	b.n	80015b2 <HAL_RCC_OscConfig+0x52e>
 800157a:	bf00      	nop
 800157c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001580:	4b9b      	ldr	r3, [pc, #620]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a9a      	ldr	r2, [pc, #616]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 8001586:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800158a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800158c:	f7ff fa2c 	bl	80009e8 <HAL_GetTick>
 8001590:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001594:	f7ff fa28 	bl	80009e8 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e1c0      	b.n	8001928 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80015a6:	4b92      	ldr	r3, [pc, #584]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0304 	and.w	r3, r3, #4
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 8081 	beq.w	80016c2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80015c0:	4b8c      	ldr	r3, [pc, #560]	@ (80017f4 <HAL_RCC_OscConfig+0x770>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a8b      	ldr	r2, [pc, #556]	@ (80017f4 <HAL_RCC_OscConfig+0x770>)
 80015c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80015cc:	f7ff fa0c 	bl	80009e8 <HAL_GetTick>
 80015d0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d4:	f7ff fa08 	bl	80009e8 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	@ 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e1a0      	b.n	8001928 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80015e6:	4b83      	ldr	r3, [pc, #524]	@ (80017f4 <HAL_RCC_OscConfig+0x770>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d106      	bne.n	8001608 <HAL_RCC_OscConfig+0x584>
 80015fa:	4b7d      	ldr	r3, [pc, #500]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 80015fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015fe:	4a7c      	ldr	r2, [pc, #496]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6713      	str	r3, [r2, #112]	@ 0x70
 8001606:	e02d      	b.n	8001664 <HAL_RCC_OscConfig+0x5e0>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10c      	bne.n	800162a <HAL_RCC_OscConfig+0x5a6>
 8001610:	4b77      	ldr	r3, [pc, #476]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 8001612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001614:	4a76      	ldr	r2, [pc, #472]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 8001616:	f023 0301 	bic.w	r3, r3, #1
 800161a:	6713      	str	r3, [r2, #112]	@ 0x70
 800161c:	4b74      	ldr	r3, [pc, #464]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 800161e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001620:	4a73      	ldr	r2, [pc, #460]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 8001622:	f023 0304 	bic.w	r3, r3, #4
 8001626:	6713      	str	r3, [r2, #112]	@ 0x70
 8001628:	e01c      	b.n	8001664 <HAL_RCC_OscConfig+0x5e0>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	2b05      	cmp	r3, #5
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x5c8>
 8001632:	4b6f      	ldr	r3, [pc, #444]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001636:	4a6e      	ldr	r2, [pc, #440]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	6713      	str	r3, [r2, #112]	@ 0x70
 800163e:	4b6c      	ldr	r3, [pc, #432]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 8001640:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001642:	4a6b      	ldr	r2, [pc, #428]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6713      	str	r3, [r2, #112]	@ 0x70
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0x5e0>
 800164c:	4b68      	ldr	r3, [pc, #416]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 800164e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001650:	4a67      	ldr	r2, [pc, #412]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	6713      	str	r3, [r2, #112]	@ 0x70
 8001658:	4b65      	ldr	r3, [pc, #404]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 800165a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800165c:	4a64      	ldr	r2, [pc, #400]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 800165e:	f023 0304 	bic.w	r3, r3, #4
 8001662:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d015      	beq.n	8001698 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800166c:	f7ff f9bc 	bl	80009e8 <HAL_GetTick>
 8001670:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001672:	e00a      	b.n	800168a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001674:	f7ff f9b8 	bl	80009e8 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e14e      	b.n	8001928 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800168a:	4b59      	ldr	r3, [pc, #356]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 800168c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0ee      	beq.n	8001674 <HAL_RCC_OscConfig+0x5f0>
 8001696:	e014      	b.n	80016c2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001698:	f7ff f9a6 	bl	80009e8 <HAL_GetTick>
 800169c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800169e:	e00a      	b.n	80016b6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a0:	f7ff f9a2 	bl	80009e8 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d901      	bls.n	80016b6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e138      	b.n	8001928 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80016b6:	4b4e      	ldr	r3, [pc, #312]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 80016b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d1ee      	bne.n	80016a0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 812d 	beq.w	8001926 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80016cc:	4b48      	ldr	r3, [pc, #288]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016d4:	2b18      	cmp	r3, #24
 80016d6:	f000 80bd 	beq.w	8001854 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016de:	2b02      	cmp	r3, #2
 80016e0:	f040 809e 	bne.w	8001820 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e4:	4b42      	ldr	r3, [pc, #264]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a41      	ldr	r2, [pc, #260]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 80016ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016f0:	f7ff f97a 	bl	80009e8 <HAL_GetTick>
 80016f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff f976 	bl	80009e8 <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e10e      	b.n	8001928 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800170a:	4b39      	ldr	r3, [pc, #228]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001716:	4b36      	ldr	r3, [pc, #216]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 8001718:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800171a:	4b37      	ldr	r3, [pc, #220]	@ (80017f8 <HAL_RCC_OscConfig+0x774>)
 800171c:	4013      	ands	r3, r2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	430a      	orrs	r2, r1
 800172a:	4931      	ldr	r1, [pc, #196]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 800172c:	4313      	orrs	r3, r2
 800172e:	628b      	str	r3, [r1, #40]	@ 0x28
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001734:	3b01      	subs	r3, #1
 8001736:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800173e:	3b01      	subs	r3, #1
 8001740:	025b      	lsls	r3, r3, #9
 8001742:	b29b      	uxth	r3, r3
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800174a:	3b01      	subs	r3, #1
 800174c:	041b      	lsls	r3, r3, #16
 800174e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001758:	3b01      	subs	r3, #1
 800175a:	061b      	lsls	r3, r3, #24
 800175c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001760:	4923      	ldr	r1, [pc, #140]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 8001762:	4313      	orrs	r3, r2
 8001764:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001766:	4b22      	ldr	r3, [pc, #136]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 8001768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800176a:	4a21      	ldr	r2, [pc, #132]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001772:	4b1f      	ldr	r3, [pc, #124]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 8001774:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001776:	4b21      	ldr	r3, [pc, #132]	@ (80017fc <HAL_RCC_OscConfig+0x778>)
 8001778:	4013      	ands	r3, r2
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800177e:	00d2      	lsls	r2, r2, #3
 8001780:	491b      	ldr	r1, [pc, #108]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 8001782:	4313      	orrs	r3, r2
 8001784:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001786:	4b1a      	ldr	r3, [pc, #104]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 8001788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800178a:	f023 020c 	bic.w	r2, r3, #12
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	4917      	ldr	r1, [pc, #92]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 8001794:	4313      	orrs	r3, r2
 8001796:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001798:	4b15      	ldr	r3, [pc, #84]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 800179a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179c:	f023 0202 	bic.w	r2, r3, #2
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a4:	4912      	ldr	r1, [pc, #72]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 80017a6:	4313      	orrs	r3, r2
 80017a8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80017aa:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 80017ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ae:	4a10      	ldr	r2, [pc, #64]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80017b6:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 80017b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ba:	4a0d      	ldr	r2, [pc, #52]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80017c2:	4b0b      	ldr	r3, [pc, #44]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 80017c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c6:	4a0a      	ldr	r2, [pc, #40]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 80017c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80017ce:	4b08      	ldr	r3, [pc, #32]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 80017d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d2:	4a07      	ldr	r2, [pc, #28]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017da:	4b05      	ldr	r3, [pc, #20]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a04      	ldr	r2, [pc, #16]	@ (80017f0 <HAL_RCC_OscConfig+0x76c>)
 80017e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e6:	f7ff f8ff 	bl	80009e8 <HAL_GetTick>
 80017ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017ec:	e011      	b.n	8001812 <HAL_RCC_OscConfig+0x78e>
 80017ee:	bf00      	nop
 80017f0:	58024400 	.word	0x58024400
 80017f4:	58024800 	.word	0x58024800
 80017f8:	fffffc0c 	.word	0xfffffc0c
 80017fc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001800:	f7ff f8f2 	bl	80009e8 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e08a      	b.n	8001928 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001812:	4b47      	ldr	r3, [pc, #284]	@ (8001930 <HAL_RCC_OscConfig+0x8ac>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x77c>
 800181e:	e082      	b.n	8001926 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001820:	4b43      	ldr	r3, [pc, #268]	@ (8001930 <HAL_RCC_OscConfig+0x8ac>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a42      	ldr	r2, [pc, #264]	@ (8001930 <HAL_RCC_OscConfig+0x8ac>)
 8001826:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800182a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182c:	f7ff f8dc 	bl	80009e8 <HAL_GetTick>
 8001830:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001834:	f7ff f8d8 	bl	80009e8 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e070      	b.n	8001928 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001846:	4b3a      	ldr	r3, [pc, #232]	@ (8001930 <HAL_RCC_OscConfig+0x8ac>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x7b0>
 8001852:	e068      	b.n	8001926 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001854:	4b36      	ldr	r3, [pc, #216]	@ (8001930 <HAL_RCC_OscConfig+0x8ac>)
 8001856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001858:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800185a:	4b35      	ldr	r3, [pc, #212]	@ (8001930 <HAL_RCC_OscConfig+0x8ac>)
 800185c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001864:	2b01      	cmp	r3, #1
 8001866:	d031      	beq.n	80018cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	f003 0203 	and.w	r2, r3, #3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001872:	429a      	cmp	r2, r3
 8001874:	d12a      	bne.n	80018cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	091b      	lsrs	r3, r3, #4
 800187a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001882:	429a      	cmp	r2, r3
 8001884:	d122      	bne.n	80018cc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001890:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001892:	429a      	cmp	r2, r3
 8001894:	d11a      	bne.n	80018cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	0a5b      	lsrs	r3, r3, #9
 800189a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018a2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d111      	bne.n	80018cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	0c1b      	lsrs	r3, r3, #16
 80018ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80018b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d108      	bne.n	80018cc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	0e1b      	lsrs	r3, r3, #24
 80018be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018c6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d001      	beq.n	80018d0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e02b      	b.n	8001928 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80018d0:	4b17      	ldr	r3, [pc, #92]	@ (8001930 <HAL_RCC_OscConfig+0x8ac>)
 80018d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018d4:	08db      	lsrs	r3, r3, #3
 80018d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80018da:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d01f      	beq.n	8001926 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80018e6:	4b12      	ldr	r3, [pc, #72]	@ (8001930 <HAL_RCC_OscConfig+0x8ac>)
 80018e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ea:	4a11      	ldr	r2, [pc, #68]	@ (8001930 <HAL_RCC_OscConfig+0x8ac>)
 80018ec:	f023 0301 	bic.w	r3, r3, #1
 80018f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018f2:	f7ff f879 	bl	80009e8 <HAL_GetTick>
 80018f6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80018f8:	bf00      	nop
 80018fa:	f7ff f875 	bl	80009e8 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001902:	4293      	cmp	r3, r2
 8001904:	d0f9      	beq.n	80018fa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001906:	4b0a      	ldr	r3, [pc, #40]	@ (8001930 <HAL_RCC_OscConfig+0x8ac>)
 8001908:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800190a:	4b0a      	ldr	r3, [pc, #40]	@ (8001934 <HAL_RCC_OscConfig+0x8b0>)
 800190c:	4013      	ands	r3, r2
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001912:	00d2      	lsls	r2, r2, #3
 8001914:	4906      	ldr	r1, [pc, #24]	@ (8001930 <HAL_RCC_OscConfig+0x8ac>)
 8001916:	4313      	orrs	r3, r2
 8001918:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800191a:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <HAL_RCC_OscConfig+0x8ac>)
 800191c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800191e:	4a04      	ldr	r2, [pc, #16]	@ (8001930 <HAL_RCC_OscConfig+0x8ac>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001926:	2300      	movs	r3, #0
}
 8001928:	4618      	mov	r0, r3
 800192a:	3730      	adds	r7, #48	@ 0x30
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	58024400 	.word	0x58024400
 8001934:	ffff0007 	.word	0xffff0007

08001938 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e19c      	b.n	8001c86 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800194c:	4b8a      	ldr	r3, [pc, #552]	@ (8001b78 <HAL_RCC_ClockConfig+0x240>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 030f 	and.w	r3, r3, #15
 8001954:	683a      	ldr	r2, [r7, #0]
 8001956:	429a      	cmp	r2, r3
 8001958:	d910      	bls.n	800197c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195a:	4b87      	ldr	r3, [pc, #540]	@ (8001b78 <HAL_RCC_ClockConfig+0x240>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f023 020f 	bic.w	r2, r3, #15
 8001962:	4985      	ldr	r1, [pc, #532]	@ (8001b78 <HAL_RCC_ClockConfig+0x240>)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	4313      	orrs	r3, r2
 8001968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800196a:	4b83      	ldr	r3, [pc, #524]	@ (8001b78 <HAL_RCC_ClockConfig+0x240>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	429a      	cmp	r2, r3
 8001976:	d001      	beq.n	800197c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
 800197a:	e184      	b.n	8001c86 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0304 	and.w	r3, r3, #4
 8001984:	2b00      	cmp	r3, #0
 8001986:	d010      	beq.n	80019aa <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	691a      	ldr	r2, [r3, #16]
 800198c:	4b7b      	ldr	r3, [pc, #492]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001994:	429a      	cmp	r2, r3
 8001996:	d908      	bls.n	80019aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001998:	4b78      	ldr	r3, [pc, #480]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	4975      	ldr	r1, [pc, #468]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d010      	beq.n	80019d8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	695a      	ldr	r2, [r3, #20]
 80019ba:	4b70      	ldr	r3, [pc, #448]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80019c2:	429a      	cmp	r2, r3
 80019c4:	d908      	bls.n	80019d8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80019c6:	4b6d      	ldr	r3, [pc, #436]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 80019c8:	69db      	ldr	r3, [r3, #28]
 80019ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	695b      	ldr	r3, [r3, #20]
 80019d2:	496a      	ldr	r1, [pc, #424]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0310 	and.w	r3, r3, #16
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d010      	beq.n	8001a06 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699a      	ldr	r2, [r3, #24]
 80019e8:	4b64      	ldr	r3, [pc, #400]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 80019ea:	69db      	ldr	r3, [r3, #28]
 80019ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d908      	bls.n	8001a06 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80019f4:	4b61      	ldr	r3, [pc, #388]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 80019f6:	69db      	ldr	r3, [r3, #28]
 80019f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	495e      	ldr	r1, [pc, #376]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0320 	and.w	r3, r3, #32
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d010      	beq.n	8001a34 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69da      	ldr	r2, [r3, #28]
 8001a16:	4b59      	ldr	r3, [pc, #356]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 8001a18:	6a1b      	ldr	r3, [r3, #32]
 8001a1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d908      	bls.n	8001a34 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001a22:	4b56      	ldr	r3, [pc, #344]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	69db      	ldr	r3, [r3, #28]
 8001a2e:	4953      	ldr	r1, [pc, #332]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d010      	beq.n	8001a62 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68da      	ldr	r2, [r3, #12]
 8001a44:	4b4d      	ldr	r3, [pc, #308]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 030f 	and.w	r3, r3, #15
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d908      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a50:	4b4a      	ldr	r3, [pc, #296]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	f023 020f 	bic.w	r2, r3, #15
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	4947      	ldr	r1, [pc, #284]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d055      	beq.n	8001b1a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001a6e:	4b43      	ldr	r3, [pc, #268]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	4940      	ldr	r1, [pc, #256]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d107      	bne.n	8001a98 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a88:	4b3c      	ldr	r3, [pc, #240]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d121      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0f6      	b.n	8001c86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d107      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001aa0:	4b36      	ldr	r3, [pc, #216]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d115      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0ea      	b.n	8001c86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d107      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ab8:	4b30      	ldr	r3, [pc, #192]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d109      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e0de      	b.n	8001c86 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ac8:	4b2c      	ldr	r3, [pc, #176]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0d6      	b.n	8001c86 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ad8:	4b28      	ldr	r3, [pc, #160]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	f023 0207 	bic.w	r2, r3, #7
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4925      	ldr	r1, [pc, #148]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aea:	f7fe ff7d 	bl	80009e8 <HAL_GetTick>
 8001aee:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001af0:	e00a      	b.n	8001b08 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001af2:	f7fe ff79 	bl	80009e8 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e0be      	b.n	8001c86 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b08:	4b1c      	ldr	r3, [pc, #112]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d1eb      	bne.n	8001af2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d010      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	4b14      	ldr	r3, [pc, #80]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	f003 030f 	and.w	r3, r3, #15
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d208      	bcs.n	8001b48 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b36:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 8001b38:	699b      	ldr	r3, [r3, #24]
 8001b3a:	f023 020f 	bic.w	r2, r3, #15
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	490e      	ldr	r1, [pc, #56]	@ (8001b7c <HAL_RCC_ClockConfig+0x244>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b48:	4b0b      	ldr	r3, [pc, #44]	@ (8001b78 <HAL_RCC_ClockConfig+0x240>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 030f 	and.w	r3, r3, #15
 8001b50:	683a      	ldr	r2, [r7, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d214      	bcs.n	8001b80 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	4b08      	ldr	r3, [pc, #32]	@ (8001b78 <HAL_RCC_ClockConfig+0x240>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 020f 	bic.w	r2, r3, #15
 8001b5e:	4906      	ldr	r1, [pc, #24]	@ (8001b78 <HAL_RCC_ClockConfig+0x240>)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b66:	4b04      	ldr	r3, [pc, #16]	@ (8001b78 <HAL_RCC_ClockConfig+0x240>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d005      	beq.n	8001b80 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e086      	b.n	8001c86 <HAL_RCC_ClockConfig+0x34e>
 8001b78:	52002000 	.word	0x52002000
 8001b7c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 0304 	and.w	r3, r3, #4
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d010      	beq.n	8001bae <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691a      	ldr	r2, [r3, #16]
 8001b90:	4b3f      	ldr	r3, [pc, #252]	@ (8001c90 <HAL_RCC_ClockConfig+0x358>)
 8001b92:	699b      	ldr	r3, [r3, #24]
 8001b94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d208      	bcs.n	8001bae <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001b9c:	4b3c      	ldr	r3, [pc, #240]	@ (8001c90 <HAL_RCC_ClockConfig+0x358>)
 8001b9e:	699b      	ldr	r3, [r3, #24]
 8001ba0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	4939      	ldr	r1, [pc, #228]	@ (8001c90 <HAL_RCC_ClockConfig+0x358>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d010      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695a      	ldr	r2, [r3, #20]
 8001bbe:	4b34      	ldr	r3, [pc, #208]	@ (8001c90 <HAL_RCC_ClockConfig+0x358>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d208      	bcs.n	8001bdc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bca:	4b31      	ldr	r3, [pc, #196]	@ (8001c90 <HAL_RCC_ClockConfig+0x358>)
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	492e      	ldr	r1, [pc, #184]	@ (8001c90 <HAL_RCC_ClockConfig+0x358>)
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0310 	and.w	r3, r3, #16
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d010      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699a      	ldr	r2, [r3, #24]
 8001bec:	4b28      	ldr	r3, [pc, #160]	@ (8001c90 <HAL_RCC_ClockConfig+0x358>)
 8001bee:	69db      	ldr	r3, [r3, #28]
 8001bf0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d208      	bcs.n	8001c0a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001bf8:	4b25      	ldr	r3, [pc, #148]	@ (8001c90 <HAL_RCC_ClockConfig+0x358>)
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	4922      	ldr	r1, [pc, #136]	@ (8001c90 <HAL_RCC_ClockConfig+0x358>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0320 	and.w	r3, r3, #32
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d010      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69da      	ldr	r2, [r3, #28]
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8001c90 <HAL_RCC_ClockConfig+0x358>)
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d208      	bcs.n	8001c38 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001c26:	4b1a      	ldr	r3, [pc, #104]	@ (8001c90 <HAL_RCC_ClockConfig+0x358>)
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	4917      	ldr	r1, [pc, #92]	@ (8001c90 <HAL_RCC_ClockConfig+0x358>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001c38:	f000 f89e 	bl	8001d78 <HAL_RCC_GetSysClockFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b14      	ldr	r3, [pc, #80]	@ (8001c90 <HAL_RCC_ClockConfig+0x358>)
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	f003 030f 	and.w	r3, r3, #15
 8001c48:	4912      	ldr	r1, [pc, #72]	@ (8001c94 <HAL_RCC_ClockConfig+0x35c>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
 8001c54:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001c56:	4b0e      	ldr	r3, [pc, #56]	@ (8001c90 <HAL_RCC_ClockConfig+0x358>)
 8001c58:	699b      	ldr	r3, [r3, #24]
 8001c5a:	f003 030f 	and.w	r3, r3, #15
 8001c5e:	4a0d      	ldr	r2, [pc, #52]	@ (8001c94 <HAL_RCC_ClockConfig+0x35c>)
 8001c60:	5cd3      	ldrb	r3, [r2, r3]
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6c:	4a0a      	ldr	r2, [pc, #40]	@ (8001c98 <HAL_RCC_ClockConfig+0x360>)
 8001c6e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001c70:	4a0a      	ldr	r2, [pc, #40]	@ (8001c9c <HAL_RCC_ClockConfig+0x364>)
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001c76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca0 <HAL_RCC_ClockConfig+0x368>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fe6a 	bl	8000954 <HAL_InitTick>
 8001c80:	4603      	mov	r3, r0
 8001c82:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	58024400 	.word	0x58024400
 8001c94:	080063e4 	.word	0x080063e4
 8001c98:	24000004 	.word	0x24000004
 8001c9c:	24000000 	.word	0x24000000
 8001ca0:	24000008 	.word	0x24000008

08001ca4 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08c      	sub	sp, #48	@ 0x30
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d12a      	bne.n	8001d0c <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8001cb6:	4b2d      	ldr	r3, [pc, #180]	@ (8001d6c <HAL_RCC_MCOConfig+0xc8>)
 8001cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cbc:	4a2b      	ldr	r2, [pc, #172]	@ (8001d6c <HAL_RCC_MCOConfig+0xc8>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cc6:	4b29      	ldr	r3, [pc, #164]	@ (8001d6c <HAL_RCC_MCOConfig+0xc8>)
 8001cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	61bb      	str	r3, [r7, #24]
 8001cd2:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8001cd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cda:	2302      	movs	r3, #2
 8001cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8001cea:	f107 031c 	add.w	r3, r7, #28
 8001cee:	4619      	mov	r1, r3
 8001cf0:	481f      	ldr	r0, [pc, #124]	@ (8001d70 <HAL_RCC_MCOConfig+0xcc>)
 8001cf2:	f7fe ff75 	bl	8000be0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8001cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d6c <HAL_RCC_MCOConfig+0xc8>)
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8001cfe:	68b9      	ldr	r1, [r7, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	430b      	orrs	r3, r1
 8001d04:	4919      	ldr	r1, [pc, #100]	@ (8001d6c <HAL_RCC_MCOConfig+0xc8>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8001d0a:	e02a      	b.n	8001d62 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8001d0c:	4b17      	ldr	r3, [pc, #92]	@ (8001d6c <HAL_RCC_MCOConfig+0xc8>)
 8001d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d12:	4a16      	ldr	r2, [pc, #88]	@ (8001d6c <HAL_RCC_MCOConfig+0xc8>)
 8001d14:	f043 0304 	orr.w	r3, r3, #4
 8001d18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d1c:	4b13      	ldr	r3, [pc, #76]	@ (8001d6c <HAL_RCC_MCOConfig+0xc8>)
 8001d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8001d2a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d30:	2302      	movs	r3, #2
 8001d32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d34:	2303      	movs	r3, #3
 8001d36:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8001d40:	f107 031c 	add.w	r3, r7, #28
 8001d44:	4619      	mov	r1, r3
 8001d46:	480b      	ldr	r0, [pc, #44]	@ (8001d74 <HAL_RCC_MCOConfig+0xd0>)
 8001d48:	f7fe ff4a 	bl	8000be0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8001d4c:	4b07      	ldr	r3, [pc, #28]	@ (8001d6c <HAL_RCC_MCOConfig+0xc8>)
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	01d9      	lsls	r1, r3, #7
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	430b      	orrs	r3, r1
 8001d5c:	4903      	ldr	r1, [pc, #12]	@ (8001d6c <HAL_RCC_MCOConfig+0xc8>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	610b      	str	r3, [r1, #16]
}
 8001d62:	bf00      	nop
 8001d64:	3730      	adds	r7, #48	@ 0x30
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	58024400 	.word	0x58024400
 8001d70:	58020000 	.word	0x58020000
 8001d74:	58020800 	.word	0x58020800

08001d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b089      	sub	sp, #36	@ 0x24
 8001d7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d7e:	4bb3      	ldr	r3, [pc, #716]	@ (800204c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d86:	2b18      	cmp	r3, #24
 8001d88:	f200 8155 	bhi.w	8002036 <HAL_RCC_GetSysClockFreq+0x2be>
 8001d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8001d94 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d92:	bf00      	nop
 8001d94:	08001df9 	.word	0x08001df9
 8001d98:	08002037 	.word	0x08002037
 8001d9c:	08002037 	.word	0x08002037
 8001da0:	08002037 	.word	0x08002037
 8001da4:	08002037 	.word	0x08002037
 8001da8:	08002037 	.word	0x08002037
 8001dac:	08002037 	.word	0x08002037
 8001db0:	08002037 	.word	0x08002037
 8001db4:	08001e1f 	.word	0x08001e1f
 8001db8:	08002037 	.word	0x08002037
 8001dbc:	08002037 	.word	0x08002037
 8001dc0:	08002037 	.word	0x08002037
 8001dc4:	08002037 	.word	0x08002037
 8001dc8:	08002037 	.word	0x08002037
 8001dcc:	08002037 	.word	0x08002037
 8001dd0:	08002037 	.word	0x08002037
 8001dd4:	08001e25 	.word	0x08001e25
 8001dd8:	08002037 	.word	0x08002037
 8001ddc:	08002037 	.word	0x08002037
 8001de0:	08002037 	.word	0x08002037
 8001de4:	08002037 	.word	0x08002037
 8001de8:	08002037 	.word	0x08002037
 8001dec:	08002037 	.word	0x08002037
 8001df0:	08002037 	.word	0x08002037
 8001df4:	08001e2b 	.word	0x08001e2b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001df8:	4b94      	ldr	r3, [pc, #592]	@ (800204c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0320 	and.w	r3, r3, #32
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d009      	beq.n	8001e18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e04:	4b91      	ldr	r3, [pc, #580]	@ (800204c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	08db      	lsrs	r3, r3, #3
 8001e0a:	f003 0303 	and.w	r3, r3, #3
 8001e0e:	4a90      	ldr	r2, [pc, #576]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
 8001e14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001e16:	e111      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e18:	4b8d      	ldr	r3, [pc, #564]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e1a:	61bb      	str	r3, [r7, #24]
      break;
 8001e1c:	e10e      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001e1e:	4b8d      	ldr	r3, [pc, #564]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e20:	61bb      	str	r3, [r7, #24]
      break;
 8001e22:	e10b      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001e24:	4b8c      	ldr	r3, [pc, #560]	@ (8002058 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e26:	61bb      	str	r3, [r7, #24]
      break;
 8001e28:	e108      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e2a:	4b88      	ldr	r3, [pc, #544]	@ (800204c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001e34:	4b85      	ldr	r3, [pc, #532]	@ (800204c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e3e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e40:	4b82      	ldr	r3, [pc, #520]	@ (800204c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001e4a:	4b80      	ldr	r3, [pc, #512]	@ (800204c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e4e:	08db      	lsrs	r3, r3, #3
 8001e50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	fb02 f303 	mul.w	r3, r2, r3
 8001e5a:	ee07 3a90 	vmov	s15, r3
 8001e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e62:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80e1 	beq.w	8002030 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	f000 8083 	beq.w	8001f7c <HAL_RCC_GetSysClockFreq+0x204>
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	f200 80a1 	bhi.w	8001fc0 <HAL_RCC_GetSysClockFreq+0x248>
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_RCC_GetSysClockFreq+0x114>
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d056      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001e8a:	e099      	b.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e8c:	4b6f      	ldr	r3, [pc, #444]	@ (800204c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0320 	and.w	r3, r3, #32
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d02d      	beq.n	8001ef4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e98:	4b6c      	ldr	r3, [pc, #432]	@ (800204c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	08db      	lsrs	r3, r3, #3
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	4a6b      	ldr	r2, [pc, #428]	@ (8002050 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	ee07 3a90 	vmov	s15, r3
 8001eb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	ee07 3a90 	vmov	s15, r3
 8001eba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ec2:	4b62      	ldr	r3, [pc, #392]	@ (800204c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eca:	ee07 3a90 	vmov	s15, r3
 8001ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ed2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001ed6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800205c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ee2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001ef2:	e087      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	ee07 3a90 	vmov	s15, r3
 8001efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001efe:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002060 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f06:	4b51      	ldr	r3, [pc, #324]	@ (800204c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f16:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f1a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800205c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f36:	e065      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f42:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002064 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f4a:	4b40      	ldr	r3, [pc, #256]	@ (800204c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f52:	ee07 3a90 	vmov	s15, r3
 8001f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f5e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800205c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f7a:	e043      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f86:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002068 <HAL_RCC_GetSysClockFreq+0x2f0>
 8001f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f8e:	4b2f      	ldr	r3, [pc, #188]	@ (800204c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f96:	ee07 3a90 	vmov	s15, r3
 8001f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fa2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800205c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fbe:	e021      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	ee07 3a90 	vmov	s15, r3
 8001fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fca:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002064 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	@ (800204c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fda:	ee07 3a90 	vmov	s15, r3
 8001fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fe2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fe6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800205c <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002002:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002004:	4b11      	ldr	r3, [pc, #68]	@ (800204c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002008:	0a5b      	lsrs	r3, r3, #9
 800200a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800200e:	3301      	adds	r3, #1
 8002010:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	ee07 3a90 	vmov	s15, r3
 8002018:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800201c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002028:	ee17 3a90 	vmov	r3, s15
 800202c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800202e:	e005      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002030:	2300      	movs	r3, #0
 8002032:	61bb      	str	r3, [r7, #24]
      break;
 8002034:	e002      	b.n	800203c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002036:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002038:	61bb      	str	r3, [r7, #24]
      break;
 800203a:	bf00      	nop
  }

  return sysclockfreq;
 800203c:	69bb      	ldr	r3, [r7, #24]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3724      	adds	r7, #36	@ 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	58024400 	.word	0x58024400
 8002050:	03d09000 	.word	0x03d09000
 8002054:	003d0900 	.word	0x003d0900
 8002058:	017d7840 	.word	0x017d7840
 800205c:	46000000 	.word	0x46000000
 8002060:	4c742400 	.word	0x4c742400
 8002064:	4a742400 	.word	0x4a742400
 8002068:	4bbebc20 	.word	0x4bbebc20

0800206c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800206c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002070:	b0cc      	sub	sp, #304	@ 0x130
 8002072:	af00      	add	r7, sp, #0
 8002074:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002078:	2300      	movs	r3, #0
 800207a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800207e:	2300      	movs	r3, #0
 8002080:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002084:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002090:	2500      	movs	r5, #0
 8002092:	ea54 0305 	orrs.w	r3, r4, r5
 8002096:	d049      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002098:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800209c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800209e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80020a2:	d02f      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80020a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80020a8:	d828      	bhi.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80020aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80020ae:	d01a      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80020b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80020b4:	d822      	bhi.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80020ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020be:	d007      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80020c0:	e01c      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80020c2:	4bb8      	ldr	r3, [pc, #736]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020c6:	4ab7      	ldr	r2, [pc, #732]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80020c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80020ce:	e01a      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80020d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80020d4:	3308      	adds	r3, #8
 80020d6:	2102      	movs	r1, #2
 80020d8:	4618      	mov	r0, r3
 80020da:	f001 fa11 	bl	8003500 <RCCEx_PLL2_Config>
 80020de:	4603      	mov	r3, r0
 80020e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80020e4:	e00f      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80020e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80020ea:	3328      	adds	r3, #40	@ 0x28
 80020ec:	2102      	movs	r1, #2
 80020ee:	4618      	mov	r0, r3
 80020f0:	f001 fab8 	bl	8003664 <RCCEx_PLL3_Config>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80020fa:	e004      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002102:	e000      	b.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002104:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002106:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10a      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800210e:	4ba5      	ldr	r3, [pc, #660]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002110:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002112:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002116:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800211a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800211c:	4aa1      	ldr	r2, [pc, #644]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800211e:	430b      	orrs	r3, r1
 8002120:	6513      	str	r3, [r2, #80]	@ 0x50
 8002122:	e003      	b.n	800212c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002124:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002128:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800212c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002134:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002138:	f04f 0900 	mov.w	r9, #0
 800213c:	ea58 0309 	orrs.w	r3, r8, r9
 8002140:	d047      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002142:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002146:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002148:	2b04      	cmp	r3, #4
 800214a:	d82a      	bhi.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800214c:	a201      	add	r2, pc, #4	@ (adr r2, 8002154 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800214e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002152:	bf00      	nop
 8002154:	08002169 	.word	0x08002169
 8002158:	08002177 	.word	0x08002177
 800215c:	0800218d 	.word	0x0800218d
 8002160:	080021ab 	.word	0x080021ab
 8002164:	080021ab 	.word	0x080021ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002168:	4b8e      	ldr	r3, [pc, #568]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800216a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216c:	4a8d      	ldr	r2, [pc, #564]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800216e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002172:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002174:	e01a      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002176:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800217a:	3308      	adds	r3, #8
 800217c:	2100      	movs	r1, #0
 800217e:	4618      	mov	r0, r3
 8002180:	f001 f9be 	bl	8003500 <RCCEx_PLL2_Config>
 8002184:	4603      	mov	r3, r0
 8002186:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800218a:	e00f      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800218c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002190:	3328      	adds	r3, #40	@ 0x28
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f001 fa65 	bl	8003664 <RCCEx_PLL3_Config>
 800219a:	4603      	mov	r3, r0
 800219c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80021a0:	e004      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80021a8:	e000      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80021aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80021ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10a      	bne.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021b4:	4b7b      	ldr	r3, [pc, #492]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021b8:	f023 0107 	bic.w	r1, r3, #7
 80021bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80021c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c2:	4a78      	ldr	r2, [pc, #480]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80021c4:	430b      	orrs	r3, r1
 80021c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80021c8:	e003      	b.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80021ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80021d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80021d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021da:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80021de:	f04f 0b00 	mov.w	fp, #0
 80021e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80021e6:	d04c      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80021e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80021ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021f2:	d030      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80021f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021f8:	d829      	bhi.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80021fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80021fc:	d02d      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80021fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8002200:	d825      	bhi.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002202:	2b80      	cmp	r3, #128	@ 0x80
 8002204:	d018      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002206:	2b80      	cmp	r3, #128	@ 0x80
 8002208:	d821      	bhi.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800220e:	2b40      	cmp	r3, #64	@ 0x40
 8002210:	d007      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002212:	e01c      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002214:	4b63      	ldr	r3, [pc, #396]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002218:	4a62      	ldr	r2, [pc, #392]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800221a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800221e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002220:	e01c      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002222:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002226:	3308      	adds	r3, #8
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f001 f968 	bl	8003500 <RCCEx_PLL2_Config>
 8002230:	4603      	mov	r3, r0
 8002232:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002236:	e011      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002238:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800223c:	3328      	adds	r3, #40	@ 0x28
 800223e:	2100      	movs	r1, #0
 8002240:	4618      	mov	r0, r3
 8002242:	f001 fa0f 	bl	8003664 <RCCEx_PLL3_Config>
 8002246:	4603      	mov	r3, r0
 8002248:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800224c:	e006      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002254:	e002      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002256:	bf00      	nop
 8002258:	e000      	b.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800225a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800225c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10a      	bne.n	800227a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002264:	4b4f      	ldr	r3, [pc, #316]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002268:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800226c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002270:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002272:	4a4c      	ldr	r2, [pc, #304]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002274:	430b      	orrs	r3, r1
 8002276:	6513      	str	r3, [r2, #80]	@ 0x50
 8002278:	e003      	b.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800227a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800227e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002282:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800228e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002292:	2300      	movs	r3, #0
 8002294:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002298:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800229c:	460b      	mov	r3, r1
 800229e:	4313      	orrs	r3, r2
 80022a0:	d053      	beq.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80022a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80022a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80022aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022ae:	d035      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80022b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80022b4:	d82e      	bhi.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80022b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80022ba:	d031      	beq.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80022bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80022c0:	d828      	bhi.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80022c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022c6:	d01a      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80022c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80022cc:	d822      	bhi.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80022d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80022d6:	d007      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80022d8:	e01c      	b.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022da:	4b32      	ldr	r3, [pc, #200]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022de:	4a31      	ldr	r2, [pc, #196]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80022e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80022e6:	e01c      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80022e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80022ec:	3308      	adds	r3, #8
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f001 f905 	bl	8003500 <RCCEx_PLL2_Config>
 80022f6:	4603      	mov	r3, r0
 80022f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80022fc:	e011      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80022fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002302:	3328      	adds	r3, #40	@ 0x28
 8002304:	2100      	movs	r1, #0
 8002306:	4618      	mov	r0, r3
 8002308:	f001 f9ac 	bl	8003664 <RCCEx_PLL3_Config>
 800230c:	4603      	mov	r3, r0
 800230e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002312:	e006      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800231a:	e002      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800231c:	bf00      	nop
 800231e:	e000      	b.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002320:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002322:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10b      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800232a:	4b1e      	ldr	r3, [pc, #120]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800232c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002332:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002336:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800233a:	4a1a      	ldr	r2, [pc, #104]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800233c:	430b      	orrs	r3, r1
 800233e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002340:	e003      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002342:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002346:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800234a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800234e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002352:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002356:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002360:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002364:	460b      	mov	r3, r1
 8002366:	4313      	orrs	r3, r2
 8002368:	d056      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800236a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800236e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002372:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002376:	d038      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002378:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800237c:	d831      	bhi.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800237e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002382:	d034      	beq.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002384:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002388:	d82b      	bhi.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800238a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800238e:	d01d      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002390:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002394:	d825      	bhi.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002396:	2b00      	cmp	r3, #0
 8002398:	d006      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800239a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800239e:	d00a      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80023a0:	e01f      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80023a2:	bf00      	nop
 80023a4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023a8:	4ba2      	ldr	r3, [pc, #648]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ac:	4aa1      	ldr	r2, [pc, #644]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80023b4:	e01c      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80023b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023ba:	3308      	adds	r3, #8
 80023bc:	2100      	movs	r1, #0
 80023be:	4618      	mov	r0, r3
 80023c0:	f001 f89e 	bl	8003500 <RCCEx_PLL2_Config>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80023ca:	e011      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80023cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80023d0:	3328      	adds	r3, #40	@ 0x28
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f001 f945 	bl	8003664 <RCCEx_PLL3_Config>
 80023da:	4603      	mov	r3, r0
 80023dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80023e0:	e006      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80023e8:	e002      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80023ea:	bf00      	nop
 80023ec:	e000      	b.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80023ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80023f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10b      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80023f8:	4b8e      	ldr	r3, [pc, #568]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80023fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023fc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002400:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002404:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002408:	4a8a      	ldr	r2, [pc, #552]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800240a:	430b      	orrs	r3, r1
 800240c:	6593      	str	r3, [r2, #88]	@ 0x58
 800240e:	e003      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002410:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002414:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002418:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002420:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002424:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002428:	2300      	movs	r3, #0
 800242a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800242e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002432:	460b      	mov	r3, r1
 8002434:	4313      	orrs	r3, r2
 8002436:	d03a      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002438:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800243c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243e:	2b30      	cmp	r3, #48	@ 0x30
 8002440:	d01f      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002442:	2b30      	cmp	r3, #48	@ 0x30
 8002444:	d819      	bhi.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002446:	2b20      	cmp	r3, #32
 8002448:	d00c      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800244a:	2b20      	cmp	r3, #32
 800244c:	d815      	bhi.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800244e:	2b00      	cmp	r3, #0
 8002450:	d019      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002452:	2b10      	cmp	r3, #16
 8002454:	d111      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002456:	4b77      	ldr	r3, [pc, #476]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245a:	4a76      	ldr	r2, [pc, #472]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800245c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002460:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002462:	e011      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002464:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002468:	3308      	adds	r3, #8
 800246a:	2102      	movs	r1, #2
 800246c:	4618      	mov	r0, r3
 800246e:	f001 f847 	bl	8003500 <RCCEx_PLL2_Config>
 8002472:	4603      	mov	r3, r0
 8002474:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002478:	e006      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002480:	e002      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002482:	bf00      	nop
 8002484:	e000      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002486:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002488:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10a      	bne.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002490:	4b68      	ldr	r3, [pc, #416]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002492:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002494:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002498:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800249c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249e:	4a65      	ldr	r2, [pc, #404]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80024a0:	430b      	orrs	r3, r1
 80024a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024a4:	e003      	b.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80024aa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80024ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80024ba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80024be:	2300      	movs	r3, #0
 80024c0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80024c4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80024c8:	460b      	mov	r3, r1
 80024ca:	4313      	orrs	r3, r2
 80024cc:	d051      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80024ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024d8:	d035      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80024da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80024de:	d82e      	bhi.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80024e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80024e4:	d031      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80024e6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80024ea:	d828      	bhi.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80024ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024f0:	d01a      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80024f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024f6:	d822      	bhi.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80024fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002500:	d007      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002502:	e01c      	b.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002504:	4b4b      	ldr	r3, [pc, #300]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002508:	4a4a      	ldr	r2, [pc, #296]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800250a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800250e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002510:	e01c      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002512:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002516:	3308      	adds	r3, #8
 8002518:	2100      	movs	r1, #0
 800251a:	4618      	mov	r0, r3
 800251c:	f000 fff0 	bl	8003500 <RCCEx_PLL2_Config>
 8002520:	4603      	mov	r3, r0
 8002522:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002526:	e011      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002528:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800252c:	3328      	adds	r3, #40	@ 0x28
 800252e:	2100      	movs	r1, #0
 8002530:	4618      	mov	r0, r3
 8002532:	f001 f897 	bl	8003664 <RCCEx_PLL3_Config>
 8002536:	4603      	mov	r3, r0
 8002538:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800253c:	e006      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002544:	e002      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002546:	bf00      	nop
 8002548:	e000      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800254a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800254c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002550:	2b00      	cmp	r3, #0
 8002552:	d10a      	bne.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002554:	4b37      	ldr	r3, [pc, #220]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002556:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002558:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800255c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002560:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002562:	4a34      	ldr	r2, [pc, #208]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002564:	430b      	orrs	r3, r1
 8002566:	6513      	str	r3, [r2, #80]	@ 0x50
 8002568:	e003      	b.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800256a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800256e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002572:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800257e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002582:	2300      	movs	r3, #0
 8002584:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002588:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800258c:	460b      	mov	r3, r1
 800258e:	4313      	orrs	r3, r2
 8002590:	d056      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002592:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002596:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002598:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800259c:	d033      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800259e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025a2:	d82c      	bhi.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80025a4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80025a8:	d02f      	beq.n	800260a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80025aa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80025ae:	d826      	bhi.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80025b0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80025b4:	d02b      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80025b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80025ba:	d820      	bhi.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80025bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025c0:	d012      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80025c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025c6:	d81a      	bhi.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x592>
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d022      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80025cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025d0:	d115      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80025d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025d6:	3308      	adds	r3, #8
 80025d8:	2101      	movs	r1, #1
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 ff90 	bl	8003500 <RCCEx_PLL2_Config>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80025e6:	e015      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80025e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025ec:	3328      	adds	r3, #40	@ 0x28
 80025ee:	2101      	movs	r1, #1
 80025f0:	4618      	mov	r0, r3
 80025f2:	f001 f837 	bl	8003664 <RCCEx_PLL3_Config>
 80025f6:	4603      	mov	r3, r0
 80025f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80025fc:	e00a      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002604:	e006      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002606:	bf00      	nop
 8002608:	e004      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800260a:	bf00      	nop
 800260c:	e002      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800260e:	bf00      	nop
 8002610:	e000      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002612:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002614:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10d      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800261c:	4b05      	ldr	r3, [pc, #20]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800261e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002620:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002624:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002628:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800262a:	4a02      	ldr	r2, [pc, #8]	@ (8002634 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800262c:	430b      	orrs	r3, r1
 800262e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002630:	e006      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002632:	bf00      	nop
 8002634:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002638:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800263c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002640:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002648:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800264c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002650:	2300      	movs	r3, #0
 8002652:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002656:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800265a:	460b      	mov	r3, r1
 800265c:	4313      	orrs	r3, r2
 800265e:	d055      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002660:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002664:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002668:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800266c:	d033      	beq.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800266e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002672:	d82c      	bhi.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002674:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002678:	d02f      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800267a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800267e:	d826      	bhi.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002680:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002684:	d02b      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002686:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800268a:	d820      	bhi.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 800268c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002690:	d012      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002692:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002696:	d81a      	bhi.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002698:	2b00      	cmp	r3, #0
 800269a:	d022      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800269c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80026a0:	d115      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80026a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026a6:	3308      	adds	r3, #8
 80026a8:	2101      	movs	r1, #1
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 ff28 	bl	8003500 <RCCEx_PLL2_Config>
 80026b0:	4603      	mov	r3, r0
 80026b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80026b6:	e015      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80026b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026bc:	3328      	adds	r3, #40	@ 0x28
 80026be:	2101      	movs	r1, #1
 80026c0:	4618      	mov	r0, r3
 80026c2:	f000 ffcf 	bl	8003664 <RCCEx_PLL3_Config>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80026cc:	e00a      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80026d4:	e006      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80026d6:	bf00      	nop
 80026d8:	e004      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80026da:	bf00      	nop
 80026dc:	e002      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80026de:	bf00      	nop
 80026e0:	e000      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80026e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10b      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80026ec:	4bb6      	ldr	r3, [pc, #728]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80026ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80026f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80026fc:	4ab2      	ldr	r2, [pc, #712]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80026fe:	430b      	orrs	r3, r1
 8002700:	6593      	str	r3, [r2, #88]	@ 0x58
 8002702:	e003      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002704:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002708:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800270c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002714:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8002718:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800271c:	2300      	movs	r3, #0
 800271e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002722:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002726:	460b      	mov	r3, r1
 8002728:	4313      	orrs	r3, r2
 800272a:	d02a      	beq.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 800272c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002730:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002732:	2b00      	cmp	r3, #0
 8002734:	d011      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002736:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800273a:	d10a      	bne.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800273c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002740:	3308      	adds	r3, #8
 8002742:	2101      	movs	r1, #1
 8002744:	4618      	mov	r0, r3
 8002746:	f000 fedb 	bl	8003500 <RCCEx_PLL2_Config>
 800274a:	4603      	mov	r3, r0
 800274c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8002750:	e004      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002758:	e000      	b.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800275a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800275c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10a      	bne.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002764:	4b98      	ldr	r3, [pc, #608]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002766:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002768:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800276c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002772:	4a95      	ldr	r2, [pc, #596]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002774:	430b      	orrs	r3, r1
 8002776:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002778:	e003      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800277a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800277e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002782:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800278e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002792:	2300      	movs	r3, #0
 8002794:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002798:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800279c:	460b      	mov	r3, r1
 800279e:	4313      	orrs	r3, r2
 80027a0:	d037      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80027a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027ac:	d00e      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x760>
 80027ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027b2:	d816      	bhi.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x776>
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d018      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80027b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80027bc:	d111      	bne.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027be:	4b82      	ldr	r3, [pc, #520]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80027c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c2:	4a81      	ldr	r2, [pc, #516]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80027c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80027ca:	e00f      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80027cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027d0:	3308      	adds	r3, #8
 80027d2:	2101      	movs	r1, #1
 80027d4:	4618      	mov	r0, r3
 80027d6:	f000 fe93 	bl	8003500 <RCCEx_PLL2_Config>
 80027da:	4603      	mov	r3, r0
 80027dc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80027e0:	e004      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80027e8:	e000      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80027ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10a      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027f4:	4b74      	ldr	r3, [pc, #464]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80027f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027f8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80027fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002802:	4a71      	ldr	r2, [pc, #452]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002804:	430b      	orrs	r3, r1
 8002806:	6513      	str	r3, [r2, #80]	@ 0x50
 8002808:	e003      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800280a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800280e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002812:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800281e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002822:	2300      	movs	r3, #0
 8002824:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002828:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800282c:	460b      	mov	r3, r1
 800282e:	4313      	orrs	r3, r2
 8002830:	d03a      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002832:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002836:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002838:	2b03      	cmp	r3, #3
 800283a:	d81d      	bhi.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 800283c:	a201      	add	r2, pc, #4	@ (adr r2, 8002844 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002842:	bf00      	nop
 8002844:	08002881 	.word	0x08002881
 8002848:	08002855 	.word	0x08002855
 800284c:	08002863 	.word	0x08002863
 8002850:	08002881 	.word	0x08002881
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002854:	4b5c      	ldr	r3, [pc, #368]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002858:	4a5b      	ldr	r2, [pc, #364]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800285a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800285e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002860:	e00f      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002862:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002866:	3308      	adds	r3, #8
 8002868:	2102      	movs	r1, #2
 800286a:	4618      	mov	r0, r3
 800286c:	f000 fe48 	bl	8003500 <RCCEx_PLL2_Config>
 8002870:	4603      	mov	r3, r0
 8002872:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002876:	e004      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800287e:	e000      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8002880:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002882:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10a      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800288a:	4b4f      	ldr	r3, [pc, #316]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800288c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800288e:	f023 0103 	bic.w	r1, r3, #3
 8002892:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002898:	4a4b      	ldr	r2, [pc, #300]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800289a:	430b      	orrs	r3, r1
 800289c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800289e:	e003      	b.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80028a4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80028b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028b8:	2300      	movs	r3, #0
 80028ba:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80028be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80028c2:	460b      	mov	r3, r1
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f000 80a0 	beq.w	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028ca:	4b40      	ldr	r3, [pc, #256]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a3f      	ldr	r2, [pc, #252]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80028d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028d6:	f7fe f887 	bl	80009e8 <HAL_GetTick>
 80028da:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028de:	e00b      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e0:	f7fe f882 	bl	80009e8 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b64      	cmp	r3, #100	@ 0x64
 80028ee:	d903      	bls.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80028f6:	e005      	b.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028f8:	4b34      	ldr	r3, [pc, #208]	@ (80029cc <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0ed      	beq.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8002904:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002908:	2b00      	cmp	r3, #0
 800290a:	d17a      	bne.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800290c:	4b2e      	ldr	r3, [pc, #184]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800290e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002910:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002914:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002918:	4053      	eors	r3, r2
 800291a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800291e:	2b00      	cmp	r3, #0
 8002920:	d015      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002922:	4b29      	ldr	r3, [pc, #164]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002926:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800292a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800292e:	4b26      	ldr	r3, [pc, #152]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002932:	4a25      	ldr	r2, [pc, #148]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002938:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800293a:	4b23      	ldr	r3, [pc, #140]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293e:	4a22      	ldr	r2, [pc, #136]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002944:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002946:	4a20      	ldr	r2, [pc, #128]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002948:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800294c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800294e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002952:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002956:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800295a:	d118      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800295c:	f7fe f844 	bl	80009e8 <HAL_GetTick>
 8002960:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002964:	e00d      	b.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002966:	f7fe f83f 	bl	80009e8 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002970:	1ad2      	subs	r2, r2, r3
 8002972:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002976:	429a      	cmp	r2, r3
 8002978:	d903      	bls.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8002980:	e005      	b.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002982:	4b11      	ldr	r3, [pc, #68]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0eb      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800298e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002992:	2b00      	cmp	r3, #0
 8002994:	d130      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002996:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800299a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800299e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029a6:	d115      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x968>
 80029a8:	4b07      	ldr	r3, [pc, #28]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80029b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80029b8:	091a      	lsrs	r2, r3, #4
 80029ba:	4b05      	ldr	r3, [pc, #20]	@ (80029d0 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 80029bc:	4013      	ands	r3, r2
 80029be:	4a02      	ldr	r2, [pc, #8]	@ (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80029c0:	430b      	orrs	r3, r1
 80029c2:	6113      	str	r3, [r2, #16]
 80029c4:	e00c      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x974>
 80029c6:	bf00      	nop
 80029c8:	58024400 	.word	0x58024400
 80029cc:	58024800 	.word	0x58024800
 80029d0:	00ffffcf 	.word	0x00ffffcf
 80029d4:	4bd4      	ldr	r3, [pc, #848]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	4ad3      	ldr	r2, [pc, #844]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80029da:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80029de:	6113      	str	r3, [r2, #16]
 80029e0:	4bd1      	ldr	r3, [pc, #836]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80029e2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80029e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80029ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029f0:	4acd      	ldr	r2, [pc, #820]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80029f2:	430b      	orrs	r3, r1
 80029f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029f6:	e008      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80029fc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8002a00:	e003      	b.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a02:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a06:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002a0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a12:	f002 0301 	and.w	r3, r2, #1
 8002a16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002a20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a24:	460b      	mov	r3, r1
 8002a26:	4313      	orrs	r3, r2
 8002a28:	f000 808b 	beq.w	8002b42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002a2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002a34:	2b28      	cmp	r3, #40	@ 0x28
 8002a36:	d86b      	bhi.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002a38:	a201      	add	r2, pc, #4	@ (adr r2, 8002a40 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8002a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a3e:	bf00      	nop
 8002a40:	08002b19 	.word	0x08002b19
 8002a44:	08002b11 	.word	0x08002b11
 8002a48:	08002b11 	.word	0x08002b11
 8002a4c:	08002b11 	.word	0x08002b11
 8002a50:	08002b11 	.word	0x08002b11
 8002a54:	08002b11 	.word	0x08002b11
 8002a58:	08002b11 	.word	0x08002b11
 8002a5c:	08002b11 	.word	0x08002b11
 8002a60:	08002ae5 	.word	0x08002ae5
 8002a64:	08002b11 	.word	0x08002b11
 8002a68:	08002b11 	.word	0x08002b11
 8002a6c:	08002b11 	.word	0x08002b11
 8002a70:	08002b11 	.word	0x08002b11
 8002a74:	08002b11 	.word	0x08002b11
 8002a78:	08002b11 	.word	0x08002b11
 8002a7c:	08002b11 	.word	0x08002b11
 8002a80:	08002afb 	.word	0x08002afb
 8002a84:	08002b11 	.word	0x08002b11
 8002a88:	08002b11 	.word	0x08002b11
 8002a8c:	08002b11 	.word	0x08002b11
 8002a90:	08002b11 	.word	0x08002b11
 8002a94:	08002b11 	.word	0x08002b11
 8002a98:	08002b11 	.word	0x08002b11
 8002a9c:	08002b11 	.word	0x08002b11
 8002aa0:	08002b19 	.word	0x08002b19
 8002aa4:	08002b11 	.word	0x08002b11
 8002aa8:	08002b11 	.word	0x08002b11
 8002aac:	08002b11 	.word	0x08002b11
 8002ab0:	08002b11 	.word	0x08002b11
 8002ab4:	08002b11 	.word	0x08002b11
 8002ab8:	08002b11 	.word	0x08002b11
 8002abc:	08002b11 	.word	0x08002b11
 8002ac0:	08002b19 	.word	0x08002b19
 8002ac4:	08002b11 	.word	0x08002b11
 8002ac8:	08002b11 	.word	0x08002b11
 8002acc:	08002b11 	.word	0x08002b11
 8002ad0:	08002b11 	.word	0x08002b11
 8002ad4:	08002b11 	.word	0x08002b11
 8002ad8:	08002b11 	.word	0x08002b11
 8002adc:	08002b11 	.word	0x08002b11
 8002ae0:	08002b19 	.word	0x08002b19
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ae4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ae8:	3308      	adds	r3, #8
 8002aea:	2101      	movs	r1, #1
 8002aec:	4618      	mov	r0, r3
 8002aee:	f000 fd07 	bl	8003500 <RCCEx_PLL2_Config>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002af8:	e00f      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002afa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002afe:	3328      	adds	r3, #40	@ 0x28
 8002b00:	2101      	movs	r1, #1
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fdae 	bl	8003664 <RCCEx_PLL3_Config>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002b0e:	e004      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002b16:	e000      	b.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8002b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10b      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002b22:	4b81      	ldr	r3, [pc, #516]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b26:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002b2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b32:	4a7d      	ldr	r2, [pc, #500]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002b34:	430b      	orrs	r3, r1
 8002b36:	6553      	str	r3, [r2, #84]	@ 0x54
 8002b38:	e003      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b3e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002b42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4a:	f002 0302 	and.w	r3, r2, #2
 8002b4e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b52:	2300      	movs	r3, #0
 8002b54:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002b58:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002b5c:	460b      	mov	r3, r1
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	d042      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002b62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b68:	2b05      	cmp	r3, #5
 8002b6a:	d825      	bhi.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8002b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8002b74 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8002b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b72:	bf00      	nop
 8002b74:	08002bc1 	.word	0x08002bc1
 8002b78:	08002b8d 	.word	0x08002b8d
 8002b7c:	08002ba3 	.word	0x08002ba3
 8002b80:	08002bc1 	.word	0x08002bc1
 8002b84:	08002bc1 	.word	0x08002bc1
 8002b88:	08002bc1 	.word	0x08002bc1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b90:	3308      	adds	r3, #8
 8002b92:	2101      	movs	r1, #1
 8002b94:	4618      	mov	r0, r3
 8002b96:	f000 fcb3 	bl	8003500 <RCCEx_PLL2_Config>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002ba0:	e00f      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ba2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ba6:	3328      	adds	r3, #40	@ 0x28
 8002ba8:	2101      	movs	r1, #1
 8002baa:	4618      	mov	r0, r3
 8002bac:	f000 fd5a 	bl	8003664 <RCCEx_PLL3_Config>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002bb6:	e004      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002bbe:	e000      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8002bc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bc2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10a      	bne.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002bca:	4b57      	ldr	r3, [pc, #348]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bce:	f023 0107 	bic.w	r1, r3, #7
 8002bd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bd8:	4a53      	ldr	r2, [pc, #332]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002bda:	430b      	orrs	r3, r1
 8002bdc:	6553      	str	r3, [r2, #84]	@ 0x54
 8002bde:	e003      	b.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002be4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002be8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf0:	f002 0304 	and.w	r3, r2, #4
 8002bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bfe:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4313      	orrs	r3, r2
 8002c06:	d044      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002c08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c10:	2b05      	cmp	r3, #5
 8002c12:	d825      	bhi.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8002c14:	a201      	add	r2, pc, #4	@ (adr r2, 8002c1c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8002c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1a:	bf00      	nop
 8002c1c:	08002c69 	.word	0x08002c69
 8002c20:	08002c35 	.word	0x08002c35
 8002c24:	08002c4b 	.word	0x08002c4b
 8002c28:	08002c69 	.word	0x08002c69
 8002c2c:	08002c69 	.word	0x08002c69
 8002c30:	08002c69 	.word	0x08002c69
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c38:	3308      	adds	r3, #8
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	f000 fc5f 	bl	8003500 <RCCEx_PLL2_Config>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002c48:	e00f      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c4e:	3328      	adds	r3, #40	@ 0x28
 8002c50:	2101      	movs	r1, #1
 8002c52:	4618      	mov	r0, r3
 8002c54:	f000 fd06 	bl	8003664 <RCCEx_PLL3_Config>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002c5e:	e004      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002c66:	e000      	b.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8002c68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c6a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10b      	bne.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c72:	4b2d      	ldr	r3, [pc, #180]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c76:	f023 0107 	bic.w	r1, r3, #7
 8002c7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c82:	4a29      	ldr	r2, [pc, #164]	@ (8002d28 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002c84:	430b      	orrs	r3, r1
 8002c86:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c88:	e003      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c8a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c8e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002c92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9a:	f002 0320 	and.w	r3, r2, #32
 8002c9e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ca8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002cac:	460b      	mov	r3, r1
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	d057      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8002cb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cbe:	d035      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8002cc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002cc4:	d82c      	bhi.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cca:	d031      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8002ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cd0:	d826      	bhi.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002cd2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002cd6:	d02d      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8002cd8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002cdc:	d820      	bhi.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002cde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ce2:	d012      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8002ce4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ce8:	d81a      	bhi.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d024      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8002cee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cf2:	d115      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002cf4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cf8:	3308      	adds	r3, #8
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fbff 	bl	8003500 <RCCEx_PLL2_Config>
 8002d02:	4603      	mov	r3, r0
 8002d04:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002d08:	e017      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d0e:	3328      	adds	r3, #40	@ 0x28
 8002d10:	2102      	movs	r1, #2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fca6 	bl	8003664 <RCCEx_PLL3_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8002d1e:	e00c      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002d26:	e008      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8002d28:	58024400 	.word	0x58024400
        break;
 8002d2c:	bf00      	nop
 8002d2e:	e004      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8002d30:	bf00      	nop
 8002d32:	e002      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8002d34:	bf00      	nop
 8002d36:	e000      	b.n	8002d3a <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8002d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10b      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d42:	4bc2      	ldr	r3, [pc, #776]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d46:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002d4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d52:	4abe      	ldr	r2, [pc, #760]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002d54:	430b      	orrs	r3, r1
 8002d56:	6553      	str	r3, [r2, #84]	@ 0x54
 8002d58:	e003      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d5e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8002d62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d6a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8002d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002d72:	2300      	movs	r3, #0
 8002d74:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002d78:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	d055      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8002d82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d86:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002d8a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002d8e:	d033      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8002d90:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8002d94:	d82c      	bhi.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8002d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d9a:	d02f      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8002d9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002da0:	d826      	bhi.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8002da2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002da6:	d02b      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8002da8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002dac:	d820      	bhi.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8002dae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002db2:	d012      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8002db4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002db8:	d81a      	bhi.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d022      	beq.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8002dbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dc2:	d115      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dc8:	3308      	adds	r3, #8
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 fb97 	bl	8003500 <RCCEx_PLL2_Config>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002dd8:	e015      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002dda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dde:	3328      	adds	r3, #40	@ 0x28
 8002de0:	2102      	movs	r1, #2
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fc3e 	bl	8003664 <RCCEx_PLL3_Config>
 8002de8:	4603      	mov	r3, r0
 8002dea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8002dee:	e00a      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002df6:	e006      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8002df8:	bf00      	nop
 8002dfa:	e004      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8002dfc:	bf00      	nop
 8002dfe:	e002      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8002e00:	bf00      	nop
 8002e02:	e000      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8002e04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e06:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10b      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002e0e:	4b8f      	ldr	r3, [pc, #572]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e12:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8002e16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8002e1e:	4a8b      	ldr	r2, [pc, #556]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002e20:	430b      	orrs	r3, r1
 8002e22:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e24:	e003      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e2a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8002e2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e36:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8002e3a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002e3e:	2300      	movs	r3, #0
 8002e40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002e44:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8002e48:	460b      	mov	r3, r1
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	d055      	beq.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8002e4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002e56:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002e5a:	d033      	beq.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8002e5c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8002e60:	d82c      	bhi.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8002e62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e66:	d02f      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8002e68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e6c:	d826      	bhi.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8002e6e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002e72:	d02b      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8002e74:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8002e78:	d820      	bhi.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8002e7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e7e:	d012      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8002e80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e84:	d81a      	bhi.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d022      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8002e8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e8e:	d115      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e94:	3308      	adds	r3, #8
 8002e96:	2100      	movs	r1, #0
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 fb31 	bl	8003500 <RCCEx_PLL2_Config>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002ea4:	e015      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002ea6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002eaa:	3328      	adds	r3, #40	@ 0x28
 8002eac:	2102      	movs	r1, #2
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f000 fbd8 	bl	8003664 <RCCEx_PLL3_Config>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8002eba:	e00a      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002ec2:	e006      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8002ec4:	bf00      	nop
 8002ec6:	e004      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8002ec8:	bf00      	nop
 8002eca:	e002      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8002ecc:	bf00      	nop
 8002ece:	e000      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8002ed0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ed2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d10b      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8002eda:	4b5c      	ldr	r3, [pc, #368]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ede:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8002ee2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ee6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002eea:	4a58      	ldr	r2, [pc, #352]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002eec:	430b      	orrs	r3, r1
 8002eee:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ef0:	e003      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ef2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ef6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8002efa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f02:	f002 0308 	and.w	r3, r2, #8
 8002f06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002f10:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8002f14:	460b      	mov	r3, r1
 8002f16:	4313      	orrs	r3, r2
 8002f18:	d01e      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8002f1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f26:	d10c      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002f28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f2c:	3328      	adds	r3, #40	@ 0x28
 8002f2e:	2102      	movs	r1, #2
 8002f30:	4618      	mov	r0, r3
 8002f32:	f000 fb97 	bl	8003664 <RCCEx_PLL3_Config>
 8002f36:	4603      	mov	r3, r0
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d002      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8002f42:	4b42      	ldr	r3, [pc, #264]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f52:	4a3e      	ldr	r2, [pc, #248]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002f54:	430b      	orrs	r3, r1
 8002f56:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002f58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f60:	f002 0310 	and.w	r3, r2, #16
 8002f64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002f6e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8002f72:	460b      	mov	r3, r1
 8002f74:	4313      	orrs	r3, r2
 8002f76:	d01e      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8002f78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f84:	d10c      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8002f86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f8a:	3328      	adds	r3, #40	@ 0x28
 8002f8c:	2102      	movs	r1, #2
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 fb68 	bl	8003664 <RCCEx_PLL3_Config>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d002      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002fa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002fa8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fb0:	4a26      	ldr	r2, [pc, #152]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8002fb2:	430b      	orrs	r3, r1
 8002fb4:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002fb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fbe:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8002fc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002fcc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	d040      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8002fd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fda:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002fde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fe2:	d022      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8002fe4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fe8:	d81b      	bhi.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8002fee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ff2:	d00b      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8002ff4:	e015      	b.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ff6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ffa:	3308      	adds	r3, #8
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fa7e 	bl	8003500 <RCCEx_PLL2_Config>
 8003004:	4603      	mov	r3, r0
 8003006:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800300a:	e00f      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800300c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003010:	3328      	adds	r3, #40	@ 0x28
 8003012:	2102      	movs	r1, #2
 8003014:	4618      	mov	r0, r3
 8003016:	f000 fb25 	bl	8003664 <RCCEx_PLL3_Config>
 800301a:	4603      	mov	r3, r0
 800301c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003020:	e004      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003028:	e000      	b.n	800302c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800302a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800302c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003030:	2b00      	cmp	r3, #0
 8003032:	d10d      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003034:	4b05      	ldr	r3, [pc, #20]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003038:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800303c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003040:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003044:	4a01      	ldr	r2, [pc, #4]	@ (800304c <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003046:	430b      	orrs	r3, r1
 8003048:	6593      	str	r3, [r2, #88]	@ 0x58
 800304a:	e005      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800304c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003050:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003054:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003058:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003060:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003064:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003066:	2300      	movs	r3, #0
 8003068:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800306a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800306e:	460b      	mov	r3, r1
 8003070:	4313      	orrs	r3, r2
 8003072:	d03b      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003074:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003078:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800307c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003080:	d01f      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8003082:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003086:	d818      	bhi.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8003088:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800308c:	d003      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800308e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003092:	d007      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003094:	e011      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003096:	4b64      	ldr	r3, [pc, #400]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309a:	4a63      	ldr	r2, [pc, #396]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800309c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80030a2:	e00f      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030a8:	3328      	adds	r3, #40	@ 0x28
 80030aa:	2101      	movs	r1, #1
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fad9 	bl	8003664 <RCCEx_PLL3_Config>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 80030b8:	e004      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80030c0:	e000      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80030c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d10b      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030cc:	4b56      	ldr	r3, [pc, #344]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80030ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d0:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80030d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030dc:	4a52      	ldr	r2, [pc, #328]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80030de:	430b      	orrs	r3, r1
 80030e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80030e2:	e003      	b.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030e8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80030ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80030f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80030fa:	2300      	movs	r3, #0
 80030fc:	677b      	str	r3, [r7, #116]	@ 0x74
 80030fe:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003102:	460b      	mov	r3, r1
 8003104:	4313      	orrs	r3, r2
 8003106:	d031      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003108:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800310c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8003112:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003116:	d007      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003118:	e011      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800311a:	4b43      	ldr	r3, [pc, #268]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800311c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311e:	4a42      	ldr	r2, [pc, #264]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003120:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003124:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003126:	e00e      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003128:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800312c:	3308      	adds	r3, #8
 800312e:	2102      	movs	r1, #2
 8003130:	4618      	mov	r0, r3
 8003132:	f000 f9e5 	bl	8003500 <RCCEx_PLL2_Config>
 8003136:	4603      	mov	r3, r0
 8003138:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800313c:	e003      	b.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003146:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10a      	bne.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800314e:	4b36      	ldr	r3, [pc, #216]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003152:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003156:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800315a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800315c:	4a32      	ldr	r2, [pc, #200]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800315e:	430b      	orrs	r3, r1
 8003160:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003162:	e003      	b.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003164:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003168:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800316c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003174:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003178:	66bb      	str	r3, [r7, #104]	@ 0x68
 800317a:	2300      	movs	r3, #0
 800317c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800317e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003182:	460b      	mov	r3, r1
 8003184:	4313      	orrs	r3, r2
 8003186:	d00c      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003188:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800318c:	3328      	adds	r3, #40	@ 0x28
 800318e:	2102      	movs	r1, #2
 8003190:	4618      	mov	r0, r3
 8003192:	f000 fa67 	bl	8003664 <RCCEx_PLL3_Config>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80031a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031aa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80031ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80031b0:	2300      	movs	r3, #0
 80031b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80031b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80031b8:	460b      	mov	r3, r1
 80031ba:	4313      	orrs	r3, r2
 80031bc:	d03a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80031be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031ca:	d018      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80031cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031d0:	d811      	bhi.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80031d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031d6:	d014      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80031d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031dc:	d80b      	bhi.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d011      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80031e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031e6:	d106      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80031ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ec:	4a0e      	ldr	r2, [pc, #56]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80031ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80031f4:	e008      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80031fc:	e004      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80031fe:	bf00      	nop
 8003200:	e002      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003202:	bf00      	nop
 8003204:	e000      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003206:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003208:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10d      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003210:	4b05      	ldr	r3, [pc, #20]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003214:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003218:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800321c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003220:	4a01      	ldr	r2, [pc, #4]	@ (8003228 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003222:	430b      	orrs	r3, r1
 8003224:	6553      	str	r3, [r2, #84]	@ 0x54
 8003226:	e005      	b.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8003228:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800322c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003230:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003234:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003240:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003242:	2300      	movs	r3, #0
 8003244:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003246:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800324a:	460b      	mov	r3, r1
 800324c:	4313      	orrs	r3, r2
 800324e:	d009      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003250:	4baa      	ldr	r3, [pc, #680]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003252:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003254:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003258:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800325c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800325e:	4aa7      	ldr	r2, [pc, #668]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003260:	430b      	orrs	r3, r1
 8003262:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003264:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003270:	653b      	str	r3, [r7, #80]	@ 0x50
 8003272:	2300      	movs	r3, #0
 8003274:	657b      	str	r3, [r7, #84]	@ 0x54
 8003276:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800327a:	460b      	mov	r3, r1
 800327c:	4313      	orrs	r3, r2
 800327e:	d00a      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003280:	4b9e      	ldr	r3, [pc, #632]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003288:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800328c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003290:	4a9a      	ldr	r2, [pc, #616]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003292:	430b      	orrs	r3, r1
 8003294:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003296:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80032a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80032a4:	2300      	movs	r3, #0
 80032a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032a8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80032ac:	460b      	mov	r3, r1
 80032ae:	4313      	orrs	r3, r2
 80032b0:	d009      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032b2:	4b92      	ldr	r3, [pc, #584]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80032b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032b6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80032ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c0:	4a8e      	ldr	r2, [pc, #568]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80032c2:	430b      	orrs	r3, r1
 80032c4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80032c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032ce:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80032d2:	643b      	str	r3, [r7, #64]	@ 0x40
 80032d4:	2300      	movs	r3, #0
 80032d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80032d8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80032dc:	460b      	mov	r3, r1
 80032de:	4313      	orrs	r3, r2
 80032e0:	d00e      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80032e2:	4b86      	ldr	r3, [pc, #536]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	4a85      	ldr	r2, [pc, #532]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80032e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80032ec:	6113      	str	r3, [r2, #16]
 80032ee:	4b83      	ldr	r3, [pc, #524]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80032f0:	6919      	ldr	r1, [r3, #16]
 80032f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80032fa:	4a80      	ldr	r2, [pc, #512]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80032fc:	430b      	orrs	r3, r1
 80032fe:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003300:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003308:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800330c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800330e:	2300      	movs	r3, #0
 8003310:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003312:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003316:	460b      	mov	r3, r1
 8003318:	4313      	orrs	r3, r2
 800331a:	d009      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800331c:	4b77      	ldr	r3, [pc, #476]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800331e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003320:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003324:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800332a:	4a74      	ldr	r2, [pc, #464]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800332c:	430b      	orrs	r3, r1
 800332e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003330:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003338:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800333c:	633b      	str	r3, [r7, #48]	@ 0x30
 800333e:	2300      	movs	r3, #0
 8003340:	637b      	str	r3, [r7, #52]	@ 0x34
 8003342:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003346:	460b      	mov	r3, r1
 8003348:	4313      	orrs	r3, r2
 800334a:	d00a      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800334c:	4b6b      	ldr	r3, [pc, #428]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800334e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003350:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003354:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800335c:	4a67      	ldr	r2, [pc, #412]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800335e:	430b      	orrs	r3, r1
 8003360:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003362:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	2100      	movs	r1, #0
 800336c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003374:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003378:	460b      	mov	r3, r1
 800337a:	4313      	orrs	r3, r2
 800337c:	d011      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800337e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003382:	3308      	adds	r3, #8
 8003384:	2100      	movs	r1, #0
 8003386:	4618      	mov	r0, r3
 8003388:	f000 f8ba 	bl	8003500 <RCCEx_PLL2_Config>
 800338c:	4603      	mov	r3, r0
 800338e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003392:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800339e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80033a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033aa:	2100      	movs	r1, #0
 80033ac:	6239      	str	r1, [r7, #32]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80033b4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80033b8:	460b      	mov	r3, r1
 80033ba:	4313      	orrs	r3, r2
 80033bc:	d011      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033c2:	3308      	adds	r3, #8
 80033c4:	2101      	movs	r1, #1
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f89a 	bl	8003500 <RCCEx_PLL2_Config>
 80033cc:	4603      	mov	r3, r0
 80033ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80033d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d003      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80033e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ea:	2100      	movs	r1, #0
 80033ec:	61b9      	str	r1, [r7, #24]
 80033ee:	f003 0304 	and.w	r3, r3, #4
 80033f2:	61fb      	str	r3, [r7, #28]
 80033f4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80033f8:	460b      	mov	r3, r1
 80033fa:	4313      	orrs	r3, r2
 80033fc:	d011      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003402:	3308      	adds	r3, #8
 8003404:	2102      	movs	r1, #2
 8003406:	4618      	mov	r0, r3
 8003408:	f000 f87a 	bl	8003500 <RCCEx_PLL2_Config>
 800340c:	4603      	mov	r3, r0
 800340e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003412:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800341e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003422:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342a:	2100      	movs	r1, #0
 800342c:	6139      	str	r1, [r7, #16]
 800342e:	f003 0308 	and.w	r3, r3, #8
 8003432:	617b      	str	r3, [r7, #20]
 8003434:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003438:	460b      	mov	r3, r1
 800343a:	4313      	orrs	r3, r2
 800343c:	d011      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800343e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003442:	3328      	adds	r3, #40	@ 0x28
 8003444:	2100      	movs	r1, #0
 8003446:	4618      	mov	r0, r3
 8003448:	f000 f90c 	bl	8003664 <RCCEx_PLL3_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8003452:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800345a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800345e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003462:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346a:	2100      	movs	r1, #0
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003478:	460b      	mov	r3, r1
 800347a:	4313      	orrs	r3, r2
 800347c:	d011      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800347e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003482:	3328      	adds	r3, #40	@ 0x28
 8003484:	2101      	movs	r1, #1
 8003486:	4618      	mov	r0, r3
 8003488:	f000 f8ec 	bl	8003664 <RCCEx_PLL3_Config>
 800348c:	4603      	mov	r3, r0
 800348e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003492:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800349e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80034a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034aa:	2100      	movs	r1, #0
 80034ac:	6039      	str	r1, [r7, #0]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	607b      	str	r3, [r7, #4]
 80034b4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80034b8:	460b      	mov	r3, r1
 80034ba:	4313      	orrs	r3, r2
 80034bc:	d011      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034c2:	3328      	adds	r3, #40	@ 0x28
 80034c4:	2102      	movs	r1, #2
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 f8cc 	bl	8003664 <RCCEx_PLL3_Config>
 80034cc:	4603      	mov	r3, r0
 80034ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80034d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 80034e2:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e000      	b.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 80034f6:	46bd      	mov	sp, r7
 80034f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034fc:	58024400 	.word	0x58024400

08003500 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800350e:	4b53      	ldr	r3, [pc, #332]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 8003510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	2b03      	cmp	r3, #3
 8003518:	d101      	bne.n	800351e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e099      	b.n	8003652 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800351e:	4b4f      	ldr	r3, [pc, #316]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a4e      	ldr	r2, [pc, #312]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 8003524:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003528:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800352a:	f7fd fa5d 	bl	80009e8 <HAL_GetTick>
 800352e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003530:	e008      	b.n	8003544 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003532:	f7fd fa59 	bl	80009e8 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	2b02      	cmp	r3, #2
 800353e:	d901      	bls.n	8003544 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003540:	2303      	movs	r3, #3
 8003542:	e086      	b.n	8003652 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003544:	4b45      	ldr	r3, [pc, #276]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1f0      	bne.n	8003532 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003550:	4b42      	ldr	r3, [pc, #264]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 8003552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003554:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	031b      	lsls	r3, r3, #12
 800355e:	493f      	ldr	r1, [pc, #252]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 8003560:	4313      	orrs	r3, r2
 8003562:	628b      	str	r3, [r1, #40]	@ 0x28
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	3b01      	subs	r3, #1
 800356a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	3b01      	subs	r3, #1
 8003574:	025b      	lsls	r3, r3, #9
 8003576:	b29b      	uxth	r3, r3
 8003578:	431a      	orrs	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	3b01      	subs	r3, #1
 8003580:	041b      	lsls	r3, r3, #16
 8003582:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003586:	431a      	orrs	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	3b01      	subs	r3, #1
 800358e:	061b      	lsls	r3, r3, #24
 8003590:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003594:	4931      	ldr	r1, [pc, #196]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 8003596:	4313      	orrs	r3, r2
 8003598:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800359a:	4b30      	ldr	r3, [pc, #192]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 800359c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	492d      	ldr	r1, [pc, #180]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80035ac:	4b2b      	ldr	r3, [pc, #172]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 80035ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b0:	f023 0220 	bic.w	r2, r3, #32
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	4928      	ldr	r1, [pc, #160]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80035be:	4b27      	ldr	r3, [pc, #156]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 80035c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035c2:	4a26      	ldr	r2, [pc, #152]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 80035c4:	f023 0310 	bic.w	r3, r3, #16
 80035c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80035ca:	4b24      	ldr	r3, [pc, #144]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 80035cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035ce:	4b24      	ldr	r3, [pc, #144]	@ (8003660 <RCCEx_PLL2_Config+0x160>)
 80035d0:	4013      	ands	r3, r2
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	69d2      	ldr	r2, [r2, #28]
 80035d6:	00d2      	lsls	r2, r2, #3
 80035d8:	4920      	ldr	r1, [pc, #128]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80035de:	4b1f      	ldr	r3, [pc, #124]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 80035e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e2:	4a1e      	ldr	r2, [pc, #120]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 80035e4:	f043 0310 	orr.w	r3, r3, #16
 80035e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d106      	bne.n	80035fe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80035f0:	4b1a      	ldr	r3, [pc, #104]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 80035f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f4:	4a19      	ldr	r2, [pc, #100]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 80035f6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80035fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80035fc:	e00f      	b.n	800361e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d106      	bne.n	8003612 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003604:	4b15      	ldr	r3, [pc, #84]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 8003606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003608:	4a14      	ldr	r2, [pc, #80]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 800360a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800360e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003610:	e005      	b.n	800361e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003612:	4b12      	ldr	r3, [pc, #72]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 8003614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003616:	4a11      	ldr	r2, [pc, #68]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 8003618:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800361c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800361e:	4b0f      	ldr	r3, [pc, #60]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a0e      	ldr	r2, [pc, #56]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 8003624:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003628:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800362a:	f7fd f9dd 	bl	80009e8 <HAL_GetTick>
 800362e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003630:	e008      	b.n	8003644 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003632:	f7fd f9d9 	bl	80009e8 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e006      	b.n	8003652 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003644:	4b05      	ldr	r3, [pc, #20]	@ (800365c <RCCEx_PLL2_Config+0x15c>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003650:	7bfb      	ldrb	r3, [r7, #15]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	58024400 	.word	0x58024400
 8003660:	ffff0007 	.word	0xffff0007

08003664 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800366e:	2300      	movs	r3, #0
 8003670:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003672:	4b53      	ldr	r3, [pc, #332]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003674:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	2b03      	cmp	r3, #3
 800367c:	d101      	bne.n	8003682 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e099      	b.n	80037b6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003682:	4b4f      	ldr	r3, [pc, #316]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a4e      	ldr	r2, [pc, #312]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003688:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800368c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800368e:	f7fd f9ab 	bl	80009e8 <HAL_GetTick>
 8003692:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003694:	e008      	b.n	80036a8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003696:	f7fd f9a7 	bl	80009e8 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	2b02      	cmp	r3, #2
 80036a2:	d901      	bls.n	80036a8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e086      	b.n	80037b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80036a8:	4b45      	ldr	r3, [pc, #276]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d1f0      	bne.n	8003696 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80036b4:	4b42      	ldr	r3, [pc, #264]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 80036b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	051b      	lsls	r3, r3, #20
 80036c2:	493f      	ldr	r1, [pc, #252]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	025b      	lsls	r3, r3, #9
 80036da:	b29b      	uxth	r3, r3
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	041b      	lsls	r3, r3, #16
 80036e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	3b01      	subs	r3, #1
 80036f2:	061b      	lsls	r3, r3, #24
 80036f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80036f8:	4931      	ldr	r1, [pc, #196]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80036fe:	4b30      	ldr	r3, [pc, #192]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003702:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	492d      	ldr	r1, [pc, #180]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 800370c:	4313      	orrs	r3, r2
 800370e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003710:	4b2b      	ldr	r3, [pc, #172]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003714:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	4928      	ldr	r1, [pc, #160]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 800371e:	4313      	orrs	r3, r2
 8003720:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003722:	4b27      	ldr	r3, [pc, #156]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003726:	4a26      	ldr	r2, [pc, #152]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003728:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800372c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800372e:	4b24      	ldr	r3, [pc, #144]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003730:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003732:	4b24      	ldr	r3, [pc, #144]	@ (80037c4 <RCCEx_PLL3_Config+0x160>)
 8003734:	4013      	ands	r3, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	69d2      	ldr	r2, [r2, #28]
 800373a:	00d2      	lsls	r2, r2, #3
 800373c:	4920      	ldr	r1, [pc, #128]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 800373e:	4313      	orrs	r3, r2
 8003740:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003742:	4b1f      	ldr	r3, [pc, #124]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003746:	4a1e      	ldr	r2, [pc, #120]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800374c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d106      	bne.n	8003762 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003754:	4b1a      	ldr	r3, [pc, #104]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003758:	4a19      	ldr	r2, [pc, #100]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 800375a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800375e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003760:	e00f      	b.n	8003782 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d106      	bne.n	8003776 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003768:	4b15      	ldr	r3, [pc, #84]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 800376a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376c:	4a14      	ldr	r2, [pc, #80]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 800376e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003772:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003774:	e005      	b.n	8003782 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003776:	4b12      	ldr	r3, [pc, #72]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800377a:	4a11      	ldr	r2, [pc, #68]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 800377c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003780:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003782:	4b0f      	ldr	r3, [pc, #60]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a0e      	ldr	r2, [pc, #56]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 8003788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800378c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800378e:	f7fd f92b 	bl	80009e8 <HAL_GetTick>
 8003792:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003794:	e008      	b.n	80037a8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003796:	f7fd f927 	bl	80009e8 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d901      	bls.n	80037a8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e006      	b.n	80037b6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80037a8:	4b05      	ldr	r3, [pc, #20]	@ (80037c0 <RCCEx_PLL3_Config+0x15c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d0f0      	beq.n	8003796 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80037b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	bf00      	nop
 80037c0:	58024400 	.word	0x58024400
 80037c4:	ffff0007 	.word	0xffff0007

080037c8 <__NVIC_SetPriority>:
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	6039      	str	r1, [r7, #0]
 80037d2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80037d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	db0a      	blt.n	80037f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	b2da      	uxtb	r2, r3
 80037e0:	490c      	ldr	r1, [pc, #48]	@ (8003814 <__NVIC_SetPriority+0x4c>)
 80037e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037e6:	0112      	lsls	r2, r2, #4
 80037e8:	b2d2      	uxtb	r2, r2
 80037ea:	440b      	add	r3, r1
 80037ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80037f0:	e00a      	b.n	8003808 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	b2da      	uxtb	r2, r3
 80037f6:	4908      	ldr	r1, [pc, #32]	@ (8003818 <__NVIC_SetPriority+0x50>)
 80037f8:	88fb      	ldrh	r3, [r7, #6]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	3b04      	subs	r3, #4
 8003800:	0112      	lsls	r2, r2, #4
 8003802:	b2d2      	uxtb	r2, r2
 8003804:	440b      	add	r3, r1
 8003806:	761a      	strb	r2, [r3, #24]
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	e000e100 	.word	0xe000e100
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003820:	2100      	movs	r1, #0
 8003822:	f06f 0004 	mvn.w	r0, #4
 8003826:	f7ff ffcf 	bl	80037c8 <__NVIC_SetPriority>
#endif
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003836:	f3ef 8305 	mrs	r3, IPSR
 800383a:	603b      	str	r3, [r7, #0]
  return(result);
 800383c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003842:	f06f 0305 	mvn.w	r3, #5
 8003846:	607b      	str	r3, [r7, #4]
 8003848:	e00c      	b.n	8003864 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800384a:	4b0a      	ldr	r3, [pc, #40]	@ (8003874 <osKernelInitialize+0x44>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d105      	bne.n	800385e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003852:	4b08      	ldr	r3, [pc, #32]	@ (8003874 <osKernelInitialize+0x44>)
 8003854:	2201      	movs	r2, #1
 8003856:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003858:	2300      	movs	r3, #0
 800385a:	607b      	str	r3, [r7, #4]
 800385c:	e002      	b.n	8003864 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800385e:	f04f 33ff 	mov.w	r3, #4294967295
 8003862:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003864:	687b      	ldr	r3, [r7, #4]
}
 8003866:	4618      	mov	r0, r3
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	2400003c 	.word	0x2400003c

08003878 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800387e:	f3ef 8305 	mrs	r3, IPSR
 8003882:	603b      	str	r3, [r7, #0]
  return(result);
 8003884:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <osKernelStart+0x1a>
    stat = osErrorISR;
 800388a:	f06f 0305 	mvn.w	r3, #5
 800388e:	607b      	str	r3, [r7, #4]
 8003890:	e010      	b.n	80038b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003892:	4b0b      	ldr	r3, [pc, #44]	@ (80038c0 <osKernelStart+0x48>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d109      	bne.n	80038ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800389a:	f7ff ffbf 	bl	800381c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800389e:	4b08      	ldr	r3, [pc, #32]	@ (80038c0 <osKernelStart+0x48>)
 80038a0:	2202      	movs	r2, #2
 80038a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80038a4:	f001 fcb8 	bl	8005218 <vTaskStartScheduler>
      stat = osOK;
 80038a8:	2300      	movs	r3, #0
 80038aa:	607b      	str	r3, [r7, #4]
 80038ac:	e002      	b.n	80038b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80038ae:	f04f 33ff 	mov.w	r3, #4294967295
 80038b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80038b4:	687b      	ldr	r3, [r7, #4]
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3708      	adds	r7, #8
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	2400003c 	.word	0x2400003c

080038c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08e      	sub	sp, #56	@ 0x38
 80038c8:	af04      	add	r7, sp, #16
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80038d0:	2300      	movs	r3, #0
 80038d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038d4:	f3ef 8305 	mrs	r3, IPSR
 80038d8:	617b      	str	r3, [r7, #20]
  return(result);
 80038da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d17e      	bne.n	80039de <osThreadNew+0x11a>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d07b      	beq.n	80039de <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80038e6:	2380      	movs	r3, #128	@ 0x80
 80038e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80038ea:	2318      	movs	r3, #24
 80038ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80038f2:	f04f 33ff 	mov.w	r3, #4294967295
 80038f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d045      	beq.n	800398a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d002      	beq.n	800390c <osThreadNew+0x48>
        name = attr->name;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d002      	beq.n	800391a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <osThreadNew+0x6e>
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	2b38      	cmp	r3, #56	@ 0x38
 8003924:	d805      	bhi.n	8003932 <osThreadNew+0x6e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	d001      	beq.n	8003936 <osThreadNew+0x72>
        return (NULL);
 8003932:	2300      	movs	r3, #0
 8003934:	e054      	b.n	80039e0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	089b      	lsrs	r3, r3, #2
 8003944:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00e      	beq.n	800396c <osThreadNew+0xa8>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b5b      	cmp	r3, #91	@ 0x5b
 8003954:	d90a      	bls.n	800396c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800395a:	2b00      	cmp	r3, #0
 800395c:	d006      	beq.n	800396c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d002      	beq.n	800396c <osThreadNew+0xa8>
        mem = 1;
 8003966:	2301      	movs	r3, #1
 8003968:	61bb      	str	r3, [r7, #24]
 800396a:	e010      	b.n	800398e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d10c      	bne.n	800398e <osThreadNew+0xca>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d108      	bne.n	800398e <osThreadNew+0xca>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d104      	bne.n	800398e <osThreadNew+0xca>
          mem = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	61bb      	str	r3, [r7, #24]
 8003988:	e001      	b.n	800398e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800398a:	2300      	movs	r3, #0
 800398c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d110      	bne.n	80039b6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800399c:	9202      	str	r2, [sp, #8]
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	6a3a      	ldr	r2, [r7, #32]
 80039a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f001 fa58 	bl	8004e60 <xTaskCreateStatic>
 80039b0:	4603      	mov	r3, r0
 80039b2:	613b      	str	r3, [r7, #16]
 80039b4:	e013      	b.n	80039de <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d110      	bne.n	80039de <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	b29a      	uxth	r2, r3
 80039c0:	f107 0310 	add.w	r3, r7, #16
 80039c4:	9301      	str	r3, [sp, #4]
 80039c6:	69fb      	ldr	r3, [r7, #28]
 80039c8:	9300      	str	r3, [sp, #0]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f001 faa6 	bl	8004f20 <xTaskCreate>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d001      	beq.n	80039de <osThreadNew+0x11a>
            hTask = NULL;
 80039da:	2300      	movs	r3, #0
 80039dc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039de:	693b      	ldr	r3, [r7, #16]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3728      	adds	r7, #40	@ 0x28
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039f0:	f3ef 8305 	mrs	r3, IPSR
 80039f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80039f6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <osDelay+0x1c>
    stat = osErrorISR;
 80039fc:	f06f 0305 	mvn.w	r3, #5
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	e007      	b.n	8003a14 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f001 fbcc 	bl	80051ac <vTaskDelay>
    }
  }

  return (stat);
 8003a14:	68fb      	ldr	r3, [r7, #12]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	4a07      	ldr	r2, [pc, #28]	@ (8003a4c <vApplicationGetIdleTaskMemory+0x2c>)
 8003a30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	4a06      	ldr	r2, [pc, #24]	@ (8003a50 <vApplicationGetIdleTaskMemory+0x30>)
 8003a36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2280      	movs	r2, #128	@ 0x80
 8003a3c:	601a      	str	r2, [r3, #0]
}
 8003a3e:	bf00      	nop
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	24000040 	.word	0x24000040
 8003a50:	2400009c 	.word	0x2400009c

08003a54 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4a07      	ldr	r2, [pc, #28]	@ (8003a80 <vApplicationGetTimerTaskMemory+0x2c>)
 8003a64:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	4a06      	ldr	r2, [pc, #24]	@ (8003a84 <vApplicationGetTimerTaskMemory+0x30>)
 8003a6a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a72:	601a      	str	r2, [r3, #0]
}
 8003a74:	bf00      	nop
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	2400029c 	.word	0x2400029c
 8003a84:	240002f8 	.word	0x240002f8

08003a88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08a      	sub	sp, #40	@ 0x28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003a94:	f001 fc28 	bl	80052e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003a98:	4b5c      	ldr	r3, [pc, #368]	@ (8003c0c <pvPortMalloc+0x184>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003aa0:	f000 f924 	bl	8003cec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003aa4:	4b5a      	ldr	r3, [pc, #360]	@ (8003c10 <pvPortMalloc+0x188>)
 8003aa6:	681a      	ldr	r2, [r3, #0]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f040 8095 	bne.w	8003bdc <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d01e      	beq.n	8003af6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003ab8:	2208      	movs	r2, #8
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4413      	add	r3, r2
 8003abe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d015      	beq.n	8003af6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f023 0307 	bic.w	r3, r3, #7
 8003ad0:	3308      	adds	r3, #8
 8003ad2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00b      	beq.n	8003af6 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003af0:	bf00      	nop
 8003af2:	bf00      	nop
 8003af4:	e7fd      	b.n	8003af2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d06f      	beq.n	8003bdc <pvPortMalloc+0x154>
 8003afc:	4b45      	ldr	r3, [pc, #276]	@ (8003c14 <pvPortMalloc+0x18c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d86a      	bhi.n	8003bdc <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003b06:	4b44      	ldr	r3, [pc, #272]	@ (8003c18 <pvPortMalloc+0x190>)
 8003b08:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003b0a:	4b43      	ldr	r3, [pc, #268]	@ (8003c18 <pvPortMalloc+0x190>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b10:	e004      	b.n	8003b1c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b14:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d903      	bls.n	8003b2e <pvPortMalloc+0xa6>
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f1      	bne.n	8003b12 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003b2e:	4b37      	ldr	r3, [pc, #220]	@ (8003c0c <pvPortMalloc+0x184>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d051      	beq.n	8003bdc <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003b38:	6a3b      	ldr	r3, [r7, #32]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2208      	movs	r2, #8
 8003b3e:	4413      	add	r3, r2
 8003b40:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	1ad2      	subs	r2, r2, r3
 8003b52:	2308      	movs	r3, #8
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d920      	bls.n	8003b9c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4413      	add	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00b      	beq.n	8003b84 <pvPortMalloc+0xfc>
	__asm volatile
 8003b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b70:	f383 8811 	msr	BASEPRI, r3
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	613b      	str	r3, [r7, #16]
}
 8003b7e:	bf00      	nop
 8003b80:	bf00      	nop
 8003b82:	e7fd      	b.n	8003b80 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	1ad2      	subs	r2, r2, r3
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003b96:	69b8      	ldr	r0, [r7, #24]
 8003b98:	f000 f90a 	bl	8003db0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003c14 <pvPortMalloc+0x18c>)
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	4a1b      	ldr	r2, [pc, #108]	@ (8003c14 <pvPortMalloc+0x18c>)
 8003ba8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003baa:	4b1a      	ldr	r3, [pc, #104]	@ (8003c14 <pvPortMalloc+0x18c>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	4b1b      	ldr	r3, [pc, #108]	@ (8003c1c <pvPortMalloc+0x194>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d203      	bcs.n	8003bbe <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003bb6:	4b17      	ldr	r3, [pc, #92]	@ (8003c14 <pvPortMalloc+0x18c>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a18      	ldr	r2, [pc, #96]	@ (8003c1c <pvPortMalloc+0x194>)
 8003bbc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	4b13      	ldr	r3, [pc, #76]	@ (8003c10 <pvPortMalloc+0x188>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	431a      	orrs	r2, r3
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003bd2:	4b13      	ldr	r3, [pc, #76]	@ (8003c20 <pvPortMalloc+0x198>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	4a11      	ldr	r2, [pc, #68]	@ (8003c20 <pvPortMalloc+0x198>)
 8003bda:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003bdc:	f001 fb92 	bl	8005304 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <pvPortMalloc+0x17a>
	__asm volatile
 8003bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bee:	f383 8811 	msr	BASEPRI, r3
 8003bf2:	f3bf 8f6f 	isb	sy
 8003bf6:	f3bf 8f4f 	dsb	sy
 8003bfa:	60fb      	str	r3, [r7, #12]
}
 8003bfc:	bf00      	nop
 8003bfe:	bf00      	nop
 8003c00:	e7fd      	b.n	8003bfe <pvPortMalloc+0x176>
	return pvReturn;
 8003c02:	69fb      	ldr	r3, [r7, #28]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3728      	adds	r7, #40	@ 0x28
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}
 8003c0c:	24004300 	.word	0x24004300
 8003c10:	24004314 	.word	0x24004314
 8003c14:	24004304 	.word	0x24004304
 8003c18:	240042f8 	.word	0x240042f8
 8003c1c:	24004308 	.word	0x24004308
 8003c20:	2400430c 	.word	0x2400430c

08003c24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d04f      	beq.n	8003cd6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003c36:	2308      	movs	r3, #8
 8003c38:	425b      	negs	r3, r3
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	4b25      	ldr	r3, [pc, #148]	@ (8003ce0 <vPortFree+0xbc>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10b      	bne.n	8003c6a <vPortFree+0x46>
	__asm volatile
 8003c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c56:	f383 8811 	msr	BASEPRI, r3
 8003c5a:	f3bf 8f6f 	isb	sy
 8003c5e:	f3bf 8f4f 	dsb	sy
 8003c62:	60fb      	str	r3, [r7, #12]
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop
 8003c68:	e7fd      	b.n	8003c66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00b      	beq.n	8003c8a <vPortFree+0x66>
	__asm volatile
 8003c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c76:	f383 8811 	msr	BASEPRI, r3
 8003c7a:	f3bf 8f6f 	isb	sy
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	60bb      	str	r3, [r7, #8]
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	e7fd      	b.n	8003c86 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	4b14      	ldr	r3, [pc, #80]	@ (8003ce0 <vPortFree+0xbc>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d01e      	beq.n	8003cd6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d11a      	bne.n	8003cd6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ce0 <vPortFree+0xbc>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	401a      	ands	r2, r3
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003cb0:	f001 fb1a 	bl	80052e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ce4 <vPortFree+0xc0>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	4a09      	ldr	r2, [pc, #36]	@ (8003ce4 <vPortFree+0xc0>)
 8003cc0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003cc2:	6938      	ldr	r0, [r7, #16]
 8003cc4:	f000 f874 	bl	8003db0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003cc8:	4b07      	ldr	r3, [pc, #28]	@ (8003ce8 <vPortFree+0xc4>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	4a06      	ldr	r2, [pc, #24]	@ (8003ce8 <vPortFree+0xc4>)
 8003cd0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003cd2:	f001 fb17 	bl	8005304 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003cd6:	bf00      	nop
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	24004314 	.word	0x24004314
 8003ce4:	24004304 	.word	0x24004304
 8003ce8:	24004310 	.word	0x24004310

08003cec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003cf2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8003cf6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003cf8:	4b27      	ldr	r3, [pc, #156]	@ (8003d98 <prvHeapInit+0xac>)
 8003cfa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00c      	beq.n	8003d20 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3307      	adds	r3, #7
 8003d0a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 0307 	bic.w	r3, r3, #7
 8003d12:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	4a1f      	ldr	r2, [pc, #124]	@ (8003d98 <prvHeapInit+0xac>)
 8003d1c:	4413      	add	r3, r2
 8003d1e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003d24:	4a1d      	ldr	r2, [pc, #116]	@ (8003d9c <prvHeapInit+0xb0>)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003d2a:	4b1c      	ldr	r3, [pc, #112]	@ (8003d9c <prvHeapInit+0xb0>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	4413      	add	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003d38:	2208      	movs	r2, #8
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f023 0307 	bic.w	r3, r3, #7
 8003d46:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4a15      	ldr	r2, [pc, #84]	@ (8003da0 <prvHeapInit+0xb4>)
 8003d4c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003d4e:	4b14      	ldr	r3, [pc, #80]	@ (8003da0 <prvHeapInit+0xb4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2200      	movs	r2, #0
 8003d54:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003d56:	4b12      	ldr	r3, [pc, #72]	@ (8003da0 <prvHeapInit+0xb4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	1ad2      	subs	r2, r2, r3
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003da0 <prvHeapInit+0xb4>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	4a0a      	ldr	r2, [pc, #40]	@ (8003da4 <prvHeapInit+0xb8>)
 8003d7a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	4a09      	ldr	r2, [pc, #36]	@ (8003da8 <prvHeapInit+0xbc>)
 8003d82:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003d84:	4b09      	ldr	r3, [pc, #36]	@ (8003dac <prvHeapInit+0xc0>)
 8003d86:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003d8a:	601a      	str	r2, [r3, #0]
}
 8003d8c:	bf00      	nop
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	240006f8 	.word	0x240006f8
 8003d9c:	240042f8 	.word	0x240042f8
 8003da0:	24004300 	.word	0x24004300
 8003da4:	24004308 	.word	0x24004308
 8003da8:	24004304 	.word	0x24004304
 8003dac:	24004314 	.word	0x24004314

08003db0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003db8:	4b28      	ldr	r3, [pc, #160]	@ (8003e5c <prvInsertBlockIntoFreeList+0xac>)
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e002      	b.n	8003dc4 <prvInsertBlockIntoFreeList+0x14>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d8f7      	bhi.n	8003dbe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	68ba      	ldr	r2, [r7, #8]
 8003dd8:	4413      	add	r3, r2
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d108      	bne.n	8003df2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	441a      	add	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	68ba      	ldr	r2, [r7, #8]
 8003dfc:	441a      	add	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d118      	bne.n	8003e38 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	4b15      	ldr	r3, [pc, #84]	@ (8003e60 <prvInsertBlockIntoFreeList+0xb0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d00d      	beq.n	8003e2e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685a      	ldr	r2, [r3, #4]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	441a      	add	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	e008      	b.n	8003e40 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e60 <prvInsertBlockIntoFreeList+0xb0>)
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	601a      	str	r2, [r3, #0]
 8003e36:	e003      	b.n	8003e40 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d002      	beq.n	8003e4e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	687a      	ldr	r2, [r7, #4]
 8003e4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e4e:	bf00      	nop
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	240042f8 	.word	0x240042f8
 8003e60:	24004300 	.word	0x24004300

08003e64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f103 0208 	add.w	r2, r3, #8
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f04f 32ff 	mov.w	r2, #4294967295
 8003e7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f103 0208 	add.w	r2, r3, #8
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f103 0208 	add.w	r2, r3, #8
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b085      	sub	sp, #20
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
 8003ec6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	687a      	ldr	r2, [r7, #4]
 8003eee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	601a      	str	r2, [r3, #0]
}
 8003efa:	bf00      	nop
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f06:	b480      	push	{r7}
 8003f08:	b085      	sub	sp, #20
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f1c:	d103      	bne.n	8003f26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	e00c      	b.n	8003f40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3308      	adds	r3, #8
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	e002      	b.n	8003f34 <vListInsert+0x2e>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d2f6      	bcs.n	8003f2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	685a      	ldr	r2, [r3, #4]
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	683a      	ldr	r2, [r7, #0]
 8003f4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	687a      	ldr	r2, [r7, #4]
 8003f60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	601a      	str	r2, [r3, #0]
}
 8003f6c:	bf00      	nop
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6892      	ldr	r2, [r2, #8]
 8003f8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6852      	ldr	r2, [r2, #4]
 8003f98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d103      	bne.n	8003fac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	1e5a      	subs	r2, r3, #1
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3b04      	subs	r3, #4
 8003fdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003fe4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	3b04      	subs	r3, #4
 8003fea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	f023 0201 	bic.w	r2, r3, #1
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3b04      	subs	r3, #4
 8003ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003ffc:	4a0c      	ldr	r2, [pc, #48]	@ (8004030 <pxPortInitialiseStack+0x64>)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3b14      	subs	r3, #20
 8004006:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	3b04      	subs	r3, #4
 8004012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f06f 0202 	mvn.w	r2, #2
 800401a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	3b20      	subs	r3, #32
 8004020:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004022:	68fb      	ldr	r3, [r7, #12]
}
 8004024:	4618      	mov	r0, r3
 8004026:	3714      	adds	r7, #20
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	08004035 	.word	0x08004035

08004034 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800403a:	2300      	movs	r3, #0
 800403c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800403e:	4b13      	ldr	r3, [pc, #76]	@ (800408c <prvTaskExitError+0x58>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004046:	d00b      	beq.n	8004060 <prvTaskExitError+0x2c>
	__asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	60fb      	str	r3, [r7, #12]
}
 800405a:	bf00      	nop
 800405c:	bf00      	nop
 800405e:	e7fd      	b.n	800405c <prvTaskExitError+0x28>
	__asm volatile
 8004060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	60bb      	str	r3, [r7, #8]
}
 8004072:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004074:	bf00      	nop
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d0fc      	beq.n	8004076 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800407c:	bf00      	nop
 800407e:	bf00      	nop
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	24000010 	.word	0x24000010

08004090 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004090:	4b07      	ldr	r3, [pc, #28]	@ (80040b0 <pxCurrentTCBConst2>)
 8004092:	6819      	ldr	r1, [r3, #0]
 8004094:	6808      	ldr	r0, [r1, #0]
 8004096:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800409a:	f380 8809 	msr	PSP, r0
 800409e:	f3bf 8f6f 	isb	sy
 80040a2:	f04f 0000 	mov.w	r0, #0
 80040a6:	f380 8811 	msr	BASEPRI, r0
 80040aa:	4770      	bx	lr
 80040ac:	f3af 8000 	nop.w

080040b0 <pxCurrentTCBConst2>:
 80040b0:	24004360 	.word	0x24004360
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop

080040b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80040b8:	4808      	ldr	r0, [pc, #32]	@ (80040dc <prvPortStartFirstTask+0x24>)
 80040ba:	6800      	ldr	r0, [r0, #0]
 80040bc:	6800      	ldr	r0, [r0, #0]
 80040be:	f380 8808 	msr	MSP, r0
 80040c2:	f04f 0000 	mov.w	r0, #0
 80040c6:	f380 8814 	msr	CONTROL, r0
 80040ca:	b662      	cpsie	i
 80040cc:	b661      	cpsie	f
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	f3bf 8f6f 	isb	sy
 80040d6:	df00      	svc	0
 80040d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80040da:	bf00      	nop
 80040dc:	e000ed08 	.word	0xe000ed08

080040e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040e6:	4b47      	ldr	r3, [pc, #284]	@ (8004204 <xPortStartScheduler+0x124>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a47      	ldr	r2, [pc, #284]	@ (8004208 <xPortStartScheduler+0x128>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d10b      	bne.n	8004108 <xPortStartScheduler+0x28>
	__asm volatile
 80040f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	60fb      	str	r3, [r7, #12]
}
 8004102:	bf00      	nop
 8004104:	bf00      	nop
 8004106:	e7fd      	b.n	8004104 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004108:	4b3e      	ldr	r3, [pc, #248]	@ (8004204 <xPortStartScheduler+0x124>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a3f      	ldr	r2, [pc, #252]	@ (800420c <xPortStartScheduler+0x12c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d10b      	bne.n	800412a <xPortStartScheduler+0x4a>
	__asm volatile
 8004112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004116:	f383 8811 	msr	BASEPRI, r3
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	f3bf 8f4f 	dsb	sy
 8004122:	613b      	str	r3, [r7, #16]
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop
 8004128:	e7fd      	b.n	8004126 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800412a:	4b39      	ldr	r3, [pc, #228]	@ (8004210 <xPortStartScheduler+0x130>)
 800412c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	22ff      	movs	r2, #255	@ 0xff
 800413a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	b2db      	uxtb	r3, r3
 8004142:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	b2db      	uxtb	r3, r3
 8004148:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800414c:	b2da      	uxtb	r2, r3
 800414e:	4b31      	ldr	r3, [pc, #196]	@ (8004214 <xPortStartScheduler+0x134>)
 8004150:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004152:	4b31      	ldr	r3, [pc, #196]	@ (8004218 <xPortStartScheduler+0x138>)
 8004154:	2207      	movs	r2, #7
 8004156:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004158:	e009      	b.n	800416e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800415a:	4b2f      	ldr	r3, [pc, #188]	@ (8004218 <xPortStartScheduler+0x138>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	3b01      	subs	r3, #1
 8004160:	4a2d      	ldr	r2, [pc, #180]	@ (8004218 <xPortStartScheduler+0x138>)
 8004162:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004164:	78fb      	ldrb	r3, [r7, #3]
 8004166:	b2db      	uxtb	r3, r3
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	b2db      	uxtb	r3, r3
 800416c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004176:	2b80      	cmp	r3, #128	@ 0x80
 8004178:	d0ef      	beq.n	800415a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800417a:	4b27      	ldr	r3, [pc, #156]	@ (8004218 <xPortStartScheduler+0x138>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f1c3 0307 	rsb	r3, r3, #7
 8004182:	2b04      	cmp	r3, #4
 8004184:	d00b      	beq.n	800419e <xPortStartScheduler+0xbe>
	__asm volatile
 8004186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800418a:	f383 8811 	msr	BASEPRI, r3
 800418e:	f3bf 8f6f 	isb	sy
 8004192:	f3bf 8f4f 	dsb	sy
 8004196:	60bb      	str	r3, [r7, #8]
}
 8004198:	bf00      	nop
 800419a:	bf00      	nop
 800419c:	e7fd      	b.n	800419a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800419e:	4b1e      	ldr	r3, [pc, #120]	@ (8004218 <xPortStartScheduler+0x138>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	021b      	lsls	r3, r3, #8
 80041a4:	4a1c      	ldr	r2, [pc, #112]	@ (8004218 <xPortStartScheduler+0x138>)
 80041a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004218 <xPortStartScheduler+0x138>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80041b0:	4a19      	ldr	r2, [pc, #100]	@ (8004218 <xPortStartScheduler+0x138>)
 80041b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041bc:	4b17      	ldr	r3, [pc, #92]	@ (800421c <xPortStartScheduler+0x13c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a16      	ldr	r2, [pc, #88]	@ (800421c <xPortStartScheduler+0x13c>)
 80041c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80041c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80041c8:	4b14      	ldr	r3, [pc, #80]	@ (800421c <xPortStartScheduler+0x13c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a13      	ldr	r2, [pc, #76]	@ (800421c <xPortStartScheduler+0x13c>)
 80041ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80041d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80041d4:	f000 f8da 	bl	800438c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80041d8:	4b11      	ldr	r3, [pc, #68]	@ (8004220 <xPortStartScheduler+0x140>)
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80041de:	f000 f8f9 	bl	80043d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041e2:	4b10      	ldr	r3, [pc, #64]	@ (8004224 <xPortStartScheduler+0x144>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a0f      	ldr	r2, [pc, #60]	@ (8004224 <xPortStartScheduler+0x144>)
 80041e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80041ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80041ee:	f7ff ff63 	bl	80040b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80041f2:	f001 f9ef 	bl	80055d4 <vTaskSwitchContext>
	prvTaskExitError();
 80041f6:	f7ff ff1d 	bl	8004034 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	e000ed00 	.word	0xe000ed00
 8004208:	410fc271 	.word	0x410fc271
 800420c:	410fc270 	.word	0x410fc270
 8004210:	e000e400 	.word	0xe000e400
 8004214:	24004318 	.word	0x24004318
 8004218:	2400431c 	.word	0x2400431c
 800421c:	e000ed20 	.word	0xe000ed20
 8004220:	24000010 	.word	0x24000010
 8004224:	e000ef34 	.word	0xe000ef34

08004228 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
	__asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	607b      	str	r3, [r7, #4]
}
 8004240:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004242:	4b10      	ldr	r3, [pc, #64]	@ (8004284 <vPortEnterCritical+0x5c>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	3301      	adds	r3, #1
 8004248:	4a0e      	ldr	r2, [pc, #56]	@ (8004284 <vPortEnterCritical+0x5c>)
 800424a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800424c:	4b0d      	ldr	r3, [pc, #52]	@ (8004284 <vPortEnterCritical+0x5c>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d110      	bne.n	8004276 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004254:	4b0c      	ldr	r3, [pc, #48]	@ (8004288 <vPortEnterCritical+0x60>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <vPortEnterCritical+0x4e>
	__asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	603b      	str	r3, [r7, #0]
}
 8004270:	bf00      	nop
 8004272:	bf00      	nop
 8004274:	e7fd      	b.n	8004272 <vPortEnterCritical+0x4a>
	}
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	24000010 	.word	0x24000010
 8004288:	e000ed04 	.word	0xe000ed04

0800428c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004292:	4b12      	ldr	r3, [pc, #72]	@ (80042dc <vPortExitCritical+0x50>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10b      	bne.n	80042b2 <vPortExitCritical+0x26>
	__asm volatile
 800429a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429e:	f383 8811 	msr	BASEPRI, r3
 80042a2:	f3bf 8f6f 	isb	sy
 80042a6:	f3bf 8f4f 	dsb	sy
 80042aa:	607b      	str	r3, [r7, #4]
}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	e7fd      	b.n	80042ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80042b2:	4b0a      	ldr	r3, [pc, #40]	@ (80042dc <vPortExitCritical+0x50>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	3b01      	subs	r3, #1
 80042b8:	4a08      	ldr	r2, [pc, #32]	@ (80042dc <vPortExitCritical+0x50>)
 80042ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042bc:	4b07      	ldr	r3, [pc, #28]	@ (80042dc <vPortExitCritical+0x50>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d105      	bne.n	80042d0 <vPortExitCritical+0x44>
 80042c4:	2300      	movs	r3, #0
 80042c6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80042ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	24000010 	.word	0x24000010

080042e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042e0:	f3ef 8009 	mrs	r0, PSP
 80042e4:	f3bf 8f6f 	isb	sy
 80042e8:	4b15      	ldr	r3, [pc, #84]	@ (8004340 <pxCurrentTCBConst>)
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	f01e 0f10 	tst.w	lr, #16
 80042f0:	bf08      	it	eq
 80042f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80042f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fa:	6010      	str	r0, [r2, #0]
 80042fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004300:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004304:	f380 8811 	msr	BASEPRI, r0
 8004308:	f3bf 8f4f 	dsb	sy
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f001 f960 	bl	80055d4 <vTaskSwitchContext>
 8004314:	f04f 0000 	mov.w	r0, #0
 8004318:	f380 8811 	msr	BASEPRI, r0
 800431c:	bc09      	pop	{r0, r3}
 800431e:	6819      	ldr	r1, [r3, #0]
 8004320:	6808      	ldr	r0, [r1, #0]
 8004322:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004326:	f01e 0f10 	tst.w	lr, #16
 800432a:	bf08      	it	eq
 800432c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004330:	f380 8809 	msr	PSP, r0
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	f3af 8000 	nop.w

08004340 <pxCurrentTCBConst>:
 8004340:	24004360 	.word	0x24004360
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004344:	bf00      	nop
 8004346:	bf00      	nop

08004348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
	__asm volatile
 800434e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004352:	f383 8811 	msr	BASEPRI, r3
 8004356:	f3bf 8f6f 	isb	sy
 800435a:	f3bf 8f4f 	dsb	sy
 800435e:	607b      	str	r3, [r7, #4]
}
 8004360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004362:	f001 f87d 	bl	8005460 <xTaskIncrementTick>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d003      	beq.n	8004374 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800436c:	4b06      	ldr	r3, [pc, #24]	@ (8004388 <xPortSysTickHandler+0x40>)
 800436e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	2300      	movs	r3, #0
 8004376:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	f383 8811 	msr	BASEPRI, r3
}
 800437e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	e000ed04 	.word	0xe000ed04

0800438c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800438c:	b480      	push	{r7}
 800438e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004390:	4b0b      	ldr	r3, [pc, #44]	@ (80043c0 <vPortSetupTimerInterrupt+0x34>)
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004396:	4b0b      	ldr	r3, [pc, #44]	@ (80043c4 <vPortSetupTimerInterrupt+0x38>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800439c:	4b0a      	ldr	r3, [pc, #40]	@ (80043c8 <vPortSetupTimerInterrupt+0x3c>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a0a      	ldr	r2, [pc, #40]	@ (80043cc <vPortSetupTimerInterrupt+0x40>)
 80043a2:	fba2 2303 	umull	r2, r3, r2, r3
 80043a6:	099b      	lsrs	r3, r3, #6
 80043a8:	4a09      	ldr	r2, [pc, #36]	@ (80043d0 <vPortSetupTimerInterrupt+0x44>)
 80043aa:	3b01      	subs	r3, #1
 80043ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043ae:	4b04      	ldr	r3, [pc, #16]	@ (80043c0 <vPortSetupTimerInterrupt+0x34>)
 80043b0:	2207      	movs	r2, #7
 80043b2:	601a      	str	r2, [r3, #0]
}
 80043b4:	bf00      	nop
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	e000e010 	.word	0xe000e010
 80043c4:	e000e018 	.word	0xe000e018
 80043c8:	24000000 	.word	0x24000000
 80043cc:	10624dd3 	.word	0x10624dd3
 80043d0:	e000e014 	.word	0xe000e014

080043d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80043d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80043e4 <vPortEnableVFP+0x10>
 80043d8:	6801      	ldr	r1, [r0, #0]
 80043da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80043de:	6001      	str	r1, [r0, #0]
 80043e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80043e2:	bf00      	nop
 80043e4:	e000ed88 	.word	0xe000ed88

080043e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80043ee:	f3ef 8305 	mrs	r3, IPSR
 80043f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2b0f      	cmp	r3, #15
 80043f8:	d915      	bls.n	8004426 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80043fa:	4a18      	ldr	r2, [pc, #96]	@ (800445c <vPortValidateInterruptPriority+0x74>)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	4413      	add	r3, r2
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004404:	4b16      	ldr	r3, [pc, #88]	@ (8004460 <vPortValidateInterruptPriority+0x78>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	7afa      	ldrb	r2, [r7, #11]
 800440a:	429a      	cmp	r2, r3
 800440c:	d20b      	bcs.n	8004426 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800440e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	607b      	str	r3, [r7, #4]
}
 8004420:	bf00      	nop
 8004422:	bf00      	nop
 8004424:	e7fd      	b.n	8004422 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004426:	4b0f      	ldr	r3, [pc, #60]	@ (8004464 <vPortValidateInterruptPriority+0x7c>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800442e:	4b0e      	ldr	r3, [pc, #56]	@ (8004468 <vPortValidateInterruptPriority+0x80>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	429a      	cmp	r2, r3
 8004434:	d90b      	bls.n	800444e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	603b      	str	r3, [r7, #0]
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	e7fd      	b.n	800444a <vPortValidateInterruptPriority+0x62>
	}
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	e000e3f0 	.word	0xe000e3f0
 8004460:	24004318 	.word	0x24004318
 8004464:	e000ed0c 	.word	0xe000ed0c
 8004468:	2400431c 	.word	0x2400431c

0800446c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10b      	bne.n	8004498 <xQueueGenericReset+0x2c>
	__asm volatile
 8004480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004484:	f383 8811 	msr	BASEPRI, r3
 8004488:	f3bf 8f6f 	isb	sy
 800448c:	f3bf 8f4f 	dsb	sy
 8004490:	60bb      	str	r3, [r7, #8]
}
 8004492:	bf00      	nop
 8004494:	bf00      	nop
 8004496:	e7fd      	b.n	8004494 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004498:	f7ff fec6 	bl	8004228 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a4:	68f9      	ldr	r1, [r7, #12]
 80044a6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80044a8:	fb01 f303 	mul.w	r3, r1, r3
 80044ac:	441a      	add	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2200      	movs	r2, #0
 80044b6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c8:	3b01      	subs	r3, #1
 80044ca:	68f9      	ldr	r1, [r7, #12]
 80044cc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80044ce:	fb01 f303 	mul.w	r3, r1, r3
 80044d2:	441a      	add	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	22ff      	movs	r2, #255	@ 0xff
 80044dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	22ff      	movs	r2, #255	@ 0xff
 80044e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d114      	bne.n	8004518 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d01a      	beq.n	800452c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	3310      	adds	r3, #16
 80044fa:	4618      	mov	r0, r3
 80044fc:	f001 f91a 	bl	8005734 <xTaskRemoveFromEventList>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d012      	beq.n	800452c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004506:	4b0d      	ldr	r3, [pc, #52]	@ (800453c <xQueueGenericReset+0xd0>)
 8004508:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800450c:	601a      	str	r2, [r3, #0]
 800450e:	f3bf 8f4f 	dsb	sy
 8004512:	f3bf 8f6f 	isb	sy
 8004516:	e009      	b.n	800452c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	3310      	adds	r3, #16
 800451c:	4618      	mov	r0, r3
 800451e:	f7ff fca1 	bl	8003e64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	3324      	adds	r3, #36	@ 0x24
 8004526:	4618      	mov	r0, r3
 8004528:	f7ff fc9c 	bl	8003e64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800452c:	f7ff feae 	bl	800428c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004530:	2301      	movs	r3, #1
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	e000ed04 	.word	0xe000ed04

08004540 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004540:	b580      	push	{r7, lr}
 8004542:	b08e      	sub	sp, #56	@ 0x38
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10b      	bne.n	800456c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004566:	bf00      	nop
 8004568:	bf00      	nop
 800456a:	e7fd      	b.n	8004568 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10b      	bne.n	800458a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004576:	f383 8811 	msr	BASEPRI, r3
 800457a:	f3bf 8f6f 	isb	sy
 800457e:	f3bf 8f4f 	dsb	sy
 8004582:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop
 8004588:	e7fd      	b.n	8004586 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d002      	beq.n	8004596 <xQueueGenericCreateStatic+0x56>
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <xQueueGenericCreateStatic+0x5a>
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <xQueueGenericCreateStatic+0x5c>
 800459a:	2300      	movs	r3, #0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10b      	bne.n	80045b8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	623b      	str	r3, [r7, #32]
}
 80045b2:	bf00      	nop
 80045b4:	bf00      	nop
 80045b6:	e7fd      	b.n	80045b4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d102      	bne.n	80045c4 <xQueueGenericCreateStatic+0x84>
 80045be:	68bb      	ldr	r3, [r7, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <xQueueGenericCreateStatic+0x88>
 80045c4:	2301      	movs	r3, #1
 80045c6:	e000      	b.n	80045ca <xQueueGenericCreateStatic+0x8a>
 80045c8:	2300      	movs	r3, #0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10b      	bne.n	80045e6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80045ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	61fb      	str	r3, [r7, #28]
}
 80045e0:	bf00      	nop
 80045e2:	bf00      	nop
 80045e4:	e7fd      	b.n	80045e2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80045e6:	2350      	movs	r3, #80	@ 0x50
 80045e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	2b50      	cmp	r3, #80	@ 0x50
 80045ee:	d00b      	beq.n	8004608 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	61bb      	str	r3, [r7, #24]
}
 8004602:	bf00      	nop
 8004604:	bf00      	nop
 8004606:	e7fd      	b.n	8004604 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004608:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800460e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00d      	beq.n	8004630 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800461c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	4613      	mov	r3, r2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f000 f805 	bl	800463a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004630:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004632:	4618      	mov	r0, r3
 8004634:	3730      	adds	r7, #48	@ 0x30
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b084      	sub	sp, #16
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	607a      	str	r2, [r7, #4]
 8004646:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d103      	bne.n	8004656 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	e002      	b.n	800465c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	68ba      	ldr	r2, [r7, #8]
 8004666:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004668:	2101      	movs	r1, #1
 800466a:	69b8      	ldr	r0, [r7, #24]
 800466c:	f7ff fefe 	bl	800446c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	78fa      	ldrb	r2, [r7, #3]
 8004674:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004678:	bf00      	nop
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	bd80      	pop	{r7, pc}

08004680 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08e      	sub	sp, #56	@ 0x38
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800468e:	2300      	movs	r3, #0
 8004690:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10b      	bne.n	80046b4 <xQueueGenericSend+0x34>
	__asm volatile
 800469c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a0:	f383 8811 	msr	BASEPRI, r3
 80046a4:	f3bf 8f6f 	isb	sy
 80046a8:	f3bf 8f4f 	dsb	sy
 80046ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80046ae:	bf00      	nop
 80046b0:	bf00      	nop
 80046b2:	e7fd      	b.n	80046b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d103      	bne.n	80046c2 <xQueueGenericSend+0x42>
 80046ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <xQueueGenericSend+0x46>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <xQueueGenericSend+0x48>
 80046c6:	2300      	movs	r3, #0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10b      	bne.n	80046e4 <xQueueGenericSend+0x64>
	__asm volatile
 80046cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d0:	f383 8811 	msr	BASEPRI, r3
 80046d4:	f3bf 8f6f 	isb	sy
 80046d8:	f3bf 8f4f 	dsb	sy
 80046dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80046de:	bf00      	nop
 80046e0:	bf00      	nop
 80046e2:	e7fd      	b.n	80046e0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d103      	bne.n	80046f2 <xQueueGenericSend+0x72>
 80046ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d101      	bne.n	80046f6 <xQueueGenericSend+0x76>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <xQueueGenericSend+0x78>
 80046f6:	2300      	movs	r3, #0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10b      	bne.n	8004714 <xQueueGenericSend+0x94>
	__asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	623b      	str	r3, [r7, #32]
}
 800470e:	bf00      	nop
 8004710:	bf00      	nop
 8004712:	e7fd      	b.n	8004710 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004714:	f001 f9ce 	bl	8005ab4 <xTaskGetSchedulerState>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d102      	bne.n	8004724 <xQueueGenericSend+0xa4>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d101      	bne.n	8004728 <xQueueGenericSend+0xa8>
 8004724:	2301      	movs	r3, #1
 8004726:	e000      	b.n	800472a <xQueueGenericSend+0xaa>
 8004728:	2300      	movs	r3, #0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10b      	bne.n	8004746 <xQueueGenericSend+0xc6>
	__asm volatile
 800472e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004732:	f383 8811 	msr	BASEPRI, r3
 8004736:	f3bf 8f6f 	isb	sy
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	61fb      	str	r3, [r7, #28]
}
 8004740:	bf00      	nop
 8004742:	bf00      	nop
 8004744:	e7fd      	b.n	8004742 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004746:	f7ff fd6f 	bl	8004228 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800474a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800474e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004752:	429a      	cmp	r2, r3
 8004754:	d302      	bcc.n	800475c <xQueueGenericSend+0xdc>
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d129      	bne.n	80047b0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004762:	f000 fa0f 	bl	8004b84 <prvCopyDataToQueue>
 8004766:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	2b00      	cmp	r3, #0
 800476e:	d010      	beq.n	8004792 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004770:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004772:	3324      	adds	r3, #36	@ 0x24
 8004774:	4618      	mov	r0, r3
 8004776:	f000 ffdd 	bl	8005734 <xTaskRemoveFromEventList>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	d013      	beq.n	80047a8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004780:	4b3f      	ldr	r3, [pc, #252]	@ (8004880 <xQueueGenericSend+0x200>)
 8004782:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	f3bf 8f4f 	dsb	sy
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	e00a      	b.n	80047a8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004794:	2b00      	cmp	r3, #0
 8004796:	d007      	beq.n	80047a8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004798:	4b39      	ldr	r3, [pc, #228]	@ (8004880 <xQueueGenericSend+0x200>)
 800479a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80047a8:	f7ff fd70 	bl	800428c <vPortExitCritical>
				return pdPASS;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e063      	b.n	8004878 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d103      	bne.n	80047be <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047b6:	f7ff fd69 	bl	800428c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80047ba:	2300      	movs	r3, #0
 80047bc:	e05c      	b.n	8004878 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d106      	bne.n	80047d2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047c4:	f107 0314 	add.w	r3, r7, #20
 80047c8:	4618      	mov	r0, r3
 80047ca:	f001 f817 	bl	80057fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047ce:	2301      	movs	r3, #1
 80047d0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047d2:	f7ff fd5b 	bl	800428c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047d6:	f000 fd87 	bl	80052e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047da:	f7ff fd25 	bl	8004228 <vPortEnterCritical>
 80047de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80047e4:	b25b      	sxtb	r3, r3
 80047e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ea:	d103      	bne.n	80047f4 <xQueueGenericSend+0x174>
 80047ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80047fa:	b25b      	sxtb	r3, r3
 80047fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004800:	d103      	bne.n	800480a <xQueueGenericSend+0x18a>
 8004802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004804:	2200      	movs	r2, #0
 8004806:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800480a:	f7ff fd3f 	bl	800428c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800480e:	1d3a      	adds	r2, r7, #4
 8004810:	f107 0314 	add.w	r3, r7, #20
 8004814:	4611      	mov	r1, r2
 8004816:	4618      	mov	r0, r3
 8004818:	f001 f806 	bl	8005828 <xTaskCheckForTimeOut>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d124      	bne.n	800486c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004822:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004824:	f000 faa6 	bl	8004d74 <prvIsQueueFull>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d018      	beq.n	8004860 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800482e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004830:	3310      	adds	r3, #16
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	4611      	mov	r1, r2
 8004836:	4618      	mov	r0, r3
 8004838:	f000 ff2a 	bl	8005690 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800483c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800483e:	f000 fa31 	bl	8004ca4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004842:	f000 fd5f 	bl	8005304 <xTaskResumeAll>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	f47f af7c 	bne.w	8004746 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800484e:	4b0c      	ldr	r3, [pc, #48]	@ (8004880 <xQueueGenericSend+0x200>)
 8004850:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004854:	601a      	str	r2, [r3, #0]
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	e772      	b.n	8004746 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004860:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004862:	f000 fa1f 	bl	8004ca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004866:	f000 fd4d 	bl	8005304 <xTaskResumeAll>
 800486a:	e76c      	b.n	8004746 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800486c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800486e:	f000 fa19 	bl	8004ca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004872:	f000 fd47 	bl	8005304 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004876:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004878:	4618      	mov	r0, r3
 800487a:	3738      	adds	r7, #56	@ 0x38
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}
 8004880:	e000ed04 	.word	0xe000ed04

08004884 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b090      	sub	sp, #64	@ 0x40
 8004888:	af00      	add	r7, sp, #0
 800488a:	60f8      	str	r0, [r7, #12]
 800488c:	60b9      	str	r1, [r7, #8]
 800488e:	607a      	str	r2, [r7, #4]
 8004890:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004898:	2b00      	cmp	r3, #0
 800489a:	d10b      	bne.n	80048b4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800489c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a0:	f383 8811 	msr	BASEPRI, r3
 80048a4:	f3bf 8f6f 	isb	sy
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80048ae:	bf00      	nop
 80048b0:	bf00      	nop
 80048b2:	e7fd      	b.n	80048b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d103      	bne.n	80048c2 <xQueueGenericSendFromISR+0x3e>
 80048ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <xQueueGenericSendFromISR+0x42>
 80048c2:	2301      	movs	r3, #1
 80048c4:	e000      	b.n	80048c8 <xQueueGenericSendFromISR+0x44>
 80048c6:	2300      	movs	r3, #0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10b      	bne.n	80048e4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80048cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d0:	f383 8811 	msr	BASEPRI, r3
 80048d4:	f3bf 8f6f 	isb	sy
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80048de:	bf00      	nop
 80048e0:	bf00      	nop
 80048e2:	e7fd      	b.n	80048e0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d103      	bne.n	80048f2 <xQueueGenericSendFromISR+0x6e>
 80048ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <xQueueGenericSendFromISR+0x72>
 80048f2:	2301      	movs	r3, #1
 80048f4:	e000      	b.n	80048f8 <xQueueGenericSendFromISR+0x74>
 80048f6:	2300      	movs	r3, #0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d10b      	bne.n	8004914 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80048fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004900:	f383 8811 	msr	BASEPRI, r3
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	f3bf 8f4f 	dsb	sy
 800490c:	623b      	str	r3, [r7, #32]
}
 800490e:	bf00      	nop
 8004910:	bf00      	nop
 8004912:	e7fd      	b.n	8004910 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004914:	f7ff fd68 	bl	80043e8 <vPortValidateInterruptPriority>
	__asm volatile
 8004918:	f3ef 8211 	mrs	r2, BASEPRI
 800491c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004920:	f383 8811 	msr	BASEPRI, r3
 8004924:	f3bf 8f6f 	isb	sy
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	61fa      	str	r2, [r7, #28]
 800492e:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004930:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004932:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004936:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800493c:	429a      	cmp	r2, r3
 800493e:	d302      	bcc.n	8004946 <xQueueGenericSendFromISR+0xc2>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b02      	cmp	r3, #2
 8004944:	d12f      	bne.n	80049a6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004948:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800494c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004952:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004954:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	68b9      	ldr	r1, [r7, #8]
 800495a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800495c:	f000 f912 	bl	8004b84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004960:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004968:	d112      	bne.n	8004990 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800496a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800496c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496e:	2b00      	cmp	r3, #0
 8004970:	d016      	beq.n	80049a0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004974:	3324      	adds	r3, #36	@ 0x24
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fedc 	bl	8005734 <xTaskRemoveFromEventList>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00e      	beq.n	80049a0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00b      	beq.n	80049a0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	e007      	b.n	80049a0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004990:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004994:	3301      	adds	r3, #1
 8004996:	b2db      	uxtb	r3, r3
 8004998:	b25a      	sxtb	r2, r3
 800499a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80049a0:	2301      	movs	r3, #1
 80049a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80049a4:	e001      	b.n	80049aa <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80049a6:	2300      	movs	r3, #0
 80049a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ac:	617b      	str	r3, [r7, #20]
	__asm volatile
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f383 8811 	msr	BASEPRI, r3
}
 80049b4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80049b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3740      	adds	r7, #64	@ 0x40
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b08c      	sub	sp, #48	@ 0x30
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80049cc:	2300      	movs	r3, #0
 80049ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80049d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d10b      	bne.n	80049f2 <xQueueReceive+0x32>
	__asm volatile
 80049da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049de:	f383 8811 	msr	BASEPRI, r3
 80049e2:	f3bf 8f6f 	isb	sy
 80049e6:	f3bf 8f4f 	dsb	sy
 80049ea:	623b      	str	r3, [r7, #32]
}
 80049ec:	bf00      	nop
 80049ee:	bf00      	nop
 80049f0:	e7fd      	b.n	80049ee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d103      	bne.n	8004a00 <xQueueReceive+0x40>
 80049f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <xQueueReceive+0x44>
 8004a00:	2301      	movs	r3, #1
 8004a02:	e000      	b.n	8004a06 <xQueueReceive+0x46>
 8004a04:	2300      	movs	r3, #0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10b      	bne.n	8004a22 <xQueueReceive+0x62>
	__asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	61fb      	str	r3, [r7, #28]
}
 8004a1c:	bf00      	nop
 8004a1e:	bf00      	nop
 8004a20:	e7fd      	b.n	8004a1e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004a22:	f001 f847 	bl	8005ab4 <xTaskGetSchedulerState>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d102      	bne.n	8004a32 <xQueueReceive+0x72>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <xQueueReceive+0x76>
 8004a32:	2301      	movs	r3, #1
 8004a34:	e000      	b.n	8004a38 <xQueueReceive+0x78>
 8004a36:	2300      	movs	r3, #0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d10b      	bne.n	8004a54 <xQueueReceive+0x94>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	61bb      	str	r3, [r7, #24]
}
 8004a4e:	bf00      	nop
 8004a50:	bf00      	nop
 8004a52:	e7fd      	b.n	8004a50 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004a54:	f7ff fbe8 	bl	8004228 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d01f      	beq.n	8004aa4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004a64:	68b9      	ldr	r1, [r7, #8]
 8004a66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a68:	f000 f8f6 	bl	8004c58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6e:	1e5a      	subs	r2, r3, #1
 8004a70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a72:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00f      	beq.n	8004a9c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7e:	3310      	adds	r3, #16
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fe57 	bl	8005734 <xTaskRemoveFromEventList>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004a8c:	4b3c      	ldr	r3, [pc, #240]	@ (8004b80 <xQueueReceive+0x1c0>)
 8004a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004a9c:	f7ff fbf6 	bl	800428c <vPortExitCritical>
				return pdPASS;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e069      	b.n	8004b78 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d103      	bne.n	8004ab2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004aaa:	f7ff fbef 	bl	800428c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	e062      	b.n	8004b78 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d106      	bne.n	8004ac6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ab8:	f107 0310 	add.w	r3, r7, #16
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fe9d 	bl	80057fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ac6:	f7ff fbe1 	bl	800428c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004aca:	f000 fc0d 	bl	80052e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ace:	f7ff fbab 	bl	8004228 <vPortEnterCritical>
 8004ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ad8:	b25b      	sxtb	r3, r3
 8004ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ade:	d103      	bne.n	8004ae8 <xQueueReceive+0x128>
 8004ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004aee:	b25b      	sxtb	r3, r3
 8004af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af4:	d103      	bne.n	8004afe <xQueueReceive+0x13e>
 8004af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004afe:	f7ff fbc5 	bl	800428c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b02:	1d3a      	adds	r2, r7, #4
 8004b04:	f107 0310 	add.w	r3, r7, #16
 8004b08:	4611      	mov	r1, r2
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f000 fe8c 	bl	8005828 <xTaskCheckForTimeOut>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d123      	bne.n	8004b5e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b18:	f000 f916 	bl	8004d48 <prvIsQueueEmpty>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d017      	beq.n	8004b52 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b24:	3324      	adds	r3, #36	@ 0x24
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	4611      	mov	r1, r2
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f000 fdb0 	bl	8005690 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004b30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b32:	f000 f8b7 	bl	8004ca4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004b36:	f000 fbe5 	bl	8005304 <xTaskResumeAll>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d189      	bne.n	8004a54 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004b40:	4b0f      	ldr	r3, [pc, #60]	@ (8004b80 <xQueueReceive+0x1c0>)
 8004b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	f3bf 8f4f 	dsb	sy
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	e780      	b.n	8004a54 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004b52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b54:	f000 f8a6 	bl	8004ca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004b58:	f000 fbd4 	bl	8005304 <xTaskResumeAll>
 8004b5c:	e77a      	b.n	8004a54 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004b5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b60:	f000 f8a0 	bl	8004ca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004b64:	f000 fbce 	bl	8005304 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004b68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b6a:	f000 f8ed 	bl	8004d48 <prvIsQueueEmpty>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f43f af6f 	beq.w	8004a54 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004b76:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3730      	adds	r7, #48	@ 0x30
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	e000ed04 	.word	0xe000ed04

08004b84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b90:	2300      	movs	r3, #0
 8004b92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10d      	bne.n	8004bbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d14d      	bne.n	8004c46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f000 ff9e 	bl	8005af0 <xTaskPriorityDisinherit>
 8004bb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	609a      	str	r2, [r3, #8]
 8004bbc:	e043      	b.n	8004c46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d119      	bne.n	8004bf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	6858      	ldr	r0, [r3, #4]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bcc:	461a      	mov	r2, r3
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	f001 fbd8 	bl	8006384 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bdc:	441a      	add	r2, r3
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	685a      	ldr	r2, [r3, #4]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d32b      	bcc.n	8004c46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	605a      	str	r2, [r3, #4]
 8004bf6:	e026      	b.n	8004c46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	68d8      	ldr	r0, [r3, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c00:	461a      	mov	r2, r3
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	f001 fbbe 	bl	8006384 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	68da      	ldr	r2, [r3, #12]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c10:	425b      	negs	r3, r3
 8004c12:	441a      	add	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d207      	bcs.n	8004c34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	689a      	ldr	r2, [r3, #8]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2c:	425b      	negs	r3, r3
 8004c2e:	441a      	add	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d105      	bne.n	8004c46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d002      	beq.n	8004c46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004c4e:	697b      	ldr	r3, [r7, #20]
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b082      	sub	sp, #8
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d018      	beq.n	8004c9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c72:	441a      	add	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d303      	bcc.n	8004c8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681a      	ldr	r2, [r3, #0]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68d9      	ldr	r1, [r3, #12]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c94:	461a      	mov	r2, r3
 8004c96:	6838      	ldr	r0, [r7, #0]
 8004c98:	f001 fb74 	bl	8006384 <memcpy>
	}
}
 8004c9c:	bf00      	nop
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004cac:	f7ff fabc 	bl	8004228 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cb8:	e011      	b.n	8004cde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d012      	beq.n	8004ce8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3324      	adds	r3, #36	@ 0x24
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 fd34 	bl	8005734 <xTaskRemoveFromEventList>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d001      	beq.n	8004cd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004cd2:	f000 fe0d 	bl	80058f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004cd6:	7bfb      	ldrb	r3, [r7, #15]
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	dce9      	bgt.n	8004cba <prvUnlockQueue+0x16>
 8004ce6:	e000      	b.n	8004cea <prvUnlockQueue+0x46>
					break;
 8004ce8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	22ff      	movs	r2, #255	@ 0xff
 8004cee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004cf2:	f7ff facb 	bl	800428c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004cf6:	f7ff fa97 	bl	8004228 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d02:	e011      	b.n	8004d28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d012      	beq.n	8004d32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	3310      	adds	r3, #16
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fd0f 	bl	8005734 <xTaskRemoveFromEventList>
 8004d16:	4603      	mov	r3, r0
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d1c:	f000 fde8 	bl	80058f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d20:	7bbb      	ldrb	r3, [r7, #14]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	dce9      	bgt.n	8004d04 <prvUnlockQueue+0x60>
 8004d30:	e000      	b.n	8004d34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	22ff      	movs	r2, #255	@ 0xff
 8004d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004d3c:	f7ff faa6 	bl	800428c <vPortExitCritical>
}
 8004d40:	bf00      	nop
 8004d42:	3710      	adds	r7, #16
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d50:	f7ff fa6a 	bl	8004228 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d102      	bne.n	8004d62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	60fb      	str	r3, [r7, #12]
 8004d60:	e001      	b.n	8004d66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d62:	2300      	movs	r3, #0
 8004d64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d66:	f7ff fa91 	bl	800428c <vPortExitCritical>

	return xReturn;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d7c:	f7ff fa54 	bl	8004228 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d102      	bne.n	8004d92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	60fb      	str	r3, [r7, #12]
 8004d90:	e001      	b.n	8004d96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d96:	f7ff fa79 	bl	800428c <vPortExitCritical>

	return xReturn;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	e014      	b.n	8004dde <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004db4:	4a0f      	ldr	r2, [pc, #60]	@ (8004df4 <vQueueAddToRegistry+0x50>)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10b      	bne.n	8004dd8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004dc0:	490c      	ldr	r1, [pc, #48]	@ (8004df4 <vQueueAddToRegistry+0x50>)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004dca:	4a0a      	ldr	r2, [pc, #40]	@ (8004df4 <vQueueAddToRegistry+0x50>)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004dd6:	e006      	b.n	8004de6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	60fb      	str	r3, [r7, #12]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b07      	cmp	r3, #7
 8004de2:	d9e7      	bls.n	8004db4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	24004320 	.word	0x24004320

08004df8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004e08:	f7ff fa0e 	bl	8004228 <vPortEnterCritical>
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e12:	b25b      	sxtb	r3, r3
 8004e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e18:	d103      	bne.n	8004e22 <vQueueWaitForMessageRestricted+0x2a>
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e28:	b25b      	sxtb	r3, r3
 8004e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2e:	d103      	bne.n	8004e38 <vQueueWaitForMessageRestricted+0x40>
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e38:	f7ff fa28 	bl	800428c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d106      	bne.n	8004e52 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	3324      	adds	r3, #36	@ 0x24
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	68b9      	ldr	r1, [r7, #8]
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f000 fc45 	bl	80056dc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004e52:	6978      	ldr	r0, [r7, #20]
 8004e54:	f7ff ff26 	bl	8004ca4 <prvUnlockQueue>
	}
 8004e58:	bf00      	nop
 8004e5a:	3718      	adds	r7, #24
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08e      	sub	sp, #56	@ 0x38
 8004e64:	af04      	add	r7, sp, #16
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10b      	bne.n	8004e8c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e78:	f383 8811 	msr	BASEPRI, r3
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f3bf 8f4f 	dsb	sy
 8004e84:	623b      	str	r3, [r7, #32]
}
 8004e86:	bf00      	nop
 8004e88:	bf00      	nop
 8004e8a:	e7fd      	b.n	8004e88 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10b      	bne.n	8004eaa <xTaskCreateStatic+0x4a>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	61fb      	str	r3, [r7, #28]
}
 8004ea4:	bf00      	nop
 8004ea6:	bf00      	nop
 8004ea8:	e7fd      	b.n	8004ea6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004eaa:	235c      	movs	r3, #92	@ 0x5c
 8004eac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	2b5c      	cmp	r3, #92	@ 0x5c
 8004eb2:	d00b      	beq.n	8004ecc <xTaskCreateStatic+0x6c>
	__asm volatile
 8004eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	61bb      	str	r3, [r7, #24]
}
 8004ec6:	bf00      	nop
 8004ec8:	bf00      	nop
 8004eca:	e7fd      	b.n	8004ec8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ecc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01e      	beq.n	8004f12 <xTaskCreateStatic+0xb2>
 8004ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d01b      	beq.n	8004f12 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004edc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ee2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004eec:	2300      	movs	r3, #0
 8004eee:	9303      	str	r3, [sp, #12]
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef2:	9302      	str	r3, [sp, #8]
 8004ef4:	f107 0314 	add.w	r3, r7, #20
 8004ef8:	9301      	str	r3, [sp, #4]
 8004efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	68b9      	ldr	r1, [r7, #8]
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f000 f850 	bl	8004faa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f0c:	f000 f8de 	bl	80050cc <prvAddNewTaskToReadyList>
 8004f10:	e001      	b.n	8004f16 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004f12:	2300      	movs	r3, #0
 8004f14:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f16:	697b      	ldr	r3, [r7, #20]
	}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3728      	adds	r7, #40	@ 0x28
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08c      	sub	sp, #48	@ 0x30
 8004f24:	af04      	add	r7, sp, #16
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	603b      	str	r3, [r7, #0]
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f30:	88fb      	ldrh	r3, [r7, #6]
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fe fda7 	bl	8003a88 <pvPortMalloc>
 8004f3a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00e      	beq.n	8004f60 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f42:	205c      	movs	r0, #92	@ 0x5c
 8004f44:	f7fe fda0 	bl	8003a88 <pvPortMalloc>
 8004f48:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	631a      	str	r2, [r3, #48]	@ 0x30
 8004f56:	e005      	b.n	8004f64 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f58:	6978      	ldr	r0, [r7, #20]
 8004f5a:	f7fe fe63 	bl	8003c24 <vPortFree>
 8004f5e:	e001      	b.n	8004f64 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f60:	2300      	movs	r3, #0
 8004f62:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d017      	beq.n	8004f9a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f72:	88fa      	ldrh	r2, [r7, #6]
 8004f74:	2300      	movs	r3, #0
 8004f76:	9303      	str	r3, [sp, #12]
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	9302      	str	r3, [sp, #8]
 8004f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f7e:	9301      	str	r3, [sp, #4]
 8004f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f82:	9300      	str	r3, [sp, #0]
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	68f8      	ldr	r0, [r7, #12]
 8004f8a:	f000 f80e 	bl	8004faa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f8e:	69f8      	ldr	r0, [r7, #28]
 8004f90:	f000 f89c 	bl	80050cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f94:	2301      	movs	r3, #1
 8004f96:	61bb      	str	r3, [r7, #24]
 8004f98:	e002      	b.n	8004fa0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f9e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fa0:	69bb      	ldr	r3, [r7, #24]
	}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3720      	adds	r7, #32
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b088      	sub	sp, #32
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	60f8      	str	r0, [r7, #12]
 8004fb2:	60b9      	str	r1, [r7, #8]
 8004fb4:	607a      	str	r2, [r7, #4]
 8004fb6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fba:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	21a5      	movs	r1, #165	@ 0xa5
 8004fc4:	f001 f9b2 	bl	800632c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8004fd2:	440b      	add	r3, r1
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	f023 0307 	bic.w	r3, r3, #7
 8004fe0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	f003 0307 	and.w	r3, r3, #7
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00b      	beq.n	8005004 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004fec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ff0:	f383 8811 	msr	BASEPRI, r3
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	617b      	str	r3, [r7, #20]
}
 8004ffe:	bf00      	nop
 8005000:	bf00      	nop
 8005002:	e7fd      	b.n	8005000 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d01f      	beq.n	800504a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800500a:	2300      	movs	r3, #0
 800500c:	61fb      	str	r3, [r7, #28]
 800500e:	e012      	b.n	8005036 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	4413      	add	r3, r2
 8005016:	7819      	ldrb	r1, [r3, #0]
 8005018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	4413      	add	r3, r2
 800501e:	3334      	adds	r3, #52	@ 0x34
 8005020:	460a      	mov	r2, r1
 8005022:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005024:	68ba      	ldr	r2, [r7, #8]
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	4413      	add	r3, r2
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d006      	beq.n	800503e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	3301      	adds	r3, #1
 8005034:	61fb      	str	r3, [r7, #28]
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	2b0f      	cmp	r3, #15
 800503a:	d9e9      	bls.n	8005010 <prvInitialiseNewTask+0x66>
 800503c:	e000      	b.n	8005040 <prvInitialiseNewTask+0x96>
			{
				break;
 800503e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005042:	2200      	movs	r2, #0
 8005044:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005048:	e003      	b.n	8005052 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800504a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005054:	2b37      	cmp	r3, #55	@ 0x37
 8005056:	d901      	bls.n	800505c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005058:	2337      	movs	r3, #55	@ 0x37
 800505a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800505c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800505e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005060:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005064:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005066:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005068:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506a:	2200      	movs	r2, #0
 800506c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800506e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005070:	3304      	adds	r3, #4
 8005072:	4618      	mov	r0, r3
 8005074:	f7fe ff16 	bl	8003ea4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507a:	3318      	adds	r3, #24
 800507c:	4618      	mov	r0, r3
 800507e:	f7fe ff11 	bl	8003ea4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005086:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800508a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800508e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005090:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005094:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005096:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509a:	2200      	movs	r2, #0
 800509c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800509e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	68f9      	ldr	r1, [r7, #12]
 80050aa:	69b8      	ldr	r0, [r7, #24]
 80050ac:	f7fe ff8e 	bl	8003fcc <pxPortInitialiseStack>
 80050b0:	4602      	mov	r2, r0
 80050b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80050b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d002      	beq.n	80050c2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050c2:	bf00      	nop
 80050c4:	3720      	adds	r7, #32
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050d4:	f7ff f8a8 	bl	8004228 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050d8:	4b2d      	ldr	r3, [pc, #180]	@ (8005190 <prvAddNewTaskToReadyList+0xc4>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	3301      	adds	r3, #1
 80050de:	4a2c      	ldr	r2, [pc, #176]	@ (8005190 <prvAddNewTaskToReadyList+0xc4>)
 80050e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050e2:	4b2c      	ldr	r3, [pc, #176]	@ (8005194 <prvAddNewTaskToReadyList+0xc8>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d109      	bne.n	80050fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050ea:	4a2a      	ldr	r2, [pc, #168]	@ (8005194 <prvAddNewTaskToReadyList+0xc8>)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050f0:	4b27      	ldr	r3, [pc, #156]	@ (8005190 <prvAddNewTaskToReadyList+0xc4>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d110      	bne.n	800511a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050f8:	f000 fc1e 	bl	8005938 <prvInitialiseTaskLists>
 80050fc:	e00d      	b.n	800511a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050fe:	4b26      	ldr	r3, [pc, #152]	@ (8005198 <prvAddNewTaskToReadyList+0xcc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d109      	bne.n	800511a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005106:	4b23      	ldr	r3, [pc, #140]	@ (8005194 <prvAddNewTaskToReadyList+0xc8>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005110:	429a      	cmp	r2, r3
 8005112:	d802      	bhi.n	800511a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005114:	4a1f      	ldr	r2, [pc, #124]	@ (8005194 <prvAddNewTaskToReadyList+0xc8>)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800511a:	4b20      	ldr	r3, [pc, #128]	@ (800519c <prvAddNewTaskToReadyList+0xd0>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	3301      	adds	r3, #1
 8005120:	4a1e      	ldr	r2, [pc, #120]	@ (800519c <prvAddNewTaskToReadyList+0xd0>)
 8005122:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005124:	4b1d      	ldr	r3, [pc, #116]	@ (800519c <prvAddNewTaskToReadyList+0xd0>)
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005130:	4b1b      	ldr	r3, [pc, #108]	@ (80051a0 <prvAddNewTaskToReadyList+0xd4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	d903      	bls.n	8005140 <prvAddNewTaskToReadyList+0x74>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513c:	4a18      	ldr	r2, [pc, #96]	@ (80051a0 <prvAddNewTaskToReadyList+0xd4>)
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005144:	4613      	mov	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4413      	add	r3, r2
 800514a:	009b      	lsls	r3, r3, #2
 800514c:	4a15      	ldr	r2, [pc, #84]	@ (80051a4 <prvAddNewTaskToReadyList+0xd8>)
 800514e:	441a      	add	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3304      	adds	r3, #4
 8005154:	4619      	mov	r1, r3
 8005156:	4610      	mov	r0, r2
 8005158:	f7fe feb1 	bl	8003ebe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800515c:	f7ff f896 	bl	800428c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005160:	4b0d      	ldr	r3, [pc, #52]	@ (8005198 <prvAddNewTaskToReadyList+0xcc>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d00e      	beq.n	8005186 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005168:	4b0a      	ldr	r3, [pc, #40]	@ (8005194 <prvAddNewTaskToReadyList+0xc8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005172:	429a      	cmp	r2, r3
 8005174:	d207      	bcs.n	8005186 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005176:	4b0c      	ldr	r3, [pc, #48]	@ (80051a8 <prvAddNewTaskToReadyList+0xdc>)
 8005178:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	24004834 	.word	0x24004834
 8005194:	24004360 	.word	0x24004360
 8005198:	24004840 	.word	0x24004840
 800519c:	24004850 	.word	0x24004850
 80051a0:	2400483c 	.word	0x2400483c
 80051a4:	24004364 	.word	0x24004364
 80051a8:	e000ed04 	.word	0xe000ed04

080051ac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051b4:	2300      	movs	r3, #0
 80051b6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d018      	beq.n	80051f0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051be:	4b14      	ldr	r3, [pc, #80]	@ (8005210 <vTaskDelay+0x64>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00b      	beq.n	80051de <vTaskDelay+0x32>
	__asm volatile
 80051c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	60bb      	str	r3, [r7, #8]
}
 80051d8:	bf00      	nop
 80051da:	bf00      	nop
 80051dc:	e7fd      	b.n	80051da <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80051de:	f000 f883 	bl	80052e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051e2:	2100      	movs	r1, #0
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 fcf3 	bl	8005bd0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80051ea:	f000 f88b 	bl	8005304 <xTaskResumeAll>
 80051ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d107      	bne.n	8005206 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80051f6:	4b07      	ldr	r3, [pc, #28]	@ (8005214 <vTaskDelay+0x68>)
 80051f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005206:	bf00      	nop
 8005208:	3710      	adds	r7, #16
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	2400485c 	.word	0x2400485c
 8005214:	e000ed04 	.word	0xe000ed04

08005218 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08a      	sub	sp, #40	@ 0x28
 800521c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800521e:	2300      	movs	r3, #0
 8005220:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005222:	2300      	movs	r3, #0
 8005224:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005226:	463a      	mov	r2, r7
 8005228:	1d39      	adds	r1, r7, #4
 800522a:	f107 0308 	add.w	r3, r7, #8
 800522e:	4618      	mov	r0, r3
 8005230:	f7fe fbf6 	bl	8003a20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005234:	6839      	ldr	r1, [r7, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	9202      	str	r2, [sp, #8]
 800523c:	9301      	str	r3, [sp, #4]
 800523e:	2300      	movs	r3, #0
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	2300      	movs	r3, #0
 8005244:	460a      	mov	r2, r1
 8005246:	4922      	ldr	r1, [pc, #136]	@ (80052d0 <vTaskStartScheduler+0xb8>)
 8005248:	4822      	ldr	r0, [pc, #136]	@ (80052d4 <vTaskStartScheduler+0xbc>)
 800524a:	f7ff fe09 	bl	8004e60 <xTaskCreateStatic>
 800524e:	4603      	mov	r3, r0
 8005250:	4a21      	ldr	r2, [pc, #132]	@ (80052d8 <vTaskStartScheduler+0xc0>)
 8005252:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005254:	4b20      	ldr	r3, [pc, #128]	@ (80052d8 <vTaskStartScheduler+0xc0>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800525c:	2301      	movs	r3, #1
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	e001      	b.n	8005266 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d102      	bne.n	8005272 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800526c:	f000 fd04 	bl	8005c78 <xTimerCreateTimerTask>
 8005270:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d116      	bne.n	80052a6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	613b      	str	r3, [r7, #16]
}
 800528a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800528c:	4b13      	ldr	r3, [pc, #76]	@ (80052dc <vTaskStartScheduler+0xc4>)
 800528e:	f04f 32ff 	mov.w	r2, #4294967295
 8005292:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005294:	4b12      	ldr	r3, [pc, #72]	@ (80052e0 <vTaskStartScheduler+0xc8>)
 8005296:	2201      	movs	r2, #1
 8005298:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800529a:	4b12      	ldr	r3, [pc, #72]	@ (80052e4 <vTaskStartScheduler+0xcc>)
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052a0:	f7fe ff1e 	bl	80040e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052a4:	e00f      	b.n	80052c6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ac:	d10b      	bne.n	80052c6 <vTaskStartScheduler+0xae>
	__asm volatile
 80052ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	60fb      	str	r3, [r7, #12]
}
 80052c0:	bf00      	nop
 80052c2:	bf00      	nop
 80052c4:	e7fd      	b.n	80052c2 <vTaskStartScheduler+0xaa>
}
 80052c6:	bf00      	nop
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	080063cc 	.word	0x080063cc
 80052d4:	08005909 	.word	0x08005909
 80052d8:	24004858 	.word	0x24004858
 80052dc:	24004854 	.word	0x24004854
 80052e0:	24004840 	.word	0x24004840
 80052e4:	24004838 	.word	0x24004838

080052e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052e8:	b480      	push	{r7}
 80052ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80052ec:	4b04      	ldr	r3, [pc, #16]	@ (8005300 <vTaskSuspendAll+0x18>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3301      	adds	r3, #1
 80052f2:	4a03      	ldr	r2, [pc, #12]	@ (8005300 <vTaskSuspendAll+0x18>)
 80052f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80052f6:	bf00      	nop
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr
 8005300:	2400485c 	.word	0x2400485c

08005304 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800530a:	2300      	movs	r3, #0
 800530c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800530e:	2300      	movs	r3, #0
 8005310:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005312:	4b42      	ldr	r3, [pc, #264]	@ (800541c <xTaskResumeAll+0x118>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10b      	bne.n	8005332 <xTaskResumeAll+0x2e>
	__asm volatile
 800531a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800531e:	f383 8811 	msr	BASEPRI, r3
 8005322:	f3bf 8f6f 	isb	sy
 8005326:	f3bf 8f4f 	dsb	sy
 800532a:	603b      	str	r3, [r7, #0]
}
 800532c:	bf00      	nop
 800532e:	bf00      	nop
 8005330:	e7fd      	b.n	800532e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005332:	f7fe ff79 	bl	8004228 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005336:	4b39      	ldr	r3, [pc, #228]	@ (800541c <xTaskResumeAll+0x118>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3b01      	subs	r3, #1
 800533c:	4a37      	ldr	r2, [pc, #220]	@ (800541c <xTaskResumeAll+0x118>)
 800533e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005340:	4b36      	ldr	r3, [pc, #216]	@ (800541c <xTaskResumeAll+0x118>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d162      	bne.n	800540e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005348:	4b35      	ldr	r3, [pc, #212]	@ (8005420 <xTaskResumeAll+0x11c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d05e      	beq.n	800540e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005350:	e02f      	b.n	80053b2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005352:	4b34      	ldr	r3, [pc, #208]	@ (8005424 <xTaskResumeAll+0x120>)
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	68db      	ldr	r3, [r3, #12]
 8005358:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	3318      	adds	r3, #24
 800535e:	4618      	mov	r0, r3
 8005360:	f7fe fe0a 	bl	8003f78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	3304      	adds	r3, #4
 8005368:	4618      	mov	r0, r3
 800536a:	f7fe fe05 	bl	8003f78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005372:	4b2d      	ldr	r3, [pc, #180]	@ (8005428 <xTaskResumeAll+0x124>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d903      	bls.n	8005382 <xTaskResumeAll+0x7e>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537e:	4a2a      	ldr	r2, [pc, #168]	@ (8005428 <xTaskResumeAll+0x124>)
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	4a27      	ldr	r2, [pc, #156]	@ (800542c <xTaskResumeAll+0x128>)
 8005390:	441a      	add	r2, r3
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	3304      	adds	r3, #4
 8005396:	4619      	mov	r1, r3
 8005398:	4610      	mov	r0, r2
 800539a:	f7fe fd90 	bl	8003ebe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053a2:	4b23      	ldr	r3, [pc, #140]	@ (8005430 <xTaskResumeAll+0x12c>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d302      	bcc.n	80053b2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80053ac:	4b21      	ldr	r3, [pc, #132]	@ (8005434 <xTaskResumeAll+0x130>)
 80053ae:	2201      	movs	r2, #1
 80053b0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053b2:	4b1c      	ldr	r3, [pc, #112]	@ (8005424 <xTaskResumeAll+0x120>)
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1cb      	bne.n	8005352 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053c0:	f000 fb58 	bl	8005a74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80053c4:	4b1c      	ldr	r3, [pc, #112]	@ (8005438 <xTaskResumeAll+0x134>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d010      	beq.n	80053f2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053d0:	f000 f846 	bl	8005460 <xTaskIncrementTick>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d002      	beq.n	80053e0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80053da:	4b16      	ldr	r3, [pc, #88]	@ (8005434 <xTaskResumeAll+0x130>)
 80053dc:	2201      	movs	r2, #1
 80053de:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1f1      	bne.n	80053d0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80053ec:	4b12      	ldr	r3, [pc, #72]	@ (8005438 <xTaskResumeAll+0x134>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80053f2:	4b10      	ldr	r3, [pc, #64]	@ (8005434 <xTaskResumeAll+0x130>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80053fa:	2301      	movs	r3, #1
 80053fc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80053fe:	4b0f      	ldr	r3, [pc, #60]	@ (800543c <xTaskResumeAll+0x138>)
 8005400:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005404:	601a      	str	r2, [r3, #0]
 8005406:	f3bf 8f4f 	dsb	sy
 800540a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800540e:	f7fe ff3d 	bl	800428c <vPortExitCritical>

	return xAlreadyYielded;
 8005412:	68bb      	ldr	r3, [r7, #8]
}
 8005414:	4618      	mov	r0, r3
 8005416:	3710      	adds	r7, #16
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	2400485c 	.word	0x2400485c
 8005420:	24004834 	.word	0x24004834
 8005424:	240047f4 	.word	0x240047f4
 8005428:	2400483c 	.word	0x2400483c
 800542c:	24004364 	.word	0x24004364
 8005430:	24004360 	.word	0x24004360
 8005434:	24004848 	.word	0x24004848
 8005438:	24004844 	.word	0x24004844
 800543c:	e000ed04 	.word	0xe000ed04

08005440 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005446:	4b05      	ldr	r3, [pc, #20]	@ (800545c <xTaskGetTickCount+0x1c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800544c:	687b      	ldr	r3, [r7, #4]
}
 800544e:	4618      	mov	r0, r3
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	24004838 	.word	0x24004838

08005460 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b086      	sub	sp, #24
 8005464:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005466:	2300      	movs	r3, #0
 8005468:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800546a:	4b4f      	ldr	r3, [pc, #316]	@ (80055a8 <xTaskIncrementTick+0x148>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	f040 8090 	bne.w	8005594 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005474:	4b4d      	ldr	r3, [pc, #308]	@ (80055ac <xTaskIncrementTick+0x14c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	3301      	adds	r3, #1
 800547a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800547c:	4a4b      	ldr	r2, [pc, #300]	@ (80055ac <xTaskIncrementTick+0x14c>)
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d121      	bne.n	80054cc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005488:	4b49      	ldr	r3, [pc, #292]	@ (80055b0 <xTaskIncrementTick+0x150>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00b      	beq.n	80054aa <xTaskIncrementTick+0x4a>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	603b      	str	r3, [r7, #0]
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop
 80054a8:	e7fd      	b.n	80054a6 <xTaskIncrementTick+0x46>
 80054aa:	4b41      	ldr	r3, [pc, #260]	@ (80055b0 <xTaskIncrementTick+0x150>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	4b40      	ldr	r3, [pc, #256]	@ (80055b4 <xTaskIncrementTick+0x154>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a3e      	ldr	r2, [pc, #248]	@ (80055b0 <xTaskIncrementTick+0x150>)
 80054b6:	6013      	str	r3, [r2, #0]
 80054b8:	4a3e      	ldr	r2, [pc, #248]	@ (80055b4 <xTaskIncrementTick+0x154>)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	4b3e      	ldr	r3, [pc, #248]	@ (80055b8 <xTaskIncrementTick+0x158>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3301      	adds	r3, #1
 80054c4:	4a3c      	ldr	r2, [pc, #240]	@ (80055b8 <xTaskIncrementTick+0x158>)
 80054c6:	6013      	str	r3, [r2, #0]
 80054c8:	f000 fad4 	bl	8005a74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054cc:	4b3b      	ldr	r3, [pc, #236]	@ (80055bc <xTaskIncrementTick+0x15c>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d349      	bcc.n	800556a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054d6:	4b36      	ldr	r3, [pc, #216]	@ (80055b0 <xTaskIncrementTick+0x150>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d104      	bne.n	80054ea <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054e0:	4b36      	ldr	r3, [pc, #216]	@ (80055bc <xTaskIncrementTick+0x15c>)
 80054e2:	f04f 32ff 	mov.w	r2, #4294967295
 80054e6:	601a      	str	r2, [r3, #0]
					break;
 80054e8:	e03f      	b.n	800556a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ea:	4b31      	ldr	r3, [pc, #196]	@ (80055b0 <xTaskIncrementTick+0x150>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d203      	bcs.n	800550a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005502:	4a2e      	ldr	r2, [pc, #184]	@ (80055bc <xTaskIncrementTick+0x15c>)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005508:	e02f      	b.n	800556a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	3304      	adds	r3, #4
 800550e:	4618      	mov	r0, r3
 8005510:	f7fe fd32 	bl	8003f78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005518:	2b00      	cmp	r3, #0
 800551a:	d004      	beq.n	8005526 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	3318      	adds	r3, #24
 8005520:	4618      	mov	r0, r3
 8005522:	f7fe fd29 	bl	8003f78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800552a:	4b25      	ldr	r3, [pc, #148]	@ (80055c0 <xTaskIncrementTick+0x160>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d903      	bls.n	800553a <xTaskIncrementTick+0xda>
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005536:	4a22      	ldr	r2, [pc, #136]	@ (80055c0 <xTaskIncrementTick+0x160>)
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800553e:	4613      	mov	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4a1f      	ldr	r2, [pc, #124]	@ (80055c4 <xTaskIncrementTick+0x164>)
 8005548:	441a      	add	r2, r3
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	3304      	adds	r3, #4
 800554e:	4619      	mov	r1, r3
 8005550:	4610      	mov	r0, r2
 8005552:	f7fe fcb4 	bl	8003ebe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800555a:	4b1b      	ldr	r3, [pc, #108]	@ (80055c8 <xTaskIncrementTick+0x168>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005560:	429a      	cmp	r2, r3
 8005562:	d3b8      	bcc.n	80054d6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005564:	2301      	movs	r3, #1
 8005566:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005568:	e7b5      	b.n	80054d6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800556a:	4b17      	ldr	r3, [pc, #92]	@ (80055c8 <xTaskIncrementTick+0x168>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005570:	4914      	ldr	r1, [pc, #80]	@ (80055c4 <xTaskIncrementTick+0x164>)
 8005572:	4613      	mov	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	4413      	add	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	440b      	add	r3, r1
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d901      	bls.n	8005586 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005582:	2301      	movs	r3, #1
 8005584:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005586:	4b11      	ldr	r3, [pc, #68]	@ (80055cc <xTaskIncrementTick+0x16c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d007      	beq.n	800559e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800558e:	2301      	movs	r3, #1
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	e004      	b.n	800559e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005594:	4b0e      	ldr	r3, [pc, #56]	@ (80055d0 <xTaskIncrementTick+0x170>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	3301      	adds	r3, #1
 800559a:	4a0d      	ldr	r2, [pc, #52]	@ (80055d0 <xTaskIncrementTick+0x170>)
 800559c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800559e:	697b      	ldr	r3, [r7, #20]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3718      	adds	r7, #24
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	2400485c 	.word	0x2400485c
 80055ac:	24004838 	.word	0x24004838
 80055b0:	240047ec 	.word	0x240047ec
 80055b4:	240047f0 	.word	0x240047f0
 80055b8:	2400484c 	.word	0x2400484c
 80055bc:	24004854 	.word	0x24004854
 80055c0:	2400483c 	.word	0x2400483c
 80055c4:	24004364 	.word	0x24004364
 80055c8:	24004360 	.word	0x24004360
 80055cc:	24004848 	.word	0x24004848
 80055d0:	24004844 	.word	0x24004844

080055d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055da:	4b28      	ldr	r3, [pc, #160]	@ (800567c <vTaskSwitchContext+0xa8>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d003      	beq.n	80055ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055e2:	4b27      	ldr	r3, [pc, #156]	@ (8005680 <vTaskSwitchContext+0xac>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055e8:	e042      	b.n	8005670 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80055ea:	4b25      	ldr	r3, [pc, #148]	@ (8005680 <vTaskSwitchContext+0xac>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f0:	4b24      	ldr	r3, [pc, #144]	@ (8005684 <vTaskSwitchContext+0xb0>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	e011      	b.n	800561c <vTaskSwitchContext+0x48>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10b      	bne.n	8005616 <vTaskSwitchContext+0x42>
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	607b      	str	r3, [r7, #4]
}
 8005610:	bf00      	nop
 8005612:	bf00      	nop
 8005614:	e7fd      	b.n	8005612 <vTaskSwitchContext+0x3e>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	3b01      	subs	r3, #1
 800561a:	60fb      	str	r3, [r7, #12]
 800561c:	491a      	ldr	r1, [pc, #104]	@ (8005688 <vTaskSwitchContext+0xb4>)
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	4613      	mov	r3, r2
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	4413      	add	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	440b      	add	r3, r1
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d0e3      	beq.n	80055f8 <vTaskSwitchContext+0x24>
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	4613      	mov	r3, r2
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	4a13      	ldr	r2, [pc, #76]	@ (8005688 <vTaskSwitchContext+0xb4>)
 800563c:	4413      	add	r3, r2
 800563e:	60bb      	str	r3, [r7, #8]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	605a      	str	r2, [r3, #4]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	3308      	adds	r3, #8
 8005652:	429a      	cmp	r2, r3
 8005654:	d104      	bne.n	8005660 <vTaskSwitchContext+0x8c>
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	685a      	ldr	r2, [r3, #4]
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	605a      	str	r2, [r3, #4]
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	4a09      	ldr	r2, [pc, #36]	@ (800568c <vTaskSwitchContext+0xb8>)
 8005668:	6013      	str	r3, [r2, #0]
 800566a:	4a06      	ldr	r2, [pc, #24]	@ (8005684 <vTaskSwitchContext+0xb0>)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6013      	str	r3, [r2, #0]
}
 8005670:	bf00      	nop
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr
 800567c:	2400485c 	.word	0x2400485c
 8005680:	24004848 	.word	0x24004848
 8005684:	2400483c 	.word	0x2400483c
 8005688:	24004364 	.word	0x24004364
 800568c:	24004360 	.word	0x24004360

08005690 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10b      	bne.n	80056b8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80056a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056a4:	f383 8811 	msr	BASEPRI, r3
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	f3bf 8f4f 	dsb	sy
 80056b0:	60fb      	str	r3, [r7, #12]
}
 80056b2:	bf00      	nop
 80056b4:	bf00      	nop
 80056b6:	e7fd      	b.n	80056b4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056b8:	4b07      	ldr	r3, [pc, #28]	@ (80056d8 <vTaskPlaceOnEventList+0x48>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3318      	adds	r3, #24
 80056be:	4619      	mov	r1, r3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7fe fc20 	bl	8003f06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80056c6:	2101      	movs	r1, #1
 80056c8:	6838      	ldr	r0, [r7, #0]
 80056ca:	f000 fa81 	bl	8005bd0 <prvAddCurrentTaskToDelayedList>
}
 80056ce:	bf00      	nop
 80056d0:	3710      	adds	r7, #16
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd80      	pop	{r7, pc}
 80056d6:	bf00      	nop
 80056d8:	24004360 	.word	0x24004360

080056dc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b086      	sub	sp, #24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10b      	bne.n	8005706 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80056ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	617b      	str	r3, [r7, #20]
}
 8005700:	bf00      	nop
 8005702:	bf00      	nop
 8005704:	e7fd      	b.n	8005702 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005706:	4b0a      	ldr	r3, [pc, #40]	@ (8005730 <vTaskPlaceOnEventListRestricted+0x54>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	3318      	adds	r3, #24
 800570c:	4619      	mov	r1, r3
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f7fe fbd5 	bl	8003ebe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800571a:	f04f 33ff 	mov.w	r3, #4294967295
 800571e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	68b8      	ldr	r0, [r7, #8]
 8005724:	f000 fa54 	bl	8005bd0 <prvAddCurrentTaskToDelayedList>
	}
 8005728:	bf00      	nop
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	24004360 	.word	0x24004360

08005734 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10b      	bne.n	8005762 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800574a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574e:	f383 8811 	msr	BASEPRI, r3
 8005752:	f3bf 8f6f 	isb	sy
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	60fb      	str	r3, [r7, #12]
}
 800575c:	bf00      	nop
 800575e:	bf00      	nop
 8005760:	e7fd      	b.n	800575e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	3318      	adds	r3, #24
 8005766:	4618      	mov	r0, r3
 8005768:	f7fe fc06 	bl	8003f78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800576c:	4b1d      	ldr	r3, [pc, #116]	@ (80057e4 <xTaskRemoveFromEventList+0xb0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d11d      	bne.n	80057b0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	3304      	adds	r3, #4
 8005778:	4618      	mov	r0, r3
 800577a:	f7fe fbfd 	bl	8003f78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005782:	4b19      	ldr	r3, [pc, #100]	@ (80057e8 <xTaskRemoveFromEventList+0xb4>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d903      	bls.n	8005792 <xTaskRemoveFromEventList+0x5e>
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578e:	4a16      	ldr	r2, [pc, #88]	@ (80057e8 <xTaskRemoveFromEventList+0xb4>)
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005796:	4613      	mov	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4a13      	ldr	r2, [pc, #76]	@ (80057ec <xTaskRemoveFromEventList+0xb8>)
 80057a0:	441a      	add	r2, r3
 80057a2:	693b      	ldr	r3, [r7, #16]
 80057a4:	3304      	adds	r3, #4
 80057a6:	4619      	mov	r1, r3
 80057a8:	4610      	mov	r0, r2
 80057aa:	f7fe fb88 	bl	8003ebe <vListInsertEnd>
 80057ae:	e005      	b.n	80057bc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	3318      	adds	r3, #24
 80057b4:	4619      	mov	r1, r3
 80057b6:	480e      	ldr	r0, [pc, #56]	@ (80057f0 <xTaskRemoveFromEventList+0xbc>)
 80057b8:	f7fe fb81 	bl	8003ebe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057c0:	4b0c      	ldr	r3, [pc, #48]	@ (80057f4 <xTaskRemoveFromEventList+0xc0>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d905      	bls.n	80057d6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80057ca:	2301      	movs	r3, #1
 80057cc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80057ce:	4b0a      	ldr	r3, [pc, #40]	@ (80057f8 <xTaskRemoveFromEventList+0xc4>)
 80057d0:	2201      	movs	r2, #1
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	e001      	b.n	80057da <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80057d6:	2300      	movs	r3, #0
 80057d8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80057da:	697b      	ldr	r3, [r7, #20]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	2400485c 	.word	0x2400485c
 80057e8:	2400483c 	.word	0x2400483c
 80057ec:	24004364 	.word	0x24004364
 80057f0:	240047f4 	.word	0x240047f4
 80057f4:	24004360 	.word	0x24004360
 80057f8:	24004848 	.word	0x24004848

080057fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005804:	4b06      	ldr	r3, [pc, #24]	@ (8005820 <vTaskInternalSetTimeOutState+0x24>)
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800580c:	4b05      	ldr	r3, [pc, #20]	@ (8005824 <vTaskInternalSetTimeOutState+0x28>)
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	605a      	str	r2, [r3, #4]
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	2400484c 	.word	0x2400484c
 8005824:	24004838 	.word	0x24004838

08005828 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b088      	sub	sp, #32
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10b      	bne.n	8005850 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583c:	f383 8811 	msr	BASEPRI, r3
 8005840:	f3bf 8f6f 	isb	sy
 8005844:	f3bf 8f4f 	dsb	sy
 8005848:	613b      	str	r3, [r7, #16]
}
 800584a:	bf00      	nop
 800584c:	bf00      	nop
 800584e:	e7fd      	b.n	800584c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d10b      	bne.n	800586e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	60fb      	str	r3, [r7, #12]
}
 8005868:	bf00      	nop
 800586a:	bf00      	nop
 800586c:	e7fd      	b.n	800586a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800586e:	f7fe fcdb 	bl	8004228 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005872:	4b1d      	ldr	r3, [pc, #116]	@ (80058e8 <xTaskCheckForTimeOut+0xc0>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	69ba      	ldr	r2, [r7, #24]
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588a:	d102      	bne.n	8005892 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800588c:	2300      	movs	r3, #0
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	e023      	b.n	80058da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	4b15      	ldr	r3, [pc, #84]	@ (80058ec <xTaskCheckForTimeOut+0xc4>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	429a      	cmp	r2, r3
 800589c:	d007      	beq.n	80058ae <xTaskCheckForTimeOut+0x86>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	69ba      	ldr	r2, [r7, #24]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d302      	bcc.n	80058ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80058a8:	2301      	movs	r3, #1
 80058aa:	61fb      	str	r3, [r7, #28]
 80058ac:	e015      	b.n	80058da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	697a      	ldr	r2, [r7, #20]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d20b      	bcs.n	80058d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	1ad2      	subs	r2, r2, r3
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff ff99 	bl	80057fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80058ca:	2300      	movs	r3, #0
 80058cc:	61fb      	str	r3, [r7, #28]
 80058ce:	e004      	b.n	80058da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	2200      	movs	r2, #0
 80058d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80058d6:	2301      	movs	r3, #1
 80058d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80058da:	f7fe fcd7 	bl	800428c <vPortExitCritical>

	return xReturn;
 80058de:	69fb      	ldr	r3, [r7, #28]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3720      	adds	r7, #32
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	24004838 	.word	0x24004838
 80058ec:	2400484c 	.word	0x2400484c

080058f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80058f0:	b480      	push	{r7}
 80058f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80058f4:	4b03      	ldr	r3, [pc, #12]	@ (8005904 <vTaskMissedYield+0x14>)
 80058f6:	2201      	movs	r2, #1
 80058f8:	601a      	str	r2, [r3, #0]
}
 80058fa:	bf00      	nop
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr
 8005904:	24004848 	.word	0x24004848

08005908 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b082      	sub	sp, #8
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005910:	f000 f852 	bl	80059b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005914:	4b06      	ldr	r3, [pc, #24]	@ (8005930 <prvIdleTask+0x28>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d9f9      	bls.n	8005910 <prvIdleTask+0x8>
			{
				taskYIELD();
 800591c:	4b05      	ldr	r3, [pc, #20]	@ (8005934 <prvIdleTask+0x2c>)
 800591e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800592c:	e7f0      	b.n	8005910 <prvIdleTask+0x8>
 800592e:	bf00      	nop
 8005930:	24004364 	.word	0x24004364
 8005934:	e000ed04 	.word	0xe000ed04

08005938 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800593e:	2300      	movs	r3, #0
 8005940:	607b      	str	r3, [r7, #4]
 8005942:	e00c      	b.n	800595e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	4a12      	ldr	r2, [pc, #72]	@ (8005998 <prvInitialiseTaskLists+0x60>)
 8005950:	4413      	add	r3, r2
 8005952:	4618      	mov	r0, r3
 8005954:	f7fe fa86 	bl	8003e64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3301      	adds	r3, #1
 800595c:	607b      	str	r3, [r7, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b37      	cmp	r3, #55	@ 0x37
 8005962:	d9ef      	bls.n	8005944 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005964:	480d      	ldr	r0, [pc, #52]	@ (800599c <prvInitialiseTaskLists+0x64>)
 8005966:	f7fe fa7d 	bl	8003e64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800596a:	480d      	ldr	r0, [pc, #52]	@ (80059a0 <prvInitialiseTaskLists+0x68>)
 800596c:	f7fe fa7a 	bl	8003e64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005970:	480c      	ldr	r0, [pc, #48]	@ (80059a4 <prvInitialiseTaskLists+0x6c>)
 8005972:	f7fe fa77 	bl	8003e64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005976:	480c      	ldr	r0, [pc, #48]	@ (80059a8 <prvInitialiseTaskLists+0x70>)
 8005978:	f7fe fa74 	bl	8003e64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800597c:	480b      	ldr	r0, [pc, #44]	@ (80059ac <prvInitialiseTaskLists+0x74>)
 800597e:	f7fe fa71 	bl	8003e64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005982:	4b0b      	ldr	r3, [pc, #44]	@ (80059b0 <prvInitialiseTaskLists+0x78>)
 8005984:	4a05      	ldr	r2, [pc, #20]	@ (800599c <prvInitialiseTaskLists+0x64>)
 8005986:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005988:	4b0a      	ldr	r3, [pc, #40]	@ (80059b4 <prvInitialiseTaskLists+0x7c>)
 800598a:	4a05      	ldr	r2, [pc, #20]	@ (80059a0 <prvInitialiseTaskLists+0x68>)
 800598c:	601a      	str	r2, [r3, #0]
}
 800598e:	bf00      	nop
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	24004364 	.word	0x24004364
 800599c:	240047c4 	.word	0x240047c4
 80059a0:	240047d8 	.word	0x240047d8
 80059a4:	240047f4 	.word	0x240047f4
 80059a8:	24004808 	.word	0x24004808
 80059ac:	24004820 	.word	0x24004820
 80059b0:	240047ec 	.word	0x240047ec
 80059b4:	240047f0 	.word	0x240047f0

080059b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059be:	e019      	b.n	80059f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80059c0:	f7fe fc32 	bl	8004228 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059c4:	4b10      	ldr	r3, [pc, #64]	@ (8005a08 <prvCheckTasksWaitingTermination+0x50>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fe fad1 	bl	8003f78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80059d6:	4b0d      	ldr	r3, [pc, #52]	@ (8005a0c <prvCheckTasksWaitingTermination+0x54>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3b01      	subs	r3, #1
 80059dc:	4a0b      	ldr	r2, [pc, #44]	@ (8005a0c <prvCheckTasksWaitingTermination+0x54>)
 80059de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80059e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005a10 <prvCheckTasksWaitingTermination+0x58>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	3b01      	subs	r3, #1
 80059e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005a10 <prvCheckTasksWaitingTermination+0x58>)
 80059e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059ea:	f7fe fc4f 	bl	800428c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f810 	bl	8005a14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059f4:	4b06      	ldr	r3, [pc, #24]	@ (8005a10 <prvCheckTasksWaitingTermination+0x58>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e1      	bne.n	80059c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059fc:	bf00      	nop
 80059fe:	bf00      	nop
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	24004808 	.word	0x24004808
 8005a0c:	24004834 	.word	0x24004834
 8005a10:	2400481c 	.word	0x2400481c

08005a14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d108      	bne.n	8005a38 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fe f8fa 	bl	8003c24 <vPortFree>
				vPortFree( pxTCB );
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7fe f8f7 	bl	8003c24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005a36:	e019      	b.n	8005a6c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d103      	bne.n	8005a4a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f7fe f8ee 	bl	8003c24 <vPortFree>
	}
 8005a48:	e010      	b.n	8005a6c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d00b      	beq.n	8005a6c <prvDeleteTCB+0x58>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	60fb      	str	r3, [r7, #12]
}
 8005a66:	bf00      	nop
 8005a68:	bf00      	nop
 8005a6a:	e7fd      	b.n	8005a68 <prvDeleteTCB+0x54>
	}
 8005a6c:	bf00      	nop
 8005a6e:	3710      	adds	r7, #16
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8005aac <prvResetNextTaskUnblockTime+0x38>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d104      	bne.n	8005a8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a84:	4b0a      	ldr	r3, [pc, #40]	@ (8005ab0 <prvResetNextTaskUnblockTime+0x3c>)
 8005a86:	f04f 32ff 	mov.w	r2, #4294967295
 8005a8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a8c:	e008      	b.n	8005aa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a8e:	4b07      	ldr	r3, [pc, #28]	@ (8005aac <prvResetNextTaskUnblockTime+0x38>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	4a04      	ldr	r2, [pc, #16]	@ (8005ab0 <prvResetNextTaskUnblockTime+0x3c>)
 8005a9e:	6013      	str	r3, [r2, #0]
}
 8005aa0:	bf00      	nop
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr
 8005aac:	240047ec 	.word	0x240047ec
 8005ab0:	24004854 	.word	0x24004854

08005ab4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005aba:	4b0b      	ldr	r3, [pc, #44]	@ (8005ae8 <xTaskGetSchedulerState+0x34>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d102      	bne.n	8005ac8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	607b      	str	r3, [r7, #4]
 8005ac6:	e008      	b.n	8005ada <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ac8:	4b08      	ldr	r3, [pc, #32]	@ (8005aec <xTaskGetSchedulerState+0x38>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d102      	bne.n	8005ad6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	607b      	str	r3, [r7, #4]
 8005ad4:	e001      	b.n	8005ada <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ada:	687b      	ldr	r3, [r7, #4]
	}
 8005adc:	4618      	mov	r0, r3
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr
 8005ae8:	24004840 	.word	0x24004840
 8005aec:	2400485c 	.word	0x2400485c

08005af0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b086      	sub	sp, #24
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d058      	beq.n	8005bb8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005b06:	4b2f      	ldr	r3, [pc, #188]	@ (8005bc4 <xTaskPriorityDisinherit+0xd4>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	693a      	ldr	r2, [r7, #16]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d00b      	beq.n	8005b28 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	60fb      	str	r3, [r7, #12]
}
 8005b22:	bf00      	nop
 8005b24:	bf00      	nop
 8005b26:	e7fd      	b.n	8005b24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10b      	bne.n	8005b48 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	60bb      	str	r3, [r7, #8]
}
 8005b42:	bf00      	nop
 8005b44:	bf00      	nop
 8005b46:	e7fd      	b.n	8005b44 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b4c:	1e5a      	subs	r2, r3, #1
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d02c      	beq.n	8005bb8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d128      	bne.n	8005bb8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	3304      	adds	r3, #4
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7fe fa04 	bl	8003f78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b7c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b88:	4b0f      	ldr	r3, [pc, #60]	@ (8005bc8 <xTaskPriorityDisinherit+0xd8>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	429a      	cmp	r2, r3
 8005b8e:	d903      	bls.n	8005b98 <xTaskPriorityDisinherit+0xa8>
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b94:	4a0c      	ldr	r2, [pc, #48]	@ (8005bc8 <xTaskPriorityDisinherit+0xd8>)
 8005b96:	6013      	str	r3, [r2, #0]
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	4413      	add	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4a09      	ldr	r2, [pc, #36]	@ (8005bcc <xTaskPriorityDisinherit+0xdc>)
 8005ba6:	441a      	add	r2, r3
 8005ba8:	693b      	ldr	r3, [r7, #16]
 8005baa:	3304      	adds	r3, #4
 8005bac:	4619      	mov	r1, r3
 8005bae:	4610      	mov	r0, r2
 8005bb0:	f7fe f985 	bl	8003ebe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005bb8:	697b      	ldr	r3, [r7, #20]
	}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3718      	adds	r7, #24
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	24004360 	.word	0x24004360
 8005bc8:	2400483c 	.word	0x2400483c
 8005bcc:	24004364 	.word	0x24004364

08005bd0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005bda:	4b21      	ldr	r3, [pc, #132]	@ (8005c60 <prvAddCurrentTaskToDelayedList+0x90>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005be0:	4b20      	ldr	r3, [pc, #128]	@ (8005c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	3304      	adds	r3, #4
 8005be6:	4618      	mov	r0, r3
 8005be8:	f7fe f9c6 	bl	8003f78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bf2:	d10a      	bne.n	8005c0a <prvAddCurrentTaskToDelayedList+0x3a>
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d007      	beq.n	8005c0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8005c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3304      	adds	r3, #4
 8005c00:	4619      	mov	r1, r3
 8005c02:	4819      	ldr	r0, [pc, #100]	@ (8005c68 <prvAddCurrentTaskToDelayedList+0x98>)
 8005c04:	f7fe f95b 	bl	8003ebe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c08:	e026      	b.n	8005c58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c0a:	68fa      	ldr	r2, [r7, #12]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	4413      	add	r3, r2
 8005c10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c12:	4b14      	ldr	r3, [pc, #80]	@ (8005c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d209      	bcs.n	8005c36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c22:	4b12      	ldr	r3, [pc, #72]	@ (8005c6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	4b0f      	ldr	r3, [pc, #60]	@ (8005c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	3304      	adds	r3, #4
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	4610      	mov	r0, r2
 8005c30:	f7fe f969 	bl	8003f06 <vListInsert>
}
 8005c34:	e010      	b.n	8005c58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c36:	4b0e      	ldr	r3, [pc, #56]	@ (8005c70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8005c64 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	4619      	mov	r1, r3
 8005c42:	4610      	mov	r0, r2
 8005c44:	f7fe f95f 	bl	8003f06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c48:	4b0a      	ldr	r3, [pc, #40]	@ (8005c74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	68ba      	ldr	r2, [r7, #8]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d202      	bcs.n	8005c58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c52:	4a08      	ldr	r2, [pc, #32]	@ (8005c74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	6013      	str	r3, [r2, #0]
}
 8005c58:	bf00      	nop
 8005c5a:	3710      	adds	r7, #16
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	24004838 	.word	0x24004838
 8005c64:	24004360 	.word	0x24004360
 8005c68:	24004820 	.word	0x24004820
 8005c6c:	240047f0 	.word	0x240047f0
 8005c70:	240047ec 	.word	0x240047ec
 8005c74:	24004854 	.word	0x24004854

08005c78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b08a      	sub	sp, #40	@ 0x28
 8005c7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005c82:	f000 fb13 	bl	80062ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005c86:	4b1d      	ldr	r3, [pc, #116]	@ (8005cfc <xTimerCreateTimerTask+0x84>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d021      	beq.n	8005cd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005c96:	1d3a      	adds	r2, r7, #4
 8005c98:	f107 0108 	add.w	r1, r7, #8
 8005c9c:	f107 030c 	add.w	r3, r7, #12
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fd fed7 	bl	8003a54 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ca6:	6879      	ldr	r1, [r7, #4]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	9202      	str	r2, [sp, #8]
 8005cae:	9301      	str	r3, [sp, #4]
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	9300      	str	r3, [sp, #0]
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	460a      	mov	r2, r1
 8005cb8:	4911      	ldr	r1, [pc, #68]	@ (8005d00 <xTimerCreateTimerTask+0x88>)
 8005cba:	4812      	ldr	r0, [pc, #72]	@ (8005d04 <xTimerCreateTimerTask+0x8c>)
 8005cbc:	f7ff f8d0 	bl	8004e60 <xTaskCreateStatic>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	4a11      	ldr	r2, [pc, #68]	@ (8005d08 <xTimerCreateTimerTask+0x90>)
 8005cc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005cc6:	4b10      	ldr	r3, [pc, #64]	@ (8005d08 <xTimerCreateTimerTask+0x90>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10b      	bne.n	8005cf0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005cd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cdc:	f383 8811 	msr	BASEPRI, r3
 8005ce0:	f3bf 8f6f 	isb	sy
 8005ce4:	f3bf 8f4f 	dsb	sy
 8005ce8:	613b      	str	r3, [r7, #16]
}
 8005cea:	bf00      	nop
 8005cec:	bf00      	nop
 8005cee:	e7fd      	b.n	8005cec <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005cf0:	697b      	ldr	r3, [r7, #20]
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3718      	adds	r7, #24
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop
 8005cfc:	24004890 	.word	0x24004890
 8005d00:	080063d4 	.word	0x080063d4
 8005d04:	08005e45 	.word	0x08005e45
 8005d08:	24004894 	.word	0x24004894

08005d0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08a      	sub	sp, #40	@ 0x28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d10b      	bne.n	8005d3c <xTimerGenericCommand+0x30>
	__asm volatile
 8005d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d28:	f383 8811 	msr	BASEPRI, r3
 8005d2c:	f3bf 8f6f 	isb	sy
 8005d30:	f3bf 8f4f 	dsb	sy
 8005d34:	623b      	str	r3, [r7, #32]
}
 8005d36:	bf00      	nop
 8005d38:	bf00      	nop
 8005d3a:	e7fd      	b.n	8005d38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d3c:	4b19      	ldr	r3, [pc, #100]	@ (8005da4 <xTimerGenericCommand+0x98>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d02a      	beq.n	8005d9a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	2b05      	cmp	r3, #5
 8005d54:	dc18      	bgt.n	8005d88 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d56:	f7ff fead 	bl	8005ab4 <xTaskGetSchedulerState>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b02      	cmp	r3, #2
 8005d5e:	d109      	bne.n	8005d74 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d60:	4b10      	ldr	r3, [pc, #64]	@ (8005da4 <xTimerGenericCommand+0x98>)
 8005d62:	6818      	ldr	r0, [r3, #0]
 8005d64:	f107 0110 	add.w	r1, r7, #16
 8005d68:	2300      	movs	r3, #0
 8005d6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d6c:	f7fe fc88 	bl	8004680 <xQueueGenericSend>
 8005d70:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d72:	e012      	b.n	8005d9a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005d74:	4b0b      	ldr	r3, [pc, #44]	@ (8005da4 <xTimerGenericCommand+0x98>)
 8005d76:	6818      	ldr	r0, [r3, #0]
 8005d78:	f107 0110 	add.w	r1, r7, #16
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f7fe fc7e 	bl	8004680 <xQueueGenericSend>
 8005d84:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d86:	e008      	b.n	8005d9a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005d88:	4b06      	ldr	r3, [pc, #24]	@ (8005da4 <xTimerGenericCommand+0x98>)
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	f107 0110 	add.w	r1, r7, #16
 8005d90:	2300      	movs	r3, #0
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	f7fe fd76 	bl	8004884 <xQueueGenericSendFromISR>
 8005d98:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3728      	adds	r7, #40	@ 0x28
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	24004890 	.word	0x24004890

08005da8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b088      	sub	sp, #32
 8005dac:	af02      	add	r7, sp, #8
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db2:	4b23      	ldr	r3, [pc, #140]	@ (8005e40 <prvProcessExpiredTimer+0x98>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7fe f8d9 	bl	8003f78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005dcc:	f003 0304 	and.w	r3, r3, #4
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d023      	beq.n	8005e1c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	699a      	ldr	r2, [r3, #24]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	18d1      	adds	r1, r2, r3
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	6978      	ldr	r0, [r7, #20]
 8005de2:	f000 f8d5 	bl	8005f90 <prvInsertTimerInActiveList>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d020      	beq.n	8005e2e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005dec:	2300      	movs	r3, #0
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	2300      	movs	r3, #0
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	2100      	movs	r1, #0
 8005df6:	6978      	ldr	r0, [r7, #20]
 8005df8:	f7ff ff88 	bl	8005d0c <xTimerGenericCommand>
 8005dfc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d114      	bne.n	8005e2e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e08:	f383 8811 	msr	BASEPRI, r3
 8005e0c:	f3bf 8f6f 	isb	sy
 8005e10:	f3bf 8f4f 	dsb	sy
 8005e14:	60fb      	str	r3, [r7, #12]
}
 8005e16:	bf00      	nop
 8005e18:	bf00      	nop
 8005e1a:	e7fd      	b.n	8005e18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005e22:	f023 0301 	bic.w	r3, r3, #1
 8005e26:	b2da      	uxtb	r2, r3
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	6978      	ldr	r0, [r7, #20]
 8005e34:	4798      	blx	r3
}
 8005e36:	bf00      	nop
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	24004888 	.word	0x24004888

08005e44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e4c:	f107 0308 	add.w	r3, r7, #8
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 f859 	bl	8005f08 <prvGetNextExpireTime>
 8005e56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4619      	mov	r1, r3
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 f805 	bl	8005e6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e62:	f000 f8d7 	bl	8006014 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e66:	bf00      	nop
 8005e68:	e7f0      	b.n	8005e4c <prvTimerTask+0x8>
	...

08005e6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005e76:	f7ff fa37 	bl	80052e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e7a:	f107 0308 	add.w	r3, r7, #8
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f000 f866 	bl	8005f50 <prvSampleTimeNow>
 8005e84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d130      	bne.n	8005eee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10a      	bne.n	8005ea8 <prvProcessTimerOrBlockTask+0x3c>
 8005e92:	687a      	ldr	r2, [r7, #4]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d806      	bhi.n	8005ea8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005e9a:	f7ff fa33 	bl	8005304 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005e9e:	68f9      	ldr	r1, [r7, #12]
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff ff81 	bl	8005da8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005ea6:	e024      	b.n	8005ef2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d008      	beq.n	8005ec0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005eae:	4b13      	ldr	r3, [pc, #76]	@ (8005efc <prvProcessTimerOrBlockTask+0x90>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <prvProcessTimerOrBlockTask+0x50>
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e000      	b.n	8005ebe <prvProcessTimerOrBlockTask+0x52>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ec0:	4b0f      	ldr	r3, [pc, #60]	@ (8005f00 <prvProcessTimerOrBlockTask+0x94>)
 8005ec2:	6818      	ldr	r0, [r3, #0]
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	4619      	mov	r1, r3
 8005ece:	f7fe ff93 	bl	8004df8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ed2:	f7ff fa17 	bl	8005304 <xTaskResumeAll>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10a      	bne.n	8005ef2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005edc:	4b09      	ldr	r3, [pc, #36]	@ (8005f04 <prvProcessTimerOrBlockTask+0x98>)
 8005ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	f3bf 8f6f 	isb	sy
}
 8005eec:	e001      	b.n	8005ef2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005eee:	f7ff fa09 	bl	8005304 <xTaskResumeAll>
}
 8005ef2:	bf00      	nop
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	2400488c 	.word	0x2400488c
 8005f00:	24004890 	.word	0x24004890
 8005f04:	e000ed04 	.word	0xe000ed04

08005f08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f10:	4b0e      	ldr	r3, [pc, #56]	@ (8005f4c <prvGetNextExpireTime+0x44>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <prvGetNextExpireTime+0x16>
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	e000      	b.n	8005f20 <prvGetNextExpireTime+0x18>
 8005f1e:	2200      	movs	r2, #0
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d105      	bne.n	8005f38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f2c:	4b07      	ldr	r3, [pc, #28]	@ (8005f4c <prvGetNextExpireTime+0x44>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	e001      	b.n	8005f3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
}
 8005f3e:	4618      	mov	r0, r3
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	24004888 	.word	0x24004888

08005f50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f58:	f7ff fa72 	bl	8005440 <xTaskGetTickCount>
 8005f5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f8c <prvSampleTimeNow+0x3c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d205      	bcs.n	8005f74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f68:	f000 f93a 	bl	80061e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	601a      	str	r2, [r3, #0]
 8005f72:	e002      	b.n	8005f7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005f7a:	4a04      	ldr	r2, [pc, #16]	@ (8005f8c <prvSampleTimeNow+0x3c>)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005f80:	68fb      	ldr	r3, [r7, #12]
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	3710      	adds	r7, #16
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	24004898 	.word	0x24004898

08005f90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b086      	sub	sp, #24
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	68ba      	ldr	r2, [r7, #8]
 8005fa6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	68fa      	ldr	r2, [r7, #12]
 8005fac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d812      	bhi.n	8005fdc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	1ad2      	subs	r2, r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d302      	bcc.n	8005fca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	e01b      	b.n	8006002 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005fca:	4b10      	ldr	r3, [pc, #64]	@ (800600c <prvInsertTimerInActiveList+0x7c>)
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	f7fd ff96 	bl	8003f06 <vListInsert>
 8005fda:	e012      	b.n	8006002 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d206      	bcs.n	8005ff2 <prvInsertTimerInActiveList+0x62>
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d302      	bcc.n	8005ff2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005fec:	2301      	movs	r3, #1
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	e007      	b.n	8006002 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ff2:	4b07      	ldr	r3, [pc, #28]	@ (8006010 <prvInsertTimerInActiveList+0x80>)
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	4619      	mov	r1, r3
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	f7fd ff82 	bl	8003f06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006002:	697b      	ldr	r3, [r7, #20]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3718      	adds	r7, #24
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}
 800600c:	2400488c 	.word	0x2400488c
 8006010:	24004888 	.word	0x24004888

08006014 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08e      	sub	sp, #56	@ 0x38
 8006018:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800601a:	e0ce      	b.n	80061ba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	da19      	bge.n	8006056 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006022:	1d3b      	adds	r3, r7, #4
 8006024:	3304      	adds	r3, #4
 8006026:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10b      	bne.n	8006046 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	61fb      	str	r3, [r7, #28]
}
 8006040:	bf00      	nop
 8006042:	bf00      	nop
 8006044:	e7fd      	b.n	8006042 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800604c:	6850      	ldr	r0, [r2, #4]
 800604e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006050:	6892      	ldr	r2, [r2, #8]
 8006052:	4611      	mov	r1, r2
 8006054:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	f2c0 80ae 	blt.w	80061ba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006064:	695b      	ldr	r3, [r3, #20]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d004      	beq.n	8006074 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800606a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800606c:	3304      	adds	r3, #4
 800606e:	4618      	mov	r0, r3
 8006070:	f7fd ff82 	bl	8003f78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006074:	463b      	mov	r3, r7
 8006076:	4618      	mov	r0, r3
 8006078:	f7ff ff6a 	bl	8005f50 <prvSampleTimeNow>
 800607c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b09      	cmp	r3, #9
 8006082:	f200 8097 	bhi.w	80061b4 <prvProcessReceivedCommands+0x1a0>
 8006086:	a201      	add	r2, pc, #4	@ (adr r2, 800608c <prvProcessReceivedCommands+0x78>)
 8006088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608c:	080060b5 	.word	0x080060b5
 8006090:	080060b5 	.word	0x080060b5
 8006094:	080060b5 	.word	0x080060b5
 8006098:	0800612b 	.word	0x0800612b
 800609c:	0800613f 	.word	0x0800613f
 80060a0:	0800618b 	.word	0x0800618b
 80060a4:	080060b5 	.word	0x080060b5
 80060a8:	080060b5 	.word	0x080060b5
 80060ac:	0800612b 	.word	0x0800612b
 80060b0:	0800613f 	.word	0x0800613f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060ba:	f043 0301 	orr.w	r3, r3, #1
 80060be:	b2da      	uxtb	r2, r3
 80060c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060c2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ca:	699b      	ldr	r3, [r3, #24]
 80060cc:	18d1      	adds	r1, r2, r3
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060d4:	f7ff ff5c 	bl	8005f90 <prvInsertTimerInActiveList>
 80060d8:	4603      	mov	r3, r0
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d06c      	beq.n	80061b8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80060e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80060e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80060ec:	f003 0304 	and.w	r3, r3, #4
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d061      	beq.n	80061b8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80060f4:	68ba      	ldr	r2, [r7, #8]
 80060f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	441a      	add	r2, r3
 80060fc:	2300      	movs	r3, #0
 80060fe:	9300      	str	r3, [sp, #0]
 8006100:	2300      	movs	r3, #0
 8006102:	2100      	movs	r1, #0
 8006104:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006106:	f7ff fe01 	bl	8005d0c <xTimerGenericCommand>
 800610a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800610c:	6a3b      	ldr	r3, [r7, #32]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d152      	bne.n	80061b8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	61bb      	str	r3, [r7, #24]
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	e7fd      	b.n	8006126 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800612a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006130:	f023 0301 	bic.w	r3, r3, #1
 8006134:	b2da      	uxtb	r2, r3
 8006136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006138:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800613c:	e03d      	b.n	80061ba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800613e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006140:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006144:	f043 0301 	orr.w	r3, r3, #1
 8006148:	b2da      	uxtb	r2, r3
 800614a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800614c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006150:	68ba      	ldr	r2, [r7, #8]
 8006152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006154:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d10b      	bne.n	8006176 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800615e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006162:	f383 8811 	msr	BASEPRI, r3
 8006166:	f3bf 8f6f 	isb	sy
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	617b      	str	r3, [r7, #20]
}
 8006170:	bf00      	nop
 8006172:	bf00      	nop
 8006174:	e7fd      	b.n	8006172 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006178:	699a      	ldr	r2, [r3, #24]
 800617a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617c:	18d1      	adds	r1, r2, r3
 800617e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006182:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006184:	f7ff ff04 	bl	8005f90 <prvInsertTimerInActiveList>
					break;
 8006188:	e017      	b.n	80061ba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800618a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d103      	bne.n	80061a0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006198:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800619a:	f7fd fd43 	bl	8003c24 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800619e:	e00c      	b.n	80061ba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80061a6:	f023 0301 	bic.w	r3, r3, #1
 80061aa:	b2da      	uxtb	r2, r3
 80061ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80061b2:	e002      	b.n	80061ba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80061b4:	bf00      	nop
 80061b6:	e000      	b.n	80061ba <prvProcessReceivedCommands+0x1a6>
					break;
 80061b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061ba:	4b08      	ldr	r3, [pc, #32]	@ (80061dc <prvProcessReceivedCommands+0x1c8>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	1d39      	adds	r1, r7, #4
 80061c0:	2200      	movs	r2, #0
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fe fbfc 	bl	80049c0 <xQueueReceive>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f47f af26 	bne.w	800601c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80061d0:	bf00      	nop
 80061d2:	bf00      	nop
 80061d4:	3730      	adds	r7, #48	@ 0x30
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	24004890 	.word	0x24004890

080061e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b088      	sub	sp, #32
 80061e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80061e6:	e049      	b.n	800627c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061e8:	4b2e      	ldr	r3, [pc, #184]	@ (80062a4 <prvSwitchTimerLists+0xc4>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061f2:	4b2c      	ldr	r3, [pc, #176]	@ (80062a4 <prvSwitchTimerLists+0xc4>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	3304      	adds	r3, #4
 8006200:	4618      	mov	r0, r3
 8006202:	f7fd feb9 	bl	8003f78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006214:	f003 0304 	and.w	r3, r3, #4
 8006218:	2b00      	cmp	r3, #0
 800621a:	d02f      	beq.n	800627c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	693a      	ldr	r2, [r7, #16]
 8006222:	4413      	add	r3, r2
 8006224:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006226:	68ba      	ldr	r2, [r7, #8]
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	429a      	cmp	r2, r3
 800622c:	d90e      	bls.n	800624c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800623a:	4b1a      	ldr	r3, [pc, #104]	@ (80062a4 <prvSwitchTimerLists+0xc4>)
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	3304      	adds	r3, #4
 8006242:	4619      	mov	r1, r3
 8006244:	4610      	mov	r0, r2
 8006246:	f7fd fe5e 	bl	8003f06 <vListInsert>
 800624a:	e017      	b.n	800627c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800624c:	2300      	movs	r3, #0
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	2300      	movs	r3, #0
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	2100      	movs	r1, #0
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f7ff fd58 	bl	8005d0c <xTimerGenericCommand>
 800625c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d10b      	bne.n	800627c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006268:	f383 8811 	msr	BASEPRI, r3
 800626c:	f3bf 8f6f 	isb	sy
 8006270:	f3bf 8f4f 	dsb	sy
 8006274:	603b      	str	r3, [r7, #0]
}
 8006276:	bf00      	nop
 8006278:	bf00      	nop
 800627a:	e7fd      	b.n	8006278 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800627c:	4b09      	ldr	r3, [pc, #36]	@ (80062a4 <prvSwitchTimerLists+0xc4>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1b0      	bne.n	80061e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006286:	4b07      	ldr	r3, [pc, #28]	@ (80062a4 <prvSwitchTimerLists+0xc4>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800628c:	4b06      	ldr	r3, [pc, #24]	@ (80062a8 <prvSwitchTimerLists+0xc8>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a04      	ldr	r2, [pc, #16]	@ (80062a4 <prvSwitchTimerLists+0xc4>)
 8006292:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006294:	4a04      	ldr	r2, [pc, #16]	@ (80062a8 <prvSwitchTimerLists+0xc8>)
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	6013      	str	r3, [r2, #0]
}
 800629a:	bf00      	nop
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	24004888 	.word	0x24004888
 80062a8:	2400488c 	.word	0x2400488c

080062ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062b2:	f7fd ffb9 	bl	8004228 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80062b6:	4b15      	ldr	r3, [pc, #84]	@ (800630c <prvCheckForValidListAndQueue+0x60>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d120      	bne.n	8006300 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062be:	4814      	ldr	r0, [pc, #80]	@ (8006310 <prvCheckForValidListAndQueue+0x64>)
 80062c0:	f7fd fdd0 	bl	8003e64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062c4:	4813      	ldr	r0, [pc, #76]	@ (8006314 <prvCheckForValidListAndQueue+0x68>)
 80062c6:	f7fd fdcd 	bl	8003e64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062ca:	4b13      	ldr	r3, [pc, #76]	@ (8006318 <prvCheckForValidListAndQueue+0x6c>)
 80062cc:	4a10      	ldr	r2, [pc, #64]	@ (8006310 <prvCheckForValidListAndQueue+0x64>)
 80062ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062d0:	4b12      	ldr	r3, [pc, #72]	@ (800631c <prvCheckForValidListAndQueue+0x70>)
 80062d2:	4a10      	ldr	r2, [pc, #64]	@ (8006314 <prvCheckForValidListAndQueue+0x68>)
 80062d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80062d6:	2300      	movs	r3, #0
 80062d8:	9300      	str	r3, [sp, #0]
 80062da:	4b11      	ldr	r3, [pc, #68]	@ (8006320 <prvCheckForValidListAndQueue+0x74>)
 80062dc:	4a11      	ldr	r2, [pc, #68]	@ (8006324 <prvCheckForValidListAndQueue+0x78>)
 80062de:	2110      	movs	r1, #16
 80062e0:	200a      	movs	r0, #10
 80062e2:	f7fe f92d 	bl	8004540 <xQueueGenericCreateStatic>
 80062e6:	4603      	mov	r3, r0
 80062e8:	4a08      	ldr	r2, [pc, #32]	@ (800630c <prvCheckForValidListAndQueue+0x60>)
 80062ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80062ec:	4b07      	ldr	r3, [pc, #28]	@ (800630c <prvCheckForValidListAndQueue+0x60>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d005      	beq.n	8006300 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80062f4:	4b05      	ldr	r3, [pc, #20]	@ (800630c <prvCheckForValidListAndQueue+0x60>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	490b      	ldr	r1, [pc, #44]	@ (8006328 <prvCheckForValidListAndQueue+0x7c>)
 80062fa:	4618      	mov	r0, r3
 80062fc:	f7fe fd52 	bl	8004da4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006300:	f7fd ffc4 	bl	800428c <vPortExitCritical>
}
 8006304:	bf00      	nop
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	24004890 	.word	0x24004890
 8006310:	24004860 	.word	0x24004860
 8006314:	24004874 	.word	0x24004874
 8006318:	24004888 	.word	0x24004888
 800631c:	2400488c 	.word	0x2400488c
 8006320:	2400493c 	.word	0x2400493c
 8006324:	2400489c 	.word	0x2400489c
 8006328:	080063dc 	.word	0x080063dc

0800632c <memset>:
 800632c:	4402      	add	r2, r0
 800632e:	4603      	mov	r3, r0
 8006330:	4293      	cmp	r3, r2
 8006332:	d100      	bne.n	8006336 <memset+0xa>
 8006334:	4770      	bx	lr
 8006336:	f803 1b01 	strb.w	r1, [r3], #1
 800633a:	e7f9      	b.n	8006330 <memset+0x4>

0800633c <__libc_init_array>:
 800633c:	b570      	push	{r4, r5, r6, lr}
 800633e:	4d0d      	ldr	r5, [pc, #52]	@ (8006374 <__libc_init_array+0x38>)
 8006340:	4c0d      	ldr	r4, [pc, #52]	@ (8006378 <__libc_init_array+0x3c>)
 8006342:	1b64      	subs	r4, r4, r5
 8006344:	10a4      	asrs	r4, r4, #2
 8006346:	2600      	movs	r6, #0
 8006348:	42a6      	cmp	r6, r4
 800634a:	d109      	bne.n	8006360 <__libc_init_array+0x24>
 800634c:	4d0b      	ldr	r5, [pc, #44]	@ (800637c <__libc_init_array+0x40>)
 800634e:	4c0c      	ldr	r4, [pc, #48]	@ (8006380 <__libc_init_array+0x44>)
 8006350:	f000 f826 	bl	80063a0 <_init>
 8006354:	1b64      	subs	r4, r4, r5
 8006356:	10a4      	asrs	r4, r4, #2
 8006358:	2600      	movs	r6, #0
 800635a:	42a6      	cmp	r6, r4
 800635c:	d105      	bne.n	800636a <__libc_init_array+0x2e>
 800635e:	bd70      	pop	{r4, r5, r6, pc}
 8006360:	f855 3b04 	ldr.w	r3, [r5], #4
 8006364:	4798      	blx	r3
 8006366:	3601      	adds	r6, #1
 8006368:	e7ee      	b.n	8006348 <__libc_init_array+0xc>
 800636a:	f855 3b04 	ldr.w	r3, [r5], #4
 800636e:	4798      	blx	r3
 8006370:	3601      	adds	r6, #1
 8006372:	e7f2      	b.n	800635a <__libc_init_array+0x1e>
 8006374:	0800643c 	.word	0x0800643c
 8006378:	0800643c 	.word	0x0800643c
 800637c:	0800643c 	.word	0x0800643c
 8006380:	08006440 	.word	0x08006440

08006384 <memcpy>:
 8006384:	440a      	add	r2, r1
 8006386:	4291      	cmp	r1, r2
 8006388:	f100 33ff 	add.w	r3, r0, #4294967295
 800638c:	d100      	bne.n	8006390 <memcpy+0xc>
 800638e:	4770      	bx	lr
 8006390:	b510      	push	{r4, lr}
 8006392:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006396:	f803 4f01 	strb.w	r4, [r3, #1]!
 800639a:	4291      	cmp	r1, r2
 800639c:	d1f9      	bne.n	8006392 <memcpy+0xe>
 800639e:	bd10      	pop	{r4, pc}

080063a0 <_init>:
 80063a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a2:	bf00      	nop
 80063a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063a6:	bc08      	pop	{r3}
 80063a8:	469e      	mov	lr, r3
 80063aa:	4770      	bx	lr

080063ac <_fini>:
 80063ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ae:	bf00      	nop
 80063b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063b2:	bc08      	pop	{r3}
 80063b4:	469e      	mov	lr, r3
 80063b6:	4770      	bx	lr
