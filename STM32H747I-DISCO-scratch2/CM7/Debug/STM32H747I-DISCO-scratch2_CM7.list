
STM32H747I-DISCO-scratch2_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082a0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08008540  08008540  00009540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008678  08008678  0000a014  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008678  08008678  00009678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008680  08008680  0000a014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008680  08008680  00009680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008684  08008684  00009684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  24000000  08008688  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004aac  24000014  0800869c  0000a014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004ac0  0800869c  0000aac0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a408  00000000  00000000  0000a042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003417  00000000  00000000  0002444a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001330  00000000  00000000  00027868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec2  00000000  00000000  00028b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003fbea  00000000  00000000  00029a5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017506  00000000  00000000  00069644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019fefe  00000000  00000000  00080b4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00220a48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ff8  00000000  00000000  00220a8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  00225a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000014 	.word	0x24000014
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008528 	.word	0x08008528

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000018 	.word	0x24000018
 80002dc:	08008528 	.word	0x08008528

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000610:	4b49      	ldr	r3, [pc, #292]	@ (8000738 <SystemInit+0x12c>)
 8000612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000616:	4a48      	ldr	r2, [pc, #288]	@ (8000738 <SystemInit+0x12c>)
 8000618:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800061c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000620:	4b45      	ldr	r3, [pc, #276]	@ (8000738 <SystemInit+0x12c>)
 8000622:	691b      	ldr	r3, [r3, #16]
 8000624:	4a44      	ldr	r2, [pc, #272]	@ (8000738 <SystemInit+0x12c>)
 8000626:	f043 0310 	orr.w	r3, r3, #16
 800062a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062c:	4b43      	ldr	r3, [pc, #268]	@ (800073c <SystemInit+0x130>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f003 030f 	and.w	r3, r3, #15
 8000634:	2b06      	cmp	r3, #6
 8000636:	d807      	bhi.n	8000648 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000638:	4b40      	ldr	r3, [pc, #256]	@ (800073c <SystemInit+0x130>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f023 030f 	bic.w	r3, r3, #15
 8000640:	4a3e      	ldr	r2, [pc, #248]	@ (800073c <SystemInit+0x130>)
 8000642:	f043 0307 	orr.w	r3, r3, #7
 8000646:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000648:	4b3d      	ldr	r3, [pc, #244]	@ (8000740 <SystemInit+0x134>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a3c      	ldr	r2, [pc, #240]	@ (8000740 <SystemInit+0x134>)
 800064e:	f043 0301 	orr.w	r3, r3, #1
 8000652:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000654:	4b3a      	ldr	r3, [pc, #232]	@ (8000740 <SystemInit+0x134>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800065a:	4b39      	ldr	r3, [pc, #228]	@ (8000740 <SystemInit+0x134>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	4938      	ldr	r1, [pc, #224]	@ (8000740 <SystemInit+0x134>)
 8000660:	4b38      	ldr	r3, [pc, #224]	@ (8000744 <SystemInit+0x138>)
 8000662:	4013      	ands	r3, r2
 8000664:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000666:	4b35      	ldr	r3, [pc, #212]	@ (800073c <SystemInit+0x130>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f003 0308 	and.w	r3, r3, #8
 800066e:	2b00      	cmp	r3, #0
 8000670:	d007      	beq.n	8000682 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000672:	4b32      	ldr	r3, [pc, #200]	@ (800073c <SystemInit+0x130>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f023 030f 	bic.w	r3, r3, #15
 800067a:	4a30      	ldr	r2, [pc, #192]	@ (800073c <SystemInit+0x130>)
 800067c:	f043 0307 	orr.w	r3, r3, #7
 8000680:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000682:	4b2f      	ldr	r3, [pc, #188]	@ (8000740 <SystemInit+0x134>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000688:	4b2d      	ldr	r3, [pc, #180]	@ (8000740 <SystemInit+0x134>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800068e:	4b2c      	ldr	r3, [pc, #176]	@ (8000740 <SystemInit+0x134>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000694:	4b2a      	ldr	r3, [pc, #168]	@ (8000740 <SystemInit+0x134>)
 8000696:	4a2c      	ldr	r2, [pc, #176]	@ (8000748 <SystemInit+0x13c>)
 8000698:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800069a:	4b29      	ldr	r3, [pc, #164]	@ (8000740 <SystemInit+0x134>)
 800069c:	4a2b      	ldr	r2, [pc, #172]	@ (800074c <SystemInit+0x140>)
 800069e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80006a0:	4b27      	ldr	r3, [pc, #156]	@ (8000740 <SystemInit+0x134>)
 80006a2:	4a2b      	ldr	r2, [pc, #172]	@ (8000750 <SystemInit+0x144>)
 80006a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80006a6:	4b26      	ldr	r3, [pc, #152]	@ (8000740 <SystemInit+0x134>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006ac:	4b24      	ldr	r3, [pc, #144]	@ (8000740 <SystemInit+0x134>)
 80006ae:	4a28      	ldr	r2, [pc, #160]	@ (8000750 <SystemInit+0x144>)
 80006b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006b2:	4b23      	ldr	r3, [pc, #140]	@ (8000740 <SystemInit+0x134>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b8:	4b21      	ldr	r3, [pc, #132]	@ (8000740 <SystemInit+0x134>)
 80006ba:	4a25      	ldr	r2, [pc, #148]	@ (8000750 <SystemInit+0x144>)
 80006bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006be:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <SystemInit+0x134>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <SystemInit+0x134>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a1d      	ldr	r2, [pc, #116]	@ (8000740 <SystemInit+0x134>)
 80006ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <SystemInit+0x134>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000754 <SystemInit+0x148>)
 80006d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006da:	4a1e      	ldr	r2, [pc, #120]	@ (8000754 <SystemInit+0x148>)
 80006dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006e0:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000758 <SystemInit+0x14c>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <SystemInit+0x150>)
 80006e8:	4013      	ands	r3, r2
 80006ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006ee:	d202      	bcs.n	80006f6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000760 <SystemInit+0x154>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006f6:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <SystemInit+0x134>)
 80006f8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000700:	2b00      	cmp	r3, #0
 8000702:	d113      	bne.n	800072c <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000704:	4b0e      	ldr	r3, [pc, #56]	@ (8000740 <SystemInit+0x134>)
 8000706:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800070a:	4a0d      	ldr	r2, [pc, #52]	@ (8000740 <SystemInit+0x134>)
 800070c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000710:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000714:	4b13      	ldr	r3, [pc, #76]	@ (8000764 <SystemInit+0x158>)
 8000716:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800071a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 800071c:	4b08      	ldr	r3, [pc, #32]	@ (8000740 <SystemInit+0x134>)
 800071e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000722:	4a07      	ldr	r2, [pc, #28]	@ (8000740 <SystemInit+0x134>)
 8000724:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000728:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00
 800073c:	52002000 	.word	0x52002000
 8000740:	58024400 	.word	0x58024400
 8000744:	eaf6ed7f 	.word	0xeaf6ed7f
 8000748:	02020200 	.word	0x02020200
 800074c:	01ff0000 	.word	0x01ff0000
 8000750:	01010280 	.word	0x01010280
 8000754:	580000c0 	.word	0x580000c0
 8000758:	5c001000 	.word	0x5c001000
 800075c:	ffff0000 	.word	0xffff0000
 8000760:	51008108 	.word	0x51008108
 8000764:	52004000 	.word	0x52004000

08000768 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800076c:	4b09      	ldr	r3, [pc, #36]	@ (8000794 <ExitRun0Mode+0x2c>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	4a08      	ldr	r2, [pc, #32]	@ (8000794 <ExitRun0Mode+0x2c>)
 8000772:	f023 0302 	bic.w	r3, r3, #2
 8000776:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000778:	bf00      	nop
 800077a:	4b06      	ldr	r3, [pc, #24]	@ (8000794 <ExitRun0Mode+0x2c>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000782:	2b00      	cmp	r3, #0
 8000784:	d0f9      	beq.n	800077a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000786:	bf00      	nop
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	58024800 	.word	0x58024800

08000798 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800079e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007a2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007a4:	bf00      	nop
 80007a6:	4b3a      	ldr	r3, [pc, #232]	@ (8000890 <main+0xf8>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d004      	beq.n	80007bc <main+0x24>
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	1e5a      	subs	r2, r3, #1
 80007b6:	607a      	str	r2, [r7, #4]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	dcf4      	bgt.n	80007a6 <main+0xe>
  if ( timeout < 0 )
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	da01      	bge.n	80007c6 <main+0x2e>
  {
  Error_Handler();
 80007c2:	f000 fac3 	bl	8000d4c <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f000 fc17 	bl	8000ff8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ca:	f000 f87d 	bl	80008c8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007ce:	f000 f901 	bl	80009d4 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007d2:	4b2f      	ldr	r3, [pc, #188]	@ (8000890 <main+0xf8>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	4a2d      	ldr	r2, [pc, #180]	@ (8000890 <main+0xf8>)
 80007da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007e2:	4b2b      	ldr	r3, [pc, #172]	@ (8000890 <main+0xf8>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007f0:	2000      	movs	r0, #0
 80007f2:	f000 ff4d 	bl	8001690 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007f6:	2100      	movs	r1, #0
 80007f8:	2000      	movs	r0, #0
 80007fa:	f000 ff63 	bl	80016c4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000802:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000804:	bf00      	nop
 8000806:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <main+0xf8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800080e:	2b00      	cmp	r3, #0
 8000810:	d104      	bne.n	800081c <main+0x84>
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	1e5a      	subs	r2, r3, #1
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	2b00      	cmp	r3, #0
 800081a:	dcf4      	bgt.n	8000806 <main+0x6e>
if ( timeout < 0 )
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	da01      	bge.n	8000826 <main+0x8e>
{
Error_Handler();
 8000822:	f000 fa93 	bl	8000d4c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 f99d 	bl	8000b64 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800082a:	f000 f903 	bl	8000a34 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800082e:	f000 f94d 	bl	8000acc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000832:	f005 f80f 	bl	8005854 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of ledCmdQueue */
  ledCmdQueueHandle = osMessageQueueNew (8, 32, &ledCmdQueue_attributes);
 8000836:	4a17      	ldr	r2, [pc, #92]	@ (8000894 <main+0xfc>)
 8000838:	2120      	movs	r1, #32
 800083a:	2008      	movs	r0, #8
 800083c:	f005 f901 	bl	8005a42 <osMessageQueueNew>
 8000840:	4603      	mov	r3, r0
 8000842:	4a15      	ldr	r2, [pc, #84]	@ (8000898 <main+0x100>)
 8000844:	6013      	str	r3, [r2, #0]

  /* creation of uart1RxDMAQueue */
  uart1RxDMAQueueHandle = osMessageQueueNew (8, 128, &uart1RxDMAQueue_attributes);
 8000846:	4a15      	ldr	r2, [pc, #84]	@ (800089c <main+0x104>)
 8000848:	2180      	movs	r1, #128	@ 0x80
 800084a:	2008      	movs	r0, #8
 800084c:	f005 f8f9 	bl	8005a42 <osMessageQueueNew>
 8000850:	4603      	mov	r3, r0
 8000852:	4a13      	ldr	r2, [pc, #76]	@ (80008a0 <main+0x108>)
 8000854:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of workerTask */
  workerTaskHandle = osThreadNew(StartDefaultTask, NULL, &workerTask_attributes);
 8000856:	4a13      	ldr	r2, [pc, #76]	@ (80008a4 <main+0x10c>)
 8000858:	2100      	movs	r1, #0
 800085a:	4813      	ldr	r0, [pc, #76]	@ (80008a8 <main+0x110>)
 800085c:	f005 f844 	bl	80058e8 <osThreadNew>
 8000860:	4603      	mov	r3, r0
 8000862:	4a12      	ldr	r2, [pc, #72]	@ (80008ac <main+0x114>)
 8000864:	6013      	str	r3, [r2, #0]

  /* creation of ledTask */
  ledTaskHandle = osThreadNew(StarLEDTask, NULL, &ledTask_attributes);
 8000866:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <main+0x118>)
 8000868:	2100      	movs	r1, #0
 800086a:	4812      	ldr	r0, [pc, #72]	@ (80008b4 <main+0x11c>)
 800086c:	f005 f83c 	bl	80058e8 <osThreadNew>
 8000870:	4603      	mov	r3, r0
 8000872:	4a11      	ldr	r2, [pc, #68]	@ (80008b8 <main+0x120>)
 8000874:	6013      	str	r3, [r2, #0]

  /* creation of uart1Task */
  uart1TaskHandle = osThreadNew(StartUart1Task, NULL, &uart1Task_attributes);
 8000876:	4a11      	ldr	r2, [pc, #68]	@ (80008bc <main+0x124>)
 8000878:	2100      	movs	r1, #0
 800087a:	4811      	ldr	r0, [pc, #68]	@ (80008c0 <main+0x128>)
 800087c:	f005 f834 	bl	80058e8 <osThreadNew>
 8000880:	4603      	mov	r3, r0
 8000882:	4a10      	ldr	r2, [pc, #64]	@ (80008c4 <main+0x12c>)
 8000884:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000886:	f005 f809 	bl	800589c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800088a:	bf00      	nop
 800088c:	e7fd      	b.n	800088a <main+0xf2>
 800088e:	bf00      	nop
 8000890:	58024400 	.word	0x58024400
 8000894:	08008620 	.word	0x08008620
 8000898:	24000164 	.word	0x24000164
 800089c:	08008638 	.word	0x08008638
 80008a0:	24000168 	.word	0x24000168
 80008a4:	080085b4 	.word	0x080085b4
 80008a8:	08000cad 	.word	0x08000cad
 80008ac:	24000158 	.word	0x24000158
 80008b0:	080085d8 	.word	0x080085d8
 80008b4:	08000cbd 	.word	0x08000cbd
 80008b8:	2400015c 	.word	0x2400015c
 80008bc:	080085fc 	.word	0x080085fc
 80008c0:	08000d0d 	.word	0x08000d0d
 80008c4:	24000160 	.word	0x24000160

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b09c      	sub	sp, #112	@ 0x70
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d2:	224c      	movs	r2, #76	@ 0x4c
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f007 fdec 	bl	80084b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2220      	movs	r2, #32
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f007 fde6 	bl	80084b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008e8:	2004      	movs	r0, #4
 80008ea:	f000 feff 	bl	80016ec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008ee:	2300      	movs	r3, #0
 80008f0:	603b      	str	r3, [r7, #0]
 80008f2:	4b36      	ldr	r3, [pc, #216]	@ (80009cc <SystemClock_Config+0x104>)
 80008f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008f6:	4a35      	ldr	r2, [pc, #212]	@ (80009cc <SystemClock_Config+0x104>)
 80008f8:	f023 0301 	bic.w	r3, r3, #1
 80008fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008fe:	4b33      	ldr	r3, [pc, #204]	@ (80009cc <SystemClock_Config+0x104>)
 8000900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	4b31      	ldr	r3, [pc, #196]	@ (80009d0 <SystemClock_Config+0x108>)
 800090a:	699b      	ldr	r3, [r3, #24]
 800090c:	4a30      	ldr	r2, [pc, #192]	@ (80009d0 <SystemClock_Config+0x108>)
 800090e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000912:	6193      	str	r3, [r2, #24]
 8000914:	4b2e      	ldr	r3, [pc, #184]	@ (80009d0 <SystemClock_Config+0x108>)
 8000916:	699b      	ldr	r3, [r3, #24]
 8000918:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000920:	bf00      	nop
 8000922:	4b2b      	ldr	r3, [pc, #172]	@ (80009d0 <SystemClock_Config+0x108>)
 8000924:	699b      	ldr	r3, [r3, #24]
 8000926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800092a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800092e:	d1f8      	bne.n	8000922 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8000930:	230b      	movs	r3, #11
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000934:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000938:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800093a:	2301      	movs	r3, #1
 800093c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800093e:	2340      	movs	r3, #64	@ 0x40
 8000940:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000942:	2301      	movs	r3, #1
 8000944:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000946:	2302      	movs	r3, #2
 8000948:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800094a:	2302      	movs	r3, #2
 800094c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 800094e:	2305      	movs	r3, #5
 8000950:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 8000952:	2330      	movs	r3, #48	@ 0x30
 8000954:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000956:	2302      	movs	r3, #2
 8000958:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800095a:	2305      	movs	r3, #5
 800095c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800095e:	2302      	movs	r3, #2
 8000960:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000962:	2308      	movs	r3, #8
 8000964:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000966:	2300      	movs	r3, #0
 8000968:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000972:	4618      	mov	r0, r3
 8000974:	f000 ff14 	bl	80017a0 <HAL_RCC_OscConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800097e:	f000 f9e5 	bl	8000d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000982:	233f      	movs	r3, #63	@ 0x3f
 8000984:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 800099a:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800099e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009a4:	1d3b      	adds	r3, r7, #4
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f001 fb53 	bl	8002054 <HAL_RCC_ClockConfig>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 80009b4:	f000 f9ca 	bl	8000d4c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80009b8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80009bc:	2100      	movs	r1, #0
 80009be:	2000      	movs	r0, #0
 80009c0:	f001 fcfe 	bl	80023c0 <HAL_RCC_MCOConfig>
}
 80009c4:	bf00      	nop
 80009c6:	3770      	adds	r7, #112	@ 0x70
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	58000400 	.word	0x58000400
 80009d0:	58024800 	.word	0x58024800

080009d4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b0b2      	sub	sp, #200	@ 0xc8
 80009d8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009da:	463b      	mov	r3, r7
 80009dc:	22c8      	movs	r2, #200	@ 0xc8
 80009de:	2100      	movs	r1, #0
 80009e0:	4618      	mov	r0, r3
 80009e2:	f007 fd67 	bl	80084b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80009e6:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80009ea:	f04f 0300 	mov.w	r3, #0
 80009ee:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80009f6:	230c      	movs	r3, #12
 80009f8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80009fa:	2302      	movs	r3, #2
 80009fc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a02:	2302      	movs	r3, #2
 8000a04:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a06:	23c0      	movs	r3, #192	@ 0xc0
 8000a08:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a0a:	2320      	movs	r3, #32
 8000a0c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000a12:	2300      	movs	r3, #0
 8000a14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a18:	463b      	mov	r3, r7
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f001 ff10 	bl	8002840 <HAL_RCCEx_PeriphCLKConfig>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000a26:	f000 f991 	bl	8000d4c <Error_Handler>
  }
}
 8000a2a:	bf00      	nop
 8000a2c:	37c8      	adds	r7, #200	@ 0xc8
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
	...

08000a34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a38:	4b22      	ldr	r3, [pc, #136]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a3a:	4a23      	ldr	r2, [pc, #140]	@ (8000ac8 <MX_USART1_UART_Init+0x94>)
 8000a3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a46:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a52:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5e:	4b19      	ldr	r3, [pc, #100]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a64:	4b17      	ldr	r3, [pc, #92]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6a:	4b16      	ldr	r3, [pc, #88]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a70:	4b14      	ldr	r3, [pc, #80]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a76:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a7c:	4811      	ldr	r0, [pc, #68]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a7e:	f003 fd4b 	bl	8004518 <HAL_UART_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a88:	f000 f960 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	480d      	ldr	r0, [pc, #52]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000a90:	f004 fde1 	bl	8005656 <HAL_UARTEx_SetTxFifoThreshold>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a9a:	f000 f957 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	4808      	ldr	r0, [pc, #32]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000aa2:	f004 fe16 	bl	80056d2 <HAL_UARTEx_SetRxFifoThreshold>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000aac:	f000 f94e 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ab0:	4804      	ldr	r0, [pc, #16]	@ (8000ac4 <MX_USART1_UART_Init+0x90>)
 8000ab2:	f004 fd97 	bl	80055e4 <HAL_UARTEx_DisableFifoMode>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000abc:	f000 f946 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ac0:	bf00      	nop
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	24000030 	.word	0x24000030
 8000ac8:	40011000 	.word	0x40011000

08000acc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ad0:	4b22      	ldr	r3, [pc, #136]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000ad2:	4a23      	ldr	r2, [pc, #140]	@ (8000b60 <MX_USART2_UART_Init+0x94>)
 8000ad4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ad6:	4b21      	ldr	r3, [pc, #132]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000ad8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000adc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ade:	4b1f      	ldr	r3, [pc, #124]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ae4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aea:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000af2:	220c      	movs	r2, #12
 8000af4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000af6:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000afc:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b02:	4b16      	ldr	r3, [pc, #88]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b08:	4b14      	ldr	r3, [pc, #80]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b0e:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b14:	4811      	ldr	r0, [pc, #68]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000b16:	f003 fcff 	bl	8004518 <HAL_UART_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b20:	f000 f914 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b24:	2100      	movs	r1, #0
 8000b26:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000b28:	f004 fd95 	bl	8005656 <HAL_UARTEx_SetTxFifoThreshold>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b32:	f000 f90b 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b36:	2100      	movs	r1, #0
 8000b38:	4808      	ldr	r0, [pc, #32]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000b3a:	f004 fdca 	bl	80056d2 <HAL_UARTEx_SetRxFifoThreshold>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b44:	f000 f902 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b48:	4804      	ldr	r0, [pc, #16]	@ (8000b5c <MX_USART2_UART_Init+0x90>)
 8000b4a:	f004 fd4b 	bl	80055e4 <HAL_UARTEx_DisableFifoMode>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b54:	f000 f8fa 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	240000c4 	.word	0x240000c4
 8000b60:	40004400 	.word	0x40004400

08000b64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08c      	sub	sp, #48	@ 0x30
 8000b68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b7a:	4b48      	ldr	r3, [pc, #288]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b80:	4a46      	ldr	r2, [pc, #280]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000b82:	f043 0308 	orr.w	r3, r3, #8
 8000b86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b8a:	4b44      	ldr	r3, [pc, #272]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b90:	f003 0308 	and.w	r3, r3, #8
 8000b94:	61bb      	str	r3, [r7, #24]
 8000b96:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b98:	4b40      	ldr	r3, [pc, #256]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9e:	4a3f      	ldr	r2, [pc, #252]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba8:	4b3c      	ldr	r3, [pc, #240]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bae:	f003 0304 	and.w	r3, r3, #4
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	4b39      	ldr	r3, [pc, #228]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbc:	4a37      	ldr	r2, [pc, #220]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc6:	4b35      	ldr	r3, [pc, #212]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000bd4:	4b31      	ldr	r3, [pc, #196]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bda:	4a30      	ldr	r2, [pc, #192]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000bdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be4:	4b2d      	ldr	r3, [pc, #180]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf8:	4a28      	ldr	r2, [pc, #160]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000bfa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c02:	4b26      	ldr	r3, [pc, #152]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c10:	4b22      	ldr	r3, [pc, #136]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c16:	4a21      	ldr	r2, [pc, #132]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000c18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c20:	4b1e      	ldr	r3, [pc, #120]	@ (8000c9c <MX_GPIO_Init+0x138>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000c34:	481a      	ldr	r0, [pc, #104]	@ (8000ca0 <MX_GPIO_Init+0x13c>)
 8000c36:	f000 fd11 	bl	800165c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000c3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	2300      	movs	r3, #0
 8000c46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000c50:	f107 031c 	add.w	r3, r7, #28
 8000c54:	4619      	mov	r1, r3
 8000c56:	4813      	ldr	r0, [pc, #76]	@ (8000ca4 <MX_GPIO_Init+0x140>)
 8000c58:	f000 fb50 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000c5c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c62:	2301      	movs	r3, #1
 8000c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	480a      	ldr	r0, [pc, #40]	@ (8000ca0 <MX_GPIO_Init+0x13c>)
 8000c76:	f000 fb41 	bl	80012fc <HAL_GPIO_Init>

  /*Configure GPIO pin : JOY_SEL_Pin */
  GPIO_InitStruct.Pin = JOY_SEL_Pin;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(JOY_SEL_GPIO_Port, &GPIO_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4806      	ldr	r0, [pc, #24]	@ (8000ca8 <MX_GPIO_Init+0x144>)
 8000c8e:	f000 fb35 	bl	80012fc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c92:	bf00      	nop
 8000c94:	3730      	adds	r7, #48	@ 0x30
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	58024400 	.word	0x58024400
 8000ca0:	58022000 	.word	0x58022000
 8000ca4:	58020000 	.word	0x58020000
 8000ca8:	58022800 	.word	0x58022800

08000cac <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f004 fea9 	bl	8005a0c <osDelay>
 8000cba:	e7fb      	b.n	8000cb4 <StartDefaultTask+0x8>

08000cbc <StarLEDTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StarLEDTask */
void StarLEDTask(void *argument)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StarLEDTask */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cca:	480f      	ldr	r0, [pc, #60]	@ (8000d08 <StarLEDTask+0x4c>)
 8000ccc:	f000 fcc6 	bl	800165c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cd6:	480c      	ldr	r0, [pc, #48]	@ (8000d08 <StarLEDTask+0x4c>)
 8000cd8:	f000 fcc0 	bl	800165c <HAL_GPIO_WritePin>
	osDelay(1000);
 8000cdc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ce0:	f004 fe94 	bl	8005a0c <osDelay>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000cea:	4807      	ldr	r0, [pc, #28]	@ (8000d08 <StarLEDTask+0x4c>)
 8000cec:	f000 fcb6 	bl	800165c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cf6:	4804      	ldr	r0, [pc, #16]	@ (8000d08 <StarLEDTask+0x4c>)
 8000cf8:	f000 fcb0 	bl	800165c <HAL_GPIO_WritePin>
	osDelay(1000);
 8000cfc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d00:	f004 fe84 	bl	8005a0c <osDelay>
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000d04:	bf00      	nop
 8000d06:	e7dd      	b.n	8000cc4 <StarLEDTask+0x8>
 8000d08:	58022000 	.word	0x58022000

08000d0c <StartUart1Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUart1Task */
void StartUart1Task(void *argument)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUart1Task */
	HAL_StatusTypeDef status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	75fb      	strb	r3, [r7, #23]
	uint8_t msg[] = "\n\rHello A.U.G";
 8000d18:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <StartUart1Task+0x38>)
 8000d1a:	f107 0408 	add.w	r4, r7, #8
 8000d1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d20:	c407      	stmia	r4!, {r0, r1, r2}
 8000d22:	8023      	strh	r3, [r4, #0]

  /* Infinite loop */
  for(;;)
  {
	  //
	  status = HAL_UART_Transmit(&huart1, msg, sizeof(msg), 1000);
 8000d24:	f107 0108 	add.w	r1, r7, #8
 8000d28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2c:	220e      	movs	r2, #14
 8000d2e:	4806      	ldr	r0, [pc, #24]	@ (8000d48 <StartUart1Task+0x3c>)
 8000d30:	f003 fc42 	bl	80045b8 <HAL_UART_Transmit>
 8000d34:	4603      	mov	r3, r0
 8000d36:	75fb      	strb	r3, [r7, #23]
	  if(status != HAL_OK)
	  {
		  //Handle error here @todo
	  }

	  osDelay(1000);
 8000d38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d3c:	f004 fe66 	bl	8005a0c <osDelay>
	  status = HAL_UART_Transmit(&huart1, msg, sizeof(msg), 1000);
 8000d40:	e7f0      	b.n	8000d24 <StartUart1Task+0x18>
 8000d42:	bf00      	nop
 8000d44:	0800857c 	.word	0x0800857c
 8000d48:	24000030 	.word	0x24000030

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <Error_Handler+0x8>

08000d58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <HAL_MspInit+0x38>)
 8000d60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d64:	4a0a      	ldr	r2, [pc, #40]	@ (8000d90 <HAL_MspInit+0x38>)
 8000d66:	f043 0302 	orr.w	r3, r3, #2
 8000d6a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <HAL_MspInit+0x38>)
 8000d70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	607b      	str	r3, [r7, #4]
 8000d7a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	210f      	movs	r1, #15
 8000d80:	f06f 0001 	mvn.w	r0, #1
 8000d84:	f000 fa93 	bl	80012ae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	58024400 	.word	0x58024400

08000d94 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b0c0      	sub	sp, #256	@ 0x100
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000da0:	2200      	movs	r2, #0
 8000da2:	601a      	str	r2, [r3, #0]
 8000da4:	605a      	str	r2, [r3, #4]
 8000da6:	609a      	str	r2, [r3, #8]
 8000da8:	60da      	str	r2, [r3, #12]
 8000daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dac:	f107 0320 	add.w	r3, r7, #32
 8000db0:	22c8      	movs	r2, #200	@ 0xc8
 8000db2:	2100      	movs	r1, #0
 8000db4:	4618      	mov	r0, r3
 8000db6:	f007 fb7d 	bl	80084b4 <memset>
  if(huart->Instance==USART1)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4a5f      	ldr	r2, [pc, #380]	@ (8000f3c <HAL_UART_MspInit+0x1a8>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d147      	bne.n	8000e54 <HAL_UART_MspInit+0xc0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dc4:	f04f 0201 	mov.w	r2, #1
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dd6:	f107 0320 	add.w	r3, r7, #32
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 fd30 	bl	8002840 <HAL_RCCEx_PeriphCLKConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000de6:	f7ff ffb1 	bl	8000d4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dea:	4b55      	ldr	r3, [pc, #340]	@ (8000f40 <HAL_UART_MspInit+0x1ac>)
 8000dec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000df0:	4a53      	ldr	r2, [pc, #332]	@ (8000f40 <HAL_UART_MspInit+0x1ac>)
 8000df2:	f043 0310 	orr.w	r3, r3, #16
 8000df6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000dfa:	4b51      	ldr	r3, [pc, #324]	@ (8000f40 <HAL_UART_MspInit+0x1ac>)
 8000dfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	61fb      	str	r3, [r7, #28]
 8000e06:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	4b4d      	ldr	r3, [pc, #308]	@ (8000f40 <HAL_UART_MspInit+0x1ac>)
 8000e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0e:	4a4c      	ldr	r2, [pc, #304]	@ (8000f40 <HAL_UART_MspInit+0x1ac>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e18:	4b49      	ldr	r3, [pc, #292]	@ (8000f40 <HAL_UART_MspInit+0x1ac>)
 8000e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1e:	f003 0301 	and.w	r3, r3, #1
 8000e22:	61bb      	str	r3, [r7, #24]
 8000e24:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000e26:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e2a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e40:	2307      	movs	r3, #7
 8000e42:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	483d      	ldr	r0, [pc, #244]	@ (8000f44 <HAL_UART_MspInit+0x1b0>)
 8000e4e:	f000 fa55 	bl	80012fc <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e52:	e06e      	b.n	8000f32 <HAL_UART_MspInit+0x19e>
  else if(huart->Instance==USART2)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a3b      	ldr	r2, [pc, #236]	@ (8000f48 <HAL_UART_MspInit+0x1b4>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d169      	bne.n	8000f32 <HAL_UART_MspInit+0x19e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e5e:	f04f 0202 	mov.w	r2, #2
 8000e62:	f04f 0300 	mov.w	r3, #0
 8000e66:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e70:	f107 0320 	add.w	r3, r7, #32
 8000e74:	4618      	mov	r0, r3
 8000e76:	f001 fce3 	bl	8002840 <HAL_RCCEx_PeriphCLKConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8000e80:	f7ff ff64 	bl	8000d4c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e84:	4b2e      	ldr	r3, [pc, #184]	@ (8000f40 <HAL_UART_MspInit+0x1ac>)
 8000e86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e8a:	4a2d      	ldr	r2, [pc, #180]	@ (8000f40 <HAL_UART_MspInit+0x1ac>)
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e94:	4b2a      	ldr	r3, [pc, #168]	@ (8000f40 <HAL_UART_MspInit+0x1ac>)
 8000e96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ea2:	4b27      	ldr	r3, [pc, #156]	@ (8000f40 <HAL_UART_MspInit+0x1ac>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea8:	4a25      	ldr	r2, [pc, #148]	@ (8000f40 <HAL_UART_MspInit+0x1ac>)
 8000eaa:	f043 0308 	orr.w	r3, r3, #8
 8000eae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eb2:	4b23      	ldr	r3, [pc, #140]	@ (8000f40 <HAL_UART_MspInit+0x1ac>)
 8000eb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb8:	f003 0308 	and.w	r3, r3, #8
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f40 <HAL_UART_MspInit+0x1ac>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8000f40 <HAL_UART_MspInit+0x1ac>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ed0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f40 <HAL_UART_MspInit+0x1ac>)
 8000ed2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PMOD_2__USART2_TX_Pin|PMOD_4__USART2_RTS_Pin|PMOD_3__USART2_RX_Pin;
 8000ede:	2370      	movs	r3, #112	@ 0x70
 8000ee0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ef6:	2307      	movs	r3, #7
 8000ef8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000efc:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000f00:	4619      	mov	r1, r3
 8000f02:	4812      	ldr	r0, [pc, #72]	@ (8000f4c <HAL_UART_MspInit+0x1b8>)
 8000f04:	f000 f9fa 	bl	80012fc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = PMOD_1__USART2_CTS_NSS_Pin;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f20:	2307      	movs	r3, #7
 8000f22:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
    HAL_GPIO_Init(PMOD_1__USART2_CTS_NSS_GPIO_Port, &GPIO_InitStruct);
 8000f26:	f107 03ec 	add.w	r3, r7, #236	@ 0xec
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <HAL_UART_MspInit+0x1b0>)
 8000f2e:	f000 f9e5 	bl	80012fc <HAL_GPIO_Init>
}
 8000f32:	bf00      	nop
 8000f34:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	40011000 	.word	0x40011000
 8000f40:	58024400 	.word	0x58024400
 8000f44:	58020000 	.word	0x58020000
 8000f48:	40004400 	.word	0x40004400
 8000f4c:	58020c00 	.word	0x58020c00

08000f50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <NMI_Handler+0x4>

08000f58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5c:	bf00      	nop
 8000f5e:	e7fd      	b.n	8000f5c <HardFault_Handler+0x4>

08000f60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f64:	bf00      	nop
 8000f66:	e7fd      	b.n	8000f64 <MemManage_Handler+0x4>

08000f68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f8a:	f000 f8a7 	bl	80010dc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000f8e:	f006 fe55 	bl	8007c3c <xTaskGetSchedulerState>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d001      	beq.n	8000f9c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000f98:	f005 fa5e 	bl	8006458 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fa0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000fdc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000fa4:	f7ff fbe0 	bl	8000768 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fa8:	f7ff fb30 	bl	800060c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fac:	480c      	ldr	r0, [pc, #48]	@ (8000fe0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fae:	490d      	ldr	r1, [pc, #52]	@ (8000fe4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fe8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fb4:	e002      	b.n	8000fbc <LoopCopyDataInit>

08000fb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fba:	3304      	adds	r3, #4

08000fbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc0:	d3f9      	bcc.n	8000fb6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fc4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ff0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fc8:	e001      	b.n	8000fce <LoopFillZerobss>

08000fca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fcc:	3204      	adds	r2, #4

08000fce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd0:	d3fb      	bcc.n	8000fca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fd2:	f007 fa77 	bl	80084c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd6:	f7ff fbdf 	bl	8000798 <main>
  bx  lr
 8000fda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fdc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fe0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fe4:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000fe8:	08008688 	.word	0x08008688
  ldr r2, =_sbss
 8000fec:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8000ff0:	24004ac0 	.word	0x24004ac0

08000ff4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff4:	e7fe      	b.n	8000ff4 <ADC3_IRQHandler>
	...

08000ff8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ffe:	2003      	movs	r0, #3
 8001000:	f000 f94a 	bl	8001298 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001004:	f001 fa46 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8001008:	4602      	mov	r2, r0
 800100a:	4b15      	ldr	r3, [pc, #84]	@ (8001060 <HAL_Init+0x68>)
 800100c:	699b      	ldr	r3, [r3, #24]
 800100e:	0a1b      	lsrs	r3, r3, #8
 8001010:	f003 030f 	and.w	r3, r3, #15
 8001014:	4913      	ldr	r1, [pc, #76]	@ (8001064 <HAL_Init+0x6c>)
 8001016:	5ccb      	ldrb	r3, [r1, r3]
 8001018:	f003 031f 	and.w	r3, r3, #31
 800101c:	fa22 f303 	lsr.w	r3, r2, r3
 8001020:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001022:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <HAL_Init+0x68>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	f003 030f 	and.w	r3, r3, #15
 800102a:	4a0e      	ldr	r2, [pc, #56]	@ (8001064 <HAL_Init+0x6c>)
 800102c:	5cd3      	ldrb	r3, [r2, r3]
 800102e:	f003 031f 	and.w	r3, r3, #31
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	fa22 f303 	lsr.w	r3, r2, r3
 8001038:	4a0b      	ldr	r2, [pc, #44]	@ (8001068 <HAL_Init+0x70>)
 800103a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800103c:	4a0b      	ldr	r2, [pc, #44]	@ (800106c <HAL_Init+0x74>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001042:	200f      	movs	r0, #15
 8001044:	f000 f814 	bl	8001070 <HAL_InitTick>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e002      	b.n	8001058 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001052:	f7ff fe81 	bl	8000d58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	58024400 	.word	0x58024400
 8001064:	080085a4 	.word	0x080085a4
 8001068:	24000004 	.word	0x24000004
 800106c:	24000000 	.word	0x24000000

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001078:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <HAL_InitTick+0x60>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e021      	b.n	80010c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001084:	4b13      	ldr	r3, [pc, #76]	@ (80010d4 <HAL_InitTick+0x64>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <HAL_InitTick+0x60>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001092:	fbb3 f3f1 	udiv	r3, r3, r1
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	4618      	mov	r0, r3
 800109c:	f000 f921 	bl	80012e2 <HAL_SYSTICK_Config>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00e      	b.n	80010c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d80a      	bhi.n	80010c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f000 f8f9 	bl	80012ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010bc:	4a06      	ldr	r2, [pc, #24]	@ (80010d8 <HAL_InitTick+0x68>)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e000      	b.n	80010c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3708      	adds	r7, #8
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2400000c 	.word	0x2400000c
 80010d4:	24000000 	.word	0x24000000
 80010d8:	24000008 	.word	0x24000008

080010dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e0:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <HAL_IncTick+0x20>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	461a      	mov	r2, r3
 80010e6:	4b06      	ldr	r3, [pc, #24]	@ (8001100 <HAL_IncTick+0x24>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	4a04      	ldr	r2, [pc, #16]	@ (8001100 <HAL_IncTick+0x24>)
 80010ee:	6013      	str	r3, [r2, #0]
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	2400000c 	.word	0x2400000c
 8001100:	2400016c 	.word	0x2400016c

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b03      	ldr	r3, [pc, #12]	@ (8001118 <HAL_GetTick+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	4618      	mov	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	2400016c 	.word	0x2400016c

0800111c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001120:	4b03      	ldr	r3, [pc, #12]	@ (8001130 <HAL_GetREVID+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	0c1b      	lsrs	r3, r3, #16
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr
 8001130:	5c001000 	.word	0x5c001000

08001134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <__NVIC_SetPriorityGrouping+0x40>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 800115e:	4313      	orrs	r3, r2
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	@ (8001174 <__NVIC_SetPriorityGrouping+0x40>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00
 8001178:	05fa0000 	.word	0x05fa0000

0800117c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	@ (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db0a      	blt.n	80011c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	490c      	ldr	r1, [pc, #48]	@ (80011e4 <__NVIC_SetPriority+0x4c>)
 80011b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b6:	0112      	lsls	r2, r2, #4
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	440b      	add	r3, r1
 80011bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c0:	e00a      	b.n	80011d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4908      	ldr	r1, [pc, #32]	@ (80011e8 <__NVIC_SetPriority+0x50>)
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	3b04      	subs	r3, #4
 80011d0:	0112      	lsls	r2, r2, #4
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	440b      	add	r3, r1
 80011d6:	761a      	strb	r2, [r3, #24]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000e100 	.word	0xe000e100
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	@ 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f1c3 0307 	rsb	r3, r3, #7
 8001206:	2b04      	cmp	r3, #4
 8001208:	bf28      	it	cs
 800120a:	2304      	movcs	r3, #4
 800120c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3304      	adds	r3, #4
 8001212:	2b06      	cmp	r3, #6
 8001214:	d902      	bls.n	800121c <NVIC_EncodePriority+0x30>
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3b03      	subs	r3, #3
 800121a:	e000      	b.n	800121e <NVIC_EncodePriority+0x32>
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43da      	mvns	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	401a      	ands	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43d9      	mvns	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	4313      	orrs	r3, r2
         );
}
 8001246:	4618      	mov	r0, r3
 8001248:	3724      	adds	r7, #36	@ 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001264:	d301      	bcc.n	800126a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001266:	2301      	movs	r3, #1
 8001268:	e00f      	b.n	800128a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126a:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <SysTick_Config+0x40>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001272:	210f      	movs	r1, #15
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f7ff ff8e 	bl	8001198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800127c:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <SysTick_Config+0x40>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001282:	4b04      	ldr	r3, [pc, #16]	@ (8001294 <SysTick_Config+0x40>)
 8001284:	2207      	movs	r2, #7
 8001286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	e000e010 	.word	0xe000e010

08001298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff47 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012bc:	f7ff ff5e 	bl	800117c <__NVIC_GetPriorityGrouping>
 80012c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7ff ff90 	bl	80011ec <NVIC_EncodePriority>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff5f 	bl	8001198 <__NVIC_SetPriority>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ffb2 	bl	8001254 <SysTick_Config>
 80012f0:	4603      	mov	r3, r0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
	...

080012fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b089      	sub	sp, #36	@ 0x24
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800130a:	4b89      	ldr	r3, [pc, #548]	@ (8001530 <HAL_GPIO_Init+0x234>)
 800130c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800130e:	e194      	b.n	800163a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2101      	movs	r1, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	2b00      	cmp	r3, #0
 8001324:	f000 8186 	beq.w	8001634 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b01      	cmp	r3, #1
 8001332:	d005      	beq.n	8001340 <HAL_GPIO_Init+0x44>
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d130      	bne.n	80013a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	68da      	ldr	r2, [r3, #12]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001376:	2201      	movs	r2, #1
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	091b      	lsrs	r3, r3, #4
 800138c:	f003 0201 	and.w	r2, r3, #1
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	69ba      	ldr	r2, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b03      	cmp	r3, #3
 80013ac:	d017      	beq.n	80013de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	2203      	movs	r2, #3
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43db      	mvns	r3, r3
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	4013      	ands	r3, r2
 80013c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	689a      	ldr	r2, [r3, #8]
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 0303 	and.w	r3, r3, #3
 80013e6:	2b02      	cmp	r3, #2
 80013e8:	d123      	bne.n	8001432 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	08da      	lsrs	r2, r3, #3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	3208      	adds	r2, #8
 80013f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	220f      	movs	r2, #15
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	691a      	ldr	r2, [r3, #16]
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	08da      	lsrs	r2, r3, #3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	3208      	adds	r2, #8
 800142c:	69b9      	ldr	r1, [r7, #24]
 800142e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	2203      	movs	r2, #3
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0203 	and.w	r2, r3, #3
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 80e0 	beq.w	8001634 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001474:	4b2f      	ldr	r3, [pc, #188]	@ (8001534 <HAL_GPIO_Init+0x238>)
 8001476:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800147a:	4a2e      	ldr	r2, [pc, #184]	@ (8001534 <HAL_GPIO_Init+0x238>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001484:	4b2b      	ldr	r3, [pc, #172]	@ (8001534 <HAL_GPIO_Init+0x238>)
 8001486:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001492:	4a29      	ldr	r2, [pc, #164]	@ (8001538 <HAL_GPIO_Init+0x23c>)
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	3302      	adds	r3, #2
 800149a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800149e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f003 0303 	and.w	r3, r3, #3
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	220f      	movs	r2, #15
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	69ba      	ldr	r2, [r7, #24]
 80014b2:	4013      	ands	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a20      	ldr	r2, [pc, #128]	@ (800153c <HAL_GPIO_Init+0x240>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d052      	beq.n	8001564 <HAL_GPIO_Init+0x268>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001540 <HAL_GPIO_Init+0x244>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d031      	beq.n	800152a <HAL_GPIO_Init+0x22e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001544 <HAL_GPIO_Init+0x248>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d02b      	beq.n	8001526 <HAL_GPIO_Init+0x22a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001548 <HAL_GPIO_Init+0x24c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d025      	beq.n	8001522 <HAL_GPIO_Init+0x226>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a1c      	ldr	r2, [pc, #112]	@ (800154c <HAL_GPIO_Init+0x250>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d01f      	beq.n	800151e <HAL_GPIO_Init+0x222>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001550 <HAL_GPIO_Init+0x254>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d019      	beq.n	800151a <HAL_GPIO_Init+0x21e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a1a      	ldr	r2, [pc, #104]	@ (8001554 <HAL_GPIO_Init+0x258>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d013      	beq.n	8001516 <HAL_GPIO_Init+0x21a>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a19      	ldr	r2, [pc, #100]	@ (8001558 <HAL_GPIO_Init+0x25c>)
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d00d      	beq.n	8001512 <HAL_GPIO_Init+0x216>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	4a18      	ldr	r2, [pc, #96]	@ (800155c <HAL_GPIO_Init+0x260>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d007      	beq.n	800150e <HAL_GPIO_Init+0x212>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4a17      	ldr	r2, [pc, #92]	@ (8001560 <HAL_GPIO_Init+0x264>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d101      	bne.n	800150a <HAL_GPIO_Init+0x20e>
 8001506:	2309      	movs	r3, #9
 8001508:	e02d      	b.n	8001566 <HAL_GPIO_Init+0x26a>
 800150a:	230a      	movs	r3, #10
 800150c:	e02b      	b.n	8001566 <HAL_GPIO_Init+0x26a>
 800150e:	2308      	movs	r3, #8
 8001510:	e029      	b.n	8001566 <HAL_GPIO_Init+0x26a>
 8001512:	2307      	movs	r3, #7
 8001514:	e027      	b.n	8001566 <HAL_GPIO_Init+0x26a>
 8001516:	2306      	movs	r3, #6
 8001518:	e025      	b.n	8001566 <HAL_GPIO_Init+0x26a>
 800151a:	2305      	movs	r3, #5
 800151c:	e023      	b.n	8001566 <HAL_GPIO_Init+0x26a>
 800151e:	2304      	movs	r3, #4
 8001520:	e021      	b.n	8001566 <HAL_GPIO_Init+0x26a>
 8001522:	2303      	movs	r3, #3
 8001524:	e01f      	b.n	8001566 <HAL_GPIO_Init+0x26a>
 8001526:	2302      	movs	r3, #2
 8001528:	e01d      	b.n	8001566 <HAL_GPIO_Init+0x26a>
 800152a:	2301      	movs	r3, #1
 800152c:	e01b      	b.n	8001566 <HAL_GPIO_Init+0x26a>
 800152e:	bf00      	nop
 8001530:	58000080 	.word	0x58000080
 8001534:	58024400 	.word	0x58024400
 8001538:	58000400 	.word	0x58000400
 800153c:	58020000 	.word	0x58020000
 8001540:	58020400 	.word	0x58020400
 8001544:	58020800 	.word	0x58020800
 8001548:	58020c00 	.word	0x58020c00
 800154c:	58021000 	.word	0x58021000
 8001550:	58021400 	.word	0x58021400
 8001554:	58021800 	.word	0x58021800
 8001558:	58021c00 	.word	0x58021c00
 800155c:	58022000 	.word	0x58022000
 8001560:	58022400 	.word	0x58022400
 8001564:	2300      	movs	r3, #0
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	f002 0203 	and.w	r2, r2, #3
 800156c:	0092      	lsls	r2, r2, #2
 800156e:	4093      	lsls	r3, r2
 8001570:	69ba      	ldr	r2, [r7, #24]
 8001572:	4313      	orrs	r3, r2
 8001574:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001576:	4938      	ldr	r1, [pc, #224]	@ (8001658 <HAL_GPIO_Init+0x35c>)
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	3302      	adds	r3, #2
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80015aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015ae:	69bb      	ldr	r3, [r7, #24]
 80015b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80015b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80015d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	4313      	orrs	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	3301      	adds	r3, #1
 8001638:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	fa22 f303 	lsr.w	r3, r2, r3
 8001644:	2b00      	cmp	r3, #0
 8001646:	f47f ae63 	bne.w	8001310 <HAL_GPIO_Init+0x14>
  }
}
 800164a:	bf00      	nop
 800164c:	bf00      	nop
 800164e:	3724      	adds	r7, #36	@ 0x24
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	58000400 	.word	0x58000400

0800165c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
 8001664:	460b      	mov	r3, r1
 8001666:	807b      	strh	r3, [r7, #2]
 8001668:	4613      	mov	r3, r2
 800166a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800166c:	787b      	ldrb	r3, [r7, #1]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001672:	887a      	ldrh	r2, [r7, #2]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001678:	e003      	b.n	8001682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800167a:	887b      	ldrh	r3, [r7, #2]
 800167c:	041a      	lsls	r2, r3, #16
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	619a      	str	r2, [r3, #24]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001698:	4a08      	ldr	r2, [pc, #32]	@ (80016bc <HAL_HSEM_FastTake+0x2c>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3320      	adds	r3, #32
 800169e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a2:	4a07      	ldr	r2, [pc, #28]	@ (80016c0 <HAL_HSEM_FastTake+0x30>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d101      	bne.n	80016ac <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80016a8:	2300      	movs	r3, #0
 80016aa:	e000      	b.n	80016ae <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	58026400 	.word	0x58026400
 80016c0:	80000300 	.word	0x80000300

080016c4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80016ce:	4906      	ldr	r1, [pc, #24]	@ (80016e8 <HAL_HSEM_Release+0x24>)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	58026400 	.word	0x58026400

080016ec <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80016f4:	4b29      	ldr	r3, [pc, #164]	@ (800179c <HAL_PWREx_ConfigSupply+0xb0>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	f003 0307 	and.w	r3, r3, #7
 80016fc:	2b06      	cmp	r3, #6
 80016fe:	d00a      	beq.n	8001716 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001700:	4b26      	ldr	r3, [pc, #152]	@ (800179c <HAL_PWREx_ConfigSupply+0xb0>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	429a      	cmp	r2, r3
 800170c:	d001      	beq.n	8001712 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e040      	b.n	8001794 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	e03e      	b.n	8001794 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001716:	4b21      	ldr	r3, [pc, #132]	@ (800179c <HAL_PWREx_ConfigSupply+0xb0>)
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800171e:	491f      	ldr	r1, [pc, #124]	@ (800179c <HAL_PWREx_ConfigSupply+0xb0>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4313      	orrs	r3, r2
 8001724:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001726:	f7ff fced 	bl	8001104 <HAL_GetTick>
 800172a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800172c:	e009      	b.n	8001742 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800172e:	f7ff fce9 	bl	8001104 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800173c:	d901      	bls.n	8001742 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e028      	b.n	8001794 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001742:	4b16      	ldr	r3, [pc, #88]	@ (800179c <HAL_PWREx_ConfigSupply+0xb0>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800174a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800174e:	d1ee      	bne.n	800172e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b1e      	cmp	r3, #30
 8001754:	d008      	beq.n	8001768 <HAL_PWREx_ConfigSupply+0x7c>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b2e      	cmp	r3, #46	@ 0x2e
 800175a:	d005      	beq.n	8001768 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b1d      	cmp	r3, #29
 8001760:	d002      	beq.n	8001768 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b2d      	cmp	r3, #45	@ 0x2d
 8001766:	d114      	bne.n	8001792 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001768:	f7ff fccc 	bl	8001104 <HAL_GetTick>
 800176c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800176e:	e009      	b.n	8001784 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001770:	f7ff fcc8 	bl	8001104 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800177e:	d901      	bls.n	8001784 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e007      	b.n	8001794 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001784:	4b05      	ldr	r3, [pc, #20]	@ (800179c <HAL_PWREx_ConfigSupply+0xb0>)
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800178c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001790:	d1ee      	bne.n	8001770 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	58024800 	.word	0x58024800

080017a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08c      	sub	sp, #48	@ 0x30
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d102      	bne.n	80017b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	f000 bc48 	b.w	8002044 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	f000 8088 	beq.w	80018d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c2:	4b99      	ldr	r3, [pc, #612]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017cc:	4b96      	ldr	r3, [pc, #600]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 80017ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80017d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017d4:	2b10      	cmp	r3, #16
 80017d6:	d007      	beq.n	80017e8 <HAL_RCC_OscConfig+0x48>
 80017d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017da:	2b18      	cmp	r3, #24
 80017dc:	d111      	bne.n	8001802 <HAL_RCC_OscConfig+0x62>
 80017de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d10c      	bne.n	8001802 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e8:	4b8f      	ldr	r3, [pc, #572]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d06d      	beq.n	80018d0 <HAL_RCC_OscConfig+0x130>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d169      	bne.n	80018d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	f000 bc21 	b.w	8002044 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800180a:	d106      	bne.n	800181a <HAL_RCC_OscConfig+0x7a>
 800180c:	4b86      	ldr	r3, [pc, #536]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a85      	ldr	r2, [pc, #532]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001812:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	e02e      	b.n	8001878 <HAL_RCC_OscConfig+0xd8>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d10c      	bne.n	800183c <HAL_RCC_OscConfig+0x9c>
 8001822:	4b81      	ldr	r3, [pc, #516]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a80      	ldr	r2, [pc, #512]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	4b7e      	ldr	r3, [pc, #504]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a7d      	ldr	r2, [pc, #500]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001834:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001838:	6013      	str	r3, [r2, #0]
 800183a:	e01d      	b.n	8001878 <HAL_RCC_OscConfig+0xd8>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001844:	d10c      	bne.n	8001860 <HAL_RCC_OscConfig+0xc0>
 8001846:	4b78      	ldr	r3, [pc, #480]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a77      	ldr	r2, [pc, #476]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 800184c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b75      	ldr	r3, [pc, #468]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a74      	ldr	r2, [pc, #464]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e00b      	b.n	8001878 <HAL_RCC_OscConfig+0xd8>
 8001860:	4b71      	ldr	r3, [pc, #452]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a70      	ldr	r2, [pc, #448]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800186a:	6013      	str	r3, [r2, #0]
 800186c:	4b6e      	ldr	r3, [pc, #440]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a6d      	ldr	r2, [pc, #436]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d013      	beq.n	80018a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff fc40 	bl	8001104 <HAL_GetTick>
 8001884:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff fc3c 	bl	8001104 <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	@ 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e3d4      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800189a:	4b63      	ldr	r3, [pc, #396]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f0      	beq.n	8001888 <HAL_RCC_OscConfig+0xe8>
 80018a6:	e014      	b.n	80018d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a8:	f7ff fc2c 	bl	8001104 <HAL_GetTick>
 80018ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b0:	f7ff fc28 	bl	8001104 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	@ 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e3c0      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80018c2:	4b59      	ldr	r3, [pc, #356]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x110>
 80018ce:	e000      	b.n	80018d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 80ca 	beq.w	8001a74 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e0:	4b51      	ldr	r3, [pc, #324]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018ea:	4b4f      	ldr	r3, [pc, #316]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 80018ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018f0:	6a3b      	ldr	r3, [r7, #32]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d007      	beq.n	8001906 <HAL_RCC_OscConfig+0x166>
 80018f6:	6a3b      	ldr	r3, [r7, #32]
 80018f8:	2b18      	cmp	r3, #24
 80018fa:	d156      	bne.n	80019aa <HAL_RCC_OscConfig+0x20a>
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d151      	bne.n	80019aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001906:	4b48      	ldr	r3, [pc, #288]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0304 	and.w	r3, r3, #4
 800190e:	2b00      	cmp	r3, #0
 8001910:	d005      	beq.n	800191e <HAL_RCC_OscConfig+0x17e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d101      	bne.n	800191e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e392      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800191e:	4b42      	ldr	r3, [pc, #264]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 0219 	bic.w	r2, r3, #25
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	68db      	ldr	r3, [r3, #12]
 800192a:	493f      	ldr	r1, [pc, #252]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 800192c:	4313      	orrs	r3, r2
 800192e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001930:	f7ff fbe8 	bl	8001104 <HAL_GetTick>
 8001934:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001938:	f7ff fbe4 	bl	8001104 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e37c      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800194a:	4b37      	ldr	r3, [pc, #220]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0304 	and.w	r3, r3, #4
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001956:	f7ff fbe1 	bl	800111c <HAL_GetREVID>
 800195a:	4603      	mov	r3, r0
 800195c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001960:	4293      	cmp	r3, r2
 8001962:	d817      	bhi.n	8001994 <HAL_RCC_OscConfig+0x1f4>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	2b40      	cmp	r3, #64	@ 0x40
 800196a:	d108      	bne.n	800197e <HAL_RCC_OscConfig+0x1de>
 800196c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001974:	4a2c      	ldr	r2, [pc, #176]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001976:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800197a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800197c:	e07a      	b.n	8001a74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800197e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	031b      	lsls	r3, r3, #12
 800198c:	4926      	ldr	r1, [pc, #152]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 800198e:	4313      	orrs	r3, r2
 8001990:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001992:	e06f      	b.n	8001a74 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001994:	4b24      	ldr	r3, [pc, #144]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	061b      	lsls	r3, r3, #24
 80019a2:	4921      	ldr	r1, [pc, #132]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019a8:	e064      	b.n	8001a74 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d047      	beq.n	8001a42 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80019b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f023 0219 	bic.w	r2, r3, #25
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	491a      	ldr	r1, [pc, #104]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fb9e 	bl	8001104 <HAL_GetTick>
 80019c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019cc:	f7ff fb9a 	bl	8001104 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e332      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019de:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d0f0      	beq.n	80019cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ea:	f7ff fb97 	bl	800111c <HAL_GetREVID>
 80019ee:	4603      	mov	r3, r0
 80019f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d819      	bhi.n	8001a2c <HAL_RCC_OscConfig+0x28c>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	691b      	ldr	r3, [r3, #16]
 80019fc:	2b40      	cmp	r3, #64	@ 0x40
 80019fe:	d108      	bne.n	8001a12 <HAL_RCC_OscConfig+0x272>
 8001a00:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001a08:	4a07      	ldr	r2, [pc, #28]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001a0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a0e:	6053      	str	r3, [r2, #4]
 8001a10:	e030      	b.n	8001a74 <HAL_RCC_OscConfig+0x2d4>
 8001a12:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	691b      	ldr	r3, [r3, #16]
 8001a1e:	031b      	lsls	r3, r3, #12
 8001a20:	4901      	ldr	r1, [pc, #4]	@ (8001a28 <HAL_RCC_OscConfig+0x288>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]
 8001a26:	e025      	b.n	8001a74 <HAL_RCC_OscConfig+0x2d4>
 8001a28:	58024400 	.word	0x58024400
 8001a2c:	4b9a      	ldr	r3, [pc, #616]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	691b      	ldr	r3, [r3, #16]
 8001a38:	061b      	lsls	r3, r3, #24
 8001a3a:	4997      	ldr	r1, [pc, #604]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	604b      	str	r3, [r1, #4]
 8001a40:	e018      	b.n	8001a74 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a42:	4b95      	ldr	r3, [pc, #596]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a94      	ldr	r2, [pc, #592]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fb59 	bl	8001104 <HAL_GetTick>
 8001a52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a56:	f7ff fb55 	bl	8001104 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e2ed      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a68:	4b8b      	ldr	r3, [pc, #556]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1f0      	bne.n	8001a56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0310 	and.w	r3, r3, #16
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 80a9 	beq.w	8001bd4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a82:	4b85      	ldr	r3, [pc, #532]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a84:	691b      	ldr	r3, [r3, #16]
 8001a86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a8a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a8c:	4b82      	ldr	r3, [pc, #520]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a90:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d007      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x308>
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	2b18      	cmp	r3, #24
 8001a9c:	d13a      	bne.n	8001b14 <HAL_RCC_OscConfig+0x374>
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f003 0303 	and.w	r3, r3, #3
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d135      	bne.n	8001b14 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001aa8:	4b7b      	ldr	r3, [pc, #492]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x320>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69db      	ldr	r3, [r3, #28]
 8001ab8:	2b80      	cmp	r3, #128	@ 0x80
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e2c1      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ac0:	f7ff fb2c 	bl	800111c <HAL_GetREVID>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d817      	bhi.n	8001afe <HAL_RCC_OscConfig+0x35e>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	2b20      	cmp	r3, #32
 8001ad4:	d108      	bne.n	8001ae8 <HAL_RCC_OscConfig+0x348>
 8001ad6:	4b70      	ldr	r3, [pc, #448]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001ade:	4a6e      	ldr	r2, [pc, #440]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001ae0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ae4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ae6:	e075      	b.n	8001bd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ae8:	4b6b      	ldr	r3, [pc, #428]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	069b      	lsls	r3, r3, #26
 8001af6:	4968      	ldr	r1, [pc, #416]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001afc:	e06a      	b.n	8001bd4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001afe:	4b66      	ldr	r3, [pc, #408]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	061b      	lsls	r3, r3, #24
 8001b0c:	4962      	ldr	r1, [pc, #392]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b12:	e05f      	b.n	8001bd4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d042      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b1c:	4b5e      	ldr	r3, [pc, #376]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a5d      	ldr	r2, [pc, #372]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b28:	f7ff faec 	bl	8001104 <HAL_GetTick>
 8001b2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b30:	f7ff fae8 	bl	8001104 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e280      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b42:	4b55      	ldr	r3, [pc, #340]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0f0      	beq.n	8001b30 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b4e:	f7ff fae5 	bl	800111c <HAL_GetREVID>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d817      	bhi.n	8001b8c <HAL_RCC_OscConfig+0x3ec>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	2b20      	cmp	r3, #32
 8001b62:	d108      	bne.n	8001b76 <HAL_RCC_OscConfig+0x3d6>
 8001b64:	4b4c      	ldr	r3, [pc, #304]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001b6c:	4a4a      	ldr	r2, [pc, #296]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001b72:	6053      	str	r3, [r2, #4]
 8001b74:	e02e      	b.n	8001bd4 <HAL_RCC_OscConfig+0x434>
 8001b76:	4b48      	ldr	r3, [pc, #288]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
 8001b82:	069b      	lsls	r3, r3, #26
 8001b84:	4944      	ldr	r1, [pc, #272]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	604b      	str	r3, [r1, #4]
 8001b8a:	e023      	b.n	8001bd4 <HAL_RCC_OscConfig+0x434>
 8001b8c:	4b42      	ldr	r3, [pc, #264]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	061b      	lsls	r3, r3, #24
 8001b9a:	493f      	ldr	r1, [pc, #252]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60cb      	str	r3, [r1, #12]
 8001ba0:	e018      	b.n	8001bd4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001ba2:	4b3d      	ldr	r3, [pc, #244]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a3c      	ldr	r2, [pc, #240]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001ba8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001bac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bae:	f7ff faa9 	bl	8001104 <HAL_GetTick>
 8001bb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001bb6:	f7ff faa5 	bl	8001104 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e23d      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001bc8:	4b33      	ldr	r3, [pc, #204]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f0      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d036      	beq.n	8001c4e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d019      	beq.n	8001c1c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001be8:	4b2b      	ldr	r3, [pc, #172]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001bea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001bec:	4a2a      	ldr	r2, [pc, #168]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff fa86 	bl	8001104 <HAL_GetTick>
 8001bf8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bfa:	e008      	b.n	8001c0e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bfc:	f7ff fa82 	bl	8001104 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e21a      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c0e:	4b22      	ldr	r3, [pc, #136]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001c10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0f0      	beq.n	8001bfc <HAL_RCC_OscConfig+0x45c>
 8001c1a:	e018      	b.n	8001c4e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001c1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c20:	4a1d      	ldr	r2, [pc, #116]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001c22:	f023 0301 	bic.w	r3, r3, #1
 8001c26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c28:	f7ff fa6c 	bl	8001104 <HAL_GetTick>
 8001c2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c2e:	e008      	b.n	8001c42 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c30:	f7ff fa68 	bl	8001104 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e200      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c42:	4b15      	ldr	r3, [pc, #84]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f0      	bne.n	8001c30 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d039      	beq.n	8001cce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d01c      	beq.n	8001c9c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c62:	4b0d      	ldr	r3, [pc, #52]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a0c      	ldr	r2, [pc, #48]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001c68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c6e:	f7ff fa49 	bl	8001104 <HAL_GetTick>
 8001c72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c76:	f7ff fa45 	bl	8001104 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e1dd      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c88:	4b03      	ldr	r3, [pc, #12]	@ (8001c98 <HAL_RCC_OscConfig+0x4f8>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x4d6>
 8001c94:	e01b      	b.n	8001cce <HAL_RCC_OscConfig+0x52e>
 8001c96:	bf00      	nop
 8001c98:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c9c:	4b9b      	ldr	r3, [pc, #620]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a9a      	ldr	r2, [pc, #616]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ca2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001ca6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ca8:	f7ff fa2c 	bl	8001104 <HAL_GetTick>
 8001cac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cb0:	f7ff fa28 	bl	8001104 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1c0      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001cc2:	4b92      	ldr	r3, [pc, #584]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 8081 	beq.w	8001dde <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001cdc:	4b8c      	ldr	r3, [pc, #560]	@ (8001f10 <HAL_RCC_OscConfig+0x770>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a8b      	ldr	r2, [pc, #556]	@ (8001f10 <HAL_RCC_OscConfig+0x770>)
 8001ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ce8:	f7ff fa0c 	bl	8001104 <HAL_GetTick>
 8001cec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cf0:	f7ff fa08 	bl	8001104 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b64      	cmp	r3, #100	@ 0x64
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e1a0      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d02:	4b83      	ldr	r3, [pc, #524]	@ (8001f10 <HAL_RCC_OscConfig+0x770>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d106      	bne.n	8001d24 <HAL_RCC_OscConfig+0x584>
 8001d16:	4b7d      	ldr	r3, [pc, #500]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d1a:	4a7c      	ldr	r2, [pc, #496]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d22:	e02d      	b.n	8001d80 <HAL_RCC_OscConfig+0x5e0>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d10c      	bne.n	8001d46 <HAL_RCC_OscConfig+0x5a6>
 8001d2c:	4b77      	ldr	r3, [pc, #476]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d30:	4a76      	ldr	r2, [pc, #472]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d38:	4b74      	ldr	r3, [pc, #464]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3c:	4a73      	ldr	r2, [pc, #460]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d3e:	f023 0304 	bic.w	r3, r3, #4
 8001d42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d44:	e01c      	b.n	8001d80 <HAL_RCC_OscConfig+0x5e0>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	2b05      	cmp	r3, #5
 8001d4c:	d10c      	bne.n	8001d68 <HAL_RCC_OscConfig+0x5c8>
 8001d4e:	4b6f      	ldr	r3, [pc, #444]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d52:	4a6e      	ldr	r2, [pc, #440]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d5a:	4b6c      	ldr	r3, [pc, #432]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d5e:	4a6b      	ldr	r2, [pc, #428]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d66:	e00b      	b.n	8001d80 <HAL_RCC_OscConfig+0x5e0>
 8001d68:	4b68      	ldr	r3, [pc, #416]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6c:	4a67      	ldr	r2, [pc, #412]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d6e:	f023 0301 	bic.w	r3, r3, #1
 8001d72:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d74:	4b65      	ldr	r3, [pc, #404]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d78:	4a64      	ldr	r2, [pc, #400]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001d7a:	f023 0304 	bic.w	r3, r3, #4
 8001d7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d015      	beq.n	8001db4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d88:	f7ff f9bc 	bl	8001104 <HAL_GetTick>
 8001d8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d8e:	e00a      	b.n	8001da6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d90:	f7ff f9b8 	bl	8001104 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e14e      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001da6:	4b59      	ldr	r3, [pc, #356]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d0ee      	beq.n	8001d90 <HAL_RCC_OscConfig+0x5f0>
 8001db2:	e014      	b.n	8001dde <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db4:	f7ff f9a6 	bl	8001104 <HAL_GetTick>
 8001db8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dba:	e00a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dbc:	f7ff f9a2 	bl	8001104 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e138      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001dd2:	4b4e      	ldr	r3, [pc, #312]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1ee      	bne.n	8001dbc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f000 812d 	beq.w	8002042 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001de8:	4b48      	ldr	r3, [pc, #288]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001df0:	2b18      	cmp	r3, #24
 8001df2:	f000 80bd 	beq.w	8001f70 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	f040 809e 	bne.w	8001f3c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e00:	4b42      	ldr	r3, [pc, #264]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a41      	ldr	r2, [pc, #260]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001e06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff f97a 	bl	8001104 <HAL_GetTick>
 8001e10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e14:	f7ff f976 	bl	8001104 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e10e      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e26:	4b39      	ldr	r3, [pc, #228]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e32:	4b36      	ldr	r3, [pc, #216]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001e34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e36:	4b37      	ldr	r3, [pc, #220]	@ (8001f14 <HAL_RCC_OscConfig+0x774>)
 8001e38:	4013      	ands	r3, r2
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001e42:	0112      	lsls	r2, r2, #4
 8001e44:	430a      	orrs	r2, r1
 8001e46:	4931      	ldr	r1, [pc, #196]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e50:	3b01      	subs	r3, #1
 8001e52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	025b      	lsls	r3, r3, #9
 8001e5e:	b29b      	uxth	r3, r3
 8001e60:	431a      	orrs	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e66:	3b01      	subs	r3, #1
 8001e68:	041b      	lsls	r3, r3, #16
 8001e6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001e6e:	431a      	orrs	r2, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e74:	3b01      	subs	r3, #1
 8001e76:	061b      	lsls	r3, r3, #24
 8001e78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001e7c:	4923      	ldr	r1, [pc, #140]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001e82:	4b22      	ldr	r3, [pc, #136]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e86:	4a21      	ldr	r2, [pc, #132]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001e88:	f023 0301 	bic.w	r3, r3, #1
 8001e8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e92:	4b21      	ldr	r3, [pc, #132]	@ (8001f18 <HAL_RCC_OscConfig+0x778>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e9a:	00d2      	lsls	r2, r2, #3
 8001e9c:	491b      	ldr	r1, [pc, #108]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea6:	f023 020c 	bic.w	r2, r3, #12
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eae:	4917      	ldr	r1, [pc, #92]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001eb4:	4b15      	ldr	r3, [pc, #84]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb8:	f023 0202 	bic.w	r2, r3, #2
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec0:	4912      	ldr	r1, [pc, #72]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001ec6:	4b11      	ldr	r3, [pc, #68]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eca:	4a10      	ldr	r2, [pc, #64]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed6:	4a0d      	ldr	r2, [pc, #52]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001edc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ede:	4b0b      	ldr	r3, [pc, #44]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ee4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001eea:	4b08      	ldr	r3, [pc, #32]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eee:	4a07      	ldr	r2, [pc, #28]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef6:	4b05      	ldr	r3, [pc, #20]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a04      	ldr	r2, [pc, #16]	@ (8001f0c <HAL_RCC_OscConfig+0x76c>)
 8001efc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f02:	f7ff f8ff 	bl	8001104 <HAL_GetTick>
 8001f06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f08:	e011      	b.n	8001f2e <HAL_RCC_OscConfig+0x78e>
 8001f0a:	bf00      	nop
 8001f0c:	58024400 	.word	0x58024400
 8001f10:	58024800 	.word	0x58024800
 8001f14:	fffffc0c 	.word	0xfffffc0c
 8001f18:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f1c:	f7ff f8f2 	bl	8001104 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e08a      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f2e:	4b47      	ldr	r3, [pc, #284]	@ (800204c <HAL_RCC_OscConfig+0x8ac>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d0f0      	beq.n	8001f1c <HAL_RCC_OscConfig+0x77c>
 8001f3a:	e082      	b.n	8002042 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f3c:	4b43      	ldr	r3, [pc, #268]	@ (800204c <HAL_RCC_OscConfig+0x8ac>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a42      	ldr	r2, [pc, #264]	@ (800204c <HAL_RCC_OscConfig+0x8ac>)
 8001f42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7ff f8dc 	bl	8001104 <HAL_GetTick>
 8001f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f50:	f7ff f8d8 	bl	8001104 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e070      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f62:	4b3a      	ldr	r3, [pc, #232]	@ (800204c <HAL_RCC_OscConfig+0x8ac>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f0      	bne.n	8001f50 <HAL_RCC_OscConfig+0x7b0>
 8001f6e:	e068      	b.n	8002042 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f70:	4b36      	ldr	r3, [pc, #216]	@ (800204c <HAL_RCC_OscConfig+0x8ac>)
 8001f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f76:	4b35      	ldr	r3, [pc, #212]	@ (800204c <HAL_RCC_OscConfig+0x8ac>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d031      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	f003 0203 	and.w	r2, r3, #3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d12a      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	091b      	lsrs	r3, r3, #4
 8001f96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d122      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d11a      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	0a5b      	lsrs	r3, r3, #9
 8001fb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fbe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d111      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	0c1b      	lsrs	r3, r3, #16
 8001fc8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fd0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d108      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	0e1b      	lsrs	r3, r3, #24
 8001fda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fe2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d001      	beq.n	8001fec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e02b      	b.n	8002044 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001fec:	4b17      	ldr	r3, [pc, #92]	@ (800204c <HAL_RCC_OscConfig+0x8ac>)
 8001fee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001ff6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d01f      	beq.n	8002042 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002002:	4b12      	ldr	r3, [pc, #72]	@ (800204c <HAL_RCC_OscConfig+0x8ac>)
 8002004:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002006:	4a11      	ldr	r2, [pc, #68]	@ (800204c <HAL_RCC_OscConfig+0x8ac>)
 8002008:	f023 0301 	bic.w	r3, r3, #1
 800200c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800200e:	f7ff f879 	bl	8001104 <HAL_GetTick>
 8002012:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002014:	bf00      	nop
 8002016:	f7ff f875 	bl	8001104 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201e:	4293      	cmp	r3, r2
 8002020:	d0f9      	beq.n	8002016 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002022:	4b0a      	ldr	r3, [pc, #40]	@ (800204c <HAL_RCC_OscConfig+0x8ac>)
 8002024:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002026:	4b0a      	ldr	r3, [pc, #40]	@ (8002050 <HAL_RCC_OscConfig+0x8b0>)
 8002028:	4013      	ands	r3, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800202e:	00d2      	lsls	r2, r2, #3
 8002030:	4906      	ldr	r1, [pc, #24]	@ (800204c <HAL_RCC_OscConfig+0x8ac>)
 8002032:	4313      	orrs	r3, r2
 8002034:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002036:	4b05      	ldr	r3, [pc, #20]	@ (800204c <HAL_RCC_OscConfig+0x8ac>)
 8002038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800203a:	4a04      	ldr	r2, [pc, #16]	@ (800204c <HAL_RCC_OscConfig+0x8ac>)
 800203c:	f043 0301 	orr.w	r3, r3, #1
 8002040:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3730      	adds	r7, #48	@ 0x30
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	58024400 	.word	0x58024400
 8002050:	ffff0007 	.word	0xffff0007

08002054 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e19c      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002068:	4b8a      	ldr	r3, [pc, #552]	@ (8002294 <HAL_RCC_ClockConfig+0x240>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d910      	bls.n	8002098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b87      	ldr	r3, [pc, #540]	@ (8002294 <HAL_RCC_ClockConfig+0x240>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 020f 	bic.w	r2, r3, #15
 800207e:	4985      	ldr	r1, [pc, #532]	@ (8002294 <HAL_RCC_ClockConfig+0x240>)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b83      	ldr	r3, [pc, #524]	@ (8002294 <HAL_RCC_ClockConfig+0x240>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e184      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0304 	and.w	r3, r3, #4
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d010      	beq.n	80020c6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d908      	bls.n	80020c6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020b4:	4b78      	ldr	r3, [pc, #480]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	4975      	ldr	r1, [pc, #468]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d010      	beq.n	80020f4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	695a      	ldr	r2, [r3, #20]
 80020d6:	4b70      	ldr	r3, [pc, #448]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020de:	429a      	cmp	r2, r3
 80020e0:	d908      	bls.n	80020f4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020e2:	4b6d      	ldr	r3, [pc, #436]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
 80020ee:	496a      	ldr	r1, [pc, #424]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d010      	beq.n	8002122 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	699a      	ldr	r2, [r3, #24]
 8002104:	4b64      	ldr	r3, [pc, #400]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800210c:	429a      	cmp	r2, r3
 800210e:	d908      	bls.n	8002122 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002110:	4b61      	ldr	r3, [pc, #388]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	495e      	ldr	r1, [pc, #376]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 800211e:	4313      	orrs	r3, r2
 8002120:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0320 	and.w	r3, r3, #32
 800212a:	2b00      	cmp	r3, #0
 800212c:	d010      	beq.n	8002150 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69da      	ldr	r2, [r3, #28]
 8002132:	4b59      	ldr	r3, [pc, #356]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800213a:	429a      	cmp	r2, r3
 800213c:	d908      	bls.n	8002150 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800213e:	4b56      	ldr	r3, [pc, #344]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002140:	6a1b      	ldr	r3, [r3, #32]
 8002142:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	4953      	ldr	r1, [pc, #332]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 800214c:	4313      	orrs	r3, r2
 800214e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d010      	beq.n	800217e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	68da      	ldr	r2, [r3, #12]
 8002160:	4b4d      	ldr	r3, [pc, #308]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	f003 030f 	and.w	r3, r3, #15
 8002168:	429a      	cmp	r2, r3
 800216a:	d908      	bls.n	800217e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b4a      	ldr	r3, [pc, #296]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 800216e:	699b      	ldr	r3, [r3, #24]
 8002170:	f023 020f 	bic.w	r2, r3, #15
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4947      	ldr	r1, [pc, #284]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 800217a:	4313      	orrs	r3, r2
 800217c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d055      	beq.n	8002236 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800218a:	4b43      	ldr	r3, [pc, #268]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	4940      	ldr	r1, [pc, #256]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002198:	4313      	orrs	r3, r2
 800219a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d107      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021a4:	4b3c      	ldr	r3, [pc, #240]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d121      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0f6      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d107      	bne.n	80021cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021bc:	4b36      	ldr	r3, [pc, #216]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d115      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0ea      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d107      	bne.n	80021e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021d4:	4b30      	ldr	r3, [pc, #192]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d109      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e0de      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021e4:	4b2c      	ldr	r3, [pc, #176]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0304 	and.w	r3, r3, #4
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0d6      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021f4:	4b28      	ldr	r3, [pc, #160]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	f023 0207 	bic.w	r2, r3, #7
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	4925      	ldr	r1, [pc, #148]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002202:	4313      	orrs	r3, r2
 8002204:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002206:	f7fe ff7d 	bl	8001104 <HAL_GetTick>
 800220a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220c:	e00a      	b.n	8002224 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800220e:	f7fe ff79 	bl	8001104 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	f241 3288 	movw	r2, #5000	@ 0x1388
 800221c:	4293      	cmp	r3, r2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e0be      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002224:	4b1c      	ldr	r3, [pc, #112]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	00db      	lsls	r3, r3, #3
 8002232:	429a      	cmp	r2, r3
 8002234:	d1eb      	bne.n	800220e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d010      	beq.n	8002264 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	4b14      	ldr	r3, [pc, #80]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	429a      	cmp	r2, r3
 8002250:	d208      	bcs.n	8002264 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002252:	4b11      	ldr	r3, [pc, #68]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	f023 020f 	bic.w	r2, r3, #15
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	490e      	ldr	r1, [pc, #56]	@ (8002298 <HAL_RCC_ClockConfig+0x244>)
 8002260:	4313      	orrs	r3, r2
 8002262:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002264:	4b0b      	ldr	r3, [pc, #44]	@ (8002294 <HAL_RCC_ClockConfig+0x240>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d214      	bcs.n	800229c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b08      	ldr	r3, [pc, #32]	@ (8002294 <HAL_RCC_ClockConfig+0x240>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 020f 	bic.w	r2, r3, #15
 800227a:	4906      	ldr	r1, [pc, #24]	@ (8002294 <HAL_RCC_ClockConfig+0x240>)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b04      	ldr	r3, [pc, #16]	@ (8002294 <HAL_RCC_ClockConfig+0x240>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d005      	beq.n	800229c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e086      	b.n	80023a2 <HAL_RCC_ClockConfig+0x34e>
 8002294:	52002000 	.word	0x52002000
 8002298:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d010      	beq.n	80022ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	691a      	ldr	r2, [r3, #16]
 80022ac:	4b3f      	ldr	r3, [pc, #252]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d208      	bcs.n	80022ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022b8:	4b3c      	ldr	r3, [pc, #240]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	691b      	ldr	r3, [r3, #16]
 80022c4:	4939      	ldr	r1, [pc, #228]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 0308 	and.w	r3, r3, #8
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d010      	beq.n	80022f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	695a      	ldr	r2, [r3, #20]
 80022da:	4b34      	ldr	r3, [pc, #208]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d208      	bcs.n	80022f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022e6:	4b31      	ldr	r3, [pc, #196]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	492e      	ldr	r1, [pc, #184]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0310 	and.w	r3, r3, #16
 8002300:	2b00      	cmp	r3, #0
 8002302:	d010      	beq.n	8002326 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699a      	ldr	r2, [r3, #24]
 8002308:	4b28      	ldr	r3, [pc, #160]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002310:	429a      	cmp	r2, r3
 8002312:	d208      	bcs.n	8002326 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002314:	4b25      	ldr	r3, [pc, #148]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 8002316:	69db      	ldr	r3, [r3, #28]
 8002318:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	4922      	ldr	r1, [pc, #136]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 8002322:	4313      	orrs	r3, r2
 8002324:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	2b00      	cmp	r3, #0
 8002330:	d010      	beq.n	8002354 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69da      	ldr	r2, [r3, #28]
 8002336:	4b1d      	ldr	r3, [pc, #116]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800233e:	429a      	cmp	r2, r3
 8002340:	d208      	bcs.n	8002354 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002342:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	4917      	ldr	r1, [pc, #92]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 8002350:	4313      	orrs	r3, r2
 8002352:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002354:	f000 f89e 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	4b14      	ldr	r3, [pc, #80]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	0a1b      	lsrs	r3, r3, #8
 8002360:	f003 030f 	and.w	r3, r3, #15
 8002364:	4912      	ldr	r1, [pc, #72]	@ (80023b0 <HAL_RCC_ClockConfig+0x35c>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	fa22 f303 	lsr.w	r3, r2, r3
 8002370:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002372:	4b0e      	ldr	r3, [pc, #56]	@ (80023ac <HAL_RCC_ClockConfig+0x358>)
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	4a0d      	ldr	r2, [pc, #52]	@ (80023b0 <HAL_RCC_ClockConfig+0x35c>)
 800237c:	5cd3      	ldrb	r3, [r2, r3]
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	fa22 f303 	lsr.w	r3, r2, r3
 8002388:	4a0a      	ldr	r2, [pc, #40]	@ (80023b4 <HAL_RCC_ClockConfig+0x360>)
 800238a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800238c:	4a0a      	ldr	r2, [pc, #40]	@ (80023b8 <HAL_RCC_ClockConfig+0x364>)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002392:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <HAL_RCC_ClockConfig+0x368>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fe6a 	bl	8001070 <HAL_InitTick>
 800239c:	4603      	mov	r3, r0
 800239e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3718      	adds	r7, #24
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	58024400 	.word	0x58024400
 80023b0:	080085a4 	.word	0x080085a4
 80023b4:	24000004 	.word	0x24000004
 80023b8:	24000000 	.word	0x24000000
 80023bc:	24000008 	.word	0x24000008

080023c0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08c      	sub	sp, #48	@ 0x30
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d12a      	bne.n	8002428 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80023d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002488 <HAL_RCC_MCOConfig+0xc8>)
 80023d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002488 <HAL_RCC_MCOConfig+0xc8>)
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023e2:	4b29      	ldr	r3, [pc, #164]	@ (8002488 <HAL_RCC_MCOConfig+0xc8>)
 80023e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	61bb      	str	r3, [r7, #24]
 80023ee:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80023f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80023f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023f6:	2302      	movs	r3, #2
 80023f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fa:	2303      	movs	r3, #3
 80023fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fe:	2300      	movs	r3, #0
 8002400:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002402:	2300      	movs	r3, #0
 8002404:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8002406:	f107 031c 	add.w	r3, r7, #28
 800240a:	4619      	mov	r1, r3
 800240c:	481f      	ldr	r0, [pc, #124]	@ (800248c <HAL_RCC_MCOConfig+0xcc>)
 800240e:	f7fe ff75 	bl	80012fc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8002412:	4b1d      	ldr	r3, [pc, #116]	@ (8002488 <HAL_RCC_MCOConfig+0xc8>)
 8002414:	691b      	ldr	r3, [r3, #16]
 8002416:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 800241a:	68b9      	ldr	r1, [r7, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	430b      	orrs	r3, r1
 8002420:	4919      	ldr	r1, [pc, #100]	@ (8002488 <HAL_RCC_MCOConfig+0xc8>)
 8002422:	4313      	orrs	r3, r2
 8002424:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8002426:	e02a      	b.n	800247e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8002428:	4b17      	ldr	r3, [pc, #92]	@ (8002488 <HAL_RCC_MCOConfig+0xc8>)
 800242a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800242e:	4a16      	ldr	r2, [pc, #88]	@ (8002488 <HAL_RCC_MCOConfig+0xc8>)
 8002430:	f043 0304 	orr.w	r3, r3, #4
 8002434:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002438:	4b13      	ldr	r3, [pc, #76]	@ (8002488 <HAL_RCC_MCOConfig+0xc8>)
 800243a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8002446:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800244a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244c:	2302      	movs	r3, #2
 800244e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002450:	2303      	movs	r3, #3
 8002452:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8002458:	2300      	movs	r3, #0
 800245a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800245c:	f107 031c 	add.w	r3, r7, #28
 8002460:	4619      	mov	r1, r3
 8002462:	480b      	ldr	r0, [pc, #44]	@ (8002490 <HAL_RCC_MCOConfig+0xd0>)
 8002464:	f7fe ff4a 	bl	80012fc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8002468:	4b07      	ldr	r3, [pc, #28]	@ (8002488 <HAL_RCC_MCOConfig+0xc8>)
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	01d9      	lsls	r1, r3, #7
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	430b      	orrs	r3, r1
 8002478:	4903      	ldr	r1, [pc, #12]	@ (8002488 <HAL_RCC_MCOConfig+0xc8>)
 800247a:	4313      	orrs	r3, r2
 800247c:	610b      	str	r3, [r1, #16]
}
 800247e:	bf00      	nop
 8002480:	3730      	adds	r7, #48	@ 0x30
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	58024400 	.word	0x58024400
 800248c:	58020000 	.word	0x58020000
 8002490:	58020800 	.word	0x58020800

08002494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	b089      	sub	sp, #36	@ 0x24
 8002498:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800249a:	4bb3      	ldr	r3, [pc, #716]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024a2:	2b18      	cmp	r3, #24
 80024a4:	f200 8155 	bhi.w	8002752 <HAL_RCC_GetSysClockFreq+0x2be>
 80024a8:	a201      	add	r2, pc, #4	@ (adr r2, 80024b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80024aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ae:	bf00      	nop
 80024b0:	08002515 	.word	0x08002515
 80024b4:	08002753 	.word	0x08002753
 80024b8:	08002753 	.word	0x08002753
 80024bc:	08002753 	.word	0x08002753
 80024c0:	08002753 	.word	0x08002753
 80024c4:	08002753 	.word	0x08002753
 80024c8:	08002753 	.word	0x08002753
 80024cc:	08002753 	.word	0x08002753
 80024d0:	0800253b 	.word	0x0800253b
 80024d4:	08002753 	.word	0x08002753
 80024d8:	08002753 	.word	0x08002753
 80024dc:	08002753 	.word	0x08002753
 80024e0:	08002753 	.word	0x08002753
 80024e4:	08002753 	.word	0x08002753
 80024e8:	08002753 	.word	0x08002753
 80024ec:	08002753 	.word	0x08002753
 80024f0:	08002541 	.word	0x08002541
 80024f4:	08002753 	.word	0x08002753
 80024f8:	08002753 	.word	0x08002753
 80024fc:	08002753 	.word	0x08002753
 8002500:	08002753 	.word	0x08002753
 8002504:	08002753 	.word	0x08002753
 8002508:	08002753 	.word	0x08002753
 800250c:	08002753 	.word	0x08002753
 8002510:	08002547 	.word	0x08002547
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002514:	4b94      	ldr	r3, [pc, #592]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0320 	and.w	r3, r3, #32
 800251c:	2b00      	cmp	r3, #0
 800251e:	d009      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002520:	4b91      	ldr	r3, [pc, #580]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	08db      	lsrs	r3, r3, #3
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	4a90      	ldr	r2, [pc, #576]	@ (800276c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800252c:	fa22 f303 	lsr.w	r3, r2, r3
 8002530:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002532:	e111      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002534:	4b8d      	ldr	r3, [pc, #564]	@ (800276c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002536:	61bb      	str	r3, [r7, #24]
      break;
 8002538:	e10e      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800253a:	4b8d      	ldr	r3, [pc, #564]	@ (8002770 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800253c:	61bb      	str	r3, [r7, #24]
      break;
 800253e:	e10b      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002540:	4b8c      	ldr	r3, [pc, #560]	@ (8002774 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002542:	61bb      	str	r3, [r7, #24]
      break;
 8002544:	e108      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002546:	4b88      	ldr	r3, [pc, #544]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800254a:	f003 0303 	and.w	r3, r3, #3
 800254e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002550:	4b85      	ldr	r3, [pc, #532]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002554:	091b      	lsrs	r3, r3, #4
 8002556:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800255a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800255c:	4b82      	ldr	r3, [pc, #520]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800255e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002566:	4b80      	ldr	r3, [pc, #512]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002568:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800256a:	08db      	lsrs	r3, r3, #3
 800256c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	fb02 f303 	mul.w	r3, r2, r3
 8002576:	ee07 3a90 	vmov	s15, r3
 800257a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800257e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	2b00      	cmp	r3, #0
 8002586:	f000 80e1 	beq.w	800274c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	2b02      	cmp	r3, #2
 800258e:	f000 8083 	beq.w	8002698 <HAL_RCC_GetSysClockFreq+0x204>
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b02      	cmp	r3, #2
 8002596:	f200 80a1 	bhi.w	80026dc <HAL_RCC_GetSysClockFreq+0x248>
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0x114>
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d056      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x1c0>
 80025a6:	e099      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80025a8:	4b6f      	ldr	r3, [pc, #444]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0320 	and.w	r3, r3, #32
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d02d      	beq.n	8002610 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80025b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	08db      	lsrs	r3, r3, #3
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	4a6b      	ldr	r2, [pc, #428]	@ (800276c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025c0:	fa22 f303 	lsr.w	r3, r2, r3
 80025c4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	ee07 3a90 	vmov	s15, r3
 80025cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	ee07 3a90 	vmov	s15, r3
 80025d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025de:	4b62      	ldr	r3, [pc, #392]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e6:	ee07 3a90 	vmov	s15, r3
 80025ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80025f2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002778 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800260a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800260e:	e087      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	ee07 3a90 	vmov	s15, r3
 8002616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800261a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800277c <HAL_RCC_GetSysClockFreq+0x2e8>
 800261e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002622:	4b51      	ldr	r3, [pc, #324]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800262a:	ee07 3a90 	vmov	s15, r3
 800262e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002632:	ed97 6a02 	vldr	s12, [r7, #8]
 8002636:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002778 <HAL_RCC_GetSysClockFreq+0x2e4>
 800263a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800263e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002642:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800264a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800264e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002652:	e065      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	ee07 3a90 	vmov	s15, r3
 800265a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800265e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002780 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002666:	4b40      	ldr	r3, [pc, #256]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800266e:	ee07 3a90 	vmov	s15, r3
 8002672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002676:	ed97 6a02 	vldr	s12, [r7, #8]
 800267a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002778 <HAL_RCC_GetSysClockFreq+0x2e4>
 800267e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002686:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800268a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800268e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002692:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002696:	e043      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	ee07 3a90 	vmov	s15, r3
 800269e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026a2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002784 <HAL_RCC_GetSysClockFreq+0x2f0>
 80026a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026aa:	4b2f      	ldr	r3, [pc, #188]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026b2:	ee07 3a90 	vmov	s15, r3
 80026b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80026be:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002778 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026da:	e021      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	ee07 3a90 	vmov	s15, r3
 80026e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026e6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002780 <HAL_RCC_GetSysClockFreq+0x2ec>
 80026ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026f6:	ee07 3a90 	vmov	s15, r3
 80026fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002702:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002778 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800270a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800270e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800271a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800271e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002720:	4b11      	ldr	r3, [pc, #68]	@ (8002768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002722:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002724:	0a5b      	lsrs	r3, r3, #9
 8002726:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800272a:	3301      	adds	r3, #1
 800272c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	ee07 3a90 	vmov	s15, r3
 8002734:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002738:	edd7 6a07 	vldr	s13, [r7, #28]
 800273c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002744:	ee17 3a90 	vmov	r3, s15
 8002748:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800274a:	e005      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	61bb      	str	r3, [r7, #24]
      break;
 8002750:	e002      	b.n	8002758 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002752:	4b07      	ldr	r3, [pc, #28]	@ (8002770 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002754:	61bb      	str	r3, [r7, #24]
      break;
 8002756:	bf00      	nop
  }

  return sysclockfreq;
 8002758:	69bb      	ldr	r3, [r7, #24]
}
 800275a:	4618      	mov	r0, r3
 800275c:	3724      	adds	r7, #36	@ 0x24
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	58024400 	.word	0x58024400
 800276c:	03d09000 	.word	0x03d09000
 8002770:	003d0900 	.word	0x003d0900
 8002774:	017d7840 	.word	0x017d7840
 8002778:	46000000 	.word	0x46000000
 800277c:	4c742400 	.word	0x4c742400
 8002780:	4a742400 	.word	0x4a742400
 8002784:	4bbebc20 	.word	0x4bbebc20

08002788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800278e:	f7ff fe81 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8002792:	4602      	mov	r2, r0
 8002794:	4b10      	ldr	r3, [pc, #64]	@ (80027d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	0a1b      	lsrs	r3, r3, #8
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	490f      	ldr	r1, [pc, #60]	@ (80027dc <HAL_RCC_GetHCLKFreq+0x54>)
 80027a0:	5ccb      	ldrb	r3, [r1, r3]
 80027a2:	f003 031f 	and.w	r3, r3, #31
 80027a6:	fa22 f303 	lsr.w	r3, r2, r3
 80027aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027ac:	4b0a      	ldr	r3, [pc, #40]	@ (80027d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f003 030f 	and.w	r3, r3, #15
 80027b4:	4a09      	ldr	r2, [pc, #36]	@ (80027dc <HAL_RCC_GetHCLKFreq+0x54>)
 80027b6:	5cd3      	ldrb	r3, [r2, r3]
 80027b8:	f003 031f 	and.w	r3, r3, #31
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	fa22 f303 	lsr.w	r3, r2, r3
 80027c2:	4a07      	ldr	r2, [pc, #28]	@ (80027e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80027c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027c6:	4a07      	ldr	r2, [pc, #28]	@ (80027e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80027cc:	4b04      	ldr	r3, [pc, #16]	@ (80027e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80027ce:	681b      	ldr	r3, [r3, #0]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	58024400 	.word	0x58024400
 80027dc:	080085a4 	.word	0x080085a4
 80027e0:	24000004 	.word	0x24000004
 80027e4:	24000000 	.word	0x24000000

080027e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80027ec:	f7ff ffcc 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 80027f0:	4602      	mov	r2, r0
 80027f2:	4b06      	ldr	r3, [pc, #24]	@ (800280c <HAL_RCC_GetPCLK1Freq+0x24>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	4904      	ldr	r1, [pc, #16]	@ (8002810 <HAL_RCC_GetPCLK1Freq+0x28>)
 80027fe:	5ccb      	ldrb	r3, [r1, r3]
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002808:	4618      	mov	r0, r3
 800280a:	bd80      	pop	{r7, pc}
 800280c:	58024400 	.word	0x58024400
 8002810:	080085a4 	.word	0x080085a4

08002814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002818:	f7ff ffb6 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 800281c:	4602      	mov	r2, r0
 800281e:	4b06      	ldr	r3, [pc, #24]	@ (8002838 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	0a1b      	lsrs	r3, r3, #8
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	4904      	ldr	r1, [pc, #16]	@ (800283c <HAL_RCC_GetPCLK2Freq+0x28>)
 800282a:	5ccb      	ldrb	r3, [r1, r3]
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002834:	4618      	mov	r0, r3
 8002836:	bd80      	pop	{r7, pc}
 8002838:	58024400 	.word	0x58024400
 800283c:	080085a4 	.word	0x080085a4

08002840 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002840:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002844:	b0cc      	sub	sp, #304	@ 0x130
 8002846:	af00      	add	r7, sp, #0
 8002848:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800284c:	2300      	movs	r3, #0
 800284e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002852:	2300      	movs	r3, #0
 8002854:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002858:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800285c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002860:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002864:	2500      	movs	r5, #0
 8002866:	ea54 0305 	orrs.w	r3, r4, r5
 800286a:	d049      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800286c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002870:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002872:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002876:	d02f      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002878:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800287c:	d828      	bhi.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800287e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002882:	d01a      	beq.n	80028ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002884:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002888:	d822      	bhi.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800288e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002892:	d007      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002894:	e01c      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002896:	4bb8      	ldr	r3, [pc, #736]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289a:	4ab7      	ldr	r2, [pc, #732]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800289c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028a2:	e01a      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80028a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028a8:	3308      	adds	r3, #8
 80028aa:	2102      	movs	r1, #2
 80028ac:	4618      	mov	r0, r3
 80028ae:	f001 fccf 	bl	8004250 <RCCEx_PLL2_Config>
 80028b2:	4603      	mov	r3, r0
 80028b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028b8:	e00f      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80028ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028be:	3328      	adds	r3, #40	@ 0x28
 80028c0:	2102      	movs	r1, #2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f001 fd76 	bl	80043b4 <RCCEx_PLL3_Config>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80028ce:	e004      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80028d6:	e000      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80028d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10a      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80028e2:	4ba5      	ldr	r3, [pc, #660]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80028e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80028ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028f0:	4aa1      	ldr	r2, [pc, #644]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028f2:	430b      	orrs	r3, r1
 80028f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80028f6:	e003      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80028fc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002900:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002908:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800290c:	f04f 0900 	mov.w	r9, #0
 8002910:	ea58 0309 	orrs.w	r3, r8, r9
 8002914:	d047      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002916:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800291a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291c:	2b04      	cmp	r3, #4
 800291e:	d82a      	bhi.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002920:	a201      	add	r2, pc, #4	@ (adr r2, 8002928 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002926:	bf00      	nop
 8002928:	0800293d 	.word	0x0800293d
 800292c:	0800294b 	.word	0x0800294b
 8002930:	08002961 	.word	0x08002961
 8002934:	0800297f 	.word	0x0800297f
 8002938:	0800297f 	.word	0x0800297f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800293c:	4b8e      	ldr	r3, [pc, #568]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800293e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002940:	4a8d      	ldr	r2, [pc, #564]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002948:	e01a      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800294a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800294e:	3308      	adds	r3, #8
 8002950:	2100      	movs	r1, #0
 8002952:	4618      	mov	r0, r3
 8002954:	f001 fc7c 	bl	8004250 <RCCEx_PLL2_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800295e:	e00f      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002960:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002964:	3328      	adds	r3, #40	@ 0x28
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f001 fd23 	bl	80043b4 <RCCEx_PLL3_Config>
 800296e:	4603      	mov	r3, r0
 8002970:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002974:	e004      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800297c:	e000      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800297e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002980:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10a      	bne.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002988:	4b7b      	ldr	r3, [pc, #492]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800298a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800298c:	f023 0107 	bic.w	r1, r3, #7
 8002990:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002996:	4a78      	ldr	r2, [pc, #480]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002998:	430b      	orrs	r3, r1
 800299a:	6513      	str	r3, [r2, #80]	@ 0x50
 800299c:	e003      	b.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800299e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80029a2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80029a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ae:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80029b2:	f04f 0b00 	mov.w	fp, #0
 80029b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80029ba:	d04c      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80029bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029c6:	d030      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80029c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029cc:	d829      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80029d0:	d02d      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80029d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80029d4:	d825      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029d6:	2b80      	cmp	r3, #128	@ 0x80
 80029d8:	d018      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80029da:	2b80      	cmp	r3, #128	@ 0x80
 80029dc:	d821      	bhi.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d002      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80029e2:	2b40      	cmp	r3, #64	@ 0x40
 80029e4:	d007      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80029e6:	e01c      	b.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029e8:	4b63      	ldr	r3, [pc, #396]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ec:	4a62      	ldr	r2, [pc, #392]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80029f4:	e01c      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029fa:	3308      	adds	r3, #8
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f001 fc26 	bl	8004250 <RCCEx_PLL2_Config>
 8002a04:	4603      	mov	r3, r0
 8002a06:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a0a:	e011      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a10:	3328      	adds	r3, #40	@ 0x28
 8002a12:	2100      	movs	r1, #0
 8002a14:	4618      	mov	r0, r3
 8002a16:	f001 fccd 	bl	80043b4 <RCCEx_PLL3_Config>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002a20:	e006      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002a28:	e002      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002a2a:	bf00      	nop
 8002a2c:	e000      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002a2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a30:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10a      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002a38:	4b4f      	ldr	r3, [pc, #316]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a3c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002a40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a44:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a46:	4a4c      	ldr	r2, [pc, #304]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a4c:	e003      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a4e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a52:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002a56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a5e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002a62:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002a66:	2300      	movs	r3, #0
 8002a68:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002a6c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8002a70:	460b      	mov	r3, r1
 8002a72:	4313      	orrs	r3, r2
 8002a74:	d053      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002a76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a7a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002a7e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a82:	d035      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002a84:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002a88:	d82e      	bhi.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a8a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002a8e:	d031      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002a90:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002a94:	d828      	bhi.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002a96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a9a:	d01a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002a9c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002aa0:	d822      	bhi.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002aa6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002aaa:	d007      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002aac:	e01c      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aae:	4b32      	ldr	r3, [pc, #200]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab2:	4a31      	ldr	r2, [pc, #196]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002aba:	e01c      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002abc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ac0:	3308      	adds	r3, #8
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f001 fbc3 	bl	8004250 <RCCEx_PLL2_Config>
 8002aca:	4603      	mov	r3, r0
 8002acc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ad0:	e011      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ad2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ad6:	3328      	adds	r3, #40	@ 0x28
 8002ad8:	2100      	movs	r1, #0
 8002ada:	4618      	mov	r0, r3
 8002adc:	f001 fc6a 	bl	80043b4 <RCCEx_PLL3_Config>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002ae6:	e006      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002aee:	e002      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002af0:	bf00      	nop
 8002af2:	e000      	b.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002af4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002af6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10b      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002afe:	4b1e      	ldr	r3, [pc, #120]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b02:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002b06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b10:	430b      	orrs	r3, r1
 8002b12:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b14:	e003      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b16:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b1a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002b1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b26:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002b2a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002b34:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	d056      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002b3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002b46:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b4a:	d038      	beq.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002b4c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b50:	d831      	bhi.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b52:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b56:	d034      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002b58:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002b5c:	d82b      	bhi.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b5e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b62:	d01d      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002b64:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002b68:	d825      	bhi.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d006      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002b6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b72:	d00a      	beq.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002b74:	e01f      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002b76:	bf00      	nop
 8002b78:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b7c:	4ba2      	ldr	r3, [pc, #648]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b80:	4aa1      	ldr	r2, [pc, #644]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002b88:	e01c      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002b8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b8e:	3308      	adds	r3, #8
 8002b90:	2100      	movs	r1, #0
 8002b92:	4618      	mov	r0, r3
 8002b94:	f001 fb5c 	bl	8004250 <RCCEx_PLL2_Config>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002b9e:	e011      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ba0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ba4:	3328      	adds	r3, #40	@ 0x28
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f001 fc03 	bl	80043b4 <RCCEx_PLL3_Config>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bb4:	e006      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002bbc:	e002      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002bbe:	bf00      	nop
 8002bc0:	e000      	b.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bc4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10b      	bne.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002bcc:	4b8e      	ldr	r3, [pc, #568]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002bd4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002bdc:	4a8a      	ldr	r2, [pc, #552]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bde:	430b      	orrs	r3, r1
 8002be0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002be2:	e003      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002be4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002be8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002bec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002bf8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002c02:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002c06:	460b      	mov	r3, r1
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	d03a      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002c0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c12:	2b30      	cmp	r3, #48	@ 0x30
 8002c14:	d01f      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002c16:	2b30      	cmp	r3, #48	@ 0x30
 8002c18:	d819      	bhi.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002c1a:	2b20      	cmp	r3, #32
 8002c1c:	d00c      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	d815      	bhi.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d019      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d111      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c2a:	4b77      	ldr	r3, [pc, #476]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2e:	4a76      	ldr	r2, [pc, #472]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002c36:	e011      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c3c:	3308      	adds	r3, #8
 8002c3e:	2102      	movs	r1, #2
 8002c40:	4618      	mov	r0, r3
 8002c42:	f001 fb05 	bl	8004250 <RCCEx_PLL2_Config>
 8002c46:	4603      	mov	r3, r0
 8002c48:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002c4c:	e006      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002c54:	e002      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c56:	bf00      	nop
 8002c58:	e000      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c5c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10a      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002c64:	4b68      	ldr	r3, [pc, #416]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c68:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002c6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c72:	4a65      	ldr	r2, [pc, #404]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c74:	430b      	orrs	r3, r1
 8002c76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c78:	e003      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c7e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002c82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002c8e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002c92:	2300      	movs	r3, #0
 8002c94:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002c98:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	d051      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002ca2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ca6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ca8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cac:	d035      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002cae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cb2:	d82e      	bhi.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002cb4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cb8:	d031      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002cba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002cbe:	d828      	bhi.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002cc0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cc4:	d01a      	beq.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002cc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002cca:	d822      	bhi.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d003      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002cd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cd4:	d007      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002cd6:	e01c      	b.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cd8:	4b4b      	ldr	r3, [pc, #300]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cdc:	4a4a      	ldr	r2, [pc, #296]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ce2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002ce4:	e01c      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ce6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cea:	3308      	adds	r3, #8
 8002cec:	2100      	movs	r1, #0
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f001 faae 	bl	8004250 <RCCEx_PLL2_Config>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002cfa:	e011      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d00:	3328      	adds	r3, #40	@ 0x28
 8002d02:	2100      	movs	r1, #0
 8002d04:	4618      	mov	r0, r3
 8002d06:	f001 fb55 	bl	80043b4 <RCCEx_PLL3_Config>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002d10:	e006      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002d18:	e002      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002d1a:	bf00      	nop
 8002d1c:	e000      	b.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002d1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d20:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d10a      	bne.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002d28:	4b37      	ldr	r3, [pc, #220]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d2c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002d30:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d36:	4a34      	ldr	r2, [pc, #208]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d38:	430b      	orrs	r3, r1
 8002d3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d3c:	e003      	b.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d3e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d42:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002d46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002d52:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002d56:	2300      	movs	r3, #0
 8002d58:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002d5c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4313      	orrs	r3, r2
 8002d64:	d056      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002d66:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d6a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d70:	d033      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002d72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d76:	d82c      	bhi.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d7c:	d02f      	beq.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002d7e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d82:	d826      	bhi.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d84:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d88:	d02b      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002d8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002d8e:	d820      	bhi.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d94:	d012      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002d96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002d9a:	d81a      	bhi.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d022      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002da0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002da4:	d115      	bne.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002da6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002daa:	3308      	adds	r3, #8
 8002dac:	2101      	movs	r1, #1
 8002dae:	4618      	mov	r0, r3
 8002db0:	f001 fa4e 	bl	8004250 <RCCEx_PLL2_Config>
 8002db4:	4603      	mov	r3, r0
 8002db6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002dba:	e015      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002dbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dc0:	3328      	adds	r3, #40	@ 0x28
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f001 faf5 	bl	80043b4 <RCCEx_PLL3_Config>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002dd0:	e00a      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002dd8:	e006      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002dda:	bf00      	nop
 8002ddc:	e004      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002dde:	bf00      	nop
 8002de0:	e002      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002de2:	bf00      	nop
 8002de4:	e000      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002de6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002de8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d10d      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002df0:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002df2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002df4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002df8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dfc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dfe:	4a02      	ldr	r2, [pc, #8]	@ (8002e08 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e00:	430b      	orrs	r3, r1
 8002e02:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e04:	e006      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002e06:	bf00      	nop
 8002e08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e10:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002e14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002e20:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002e2a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4313      	orrs	r3, r2
 8002e32:	d055      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002e34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e40:	d033      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002e42:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e46:	d82c      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e4c:	d02f      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e52:	d826      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e58:	d02b      	beq.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002e5a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002e5e:	d820      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e64:	d012      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002e66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002e6a:	d81a      	bhi.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d022      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002e70:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002e74:	d115      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e7a:	3308      	adds	r3, #8
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f001 f9e6 	bl	8004250 <RCCEx_PLL2_Config>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002e8a:	e015      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e90:	3328      	adds	r3, #40	@ 0x28
 8002e92:	2101      	movs	r1, #1
 8002e94:	4618      	mov	r0, r3
 8002e96:	f001 fa8d 	bl	80043b4 <RCCEx_PLL3_Config>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002ea8:	e006      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002eaa:	bf00      	nop
 8002eac:	e004      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002eae:	bf00      	nop
 8002eb0:	e002      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002eb2:	bf00      	nop
 8002eb4:	e000      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002eb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002eb8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10b      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002ec0:	4bb6      	ldr	r3, [pc, #728]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002ec8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ecc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002ed0:	4ab2      	ldr	r2, [pc, #712]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ed2:	430b      	orrs	r3, r1
 8002ed4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ed6:	e003      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ed8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002edc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002ee0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8002eec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ef6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002efa:	460b      	mov	r3, r1
 8002efc:	4313      	orrs	r3, r2
 8002efe:	d02a      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8002f00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d011      	beq.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002f0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f0e:	d10a      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f10:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f14:	3308      	adds	r3, #8
 8002f16:	2101      	movs	r1, #1
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f001 f999 	bl	8004250 <RCCEx_PLL2_Config>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8002f24:	e004      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002f2c:	e000      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8002f2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f30:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d10a      	bne.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002f38:	4b98      	ldr	r3, [pc, #608]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002f3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f3c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8002f40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f46:	4a95      	ldr	r2, [pc, #596]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002f48:	430b      	orrs	r3, r1
 8002f4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f4c:	e003      	b.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f4e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f52:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002f62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002f66:	2300      	movs	r3, #0
 8002f68:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002f6c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002f70:	460b      	mov	r3, r1
 8002f72:	4313      	orrs	r3, r2
 8002f74:	d037      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002f76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f80:	d00e      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8002f82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f86:	d816      	bhi.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d018      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002f8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f90:	d111      	bne.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f92:	4b82      	ldr	r3, [pc, #520]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f96:	4a81      	ldr	r2, [pc, #516]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002f9e:	e00f      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002fa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fa4:	3308      	adds	r3, #8
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f001 f951 	bl	8004250 <RCCEx_PLL2_Config>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002fb4:	e004      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002fbc:	e000      	b.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8002fbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fc0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10a      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002fc8:	4b74      	ldr	r3, [pc, #464]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fcc:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002fd0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fd6:	4a71      	ldr	r2, [pc, #452]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6513      	str	r3, [r2, #80]	@ 0x50
 8002fdc:	e003      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fde:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002fe2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002fe6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fee:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002ff2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002ffc:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003000:	460b      	mov	r3, r1
 8003002:	4313      	orrs	r3, r2
 8003004:	d03a      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003006:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800300a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800300c:	2b03      	cmp	r3, #3
 800300e:	d81d      	bhi.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8003010:	a201      	add	r2, pc, #4	@ (adr r2, 8003018 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8003012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003016:	bf00      	nop
 8003018:	08003055 	.word	0x08003055
 800301c:	08003029 	.word	0x08003029
 8003020:	08003037 	.word	0x08003037
 8003024:	08003055 	.word	0x08003055
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003028:	4b5c      	ldr	r3, [pc, #368]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800302a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302c:	4a5b      	ldr	r2, [pc, #364]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800302e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003032:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003034:	e00f      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003036:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800303a:	3308      	adds	r3, #8
 800303c:	2102      	movs	r1, #2
 800303e:	4618      	mov	r0, r3
 8003040:	f001 f906 	bl	8004250 <RCCEx_PLL2_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800304a:	e004      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003052:	e000      	b.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8003054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003056:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800305a:	2b00      	cmp	r3, #0
 800305c:	d10a      	bne.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800305e:	4b4f      	ldr	r3, [pc, #316]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003062:	f023 0103 	bic.w	r1, r3, #3
 8003066:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800306a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800306c:	4a4b      	ldr	r2, [pc, #300]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800306e:	430b      	orrs	r3, r1
 8003070:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003072:	e003      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003074:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003078:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800307c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003088:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800308c:	2300      	movs	r3, #0
 800308e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003092:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003096:	460b      	mov	r3, r1
 8003098:	4313      	orrs	r3, r2
 800309a:	f000 80a0 	beq.w	80031de <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800309e:	4b40      	ldr	r3, [pc, #256]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a3f      	ldr	r2, [pc, #252]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80030a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030aa:	f7fe f82b 	bl	8001104 <HAL_GetTick>
 80030ae:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030b2:	e00b      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030b4:	f7fe f826 	bl	8001104 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b64      	cmp	r3, #100	@ 0x64
 80030c2:	d903      	bls.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80030ca:	e005      	b.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80030cc:	4b34      	ldr	r3, [pc, #208]	@ (80031a0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0ed      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80030d8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d17a      	bne.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80030e0:	4b2e      	ldr	r3, [pc, #184]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80030e2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80030e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80030ec:	4053      	eors	r3, r2
 80030ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d015      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030f6:	4b29      	ldr	r3, [pc, #164]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030fe:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003102:	4b26      	ldr	r3, [pc, #152]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003104:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003106:	4a25      	ldr	r2, [pc, #148]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800310c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800310e:	4b23      	ldr	r3, [pc, #140]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003112:	4a22      	ldr	r2, [pc, #136]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003114:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003118:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800311a:	4a20      	ldr	r2, [pc, #128]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800311c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003120:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003122:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003126:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800312a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800312e:	d118      	bne.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fd ffe8 	bl	8001104 <HAL_GetTick>
 8003134:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003138:	e00d      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800313a:	f7fd ffe3 	bl	8001104 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8003144:	1ad2      	subs	r2, r2, r3
 8003146:	f241 3388 	movw	r3, #5000	@ 0x1388
 800314a:	429a      	cmp	r2, r3
 800314c:	d903      	bls.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8003154:	e005      	b.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003156:	4b11      	ldr	r3, [pc, #68]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0eb      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8003162:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003166:	2b00      	cmp	r3, #0
 8003168:	d130      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800316a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800316e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003176:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800317a:	d115      	bne.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x968>
 800317c:	4b07      	ldr	r3, [pc, #28]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003184:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003188:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800318c:	091a      	lsrs	r2, r3, #4
 800318e:	4b05      	ldr	r3, [pc, #20]	@ (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8003190:	4013      	ands	r3, r2
 8003192:	4a02      	ldr	r2, [pc, #8]	@ (800319c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003194:	430b      	orrs	r3, r1
 8003196:	6113      	str	r3, [r2, #16]
 8003198:	e00c      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800319a:	bf00      	nop
 800319c:	58024400 	.word	0x58024400
 80031a0:	58024800 	.word	0x58024800
 80031a4:	00ffffcf 	.word	0x00ffffcf
 80031a8:	4bd4      	ldr	r3, [pc, #848]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	4ad3      	ldr	r2, [pc, #844]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80031ae:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80031b2:	6113      	str	r3, [r2, #16]
 80031b4:	4bd1      	ldr	r3, [pc, #836]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80031b6:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80031b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031bc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80031c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c4:	4acd      	ldr	r2, [pc, #820]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80031c6:	430b      	orrs	r3, r1
 80031c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ca:	e008      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031d0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 80031d4:	e003      	b.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031da:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80031de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e6:	f002 0301 	and.w	r3, r2, #1
 80031ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031ee:	2300      	movs	r3, #0
 80031f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4313      	orrs	r3, r2
 80031fc:	f000 808b 	beq.w	8003316 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003200:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003208:	2b28      	cmp	r3, #40	@ 0x28
 800320a:	d86b      	bhi.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800320c:	a201      	add	r2, pc, #4	@ (adr r2, 8003214 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 800320e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003212:	bf00      	nop
 8003214:	080032ed 	.word	0x080032ed
 8003218:	080032e5 	.word	0x080032e5
 800321c:	080032e5 	.word	0x080032e5
 8003220:	080032e5 	.word	0x080032e5
 8003224:	080032e5 	.word	0x080032e5
 8003228:	080032e5 	.word	0x080032e5
 800322c:	080032e5 	.word	0x080032e5
 8003230:	080032e5 	.word	0x080032e5
 8003234:	080032b9 	.word	0x080032b9
 8003238:	080032e5 	.word	0x080032e5
 800323c:	080032e5 	.word	0x080032e5
 8003240:	080032e5 	.word	0x080032e5
 8003244:	080032e5 	.word	0x080032e5
 8003248:	080032e5 	.word	0x080032e5
 800324c:	080032e5 	.word	0x080032e5
 8003250:	080032e5 	.word	0x080032e5
 8003254:	080032cf 	.word	0x080032cf
 8003258:	080032e5 	.word	0x080032e5
 800325c:	080032e5 	.word	0x080032e5
 8003260:	080032e5 	.word	0x080032e5
 8003264:	080032e5 	.word	0x080032e5
 8003268:	080032e5 	.word	0x080032e5
 800326c:	080032e5 	.word	0x080032e5
 8003270:	080032e5 	.word	0x080032e5
 8003274:	080032ed 	.word	0x080032ed
 8003278:	080032e5 	.word	0x080032e5
 800327c:	080032e5 	.word	0x080032e5
 8003280:	080032e5 	.word	0x080032e5
 8003284:	080032e5 	.word	0x080032e5
 8003288:	080032e5 	.word	0x080032e5
 800328c:	080032e5 	.word	0x080032e5
 8003290:	080032e5 	.word	0x080032e5
 8003294:	080032ed 	.word	0x080032ed
 8003298:	080032e5 	.word	0x080032e5
 800329c:	080032e5 	.word	0x080032e5
 80032a0:	080032e5 	.word	0x080032e5
 80032a4:	080032e5 	.word	0x080032e5
 80032a8:	080032e5 	.word	0x080032e5
 80032ac:	080032e5 	.word	0x080032e5
 80032b0:	080032e5 	.word	0x080032e5
 80032b4:	080032ed 	.word	0x080032ed
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032bc:	3308      	adds	r3, #8
 80032be:	2101      	movs	r1, #1
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 ffc5 	bl	8004250 <RCCEx_PLL2_Config>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80032cc:	e00f      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032d2:	3328      	adds	r3, #40	@ 0x28
 80032d4:	2101      	movs	r1, #1
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 f86c 	bl	80043b4 <RCCEx_PLL3_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80032e2:	e004      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80032ea:	e000      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80032ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80032f6:	4b81      	ldr	r3, [pc, #516]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80032f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032fa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80032fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003302:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003306:	4a7d      	ldr	r2, [pc, #500]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003308:	430b      	orrs	r3, r1
 800330a:	6553      	str	r3, [r2, #84]	@ 0x54
 800330c:	e003      	b.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800330e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003312:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003316:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	f002 0302 	and.w	r3, r2, #2
 8003322:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003326:	2300      	movs	r3, #0
 8003328:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800332c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003330:	460b      	mov	r3, r1
 8003332:	4313      	orrs	r3, r2
 8003334:	d042      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003336:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800333a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800333c:	2b05      	cmp	r3, #5
 800333e:	d825      	bhi.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8003340:	a201      	add	r2, pc, #4	@ (adr r2, 8003348 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8003342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003346:	bf00      	nop
 8003348:	08003395 	.word	0x08003395
 800334c:	08003361 	.word	0x08003361
 8003350:	08003377 	.word	0x08003377
 8003354:	08003395 	.word	0x08003395
 8003358:	08003395 	.word	0x08003395
 800335c:	08003395 	.word	0x08003395
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003360:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003364:	3308      	adds	r3, #8
 8003366:	2101      	movs	r1, #1
 8003368:	4618      	mov	r0, r3
 800336a:	f000 ff71 	bl	8004250 <RCCEx_PLL2_Config>
 800336e:	4603      	mov	r3, r0
 8003370:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003374:	e00f      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003376:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800337a:	3328      	adds	r3, #40	@ 0x28
 800337c:	2101      	movs	r1, #1
 800337e:	4618      	mov	r0, r3
 8003380:	f001 f818 	bl	80043b4 <RCCEx_PLL3_Config>
 8003384:	4603      	mov	r3, r0
 8003386:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800338a:	e004      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003392:	e000      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8003394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003396:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10a      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800339e:	4b57      	ldr	r3, [pc, #348]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80033a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033a2:	f023 0107 	bic.w	r1, r3, #7
 80033a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80033ac:	4a53      	ldr	r2, [pc, #332]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80033ae:	430b      	orrs	r3, r1
 80033b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80033b2:	e003      	b.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80033b8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c4:	f002 0304 	and.w	r3, r2, #4
 80033c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033cc:	2300      	movs	r3, #0
 80033ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033d2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4313      	orrs	r3, r2
 80033da:	d044      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80033dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033e4:	2b05      	cmp	r3, #5
 80033e6:	d825      	bhi.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80033e8:	a201      	add	r2, pc, #4	@ (adr r2, 80033f0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80033ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ee:	bf00      	nop
 80033f0:	0800343d 	.word	0x0800343d
 80033f4:	08003409 	.word	0x08003409
 80033f8:	0800341f 	.word	0x0800341f
 80033fc:	0800343d 	.word	0x0800343d
 8003400:	0800343d 	.word	0x0800343d
 8003404:	0800343d 	.word	0x0800343d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003408:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800340c:	3308      	adds	r3, #8
 800340e:	2101      	movs	r1, #1
 8003410:	4618      	mov	r0, r3
 8003412:	f000 ff1d 	bl	8004250 <RCCEx_PLL2_Config>
 8003416:	4603      	mov	r3, r0
 8003418:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800341c:	e00f      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800341e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003422:	3328      	adds	r3, #40	@ 0x28
 8003424:	2101      	movs	r1, #1
 8003426:	4618      	mov	r0, r3
 8003428:	f000 ffc4 	bl	80043b4 <RCCEx_PLL3_Config>
 800342c:	4603      	mov	r3, r0
 800342e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003432:	e004      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800343a:	e000      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 800343c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800343e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10b      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003446:	4b2d      	ldr	r3, [pc, #180]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344a:	f023 0107 	bic.w	r1, r3, #7
 800344e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003452:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003456:	4a29      	ldr	r2, [pc, #164]	@ (80034fc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003458:	430b      	orrs	r3, r1
 800345a:	6593      	str	r3, [r2, #88]	@ 0x58
 800345c:	e003      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800345e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003462:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003466:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800346a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346e:	f002 0320 	and.w	r3, r2, #32
 8003472:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003476:	2300      	movs	r3, #0
 8003478:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800347c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003480:	460b      	mov	r3, r1
 8003482:	4313      	orrs	r3, r2
 8003484:	d057      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003486:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800348a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800348e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003492:	d035      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8003494:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003498:	d82c      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800349a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800349e:	d031      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 80034a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034a4:	d826      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80034a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80034aa:	d02d      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 80034ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80034b0:	d820      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80034b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034b6:	d012      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 80034b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80034bc:	d81a      	bhi.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d024      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 80034c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80034c6:	d115      	bne.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034cc:	3308      	adds	r3, #8
 80034ce:	2100      	movs	r1, #0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 febd 	bl	8004250 <RCCEx_PLL2_Config>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80034dc:	e017      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034e2:	3328      	adds	r3, #40	@ 0x28
 80034e4:	2102      	movs	r1, #2
 80034e6:	4618      	mov	r0, r3
 80034e8:	f000 ff64 	bl	80043b4 <RCCEx_PLL3_Config>
 80034ec:	4603      	mov	r3, r0
 80034ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80034f2:	e00c      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80034fa:	e008      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80034fc:	58024400 	.word	0x58024400
        break;
 8003500:	bf00      	nop
 8003502:	e004      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003504:	bf00      	nop
 8003506:	e002      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8003508:	bf00      	nop
 800350a:	e000      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800350c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800350e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10b      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003516:	4bc2      	ldr	r3, [pc, #776]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800351a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800351e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003522:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003526:	4abe      	ldr	r2, [pc, #760]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003528:	430b      	orrs	r3, r1
 800352a:	6553      	str	r3, [r2, #84]	@ 0x54
 800352c:	e003      	b.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003532:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003536:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800353a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003542:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003546:	2300      	movs	r3, #0
 8003548:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800354c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003550:	460b      	mov	r3, r1
 8003552:	4313      	orrs	r3, r2
 8003554:	d055      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003556:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800355a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800355e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003562:	d033      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8003564:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003568:	d82c      	bhi.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800356a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800356e:	d02f      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8003570:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003574:	d826      	bhi.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003576:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800357a:	d02b      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 800357c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003580:	d820      	bhi.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003582:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003586:	d012      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8003588:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800358c:	d81a      	bhi.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800358e:	2b00      	cmp	r3, #0
 8003590:	d022      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8003592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003596:	d115      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003598:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800359c:	3308      	adds	r3, #8
 800359e:	2100      	movs	r1, #0
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fe55 	bl	8004250 <RCCEx_PLL2_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80035ac:	e015      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035b2:	3328      	adds	r3, #40	@ 0x28
 80035b4:	2102      	movs	r1, #2
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fefc 	bl	80043b4 <RCCEx_PLL3_Config>
 80035bc:	4603      	mov	r3, r0
 80035be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80035c2:	e00a      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80035ca:	e006      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80035cc:	bf00      	nop
 80035ce:	e004      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80035d0:	bf00      	nop
 80035d2:	e002      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80035d4:	bf00      	nop
 80035d6:	e000      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80035d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10b      	bne.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035e2:	4b8f      	ldr	r3, [pc, #572]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80035ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80035f2:	4a8b      	ldr	r2, [pc, #556]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035f4:	430b      	orrs	r3, r1
 80035f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80035f8:	e003      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003602:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360a:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800360e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003612:	2300      	movs	r3, #0
 8003614:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003618:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800361c:	460b      	mov	r3, r1
 800361e:	4313      	orrs	r3, r2
 8003620:	d055      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003622:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003626:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800362a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800362e:	d033      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8003630:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003634:	d82c      	bhi.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003636:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800363a:	d02f      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800363c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003640:	d826      	bhi.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8003642:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003646:	d02b      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8003648:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800364c:	d820      	bhi.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800364e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003652:	d012      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8003654:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003658:	d81a      	bhi.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800365a:	2b00      	cmp	r3, #0
 800365c:	d022      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800365e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003662:	d115      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003664:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003668:	3308      	adds	r3, #8
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fdef 	bl	8004250 <RCCEx_PLL2_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003678:	e015      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800367a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800367e:	3328      	adds	r3, #40	@ 0x28
 8003680:	2102      	movs	r1, #2
 8003682:	4618      	mov	r0, r3
 8003684:	f000 fe96 	bl	80043b4 <RCCEx_PLL3_Config>
 8003688:	4603      	mov	r3, r0
 800368a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800368e:	e00a      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003696:	e006      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003698:	bf00      	nop
 800369a:	e004      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800369c:	bf00      	nop
 800369e:	e002      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80036a0:	bf00      	nop
 80036a2:	e000      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 80036a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10b      	bne.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80036ae:	4b5c      	ldr	r3, [pc, #368]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036b2:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80036b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80036be:	4a58      	ldr	r2, [pc, #352]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80036c0:	430b      	orrs	r3, r1
 80036c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80036c4:	e003      	b.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80036ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d6:	f002 0308 	and.w	r3, r2, #8
 80036da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80036de:	2300      	movs	r3, #0
 80036e0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80036e4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80036e8:	460b      	mov	r3, r1
 80036ea:	4313      	orrs	r3, r2
 80036ec:	d01e      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80036ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036fa:	d10c      	bne.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80036fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003700:	3328      	adds	r3, #40	@ 0x28
 8003702:	2102      	movs	r1, #2
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fe55 	bl	80043b4 <RCCEx_PLL3_Config>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003716:	4b42      	ldr	r3, [pc, #264]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800371e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003726:	4a3e      	ldr	r2, [pc, #248]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003728:	430b      	orrs	r3, r1
 800372a:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800372c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003734:	f002 0310 	and.w	r3, r2, #16
 8003738:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800373c:	2300      	movs	r3, #0
 800373e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003742:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003746:	460b      	mov	r3, r1
 8003748:	4313      	orrs	r3, r2
 800374a:	d01e      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800374c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003750:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003754:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003758:	d10c      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800375a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800375e:	3328      	adds	r3, #40	@ 0x28
 8003760:	2102      	movs	r1, #2
 8003762:	4618      	mov	r0, r3
 8003764:	f000 fe26 	bl	80043b4 <RCCEx_PLL3_Config>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003774:	4b2a      	ldr	r3, [pc, #168]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003778:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800377c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003780:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003784:	4a26      	ldr	r2, [pc, #152]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003786:	430b      	orrs	r3, r1
 8003788:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800378a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800378e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003792:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003796:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800379a:	2300      	movs	r3, #0
 800379c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80037a0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80037a4:	460b      	mov	r3, r1
 80037a6:	4313      	orrs	r3, r2
 80037a8:	d040      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80037aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80037b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037b6:	d022      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80037b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037bc:	d81b      	bhi.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80037c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037c6:	d00b      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80037c8:	e015      	b.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037ce:	3308      	adds	r3, #8
 80037d0:	2100      	movs	r1, #0
 80037d2:	4618      	mov	r0, r3
 80037d4:	f000 fd3c 	bl	8004250 <RCCEx_PLL2_Config>
 80037d8:	4603      	mov	r3, r0
 80037da:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80037de:	e00f      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037e4:	3328      	adds	r3, #40	@ 0x28
 80037e6:	2102      	movs	r1, #2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f000 fde3 	bl	80043b4 <RCCEx_PLL3_Config>
 80037ee:	4603      	mov	r3, r0
 80037f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80037f4:	e004      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80037fc:	e000      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80037fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003800:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10d      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003808:	4b05      	ldr	r3, [pc, #20]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800380a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800380c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003810:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003814:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003818:	4a01      	ldr	r2, [pc, #4]	@ (8003820 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800381a:	430b      	orrs	r3, r1
 800381c:	6593      	str	r3, [r2, #88]	@ 0x58
 800381e:	e005      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8003820:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003824:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003828:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800382c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003834:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003838:	67bb      	str	r3, [r7, #120]	@ 0x78
 800383a:	2300      	movs	r3, #0
 800383c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800383e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003842:	460b      	mov	r3, r1
 8003844:	4313      	orrs	r3, r2
 8003846:	d03b      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003848:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800384c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003850:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003854:	d01f      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8003856:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800385a:	d818      	bhi.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 800385c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003860:	d003      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8003862:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003866:	d007      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003868:	e011      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800386a:	4b64      	ldr	r3, [pc, #400]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800386c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800386e:	4a63      	ldr	r2, [pc, #396]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003874:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003876:	e00f      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003878:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800387c:	3328      	adds	r3, #40	@ 0x28
 800387e:	2101      	movs	r1, #1
 8003880:	4618      	mov	r0, r3
 8003882:	f000 fd97 	bl	80043b4 <RCCEx_PLL3_Config>
 8003886:	4603      	mov	r3, r0
 8003888:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 800388c:	e004      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003894:	e000      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8003896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003898:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10b      	bne.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80038a0:	4b56      	ldr	r3, [pc, #344]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80038a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038a4:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80038a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80038b0:	4a52      	ldr	r2, [pc, #328]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80038b2:	430b      	orrs	r3, r1
 80038b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80038b6:	e003      	b.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038bc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80038c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80038cc:	673b      	str	r3, [r7, #112]	@ 0x70
 80038ce:	2300      	movs	r3, #0
 80038d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80038d2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80038d6:	460b      	mov	r3, r1
 80038d8:	4313      	orrs	r3, r2
 80038da:	d031      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80038dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80038e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ea:	d007      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80038ec:	e011      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ee:	4b43      	ldr	r3, [pc, #268]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80038f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f2:	4a42      	ldr	r2, [pc, #264]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80038f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80038fa:	e00e      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003900:	3308      	adds	r3, #8
 8003902:	2102      	movs	r1, #2
 8003904:	4618      	mov	r0, r3
 8003906:	f000 fca3 	bl	8004250 <RCCEx_PLL2_Config>
 800390a:	4603      	mov	r3, r0
 800390c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003910:	e003      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800391a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10a      	bne.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003922:	4b36      	ldr	r3, [pc, #216]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003926:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800392a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800392e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003930:	4a32      	ldr	r2, [pc, #200]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003932:	430b      	orrs	r3, r1
 8003934:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003936:	e003      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003938:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800393c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003940:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800394c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800394e:	2300      	movs	r3, #0
 8003950:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003952:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003956:	460b      	mov	r3, r1
 8003958:	4313      	orrs	r3, r2
 800395a:	d00c      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800395c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003960:	3328      	adds	r3, #40	@ 0x28
 8003962:	2102      	movs	r1, #2
 8003964:	4618      	mov	r0, r3
 8003966:	f000 fd25 	bl	80043b4 <RCCEx_PLL3_Config>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003976:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800397a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003982:	663b      	str	r3, [r7, #96]	@ 0x60
 8003984:	2300      	movs	r3, #0
 8003986:	667b      	str	r3, [r7, #100]	@ 0x64
 8003988:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800398c:	460b      	mov	r3, r1
 800398e:	4313      	orrs	r3, r2
 8003990:	d03a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003992:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003996:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800399a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800399e:	d018      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80039a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039a4:	d811      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80039a6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039aa:	d014      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80039ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039b0:	d80b      	bhi.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d011      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80039b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039ba:	d106      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039bc:	4b0f      	ldr	r3, [pc, #60]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80039be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c0:	4a0e      	ldr	r2, [pc, #56]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80039c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80039c8:	e008      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80039d0:	e004      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80039d2:	bf00      	nop
 80039d4:	e002      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80039d6:	bf00      	nop
 80039d8:	e000      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80039da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10d      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80039e4:	4b05      	ldr	r3, [pc, #20]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80039e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039e8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80039ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039f4:	4a01      	ldr	r2, [pc, #4]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80039f6:	430b      	orrs	r3, r1
 80039f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80039fa:	e005      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80039fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a00:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a04:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a10:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003a14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a16:	2300      	movs	r3, #0
 8003a18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a1a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4313      	orrs	r3, r2
 8003a22:	d009      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a24:	4baa      	ldr	r3, [pc, #680]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a28:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003a2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003a32:	4aa7      	ldr	r2, [pc, #668]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003a34:	430b      	orrs	r3, r1
 8003a36:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003a38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003a44:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a46:	2300      	movs	r3, #0
 8003a48:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a4a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4313      	orrs	r3, r2
 8003a52:	d00a      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003a54:	4b9e      	ldr	r3, [pc, #632]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003a56:	691b      	ldr	r3, [r3, #16]
 8003a58:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003a5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a60:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003a64:	4a9a      	ldr	r2, [pc, #616]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003a66:	430b      	orrs	r3, r1
 8003a68:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a72:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003a76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a78:	2300      	movs	r3, #0
 8003a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a7c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003a80:	460b      	mov	r3, r1
 8003a82:	4313      	orrs	r3, r2
 8003a84:	d009      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a86:	4b92      	ldr	r3, [pc, #584]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003a88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a8a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003a8e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a94:	4a8e      	ldr	r2, [pc, #568]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003a96:	430b      	orrs	r3, r1
 8003a98:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003a9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003aa6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aac:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	d00e      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ab6:	4b86      	ldr	r3, [pc, #536]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	4a85      	ldr	r2, [pc, #532]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003abc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ac0:	6113      	str	r3, [r2, #16]
 8003ac2:	4b83      	ldr	r3, [pc, #524]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ac4:	6919      	ldr	r1, [r3, #16]
 8003ac6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003aca:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003ace:	4a80      	ldr	r2, [pc, #512]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ad4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003adc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ae6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003aea:	460b      	mov	r3, r1
 8003aec:	4313      	orrs	r3, r2
 8003aee:	d009      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003af0:	4b77      	ldr	r3, [pc, #476]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003af4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003af8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003afc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afe:	4a74      	ldr	r2, [pc, #464]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003b00:	430b      	orrs	r3, r1
 8003b02:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003b04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003b10:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b12:	2300      	movs	r3, #0
 8003b14:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b16:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	d00a      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003b20:	4b6b      	ldr	r3, [pc, #428]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003b22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b24:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003b28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b30:	4a67      	ldr	r2, [pc, #412]	@ (8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003b32:	430b      	orrs	r3, r1
 8003b34:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003b36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b3e:	2100      	movs	r1, #0
 8003b40:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b48:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	d011      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b56:	3308      	adds	r3, #8
 8003b58:	2100      	movs	r1, #0
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f000 fb78 	bl	8004250 <RCCEx_PLL2_Config>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003b66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003b72:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003b76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7e:	2100      	movs	r1, #0
 8003b80:	6239      	str	r1, [r7, #32]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b88:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	d011      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b96:	3308      	adds	r3, #8
 8003b98:	2101      	movs	r1, #1
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f000 fb58 	bl	8004250 <RCCEx_PLL2_Config>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003ba6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bb2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003bb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bbe:	2100      	movs	r1, #0
 8003bc0:	61b9      	str	r1, [r7, #24]
 8003bc2:	f003 0304 	and.w	r3, r3, #4
 8003bc6:	61fb      	str	r3, [r7, #28]
 8003bc8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	d011      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bd6:	3308      	adds	r3, #8
 8003bd8:	2102      	movs	r1, #2
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 fb38 	bl	8004250 <RCCEx_PLL2_Config>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003be6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003bf2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003bf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bfe:	2100      	movs	r1, #0
 8003c00:	6139      	str	r1, [r7, #16]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	d011      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003c12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c16:	3328      	adds	r3, #40	@ 0x28
 8003c18:	2100      	movs	r1, #0
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fbca 	bl	80043b4 <RCCEx_PLL3_Config>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8003c26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c32:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003c36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3e:	2100      	movs	r1, #0
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	f003 0310 	and.w	r3, r3, #16
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	d011      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c56:	3328      	adds	r3, #40	@ 0x28
 8003c58:	2101      	movs	r1, #1
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fbaa 	bl	80043b4 <RCCEx_PLL3_Config>
 8003c60:	4603      	mov	r3, r0
 8003c62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003c66:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003c72:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003c76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7e:	2100      	movs	r1, #0
 8003c80:	6039      	str	r1, [r7, #0]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	607b      	str	r3, [r7, #4]
 8003c88:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	d011      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c96:	3328      	adds	r3, #40	@ 0x28
 8003c98:	2102      	movs	r1, #2
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f000 fb8a 	bl	80043b4 <RCCEx_PLL3_Config>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003ca6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003cb2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8003cb6:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d101      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	e000      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cd0:	58024400 	.word	0x58024400

08003cd4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003cd8:	f7fe fd56 	bl	8002788 <HAL_RCC_GetHCLKFreq>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	4b06      	ldr	r3, [pc, #24]	@ (8003cf8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003ce0:	6a1b      	ldr	r3, [r3, #32]
 8003ce2:	091b      	lsrs	r3, r3, #4
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	4904      	ldr	r1, [pc, #16]	@ (8003cfc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003cea:	5ccb      	ldrb	r3, [r1, r3]
 8003cec:	f003 031f 	and.w	r3, r3, #31
 8003cf0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	58024400 	.word	0x58024400
 8003cfc:	080085a4 	.word	0x080085a4

08003d00 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b089      	sub	sp, #36	@ 0x24
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d08:	4ba1      	ldr	r3, [pc, #644]	@ (8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003d12:	4b9f      	ldr	r3, [pc, #636]	@ (8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d16:	0b1b      	lsrs	r3, r3, #12
 8003d18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d1c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003d1e:	4b9c      	ldr	r3, [pc, #624]	@ (8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d22:	091b      	lsrs	r3, r3, #4
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003d2a:	4b99      	ldr	r3, [pc, #612]	@ (8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d2e:	08db      	lsrs	r3, r3, #3
 8003d30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	fb02 f303 	mul.w	r3, r2, r3
 8003d3a:	ee07 3a90 	vmov	s15, r3
 8003d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 8111 	beq.w	8003f70 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	f000 8083 	beq.w	8003e5c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	f200 80a1 	bhi.w	8003ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d003      	beq.n	8003d6c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d056      	beq.n	8003e18 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003d6a:	e099      	b.n	8003ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d6c:	4b88      	ldr	r3, [pc, #544]	@ (8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d02d      	beq.n	8003dd4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003d78:	4b85      	ldr	r3, [pc, #532]	@ (8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	08db      	lsrs	r3, r3, #3
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	4a84      	ldr	r2, [pc, #528]	@ (8003f94 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003d84:	fa22 f303 	lsr.w	r3, r2, r3
 8003d88:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	ee07 3a90 	vmov	s15, r3
 8003d90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	ee07 3a90 	vmov	s15, r3
 8003d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003da2:	4b7b      	ldr	r3, [pc, #492]	@ (8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003daa:	ee07 3a90 	vmov	s15, r3
 8003dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003db6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003f98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003dd2:	e087      	b.n	8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	ee07 3a90 	vmov	s15, r3
 8003dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dde:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003f9c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003de6:	4b6a      	ldr	r3, [pc, #424]	@ (8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dee:	ee07 3a90 	vmov	s15, r3
 8003df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dfa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003f98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e16:	e065      	b.n	8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	ee07 3a90 	vmov	s15, r3
 8003e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e2a:	4b59      	ldr	r3, [pc, #356]	@ (8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003f98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e5a:	e043      	b.n	8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	ee07 3a90 	vmov	s15, r3
 8003e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e6e:	4b48      	ldr	r3, [pc, #288]	@ (8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e76:	ee07 3a90 	vmov	s15, r3
 8003e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003f98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e9e:	e021      	b.n	8003ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eaa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eb2:	4b37      	ldr	r3, [pc, #220]	@ (8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eba:	ee07 3a90 	vmov	s15, r3
 8003ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ec6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003f98 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ed2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ee2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003ee4:	4b2a      	ldr	r3, [pc, #168]	@ (8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ee8:	0a5b      	lsrs	r3, r3, #9
 8003eea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003eee:	ee07 3a90 	vmov	s15, r3
 8003ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003efa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003efe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f0a:	ee17 2a90 	vmov	r2, s15
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003f12:	4b1f      	ldr	r3, [pc, #124]	@ (8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f16:	0c1b      	lsrs	r3, r3, #16
 8003f18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f1c:	ee07 3a90 	vmov	s15, r3
 8003f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f38:	ee17 2a90 	vmov	r2, s15
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003f40:	4b13      	ldr	r3, [pc, #76]	@ (8003f90 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f44:	0e1b      	lsrs	r3, r3, #24
 8003f46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f4a:	ee07 3a90 	vmov	s15, r3
 8003f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f66:	ee17 2a90 	vmov	r2, s15
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003f6e:	e008      	b.n	8003f82 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	609a      	str	r2, [r3, #8]
}
 8003f82:	bf00      	nop
 8003f84:	3724      	adds	r7, #36	@ 0x24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	58024400 	.word	0x58024400
 8003f94:	03d09000 	.word	0x03d09000
 8003f98:	46000000 	.word	0x46000000
 8003f9c:	4c742400 	.word	0x4c742400
 8003fa0:	4a742400 	.word	0x4a742400
 8003fa4:	4bbebc20 	.word	0x4bbebc20

08003fa8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b089      	sub	sp, #36	@ 0x24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fb0:	4ba1      	ldr	r3, [pc, #644]	@ (8004238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb4:	f003 0303 	and.w	r3, r3, #3
 8003fb8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003fba:	4b9f      	ldr	r3, [pc, #636]	@ (8004238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fbe:	0d1b      	lsrs	r3, r3, #20
 8003fc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fc4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003fc6:	4b9c      	ldr	r3, [pc, #624]	@ (8004238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fca:	0a1b      	lsrs	r3, r3, #8
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003fd2:	4b99      	ldr	r3, [pc, #612]	@ (8004238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fd6:	08db      	lsrs	r3, r3, #3
 8003fd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003fdc:	693a      	ldr	r2, [r7, #16]
 8003fde:	fb02 f303 	mul.w	r3, r2, r3
 8003fe2:	ee07 3a90 	vmov	s15, r3
 8003fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 8111 	beq.w	8004218 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	f000 8083 	beq.w	8004104 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	2b02      	cmp	r3, #2
 8004002:	f200 80a1 	bhi.w	8004148 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d003      	beq.n	8004014 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	2b01      	cmp	r3, #1
 8004010:	d056      	beq.n	80040c0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004012:	e099      	b.n	8004148 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004014:	4b88      	ldr	r3, [pc, #544]	@ (8004238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0320 	and.w	r3, r3, #32
 800401c:	2b00      	cmp	r3, #0
 800401e:	d02d      	beq.n	800407c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004020:	4b85      	ldr	r3, [pc, #532]	@ (8004238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	08db      	lsrs	r3, r3, #3
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	4a84      	ldr	r2, [pc, #528]	@ (800423c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800402c:	fa22 f303 	lsr.w	r3, r2, r3
 8004030:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	ee07 3a90 	vmov	s15, r3
 8004038:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	ee07 3a90 	vmov	s15, r3
 8004042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800404a:	4b7b      	ldr	r3, [pc, #492]	@ (8004238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004052:	ee07 3a90 	vmov	s15, r3
 8004056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800405a:	ed97 6a03 	vldr	s12, [r7, #12]
 800405e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800406a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800406e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004076:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800407a:	e087      	b.n	800418c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004086:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004244 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800408a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800408e:	4b6a      	ldr	r3, [pc, #424]	@ (8004238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004096:	ee07 3a90 	vmov	s15, r3
 800409a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800409e:	ed97 6a03 	vldr	s12, [r7, #12]
 80040a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040be:	e065      	b.n	800418c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	ee07 3a90 	vmov	s15, r3
 80040c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80040ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040d2:	4b59      	ldr	r3, [pc, #356]	@ (8004238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040da:	ee07 3a90 	vmov	s15, r3
 80040de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80040e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80040ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004102:	e043      	b.n	800418c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800410e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800424c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004116:	4b48      	ldr	r3, [pc, #288]	@ (8004238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800411e:	ee07 3a90 	vmov	s15, r3
 8004122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004126:	ed97 6a03 	vldr	s12, [r7, #12]
 800412a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800412e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800413a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800413e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004142:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004146:	e021      	b.n	800418c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	ee07 3a90 	vmov	s15, r3
 800414e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004152:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004248 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800415a:	4b37      	ldr	r3, [pc, #220]	@ (8004238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800415e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004162:	ee07 3a90 	vmov	s15, r3
 8004166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800416a:	ed97 6a03 	vldr	s12, [r7, #12]
 800416e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004240 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800417a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800417e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800418a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800418c:	4b2a      	ldr	r3, [pc, #168]	@ (8004238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800418e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004190:	0a5b      	lsrs	r3, r3, #9
 8004192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004196:	ee07 3a90 	vmov	s15, r3
 800419a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800419e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80041aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041b2:	ee17 2a90 	vmov	r2, s15
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80041ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041be:	0c1b      	lsrs	r3, r3, #16
 80041c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041c4:	ee07 3a90 	vmov	s15, r3
 80041c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80041d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041e0:	ee17 2a90 	vmov	r2, s15
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80041e8:	4b13      	ldr	r3, [pc, #76]	@ (8004238 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80041ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ec:	0e1b      	lsrs	r3, r3, #24
 80041ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041f2:	ee07 3a90 	vmov	s15, r3
 80041f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80041fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004202:	edd7 6a07 	vldr	s13, [r7, #28]
 8004206:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800420a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800420e:	ee17 2a90 	vmov	r2, s15
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004216:	e008      	b.n	800422a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2200      	movs	r2, #0
 800421c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	609a      	str	r2, [r3, #8]
}
 800422a:	bf00      	nop
 800422c:	3724      	adds	r7, #36	@ 0x24
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	58024400 	.word	0x58024400
 800423c:	03d09000 	.word	0x03d09000
 8004240:	46000000 	.word	0x46000000
 8004244:	4c742400 	.word	0x4c742400
 8004248:	4a742400 	.word	0x4a742400
 800424c:	4bbebc20 	.word	0x4bbebc20

08004250 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800425e:	4b53      	ldr	r3, [pc, #332]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 8004260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004262:	f003 0303 	and.w	r3, r3, #3
 8004266:	2b03      	cmp	r3, #3
 8004268:	d101      	bne.n	800426e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	e099      	b.n	80043a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800426e:	4b4f      	ldr	r3, [pc, #316]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a4e      	ldr	r2, [pc, #312]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 8004274:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004278:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800427a:	f7fc ff43 	bl	8001104 <HAL_GetTick>
 800427e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004280:	e008      	b.n	8004294 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004282:	f7fc ff3f 	bl	8001104 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e086      	b.n	80043a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004294:	4b45      	ldr	r3, [pc, #276]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d1f0      	bne.n	8004282 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80042a0:	4b42      	ldr	r3, [pc, #264]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 80042a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	031b      	lsls	r3, r3, #12
 80042ae:	493f      	ldr	r1, [pc, #252]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	3b01      	subs	r3, #1
 80042ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	025b      	lsls	r3, r3, #9
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	431a      	orrs	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	041b      	lsls	r3, r3, #16
 80042d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80042d6:	431a      	orrs	r2, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	3b01      	subs	r3, #1
 80042de:	061b      	lsls	r3, r3, #24
 80042e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80042e4:	4931      	ldr	r1, [pc, #196]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80042ea:	4b30      	ldr	r3, [pc, #192]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 80042ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	492d      	ldr	r1, [pc, #180]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80042fc:	4b2b      	ldr	r3, [pc, #172]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 80042fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004300:	f023 0220 	bic.w	r2, r3, #32
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	4928      	ldr	r1, [pc, #160]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 800430a:	4313      	orrs	r3, r2
 800430c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800430e:	4b27      	ldr	r3, [pc, #156]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 8004310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004312:	4a26      	ldr	r2, [pc, #152]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 8004314:	f023 0310 	bic.w	r3, r3, #16
 8004318:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800431a:	4b24      	ldr	r3, [pc, #144]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 800431c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800431e:	4b24      	ldr	r3, [pc, #144]	@ (80043b0 <RCCEx_PLL2_Config+0x160>)
 8004320:	4013      	ands	r3, r2
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	69d2      	ldr	r2, [r2, #28]
 8004326:	00d2      	lsls	r2, r2, #3
 8004328:	4920      	ldr	r1, [pc, #128]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 800432a:	4313      	orrs	r3, r2
 800432c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800432e:	4b1f      	ldr	r3, [pc, #124]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 8004330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004332:	4a1e      	ldr	r2, [pc, #120]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 8004334:	f043 0310 	orr.w	r3, r3, #16
 8004338:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d106      	bne.n	800434e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004340:	4b1a      	ldr	r3, [pc, #104]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 8004342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004344:	4a19      	ldr	r2, [pc, #100]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 8004346:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800434a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800434c:	e00f      	b.n	800436e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d106      	bne.n	8004362 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004354:	4b15      	ldr	r3, [pc, #84]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 8004356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004358:	4a14      	ldr	r2, [pc, #80]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 800435a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800435e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004360:	e005      	b.n	800436e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004362:	4b12      	ldr	r3, [pc, #72]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 8004364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004366:	4a11      	ldr	r2, [pc, #68]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 8004368:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800436c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800436e:	4b0f      	ldr	r3, [pc, #60]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a0e      	ldr	r2, [pc, #56]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 8004374:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004378:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800437a:	f7fc fec3 	bl	8001104 <HAL_GetTick>
 800437e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004380:	e008      	b.n	8004394 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004382:	f7fc febf 	bl	8001104 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	2b02      	cmp	r3, #2
 800438e:	d901      	bls.n	8004394 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e006      	b.n	80043a2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004394:	4b05      	ldr	r3, [pc, #20]	@ (80043ac <RCCEx_PLL2_Config+0x15c>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0f0      	beq.n	8004382 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80043a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3710      	adds	r7, #16
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	58024400 	.word	0x58024400
 80043b0:	ffff0007 	.word	0xffff0007

080043b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043be:	2300      	movs	r3, #0
 80043c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80043c2:	4b53      	ldr	r3, [pc, #332]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 80043c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c6:	f003 0303 	and.w	r3, r3, #3
 80043ca:	2b03      	cmp	r3, #3
 80043cc:	d101      	bne.n	80043d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e099      	b.n	8004506 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80043d2:	4b4f      	ldr	r3, [pc, #316]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a4e      	ldr	r2, [pc, #312]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 80043d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043de:	f7fc fe91 	bl	8001104 <HAL_GetTick>
 80043e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80043e4:	e008      	b.n	80043f8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80043e6:	f7fc fe8d 	bl	8001104 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e086      	b.n	8004506 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80043f8:	4b45      	ldr	r3, [pc, #276]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1f0      	bne.n	80043e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004404:	4b42      	ldr	r3, [pc, #264]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 8004406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004408:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	051b      	lsls	r3, r3, #20
 8004412:	493f      	ldr	r1, [pc, #252]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 8004414:	4313      	orrs	r3, r2
 8004416:	628b      	str	r3, [r1, #40]	@ 0x28
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	3b01      	subs	r3, #1
 800441e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	3b01      	subs	r3, #1
 8004428:	025b      	lsls	r3, r3, #9
 800442a:	b29b      	uxth	r3, r3
 800442c:	431a      	orrs	r2, r3
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	3b01      	subs	r3, #1
 8004434:	041b      	lsls	r3, r3, #16
 8004436:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	3b01      	subs	r3, #1
 8004442:	061b      	lsls	r3, r3, #24
 8004444:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004448:	4931      	ldr	r1, [pc, #196]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 800444a:	4313      	orrs	r3, r2
 800444c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800444e:	4b30      	ldr	r3, [pc, #192]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 8004450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004452:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	492d      	ldr	r1, [pc, #180]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 800445c:	4313      	orrs	r3, r2
 800445e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004460:	4b2b      	ldr	r3, [pc, #172]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 8004462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004464:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	4928      	ldr	r1, [pc, #160]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 800446e:	4313      	orrs	r3, r2
 8004470:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004472:	4b27      	ldr	r3, [pc, #156]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 8004474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004476:	4a26      	ldr	r2, [pc, #152]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 8004478:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800447c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800447e:	4b24      	ldr	r3, [pc, #144]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 8004480:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004482:	4b24      	ldr	r3, [pc, #144]	@ (8004514 <RCCEx_PLL3_Config+0x160>)
 8004484:	4013      	ands	r3, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	69d2      	ldr	r2, [r2, #28]
 800448a:	00d2      	lsls	r2, r2, #3
 800448c:	4920      	ldr	r1, [pc, #128]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 800448e:	4313      	orrs	r3, r2
 8004490:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004492:	4b1f      	ldr	r3, [pc, #124]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 8004494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004496:	4a1e      	ldr	r2, [pc, #120]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 8004498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800449c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d106      	bne.n	80044b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80044a4:	4b1a      	ldr	r3, [pc, #104]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 80044a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a8:	4a19      	ldr	r2, [pc, #100]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 80044aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80044ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80044b0:	e00f      	b.n	80044d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d106      	bne.n	80044c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80044b8:	4b15      	ldr	r3, [pc, #84]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 80044ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044bc:	4a14      	ldr	r2, [pc, #80]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 80044be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80044c4:	e005      	b.n	80044d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80044c6:	4b12      	ldr	r3, [pc, #72]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 80044c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ca:	4a11      	ldr	r2, [pc, #68]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 80044cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80044d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a0e      	ldr	r2, [pc, #56]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 80044d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044de:	f7fc fe11 	bl	8001104 <HAL_GetTick>
 80044e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80044e4:	e008      	b.n	80044f8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80044e6:	f7fc fe0d 	bl	8001104 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d901      	bls.n	80044f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80044f4:	2303      	movs	r3, #3
 80044f6:	e006      	b.n	8004506 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80044f8:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <RCCEx_PLL3_Config+0x15c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f0      	beq.n	80044e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004504:	7bfb      	ldrb	r3, [r7, #15]
}
 8004506:	4618      	mov	r0, r3
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	58024400 	.word	0x58024400
 8004514:	ffff0007 	.word	0xffff0007

08004518 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e042      	b.n	80045b0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004530:	2b00      	cmp	r3, #0
 8004532:	d106      	bne.n	8004542 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f7fc fc29 	bl	8000d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2224      	movs	r2, #36	@ 0x24
 8004546:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0201 	bic.w	r2, r2, #1
 8004558:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fe1e 	bl	80051a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 f8b3 	bl	80046d4 <UART_SetConfig>
 800456e:	4603      	mov	r3, r0
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004574:	2301      	movs	r3, #1
 8004576:	e01b      	b.n	80045b0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004586:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689a      	ldr	r2, [r3, #8]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004596:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 fe9d 	bl	80052e8 <UART_CheckIdleState>
 80045ae:	4603      	mov	r3, r0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b08a      	sub	sp, #40	@ 0x28
 80045bc:	af02      	add	r7, sp, #8
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	4613      	mov	r3, r2
 80045c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	d17b      	bne.n	80046ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <HAL_UART_Transmit+0x26>
 80045d8:	88fb      	ldrh	r3, [r7, #6]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e074      	b.n	80046cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2221      	movs	r2, #33	@ 0x21
 80045ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045f2:	f7fc fd87 	bl	8001104 <HAL_GetTick>
 80045f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	88fa      	ldrh	r2, [r7, #6]
 80045fc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	88fa      	ldrh	r2, [r7, #6]
 8004604:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004610:	d108      	bne.n	8004624 <HAL_UART_Transmit+0x6c>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d104      	bne.n	8004624 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	61bb      	str	r3, [r7, #24]
 8004622:	e003      	b.n	800462c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004628:	2300      	movs	r3, #0
 800462a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800462c:	e030      	b.n	8004690 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	9300      	str	r3, [sp, #0]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	2200      	movs	r2, #0
 8004636:	2180      	movs	r1, #128	@ 0x80
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 feff 	bl	800543c <UART_WaitOnFlagUntilTimeout>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800464c:	2303      	movs	r3, #3
 800464e:	e03d      	b.n	80046cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d10b      	bne.n	800466e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	461a      	mov	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004664:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	3302      	adds	r3, #2
 800466a:	61bb      	str	r3, [r7, #24]
 800466c:	e007      	b.n	800467e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	781a      	ldrb	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	3301      	adds	r3, #1
 800467c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004684:	b29b      	uxth	r3, r3
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004696:	b29b      	uxth	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1c8      	bne.n	800462e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	2200      	movs	r2, #0
 80046a4:	2140      	movs	r1, #64	@ 0x40
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 fec8 	bl	800543c <UART_WaitOnFlagUntilTimeout>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e006      	b.n	80046cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	e000      	b.n	80046cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80046ca:	2302      	movs	r3, #2
  }
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3720      	adds	r7, #32
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d8:	b092      	sub	sp, #72	@ 0x48
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	689a      	ldr	r2, [r3, #8]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	431a      	orrs	r2, r3
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	431a      	orrs	r2, r3
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	4bbe      	ldr	r3, [pc, #760]	@ (80049fc <UART_SetConfig+0x328>)
 8004704:	4013      	ands	r3, r2
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	6812      	ldr	r2, [r2, #0]
 800470a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800470c:	430b      	orrs	r3, r1
 800470e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	68da      	ldr	r2, [r3, #12]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	430a      	orrs	r2, r1
 8004724:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4ab3      	ldr	r2, [pc, #716]	@ (8004a00 <UART_SetConfig+0x32c>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d004      	beq.n	8004740 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800473c:	4313      	orrs	r3, r2
 800473e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	4baf      	ldr	r3, [pc, #700]	@ (8004a04 <UART_SetConfig+0x330>)
 8004748:	4013      	ands	r3, r2
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	6812      	ldr	r2, [r2, #0]
 800474e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004750:	430b      	orrs	r3, r1
 8004752:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475a:	f023 010f 	bic.w	r1, r3, #15
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4aa6      	ldr	r2, [pc, #664]	@ (8004a08 <UART_SetConfig+0x334>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d177      	bne.n	8004864 <UART_SetConfig+0x190>
 8004774:	4ba5      	ldr	r3, [pc, #660]	@ (8004a0c <UART_SetConfig+0x338>)
 8004776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004778:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800477c:	2b28      	cmp	r3, #40	@ 0x28
 800477e:	d86d      	bhi.n	800485c <UART_SetConfig+0x188>
 8004780:	a201      	add	r2, pc, #4	@ (adr r2, 8004788 <UART_SetConfig+0xb4>)
 8004782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004786:	bf00      	nop
 8004788:	0800482d 	.word	0x0800482d
 800478c:	0800485d 	.word	0x0800485d
 8004790:	0800485d 	.word	0x0800485d
 8004794:	0800485d 	.word	0x0800485d
 8004798:	0800485d 	.word	0x0800485d
 800479c:	0800485d 	.word	0x0800485d
 80047a0:	0800485d 	.word	0x0800485d
 80047a4:	0800485d 	.word	0x0800485d
 80047a8:	08004835 	.word	0x08004835
 80047ac:	0800485d 	.word	0x0800485d
 80047b0:	0800485d 	.word	0x0800485d
 80047b4:	0800485d 	.word	0x0800485d
 80047b8:	0800485d 	.word	0x0800485d
 80047bc:	0800485d 	.word	0x0800485d
 80047c0:	0800485d 	.word	0x0800485d
 80047c4:	0800485d 	.word	0x0800485d
 80047c8:	0800483d 	.word	0x0800483d
 80047cc:	0800485d 	.word	0x0800485d
 80047d0:	0800485d 	.word	0x0800485d
 80047d4:	0800485d 	.word	0x0800485d
 80047d8:	0800485d 	.word	0x0800485d
 80047dc:	0800485d 	.word	0x0800485d
 80047e0:	0800485d 	.word	0x0800485d
 80047e4:	0800485d 	.word	0x0800485d
 80047e8:	08004845 	.word	0x08004845
 80047ec:	0800485d 	.word	0x0800485d
 80047f0:	0800485d 	.word	0x0800485d
 80047f4:	0800485d 	.word	0x0800485d
 80047f8:	0800485d 	.word	0x0800485d
 80047fc:	0800485d 	.word	0x0800485d
 8004800:	0800485d 	.word	0x0800485d
 8004804:	0800485d 	.word	0x0800485d
 8004808:	0800484d 	.word	0x0800484d
 800480c:	0800485d 	.word	0x0800485d
 8004810:	0800485d 	.word	0x0800485d
 8004814:	0800485d 	.word	0x0800485d
 8004818:	0800485d 	.word	0x0800485d
 800481c:	0800485d 	.word	0x0800485d
 8004820:	0800485d 	.word	0x0800485d
 8004824:	0800485d 	.word	0x0800485d
 8004828:	08004855 	.word	0x08004855
 800482c:	2301      	movs	r3, #1
 800482e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004832:	e222      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004834:	2304      	movs	r3, #4
 8004836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800483a:	e21e      	b.n	8004c7a <UART_SetConfig+0x5a6>
 800483c:	2308      	movs	r3, #8
 800483e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004842:	e21a      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004844:	2310      	movs	r3, #16
 8004846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800484a:	e216      	b.n	8004c7a <UART_SetConfig+0x5a6>
 800484c:	2320      	movs	r3, #32
 800484e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004852:	e212      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004854:	2340      	movs	r3, #64	@ 0x40
 8004856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800485a:	e20e      	b.n	8004c7a <UART_SetConfig+0x5a6>
 800485c:	2380      	movs	r3, #128	@ 0x80
 800485e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004862:	e20a      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a69      	ldr	r2, [pc, #420]	@ (8004a10 <UART_SetConfig+0x33c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d130      	bne.n	80048d0 <UART_SetConfig+0x1fc>
 800486e:	4b67      	ldr	r3, [pc, #412]	@ (8004a0c <UART_SetConfig+0x338>)
 8004870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004872:	f003 0307 	and.w	r3, r3, #7
 8004876:	2b05      	cmp	r3, #5
 8004878:	d826      	bhi.n	80048c8 <UART_SetConfig+0x1f4>
 800487a:	a201      	add	r2, pc, #4	@ (adr r2, 8004880 <UART_SetConfig+0x1ac>)
 800487c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004880:	08004899 	.word	0x08004899
 8004884:	080048a1 	.word	0x080048a1
 8004888:	080048a9 	.word	0x080048a9
 800488c:	080048b1 	.word	0x080048b1
 8004890:	080048b9 	.word	0x080048b9
 8004894:	080048c1 	.word	0x080048c1
 8004898:	2300      	movs	r3, #0
 800489a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800489e:	e1ec      	b.n	8004c7a <UART_SetConfig+0x5a6>
 80048a0:	2304      	movs	r3, #4
 80048a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048a6:	e1e8      	b.n	8004c7a <UART_SetConfig+0x5a6>
 80048a8:	2308      	movs	r3, #8
 80048aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ae:	e1e4      	b.n	8004c7a <UART_SetConfig+0x5a6>
 80048b0:	2310      	movs	r3, #16
 80048b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048b6:	e1e0      	b.n	8004c7a <UART_SetConfig+0x5a6>
 80048b8:	2320      	movs	r3, #32
 80048ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048be:	e1dc      	b.n	8004c7a <UART_SetConfig+0x5a6>
 80048c0:	2340      	movs	r3, #64	@ 0x40
 80048c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048c6:	e1d8      	b.n	8004c7a <UART_SetConfig+0x5a6>
 80048c8:	2380      	movs	r3, #128	@ 0x80
 80048ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ce:	e1d4      	b.n	8004c7a <UART_SetConfig+0x5a6>
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a4f      	ldr	r2, [pc, #316]	@ (8004a14 <UART_SetConfig+0x340>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d130      	bne.n	800493c <UART_SetConfig+0x268>
 80048da:	4b4c      	ldr	r3, [pc, #304]	@ (8004a0c <UART_SetConfig+0x338>)
 80048dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	2b05      	cmp	r3, #5
 80048e4:	d826      	bhi.n	8004934 <UART_SetConfig+0x260>
 80048e6:	a201      	add	r2, pc, #4	@ (adr r2, 80048ec <UART_SetConfig+0x218>)
 80048e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ec:	08004905 	.word	0x08004905
 80048f0:	0800490d 	.word	0x0800490d
 80048f4:	08004915 	.word	0x08004915
 80048f8:	0800491d 	.word	0x0800491d
 80048fc:	08004925 	.word	0x08004925
 8004900:	0800492d 	.word	0x0800492d
 8004904:	2300      	movs	r3, #0
 8004906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800490a:	e1b6      	b.n	8004c7a <UART_SetConfig+0x5a6>
 800490c:	2304      	movs	r3, #4
 800490e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004912:	e1b2      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004914:	2308      	movs	r3, #8
 8004916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800491a:	e1ae      	b.n	8004c7a <UART_SetConfig+0x5a6>
 800491c:	2310      	movs	r3, #16
 800491e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004922:	e1aa      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004924:	2320      	movs	r3, #32
 8004926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800492a:	e1a6      	b.n	8004c7a <UART_SetConfig+0x5a6>
 800492c:	2340      	movs	r3, #64	@ 0x40
 800492e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004932:	e1a2      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004934:	2380      	movs	r3, #128	@ 0x80
 8004936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800493a:	e19e      	b.n	8004c7a <UART_SetConfig+0x5a6>
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a35      	ldr	r2, [pc, #212]	@ (8004a18 <UART_SetConfig+0x344>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d130      	bne.n	80049a8 <UART_SetConfig+0x2d4>
 8004946:	4b31      	ldr	r3, [pc, #196]	@ (8004a0c <UART_SetConfig+0x338>)
 8004948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	2b05      	cmp	r3, #5
 8004950:	d826      	bhi.n	80049a0 <UART_SetConfig+0x2cc>
 8004952:	a201      	add	r2, pc, #4	@ (adr r2, 8004958 <UART_SetConfig+0x284>)
 8004954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004958:	08004971 	.word	0x08004971
 800495c:	08004979 	.word	0x08004979
 8004960:	08004981 	.word	0x08004981
 8004964:	08004989 	.word	0x08004989
 8004968:	08004991 	.word	0x08004991
 800496c:	08004999 	.word	0x08004999
 8004970:	2300      	movs	r3, #0
 8004972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004976:	e180      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004978:	2304      	movs	r3, #4
 800497a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800497e:	e17c      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004980:	2308      	movs	r3, #8
 8004982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004986:	e178      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004988:	2310      	movs	r3, #16
 800498a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800498e:	e174      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004990:	2320      	movs	r3, #32
 8004992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004996:	e170      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004998:	2340      	movs	r3, #64	@ 0x40
 800499a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800499e:	e16c      	b.n	8004c7a <UART_SetConfig+0x5a6>
 80049a0:	2380      	movs	r3, #128	@ 0x80
 80049a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049a6:	e168      	b.n	8004c7a <UART_SetConfig+0x5a6>
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1b      	ldr	r2, [pc, #108]	@ (8004a1c <UART_SetConfig+0x348>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d142      	bne.n	8004a38 <UART_SetConfig+0x364>
 80049b2:	4b16      	ldr	r3, [pc, #88]	@ (8004a0c <UART_SetConfig+0x338>)
 80049b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	2b05      	cmp	r3, #5
 80049bc:	d838      	bhi.n	8004a30 <UART_SetConfig+0x35c>
 80049be:	a201      	add	r2, pc, #4	@ (adr r2, 80049c4 <UART_SetConfig+0x2f0>)
 80049c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c4:	080049dd 	.word	0x080049dd
 80049c8:	080049e5 	.word	0x080049e5
 80049cc:	080049ed 	.word	0x080049ed
 80049d0:	080049f5 	.word	0x080049f5
 80049d4:	08004a21 	.word	0x08004a21
 80049d8:	08004a29 	.word	0x08004a29
 80049dc:	2300      	movs	r3, #0
 80049de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049e2:	e14a      	b.n	8004c7a <UART_SetConfig+0x5a6>
 80049e4:	2304      	movs	r3, #4
 80049e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ea:	e146      	b.n	8004c7a <UART_SetConfig+0x5a6>
 80049ec:	2308      	movs	r3, #8
 80049ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049f2:	e142      	b.n	8004c7a <UART_SetConfig+0x5a6>
 80049f4:	2310      	movs	r3, #16
 80049f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049fa:	e13e      	b.n	8004c7a <UART_SetConfig+0x5a6>
 80049fc:	cfff69f3 	.word	0xcfff69f3
 8004a00:	58000c00 	.word	0x58000c00
 8004a04:	11fff4ff 	.word	0x11fff4ff
 8004a08:	40011000 	.word	0x40011000
 8004a0c:	58024400 	.word	0x58024400
 8004a10:	40004400 	.word	0x40004400
 8004a14:	40004800 	.word	0x40004800
 8004a18:	40004c00 	.word	0x40004c00
 8004a1c:	40005000 	.word	0x40005000
 8004a20:	2320      	movs	r3, #32
 8004a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a26:	e128      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004a28:	2340      	movs	r3, #64	@ 0x40
 8004a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a2e:	e124      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004a30:	2380      	movs	r3, #128	@ 0x80
 8004a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a36:	e120      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4acb      	ldr	r2, [pc, #812]	@ (8004d6c <UART_SetConfig+0x698>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d176      	bne.n	8004b30 <UART_SetConfig+0x45c>
 8004a42:	4bcb      	ldr	r3, [pc, #812]	@ (8004d70 <UART_SetConfig+0x69c>)
 8004a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a4a:	2b28      	cmp	r3, #40	@ 0x28
 8004a4c:	d86c      	bhi.n	8004b28 <UART_SetConfig+0x454>
 8004a4e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a54 <UART_SetConfig+0x380>)
 8004a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a54:	08004af9 	.word	0x08004af9
 8004a58:	08004b29 	.word	0x08004b29
 8004a5c:	08004b29 	.word	0x08004b29
 8004a60:	08004b29 	.word	0x08004b29
 8004a64:	08004b29 	.word	0x08004b29
 8004a68:	08004b29 	.word	0x08004b29
 8004a6c:	08004b29 	.word	0x08004b29
 8004a70:	08004b29 	.word	0x08004b29
 8004a74:	08004b01 	.word	0x08004b01
 8004a78:	08004b29 	.word	0x08004b29
 8004a7c:	08004b29 	.word	0x08004b29
 8004a80:	08004b29 	.word	0x08004b29
 8004a84:	08004b29 	.word	0x08004b29
 8004a88:	08004b29 	.word	0x08004b29
 8004a8c:	08004b29 	.word	0x08004b29
 8004a90:	08004b29 	.word	0x08004b29
 8004a94:	08004b09 	.word	0x08004b09
 8004a98:	08004b29 	.word	0x08004b29
 8004a9c:	08004b29 	.word	0x08004b29
 8004aa0:	08004b29 	.word	0x08004b29
 8004aa4:	08004b29 	.word	0x08004b29
 8004aa8:	08004b29 	.word	0x08004b29
 8004aac:	08004b29 	.word	0x08004b29
 8004ab0:	08004b29 	.word	0x08004b29
 8004ab4:	08004b11 	.word	0x08004b11
 8004ab8:	08004b29 	.word	0x08004b29
 8004abc:	08004b29 	.word	0x08004b29
 8004ac0:	08004b29 	.word	0x08004b29
 8004ac4:	08004b29 	.word	0x08004b29
 8004ac8:	08004b29 	.word	0x08004b29
 8004acc:	08004b29 	.word	0x08004b29
 8004ad0:	08004b29 	.word	0x08004b29
 8004ad4:	08004b19 	.word	0x08004b19
 8004ad8:	08004b29 	.word	0x08004b29
 8004adc:	08004b29 	.word	0x08004b29
 8004ae0:	08004b29 	.word	0x08004b29
 8004ae4:	08004b29 	.word	0x08004b29
 8004ae8:	08004b29 	.word	0x08004b29
 8004aec:	08004b29 	.word	0x08004b29
 8004af0:	08004b29 	.word	0x08004b29
 8004af4:	08004b21 	.word	0x08004b21
 8004af8:	2301      	movs	r3, #1
 8004afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004afe:	e0bc      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004b00:	2304      	movs	r3, #4
 8004b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b06:	e0b8      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004b08:	2308      	movs	r3, #8
 8004b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b0e:	e0b4      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004b10:	2310      	movs	r3, #16
 8004b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b16:	e0b0      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004b18:	2320      	movs	r3, #32
 8004b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b1e:	e0ac      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004b20:	2340      	movs	r3, #64	@ 0x40
 8004b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b26:	e0a8      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004b28:	2380      	movs	r3, #128	@ 0x80
 8004b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b2e:	e0a4      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a8f      	ldr	r2, [pc, #572]	@ (8004d74 <UART_SetConfig+0x6a0>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d130      	bne.n	8004b9c <UART_SetConfig+0x4c8>
 8004b3a:	4b8d      	ldr	r3, [pc, #564]	@ (8004d70 <UART_SetConfig+0x69c>)
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	2b05      	cmp	r3, #5
 8004b44:	d826      	bhi.n	8004b94 <UART_SetConfig+0x4c0>
 8004b46:	a201      	add	r2, pc, #4	@ (adr r2, 8004b4c <UART_SetConfig+0x478>)
 8004b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4c:	08004b65 	.word	0x08004b65
 8004b50:	08004b6d 	.word	0x08004b6d
 8004b54:	08004b75 	.word	0x08004b75
 8004b58:	08004b7d 	.word	0x08004b7d
 8004b5c:	08004b85 	.word	0x08004b85
 8004b60:	08004b8d 	.word	0x08004b8d
 8004b64:	2300      	movs	r3, #0
 8004b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b6a:	e086      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004b6c:	2304      	movs	r3, #4
 8004b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b72:	e082      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004b74:	2308      	movs	r3, #8
 8004b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b7a:	e07e      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b82:	e07a      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004b84:	2320      	movs	r3, #32
 8004b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b8a:	e076      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004b8c:	2340      	movs	r3, #64	@ 0x40
 8004b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b92:	e072      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004b94:	2380      	movs	r3, #128	@ 0x80
 8004b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b9a:	e06e      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a75      	ldr	r2, [pc, #468]	@ (8004d78 <UART_SetConfig+0x6a4>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d130      	bne.n	8004c08 <UART_SetConfig+0x534>
 8004ba6:	4b72      	ldr	r3, [pc, #456]	@ (8004d70 <UART_SetConfig+0x69c>)
 8004ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	2b05      	cmp	r3, #5
 8004bb0:	d826      	bhi.n	8004c00 <UART_SetConfig+0x52c>
 8004bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb8 <UART_SetConfig+0x4e4>)
 8004bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb8:	08004bd1 	.word	0x08004bd1
 8004bbc:	08004bd9 	.word	0x08004bd9
 8004bc0:	08004be1 	.word	0x08004be1
 8004bc4:	08004be9 	.word	0x08004be9
 8004bc8:	08004bf1 	.word	0x08004bf1
 8004bcc:	08004bf9 	.word	0x08004bf9
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bd6:	e050      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bde:	e04c      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004be0:	2308      	movs	r3, #8
 8004be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004be6:	e048      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004be8:	2310      	movs	r3, #16
 8004bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bee:	e044      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004bf0:	2320      	movs	r3, #32
 8004bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bf6:	e040      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004bf8:	2340      	movs	r3, #64	@ 0x40
 8004bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bfe:	e03c      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004c00:	2380      	movs	r3, #128	@ 0x80
 8004c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c06:	e038      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a5b      	ldr	r2, [pc, #364]	@ (8004d7c <UART_SetConfig+0x6a8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d130      	bne.n	8004c74 <UART_SetConfig+0x5a0>
 8004c12:	4b57      	ldr	r3, [pc, #348]	@ (8004d70 <UART_SetConfig+0x69c>)
 8004c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c16:	f003 0307 	and.w	r3, r3, #7
 8004c1a:	2b05      	cmp	r3, #5
 8004c1c:	d826      	bhi.n	8004c6c <UART_SetConfig+0x598>
 8004c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004c24 <UART_SetConfig+0x550>)
 8004c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c24:	08004c3d 	.word	0x08004c3d
 8004c28:	08004c45 	.word	0x08004c45
 8004c2c:	08004c4d 	.word	0x08004c4d
 8004c30:	08004c55 	.word	0x08004c55
 8004c34:	08004c5d 	.word	0x08004c5d
 8004c38:	08004c65 	.word	0x08004c65
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c42:	e01a      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004c44:	2304      	movs	r3, #4
 8004c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c4a:	e016      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004c4c:	2308      	movs	r3, #8
 8004c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c52:	e012      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004c54:	2310      	movs	r3, #16
 8004c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c5a:	e00e      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004c5c:	2320      	movs	r3, #32
 8004c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c62:	e00a      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004c64:	2340      	movs	r3, #64	@ 0x40
 8004c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c6a:	e006      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004c6c:	2380      	movs	r3, #128	@ 0x80
 8004c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c72:	e002      	b.n	8004c7a <UART_SetConfig+0x5a6>
 8004c74:	2380      	movs	r3, #128	@ 0x80
 8004c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a3f      	ldr	r2, [pc, #252]	@ (8004d7c <UART_SetConfig+0x6a8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	f040 80f8 	bne.w	8004e76 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004c8a:	2b20      	cmp	r3, #32
 8004c8c:	dc46      	bgt.n	8004d1c <UART_SetConfig+0x648>
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	f2c0 8082 	blt.w	8004d98 <UART_SetConfig+0x6c4>
 8004c94:	3b02      	subs	r3, #2
 8004c96:	2b1e      	cmp	r3, #30
 8004c98:	d87e      	bhi.n	8004d98 <UART_SetConfig+0x6c4>
 8004c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8004ca0 <UART_SetConfig+0x5cc>)
 8004c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ca0:	08004d23 	.word	0x08004d23
 8004ca4:	08004d99 	.word	0x08004d99
 8004ca8:	08004d2b 	.word	0x08004d2b
 8004cac:	08004d99 	.word	0x08004d99
 8004cb0:	08004d99 	.word	0x08004d99
 8004cb4:	08004d99 	.word	0x08004d99
 8004cb8:	08004d3b 	.word	0x08004d3b
 8004cbc:	08004d99 	.word	0x08004d99
 8004cc0:	08004d99 	.word	0x08004d99
 8004cc4:	08004d99 	.word	0x08004d99
 8004cc8:	08004d99 	.word	0x08004d99
 8004ccc:	08004d99 	.word	0x08004d99
 8004cd0:	08004d99 	.word	0x08004d99
 8004cd4:	08004d99 	.word	0x08004d99
 8004cd8:	08004d4b 	.word	0x08004d4b
 8004cdc:	08004d99 	.word	0x08004d99
 8004ce0:	08004d99 	.word	0x08004d99
 8004ce4:	08004d99 	.word	0x08004d99
 8004ce8:	08004d99 	.word	0x08004d99
 8004cec:	08004d99 	.word	0x08004d99
 8004cf0:	08004d99 	.word	0x08004d99
 8004cf4:	08004d99 	.word	0x08004d99
 8004cf8:	08004d99 	.word	0x08004d99
 8004cfc:	08004d99 	.word	0x08004d99
 8004d00:	08004d99 	.word	0x08004d99
 8004d04:	08004d99 	.word	0x08004d99
 8004d08:	08004d99 	.word	0x08004d99
 8004d0c:	08004d99 	.word	0x08004d99
 8004d10:	08004d99 	.word	0x08004d99
 8004d14:	08004d99 	.word	0x08004d99
 8004d18:	08004d8b 	.word	0x08004d8b
 8004d1c:	2b40      	cmp	r3, #64	@ 0x40
 8004d1e:	d037      	beq.n	8004d90 <UART_SetConfig+0x6bc>
 8004d20:	e03a      	b.n	8004d98 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004d22:	f7fe ffd7 	bl	8003cd4 <HAL_RCCEx_GetD3PCLK1Freq>
 8004d26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004d28:	e03c      	b.n	8004da4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f7fe ffe6 	bl	8003d00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d38:	e034      	b.n	8004da4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d3a:	f107 0318 	add.w	r3, r7, #24
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff f932 	bl	8003fa8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d48:	e02c      	b.n	8004da4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d4a:	4b09      	ldr	r3, [pc, #36]	@ (8004d70 <UART_SetConfig+0x69c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 0320 	and.w	r3, r3, #32
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d016      	beq.n	8004d84 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d56:	4b06      	ldr	r3, [pc, #24]	@ (8004d70 <UART_SetConfig+0x69c>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	08db      	lsrs	r3, r3, #3
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	4a07      	ldr	r2, [pc, #28]	@ (8004d80 <UART_SetConfig+0x6ac>)
 8004d62:	fa22 f303 	lsr.w	r3, r2, r3
 8004d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d68:	e01c      	b.n	8004da4 <UART_SetConfig+0x6d0>
 8004d6a:	bf00      	nop
 8004d6c:	40011400 	.word	0x40011400
 8004d70:	58024400 	.word	0x58024400
 8004d74:	40007800 	.word	0x40007800
 8004d78:	40007c00 	.word	0x40007c00
 8004d7c:	58000c00 	.word	0x58000c00
 8004d80:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004d84:	4b9d      	ldr	r3, [pc, #628]	@ (8004ffc <UART_SetConfig+0x928>)
 8004d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d88:	e00c      	b.n	8004da4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d8a:	4b9d      	ldr	r3, [pc, #628]	@ (8005000 <UART_SetConfig+0x92c>)
 8004d8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d8e:	e009      	b.n	8004da4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d96:	e005      	b.n	8004da4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004da2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	f000 81de 	beq.w	8005168 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db0:	4a94      	ldr	r2, [pc, #592]	@ (8005004 <UART_SetConfig+0x930>)
 8004db2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004db6:	461a      	mov	r2, r3
 8004db8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dba:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dbe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	4413      	add	r3, r2
 8004dca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d305      	bcc.n	8004ddc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d903      	bls.n	8004de4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004de2:	e1c1      	b.n	8005168 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004de6:	2200      	movs	r2, #0
 8004de8:	60bb      	str	r3, [r7, #8]
 8004dea:	60fa      	str	r2, [r7, #12]
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df0:	4a84      	ldr	r2, [pc, #528]	@ (8005004 <UART_SetConfig+0x930>)
 8004df2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	2200      	movs	r2, #0
 8004dfa:	603b      	str	r3, [r7, #0]
 8004dfc:	607a      	str	r2, [r7, #4]
 8004dfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e02:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e06:	f7fb fa6b 	bl	80002e0 <__aeabi_uldivmod>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4610      	mov	r0, r2
 8004e10:	4619      	mov	r1, r3
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	020b      	lsls	r3, r1, #8
 8004e1c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e20:	0202      	lsls	r2, r0, #8
 8004e22:	6979      	ldr	r1, [r7, #20]
 8004e24:	6849      	ldr	r1, [r1, #4]
 8004e26:	0849      	lsrs	r1, r1, #1
 8004e28:	2000      	movs	r0, #0
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	4605      	mov	r5, r0
 8004e2e:	eb12 0804 	adds.w	r8, r2, r4
 8004e32:	eb43 0905 	adc.w	r9, r3, r5
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	469a      	mov	sl, r3
 8004e3e:	4693      	mov	fp, r2
 8004e40:	4652      	mov	r2, sl
 8004e42:	465b      	mov	r3, fp
 8004e44:	4640      	mov	r0, r8
 8004e46:	4649      	mov	r1, r9
 8004e48:	f7fb fa4a 	bl	80002e0 <__aeabi_uldivmod>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4613      	mov	r3, r2
 8004e52:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e5a:	d308      	bcc.n	8004e6e <UART_SetConfig+0x79a>
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e62:	d204      	bcs.n	8004e6e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e6a:	60da      	str	r2, [r3, #12]
 8004e6c:	e17c      	b.n	8005168 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004e74:	e178      	b.n	8005168 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	69db      	ldr	r3, [r3, #28]
 8004e7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e7e:	f040 80c5 	bne.w	800500c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004e82:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004e86:	2b20      	cmp	r3, #32
 8004e88:	dc48      	bgt.n	8004f1c <UART_SetConfig+0x848>
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	db7b      	blt.n	8004f86 <UART_SetConfig+0x8b2>
 8004e8e:	2b20      	cmp	r3, #32
 8004e90:	d879      	bhi.n	8004f86 <UART_SetConfig+0x8b2>
 8004e92:	a201      	add	r2, pc, #4	@ (adr r2, 8004e98 <UART_SetConfig+0x7c4>)
 8004e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e98:	08004f23 	.word	0x08004f23
 8004e9c:	08004f2b 	.word	0x08004f2b
 8004ea0:	08004f87 	.word	0x08004f87
 8004ea4:	08004f87 	.word	0x08004f87
 8004ea8:	08004f33 	.word	0x08004f33
 8004eac:	08004f87 	.word	0x08004f87
 8004eb0:	08004f87 	.word	0x08004f87
 8004eb4:	08004f87 	.word	0x08004f87
 8004eb8:	08004f43 	.word	0x08004f43
 8004ebc:	08004f87 	.word	0x08004f87
 8004ec0:	08004f87 	.word	0x08004f87
 8004ec4:	08004f87 	.word	0x08004f87
 8004ec8:	08004f87 	.word	0x08004f87
 8004ecc:	08004f87 	.word	0x08004f87
 8004ed0:	08004f87 	.word	0x08004f87
 8004ed4:	08004f87 	.word	0x08004f87
 8004ed8:	08004f53 	.word	0x08004f53
 8004edc:	08004f87 	.word	0x08004f87
 8004ee0:	08004f87 	.word	0x08004f87
 8004ee4:	08004f87 	.word	0x08004f87
 8004ee8:	08004f87 	.word	0x08004f87
 8004eec:	08004f87 	.word	0x08004f87
 8004ef0:	08004f87 	.word	0x08004f87
 8004ef4:	08004f87 	.word	0x08004f87
 8004ef8:	08004f87 	.word	0x08004f87
 8004efc:	08004f87 	.word	0x08004f87
 8004f00:	08004f87 	.word	0x08004f87
 8004f04:	08004f87 	.word	0x08004f87
 8004f08:	08004f87 	.word	0x08004f87
 8004f0c:	08004f87 	.word	0x08004f87
 8004f10:	08004f87 	.word	0x08004f87
 8004f14:	08004f87 	.word	0x08004f87
 8004f18:	08004f79 	.word	0x08004f79
 8004f1c:	2b40      	cmp	r3, #64	@ 0x40
 8004f1e:	d02e      	beq.n	8004f7e <UART_SetConfig+0x8aa>
 8004f20:	e031      	b.n	8004f86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f22:	f7fd fc61 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 8004f26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f28:	e033      	b.n	8004f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f2a:	f7fd fc73 	bl	8002814 <HAL_RCC_GetPCLK2Freq>
 8004f2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f30:	e02f      	b.n	8004f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fe fee2 	bl	8003d00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f40:	e027      	b.n	8004f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f42:	f107 0318 	add.w	r3, r7, #24
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff f82e 	bl	8003fa8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f50:	e01f      	b.n	8004f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f52:	4b2d      	ldr	r3, [pc, #180]	@ (8005008 <UART_SetConfig+0x934>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0320 	and.w	r3, r3, #32
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d009      	beq.n	8004f72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8005008 <UART_SetConfig+0x934>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	08db      	lsrs	r3, r3, #3
 8004f64:	f003 0303 	and.w	r3, r3, #3
 8004f68:	4a24      	ldr	r2, [pc, #144]	@ (8004ffc <UART_SetConfig+0x928>)
 8004f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f70:	e00f      	b.n	8004f92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004f72:	4b22      	ldr	r3, [pc, #136]	@ (8004ffc <UART_SetConfig+0x928>)
 8004f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f76:	e00c      	b.n	8004f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f78:	4b21      	ldr	r3, [pc, #132]	@ (8005000 <UART_SetConfig+0x92c>)
 8004f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f7c:	e009      	b.n	8004f92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f84:	e005      	b.n	8004f92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004f86:	2300      	movs	r3, #0
 8004f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004f90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80e7 	beq.w	8005168 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f9e:	4a19      	ldr	r2, [pc, #100]	@ (8005004 <UART_SetConfig+0x930>)
 8004fa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fac:	005a      	lsls	r2, r3, #1
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	085b      	lsrs	r3, r3, #1
 8004fb4:	441a      	add	r2, r3
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc2:	2b0f      	cmp	r3, #15
 8004fc4:	d916      	bls.n	8004ff4 <UART_SetConfig+0x920>
 8004fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fcc:	d212      	bcs.n	8004ff4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	f023 030f 	bic.w	r3, r3, #15
 8004fd6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fda:	085b      	lsrs	r3, r3, #1
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	f003 0307 	and.w	r3, r3, #7
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004ff0:	60da      	str	r2, [r3, #12]
 8004ff2:	e0b9      	b.n	8005168 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004ffa:	e0b5      	b.n	8005168 <UART_SetConfig+0xa94>
 8004ffc:	03d09000 	.word	0x03d09000
 8005000:	003d0900 	.word	0x003d0900
 8005004:	08008650 	.word	0x08008650
 8005008:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800500c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005010:	2b20      	cmp	r3, #32
 8005012:	dc49      	bgt.n	80050a8 <UART_SetConfig+0x9d4>
 8005014:	2b00      	cmp	r3, #0
 8005016:	db7c      	blt.n	8005112 <UART_SetConfig+0xa3e>
 8005018:	2b20      	cmp	r3, #32
 800501a:	d87a      	bhi.n	8005112 <UART_SetConfig+0xa3e>
 800501c:	a201      	add	r2, pc, #4	@ (adr r2, 8005024 <UART_SetConfig+0x950>)
 800501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005022:	bf00      	nop
 8005024:	080050af 	.word	0x080050af
 8005028:	080050b7 	.word	0x080050b7
 800502c:	08005113 	.word	0x08005113
 8005030:	08005113 	.word	0x08005113
 8005034:	080050bf 	.word	0x080050bf
 8005038:	08005113 	.word	0x08005113
 800503c:	08005113 	.word	0x08005113
 8005040:	08005113 	.word	0x08005113
 8005044:	080050cf 	.word	0x080050cf
 8005048:	08005113 	.word	0x08005113
 800504c:	08005113 	.word	0x08005113
 8005050:	08005113 	.word	0x08005113
 8005054:	08005113 	.word	0x08005113
 8005058:	08005113 	.word	0x08005113
 800505c:	08005113 	.word	0x08005113
 8005060:	08005113 	.word	0x08005113
 8005064:	080050df 	.word	0x080050df
 8005068:	08005113 	.word	0x08005113
 800506c:	08005113 	.word	0x08005113
 8005070:	08005113 	.word	0x08005113
 8005074:	08005113 	.word	0x08005113
 8005078:	08005113 	.word	0x08005113
 800507c:	08005113 	.word	0x08005113
 8005080:	08005113 	.word	0x08005113
 8005084:	08005113 	.word	0x08005113
 8005088:	08005113 	.word	0x08005113
 800508c:	08005113 	.word	0x08005113
 8005090:	08005113 	.word	0x08005113
 8005094:	08005113 	.word	0x08005113
 8005098:	08005113 	.word	0x08005113
 800509c:	08005113 	.word	0x08005113
 80050a0:	08005113 	.word	0x08005113
 80050a4:	08005105 	.word	0x08005105
 80050a8:	2b40      	cmp	r3, #64	@ 0x40
 80050aa:	d02e      	beq.n	800510a <UART_SetConfig+0xa36>
 80050ac:	e031      	b.n	8005112 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050ae:	f7fd fb9b 	bl	80027e8 <HAL_RCC_GetPCLK1Freq>
 80050b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050b4:	e033      	b.n	800511e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050b6:	f7fd fbad 	bl	8002814 <HAL_RCC_GetPCLK2Freq>
 80050ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050bc:	e02f      	b.n	800511e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fe fe1c 	bl	8003d00 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050cc:	e027      	b.n	800511e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050ce:	f107 0318 	add.w	r3, r7, #24
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7fe ff68 	bl	8003fa8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050dc:	e01f      	b.n	800511e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050de:	4b2d      	ldr	r3, [pc, #180]	@ (8005194 <UART_SetConfig+0xac0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0320 	and.w	r3, r3, #32
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d009      	beq.n	80050fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005194 <UART_SetConfig+0xac0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	08db      	lsrs	r3, r3, #3
 80050f0:	f003 0303 	and.w	r3, r3, #3
 80050f4:	4a28      	ldr	r2, [pc, #160]	@ (8005198 <UART_SetConfig+0xac4>)
 80050f6:	fa22 f303 	lsr.w	r3, r2, r3
 80050fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050fc:	e00f      	b.n	800511e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80050fe:	4b26      	ldr	r3, [pc, #152]	@ (8005198 <UART_SetConfig+0xac4>)
 8005100:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005102:	e00c      	b.n	800511e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005104:	4b25      	ldr	r3, [pc, #148]	@ (800519c <UART_SetConfig+0xac8>)
 8005106:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005108:	e009      	b.n	800511e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800510a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800510e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005110:	e005      	b.n	800511e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800511c:	bf00      	nop
    }

    if (pclk != 0U)
 800511e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005120:	2b00      	cmp	r3, #0
 8005122:	d021      	beq.n	8005168 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005128:	4a1d      	ldr	r2, [pc, #116]	@ (80051a0 <UART_SetConfig+0xacc>)
 800512a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800512e:	461a      	mov	r2, r3
 8005130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005132:	fbb3 f2f2 	udiv	r2, r3, r2
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	085b      	lsrs	r3, r3, #1
 800513c:	441a      	add	r2, r3
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	fbb2 f3f3 	udiv	r3, r2, r3
 8005146:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800514a:	2b0f      	cmp	r3, #15
 800514c:	d909      	bls.n	8005162 <UART_SetConfig+0xa8e>
 800514e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005154:	d205      	bcs.n	8005162 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005158:	b29a      	uxth	r2, r3
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	60da      	str	r2, [r3, #12]
 8005160:	e002      	b.n	8005168 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	2201      	movs	r2, #1
 800516c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	2201      	movs	r2, #1
 8005174:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2200      	movs	r2, #0
 800517c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	2200      	movs	r2, #0
 8005182:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005184:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005188:	4618      	mov	r0, r3
 800518a:	3748      	adds	r7, #72	@ 0x48
 800518c:	46bd      	mov	sp, r7
 800518e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005192:	bf00      	nop
 8005194:	58024400 	.word	0x58024400
 8005198:	03d09000 	.word	0x03d09000
 800519c:	003d0900 	.word	0x003d0900
 80051a0:	08008650 	.word	0x08008650

080051a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00a      	beq.n	80051ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005216:	f003 0304 	and.w	r3, r3, #4
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005238:	f003 0310 	and.w	r3, r3, #16
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525a:	f003 0320 	and.w	r3, r3, #32
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005280:	2b00      	cmp	r3, #0
 8005282:	d01a      	beq.n	80052ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052a2:	d10a      	bne.n	80052ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00a      	beq.n	80052dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	605a      	str	r2, [r3, #4]
  }
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b098      	sub	sp, #96	@ 0x60
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052f8:	f7fb ff04 	bl	8001104 <HAL_GetTick>
 80052fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0308 	and.w	r3, r3, #8
 8005308:	2b08      	cmp	r3, #8
 800530a:	d12f      	bne.n	800536c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800530c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005314:	2200      	movs	r2, #0
 8005316:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f88e 	bl	800543c <UART_WaitOnFlagUntilTimeout>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d022      	beq.n	800536c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532e:	e853 3f00 	ldrex	r3, [r3]
 8005332:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005334:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005336:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800533a:	653b      	str	r3, [r7, #80]	@ 0x50
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	461a      	mov	r2, r3
 8005342:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005344:	647b      	str	r3, [r7, #68]	@ 0x44
 8005346:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005348:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800534a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800534c:	e841 2300 	strex	r3, r2, [r1]
 8005350:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1e6      	bne.n	8005326 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2220      	movs	r2, #32
 800535c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e063      	b.n	8005434 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0304 	and.w	r3, r3, #4
 8005376:	2b04      	cmp	r3, #4
 8005378:	d149      	bne.n	800540e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800537a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800537e:	9300      	str	r3, [sp, #0]
 8005380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005382:	2200      	movs	r2, #0
 8005384:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f857 	bl	800543c <UART_WaitOnFlagUntilTimeout>
 800538e:	4603      	mov	r3, r0
 8005390:	2b00      	cmp	r3, #0
 8005392:	d03c      	beq.n	800540e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	623b      	str	r3, [r7, #32]
   return(result);
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80053b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053ba:	e841 2300 	strex	r3, r2, [r1]
 80053be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80053c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1e6      	bne.n	8005394 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	3308      	adds	r3, #8
 80053cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	e853 3f00 	ldrex	r3, [r3]
 80053d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f023 0301 	bic.w	r3, r3, #1
 80053dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3308      	adds	r3, #8
 80053e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053e6:	61fa      	str	r2, [r7, #28]
 80053e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ea:	69b9      	ldr	r1, [r7, #24]
 80053ec:	69fa      	ldr	r2, [r7, #28]
 80053ee:	e841 2300 	strex	r3, r2, [r1]
 80053f2:	617b      	str	r3, [r7, #20]
   return(result);
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1e5      	bne.n	80053c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2220      	movs	r2, #32
 80053fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e012      	b.n	8005434 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2220      	movs	r2, #32
 800541a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005432:	2300      	movs	r3, #0
}
 8005434:	4618      	mov	r0, r3
 8005436:	3758      	adds	r7, #88	@ 0x58
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	603b      	str	r3, [r7, #0]
 8005448:	4613      	mov	r3, r2
 800544a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800544c:	e04f      	b.n	80054ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005454:	d04b      	beq.n	80054ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005456:	f7fb fe55 	bl	8001104 <HAL_GetTick>
 800545a:	4602      	mov	r2, r0
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	1ad3      	subs	r3, r2, r3
 8005460:	69ba      	ldr	r2, [r7, #24]
 8005462:	429a      	cmp	r2, r3
 8005464:	d302      	bcc.n	800546c <UART_WaitOnFlagUntilTimeout+0x30>
 8005466:	69bb      	ldr	r3, [r7, #24]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e04e      	b.n	800550e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0304 	and.w	r3, r3, #4
 800547a:	2b00      	cmp	r3, #0
 800547c:	d037      	beq.n	80054ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b80      	cmp	r3, #128	@ 0x80
 8005482:	d034      	beq.n	80054ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	2b40      	cmp	r3, #64	@ 0x40
 8005488:	d031      	beq.n	80054ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	f003 0308 	and.w	r3, r3, #8
 8005494:	2b08      	cmp	r3, #8
 8005496:	d110      	bne.n	80054ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2208      	movs	r2, #8
 800549e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f000 f839 	bl	8005518 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2208      	movs	r2, #8
 80054aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80054b6:	2301      	movs	r3, #1
 80054b8:	e029      	b.n	800550e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054c8:	d111      	bne.n	80054ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 f81f 	bl	8005518 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2220      	movs	r2, #32
 80054de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80054ea:	2303      	movs	r3, #3
 80054ec:	e00f      	b.n	800550e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	4013      	ands	r3, r2
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	429a      	cmp	r2, r3
 80054fc:	bf0c      	ite	eq
 80054fe:	2301      	moveq	r3, #1
 8005500:	2300      	movne	r3, #0
 8005502:	b2db      	uxtb	r3, r3
 8005504:	461a      	mov	r2, r3
 8005506:	79fb      	ldrb	r3, [r7, #7]
 8005508:	429a      	cmp	r2, r3
 800550a:	d0a0      	beq.n	800544e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
	...

08005518 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005518:	b480      	push	{r7}
 800551a:	b095      	sub	sp, #84	@ 0x54
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005530:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005534:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800553e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005540:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005544:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800554c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1e6      	bne.n	8005520 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	3308      	adds	r3, #8
 8005558:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555a:	6a3b      	ldr	r3, [r7, #32]
 800555c:	e853 3f00 	ldrex	r3, [r3]
 8005560:	61fb      	str	r3, [r7, #28]
   return(result);
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	4b1e      	ldr	r3, [pc, #120]	@ (80055e0 <UART_EndRxTransfer+0xc8>)
 8005566:	4013      	ands	r3, r2
 8005568:	64bb      	str	r3, [r7, #72]	@ 0x48
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3308      	adds	r3, #8
 8005570:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005572:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005574:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005576:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800557a:	e841 2300 	strex	r3, r2, [r1]
 800557e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1e5      	bne.n	8005552 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800558a:	2b01      	cmp	r3, #1
 800558c:	d118      	bne.n	80055c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	e853 3f00 	ldrex	r3, [r3]
 800559a:	60bb      	str	r3, [r7, #8]
   return(result);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f023 0310 	bic.w	r3, r3, #16
 80055a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	461a      	mov	r2, r3
 80055aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ac:	61bb      	str	r3, [r7, #24]
 80055ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b0:	6979      	ldr	r1, [r7, #20]
 80055b2:	69ba      	ldr	r2, [r7, #24]
 80055b4:	e841 2300 	strex	r3, r2, [r1]
 80055b8:	613b      	str	r3, [r7, #16]
   return(result);
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d1e6      	bne.n	800558e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2220      	movs	r2, #32
 80055c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80055d4:	bf00      	nop
 80055d6:	3754      	adds	r7, #84	@ 0x54
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	effffffe 	.word	0xeffffffe

080055e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b085      	sub	sp, #20
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d101      	bne.n	80055fa <HAL_UARTEx_DisableFifoMode+0x16>
 80055f6:	2302      	movs	r3, #2
 80055f8:	e027      	b.n	800564a <HAL_UARTEx_DisableFifoMode+0x66>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2201      	movs	r2, #1
 80055fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2224      	movs	r2, #36	@ 0x24
 8005606:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0201 	bic.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005628:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2220      	movs	r2, #32
 800563c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3714      	adds	r7, #20
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr

08005656 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005666:	2b01      	cmp	r3, #1
 8005668:	d101      	bne.n	800566e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800566a:	2302      	movs	r3, #2
 800566c:	e02d      	b.n	80056ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2224      	movs	r2, #36	@ 0x24
 800567a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681a      	ldr	r2, [r3, #0]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f022 0201 	bic.w	r2, r2, #1
 8005694:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f850 	bl	8005750 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2220      	movs	r2, #32
 80056bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b084      	sub	sp, #16
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6078      	str	r0, [r7, #4]
 80056da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d101      	bne.n	80056ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80056e6:	2302      	movs	r3, #2
 80056e8:	e02d      	b.n	8005746 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2224      	movs	r2, #36	@ 0x24
 80056f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f022 0201 	bic.w	r2, r2, #1
 8005710:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	683a      	ldr	r2, [r7, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f812 	bl	8005750 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2220      	movs	r2, #32
 8005738:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800575c:	2b00      	cmp	r3, #0
 800575e:	d108      	bne.n	8005772 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2201      	movs	r2, #1
 800576c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005770:	e031      	b.n	80057d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005772:	2310      	movs	r3, #16
 8005774:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005776:	2310      	movs	r3, #16
 8005778:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	0e5b      	lsrs	r3, r3, #25
 8005782:	b2db      	uxtb	r3, r3
 8005784:	f003 0307 	and.w	r3, r3, #7
 8005788:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	0f5b      	lsrs	r3, r3, #29
 8005792:	b2db      	uxtb	r3, r3
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800579a:	7bbb      	ldrb	r3, [r7, #14]
 800579c:	7b3a      	ldrb	r2, [r7, #12]
 800579e:	4911      	ldr	r1, [pc, #68]	@ (80057e4 <UARTEx_SetNbDataToProcess+0x94>)
 80057a0:	5c8a      	ldrb	r2, [r1, r2]
 80057a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057a6:	7b3a      	ldrb	r2, [r7, #12]
 80057a8:	490f      	ldr	r1, [pc, #60]	@ (80057e8 <UARTEx_SetNbDataToProcess+0x98>)
 80057aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057b8:	7bfb      	ldrb	r3, [r7, #15]
 80057ba:	7b7a      	ldrb	r2, [r7, #13]
 80057bc:	4909      	ldr	r1, [pc, #36]	@ (80057e4 <UARTEx_SetNbDataToProcess+0x94>)
 80057be:	5c8a      	ldrb	r2, [r1, r2]
 80057c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80057c4:	7b7a      	ldrb	r2, [r7, #13]
 80057c6:	4908      	ldr	r1, [pc, #32]	@ (80057e8 <UARTEx_SetNbDataToProcess+0x98>)
 80057c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80057d6:	bf00      	nop
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	08008668 	.word	0x08008668
 80057e8:	08008670 	.word	0x08008670

080057ec <__NVIC_SetPriority>:
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	4603      	mov	r3, r0
 80057f4:	6039      	str	r1, [r7, #0]
 80057f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80057f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	db0a      	blt.n	8005816 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	b2da      	uxtb	r2, r3
 8005804:	490c      	ldr	r1, [pc, #48]	@ (8005838 <__NVIC_SetPriority+0x4c>)
 8005806:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800580a:	0112      	lsls	r2, r2, #4
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	440b      	add	r3, r1
 8005810:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005814:	e00a      	b.n	800582c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	b2da      	uxtb	r2, r3
 800581a:	4908      	ldr	r1, [pc, #32]	@ (800583c <__NVIC_SetPriority+0x50>)
 800581c:	88fb      	ldrh	r3, [r7, #6]
 800581e:	f003 030f 	and.w	r3, r3, #15
 8005822:	3b04      	subs	r3, #4
 8005824:	0112      	lsls	r2, r2, #4
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	440b      	add	r3, r1
 800582a:	761a      	strb	r2, [r3, #24]
}
 800582c:	bf00      	nop
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	e000e100 	.word	0xe000e100
 800583c:	e000ed00 	.word	0xe000ed00

08005840 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005844:	2100      	movs	r1, #0
 8005846:	f06f 0004 	mvn.w	r0, #4
 800584a:	f7ff ffcf 	bl	80057ec <__NVIC_SetPriority>
#endif
}
 800584e:	bf00      	nop
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005854:	b480      	push	{r7}
 8005856:	b083      	sub	sp, #12
 8005858:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800585a:	f3ef 8305 	mrs	r3, IPSR
 800585e:	603b      	str	r3, [r7, #0]
  return(result);
 8005860:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005866:	f06f 0305 	mvn.w	r3, #5
 800586a:	607b      	str	r3, [r7, #4]
 800586c:	e00c      	b.n	8005888 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800586e:	4b0a      	ldr	r3, [pc, #40]	@ (8005898 <osKernelInitialize+0x44>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d105      	bne.n	8005882 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005876:	4b08      	ldr	r3, [pc, #32]	@ (8005898 <osKernelInitialize+0x44>)
 8005878:	2201      	movs	r2, #1
 800587a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800587c:	2300      	movs	r3, #0
 800587e:	607b      	str	r3, [r7, #4]
 8005880:	e002      	b.n	8005888 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005882:	f04f 33ff 	mov.w	r3, #4294967295
 8005886:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005888:	687b      	ldr	r3, [r7, #4]
}
 800588a:	4618      	mov	r0, r3
 800588c:	370c      	adds	r7, #12
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	24000170 	.word	0x24000170

0800589c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058a2:	f3ef 8305 	mrs	r3, IPSR
 80058a6:	603b      	str	r3, [r7, #0]
  return(result);
 80058a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80058ae:	f06f 0305 	mvn.w	r3, #5
 80058b2:	607b      	str	r3, [r7, #4]
 80058b4:	e010      	b.n	80058d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80058b6:	4b0b      	ldr	r3, [pc, #44]	@ (80058e4 <osKernelStart+0x48>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d109      	bne.n	80058d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80058be:	f7ff ffbf 	bl	8005840 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80058c2:	4b08      	ldr	r3, [pc, #32]	@ (80058e4 <osKernelStart+0x48>)
 80058c4:	2202      	movs	r2, #2
 80058c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80058c8:	f001 fd6a 	bl	80073a0 <vTaskStartScheduler>
      stat = osOK;
 80058cc:	2300      	movs	r3, #0
 80058ce:	607b      	str	r3, [r7, #4]
 80058d0:	e002      	b.n	80058d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80058d2:	f04f 33ff 	mov.w	r3, #4294967295
 80058d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80058d8:	687b      	ldr	r3, [r7, #4]
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3708      	adds	r7, #8
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	24000170 	.word	0x24000170

080058e8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08e      	sub	sp, #56	@ 0x38
 80058ec:	af04      	add	r7, sp, #16
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80058f4:	2300      	movs	r3, #0
 80058f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058f8:	f3ef 8305 	mrs	r3, IPSR
 80058fc:	617b      	str	r3, [r7, #20]
  return(result);
 80058fe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005900:	2b00      	cmp	r3, #0
 8005902:	d17e      	bne.n	8005a02 <osThreadNew+0x11a>
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d07b      	beq.n	8005a02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800590a:	2380      	movs	r3, #128	@ 0x80
 800590c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800590e:	2318      	movs	r3, #24
 8005910:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005912:	2300      	movs	r3, #0
 8005914:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005916:	f04f 33ff 	mov.w	r3, #4294967295
 800591a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d045      	beq.n	80059ae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <osThreadNew+0x48>
        name = attr->name;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d002      	beq.n	800593e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d008      	beq.n	8005956 <osThreadNew+0x6e>
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	2b38      	cmp	r3, #56	@ 0x38
 8005948:	d805      	bhi.n	8005956 <osThreadNew+0x6e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <osThreadNew+0x72>
        return (NULL);
 8005956:	2300      	movs	r3, #0
 8005958:	e054      	b.n	8005a04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	089b      	lsrs	r3, r3, #2
 8005968:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d00e      	beq.n	8005990 <osThreadNew+0xa8>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	2b5b      	cmp	r3, #91	@ 0x5b
 8005978:	d90a      	bls.n	8005990 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800597e:	2b00      	cmp	r3, #0
 8005980:	d006      	beq.n	8005990 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	695b      	ldr	r3, [r3, #20]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <osThreadNew+0xa8>
        mem = 1;
 800598a:	2301      	movs	r3, #1
 800598c:	61bb      	str	r3, [r7, #24]
 800598e:	e010      	b.n	80059b2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10c      	bne.n	80059b2 <osThreadNew+0xca>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d108      	bne.n	80059b2 <osThreadNew+0xca>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d104      	bne.n	80059b2 <osThreadNew+0xca>
          mem = 0;
 80059a8:	2300      	movs	r3, #0
 80059aa:	61bb      	str	r3, [r7, #24]
 80059ac:	e001      	b.n	80059b2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80059ae:	2300      	movs	r3, #0
 80059b0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d110      	bne.n	80059da <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80059c0:	9202      	str	r2, [sp, #8]
 80059c2:	9301      	str	r3, [sp, #4]
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	6a3a      	ldr	r2, [r7, #32]
 80059cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f001 fb0a 	bl	8006fe8 <xTaskCreateStatic>
 80059d4:	4603      	mov	r3, r0
 80059d6:	613b      	str	r3, [r7, #16]
 80059d8:	e013      	b.n	8005a02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d110      	bne.n	8005a02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	f107 0310 	add.w	r3, r7, #16
 80059e8:	9301      	str	r3, [sp, #4]
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f001 fb58 	bl	80070a8 <xTaskCreate>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d001      	beq.n	8005a02 <osThreadNew+0x11a>
            hTask = NULL;
 80059fe:	2300      	movs	r3, #0
 8005a00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a02:	693b      	ldr	r3, [r7, #16]
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3728      	adds	r7, #40	@ 0x28
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a14:	f3ef 8305 	mrs	r3, IPSR
 8005a18:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <osDelay+0x1c>
    stat = osErrorISR;
 8005a20:	f06f 0305 	mvn.w	r3, #5
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	e007      	b.n	8005a38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d002      	beq.n	8005a38 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f001 fc7e 	bl	8007334 <vTaskDelay>
    }
  }

  return (stat);
 8005a38:	68fb      	ldr	r3, [r7, #12]
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b08a      	sub	sp, #40	@ 0x28
 8005a46:	af02      	add	r7, sp, #8
 8005a48:	60f8      	str	r0, [r7, #12]
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a52:	f3ef 8305 	mrs	r3, IPSR
 8005a56:	613b      	str	r3, [r7, #16]
  return(result);
 8005a58:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d15f      	bne.n	8005b1e <osMessageQueueNew+0xdc>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d05c      	beq.n	8005b1e <osMessageQueueNew+0xdc>
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d059      	beq.n	8005b1e <osMessageQueueNew+0xdc>
    mem = -1;
 8005a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a6e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d029      	beq.n	8005aca <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d012      	beq.n	8005aa4 <osMessageQueueNew+0x62>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	2b4f      	cmp	r3, #79	@ 0x4f
 8005a84:	d90e      	bls.n	8005aa4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00a      	beq.n	8005aa4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	695a      	ldr	r2, [r3, #20]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	68b9      	ldr	r1, [r7, #8]
 8005a96:	fb01 f303 	mul.w	r3, r1, r3
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d302      	bcc.n	8005aa4 <osMessageQueueNew+0x62>
        mem = 1;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	61bb      	str	r3, [r7, #24]
 8005aa2:	e014      	b.n	8005ace <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d110      	bne.n	8005ace <osMessageQueueNew+0x8c>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10c      	bne.n	8005ace <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d108      	bne.n	8005ace <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	695b      	ldr	r3, [r3, #20]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d104      	bne.n	8005ace <osMessageQueueNew+0x8c>
          mem = 0;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61bb      	str	r3, [r7, #24]
 8005ac8:	e001      	b.n	8005ace <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005aca:	2300      	movs	r3, #0
 8005acc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d10b      	bne.n	8005aec <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691a      	ldr	r2, [r3, #16]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2100      	movs	r1, #0
 8005ade:	9100      	str	r1, [sp, #0]
 8005ae0:	68b9      	ldr	r1, [r7, #8]
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 fdb4 	bl	8006650 <xQueueGenericCreateStatic>
 8005ae8:	61f8      	str	r0, [r7, #28]
 8005aea:	e008      	b.n	8005afe <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d105      	bne.n	8005afe <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005af2:	2200      	movs	r2, #0
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 fe27 	bl	800674a <xQueueGenericCreate>
 8005afc:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00c      	beq.n	8005b1e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <osMessageQueueNew+0xd0>
        name = attr->name;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	617b      	str	r3, [r7, #20]
 8005b10:	e001      	b.n	8005b16 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005b12:	2300      	movs	r3, #0
 8005b14:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005b16:	6979      	ldr	r1, [r7, #20]
 8005b18:	69f8      	ldr	r0, [r7, #28]
 8005b1a:	f001 fa07 	bl	8006f2c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005b1e:	69fb      	ldr	r3, [r7, #28]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3720      	adds	r7, #32
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4a07      	ldr	r2, [pc, #28]	@ (8005b54 <vApplicationGetIdleTaskMemory+0x2c>)
 8005b38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	4a06      	ldr	r2, [pc, #24]	@ (8005b58 <vApplicationGetIdleTaskMemory+0x30>)
 8005b3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2280      	movs	r2, #128	@ 0x80
 8005b44:	601a      	str	r2, [r3, #0]
}
 8005b46:	bf00      	nop
 8005b48:	3714      	adds	r7, #20
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	24000174 	.word	0x24000174
 8005b58:	240001d0 	.word	0x240001d0

08005b5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4a07      	ldr	r2, [pc, #28]	@ (8005b88 <vApplicationGetTimerTaskMemory+0x2c>)
 8005b6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	4a06      	ldr	r2, [pc, #24]	@ (8005b8c <vApplicationGetTimerTaskMemory+0x30>)
 8005b72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b7a:	601a      	str	r2, [r3, #0]
}
 8005b7c:	bf00      	nop
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	240003d0 	.word	0x240003d0
 8005b8c:	2400042c 	.word	0x2400042c

08005b90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08a      	sub	sp, #40	@ 0x28
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005b9c:	f001 fc68 	bl	8007470 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ba0:	4b5c      	ldr	r3, [pc, #368]	@ (8005d14 <pvPortMalloc+0x184>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ba8:	f000 f924 	bl	8005df4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005bac:	4b5a      	ldr	r3, [pc, #360]	@ (8005d18 <pvPortMalloc+0x188>)
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	f040 8095 	bne.w	8005ce4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01e      	beq.n	8005bfe <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005bc0:	2208      	movs	r2, #8
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f003 0307 	and.w	r3, r3, #7
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d015      	beq.n	8005bfe <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f023 0307 	bic.w	r3, r3, #7
 8005bd8:	3308      	adds	r3, #8
 8005bda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00b      	beq.n	8005bfe <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bea:	f383 8811 	msr	BASEPRI, r3
 8005bee:	f3bf 8f6f 	isb	sy
 8005bf2:	f3bf 8f4f 	dsb	sy
 8005bf6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005bf8:	bf00      	nop
 8005bfa:	bf00      	nop
 8005bfc:	e7fd      	b.n	8005bfa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d06f      	beq.n	8005ce4 <pvPortMalloc+0x154>
 8005c04:	4b45      	ldr	r3, [pc, #276]	@ (8005d1c <pvPortMalloc+0x18c>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d86a      	bhi.n	8005ce4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005c0e:	4b44      	ldr	r3, [pc, #272]	@ (8005d20 <pvPortMalloc+0x190>)
 8005c10:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005c12:	4b43      	ldr	r3, [pc, #268]	@ (8005d20 <pvPortMalloc+0x190>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c18:	e004      	b.n	8005c24 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005c24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d903      	bls.n	8005c36 <pvPortMalloc+0xa6>
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1f1      	bne.n	8005c1a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005c36:	4b37      	ldr	r3, [pc, #220]	@ (8005d14 <pvPortMalloc+0x184>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d051      	beq.n	8005ce4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2208      	movs	r2, #8
 8005c46:	4413      	add	r3, r2
 8005c48:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	6a3b      	ldr	r3, [r7, #32]
 8005c50:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c54:	685a      	ldr	r2, [r3, #4]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	1ad2      	subs	r2, r2, r3
 8005c5a:	2308      	movs	r3, #8
 8005c5c:	005b      	lsls	r3, r3, #1
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d920      	bls.n	8005ca4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005c62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	4413      	add	r3, r2
 8005c68:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d00b      	beq.n	8005c8c <pvPortMalloc+0xfc>
	__asm volatile
 8005c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c78:	f383 8811 	msr	BASEPRI, r3
 8005c7c:	f3bf 8f6f 	isb	sy
 8005c80:	f3bf 8f4f 	dsb	sy
 8005c84:	613b      	str	r3, [r7, #16]
}
 8005c86:	bf00      	nop
 8005c88:	bf00      	nop
 8005c8a:	e7fd      	b.n	8005c88 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8e:	685a      	ldr	r2, [r3, #4]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	1ad2      	subs	r2, r2, r3
 8005c94:	69bb      	ldr	r3, [r7, #24]
 8005c96:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005c9e:	69b8      	ldr	r0, [r7, #24]
 8005ca0:	f000 f90a 	bl	8005eb8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8005d1c <pvPortMalloc+0x18c>)
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	4a1b      	ldr	r2, [pc, #108]	@ (8005d1c <pvPortMalloc+0x18c>)
 8005cb0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8005d1c <pvPortMalloc+0x18c>)
 8005cb4:	681a      	ldr	r2, [r3, #0]
 8005cb6:	4b1b      	ldr	r3, [pc, #108]	@ (8005d24 <pvPortMalloc+0x194>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d203      	bcs.n	8005cc6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005cbe:	4b17      	ldr	r3, [pc, #92]	@ (8005d1c <pvPortMalloc+0x18c>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a18      	ldr	r2, [pc, #96]	@ (8005d24 <pvPortMalloc+0x194>)
 8005cc4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc8:	685a      	ldr	r2, [r3, #4]
 8005cca:	4b13      	ldr	r3, [pc, #76]	@ (8005d18 <pvPortMalloc+0x188>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	431a      	orrs	r2, r3
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005cda:	4b13      	ldr	r3, [pc, #76]	@ (8005d28 <pvPortMalloc+0x198>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	3301      	adds	r3, #1
 8005ce0:	4a11      	ldr	r2, [pc, #68]	@ (8005d28 <pvPortMalloc+0x198>)
 8005ce2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ce4:	f001 fbd2 	bl	800748c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	f003 0307 	and.w	r3, r3, #7
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d00b      	beq.n	8005d0a <pvPortMalloc+0x17a>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	60fb      	str	r3, [r7, #12]
}
 8005d04:	bf00      	nop
 8005d06:	bf00      	nop
 8005d08:	e7fd      	b.n	8005d06 <pvPortMalloc+0x176>
	return pvReturn;
 8005d0a:	69fb      	ldr	r3, [r7, #28]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3728      	adds	r7, #40	@ 0x28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	24004434 	.word	0x24004434
 8005d18:	24004448 	.word	0x24004448
 8005d1c:	24004438 	.word	0x24004438
 8005d20:	2400442c 	.word	0x2400442c
 8005d24:	2400443c 	.word	0x2400443c
 8005d28:	24004440 	.word	0x24004440

08005d2c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b086      	sub	sp, #24
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d04f      	beq.n	8005dde <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005d3e:	2308      	movs	r3, #8
 8005d40:	425b      	negs	r3, r3
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	4413      	add	r3, r2
 8005d46:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	4b25      	ldr	r3, [pc, #148]	@ (8005de8 <vPortFree+0xbc>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4013      	ands	r3, r2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10b      	bne.n	8005d72 <vPortFree+0x46>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	60fb      	str	r3, [r7, #12]
}
 8005d6c:	bf00      	nop
 8005d6e:	bf00      	nop
 8005d70:	e7fd      	b.n	8005d6e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00b      	beq.n	8005d92 <vPortFree+0x66>
	__asm volatile
 8005d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d7e:	f383 8811 	msr	BASEPRI, r3
 8005d82:	f3bf 8f6f 	isb	sy
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	60bb      	str	r3, [r7, #8]
}
 8005d8c:	bf00      	nop
 8005d8e:	bf00      	nop
 8005d90:	e7fd      	b.n	8005d8e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	4b14      	ldr	r3, [pc, #80]	@ (8005de8 <vPortFree+0xbc>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4013      	ands	r3, r2
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d01e      	beq.n	8005dde <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d11a      	bne.n	8005dde <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	4b0e      	ldr	r3, [pc, #56]	@ (8005de8 <vPortFree+0xbc>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	43db      	mvns	r3, r3
 8005db2:	401a      	ands	r2, r3
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005db8:	f001 fb5a 	bl	8007470 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8005dec <vPortFree+0xc0>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	4a09      	ldr	r2, [pc, #36]	@ (8005dec <vPortFree+0xc0>)
 8005dc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005dca:	6938      	ldr	r0, [r7, #16]
 8005dcc:	f000 f874 	bl	8005eb8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005dd0:	4b07      	ldr	r3, [pc, #28]	@ (8005df0 <vPortFree+0xc4>)
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	4a06      	ldr	r2, [pc, #24]	@ (8005df0 <vPortFree+0xc4>)
 8005dd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005dda:	f001 fb57 	bl	800748c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005dde:	bf00      	nop
 8005de0:	3718      	adds	r7, #24
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	24004448 	.word	0x24004448
 8005dec:	24004438 	.word	0x24004438
 8005df0:	24004444 	.word	0x24004444

08005df4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005df4:	b480      	push	{r7}
 8005df6:	b085      	sub	sp, #20
 8005df8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005dfa:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005dfe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005e00:	4b27      	ldr	r3, [pc, #156]	@ (8005ea0 <prvHeapInit+0xac>)
 8005e02:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00c      	beq.n	8005e28 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3307      	adds	r3, #7
 8005e12:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 0307 	bic.w	r3, r3, #7
 8005e1a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	4a1f      	ldr	r2, [pc, #124]	@ (8005ea0 <prvHeapInit+0xac>)
 8005e24:	4413      	add	r3, r2
 8005e26:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005e2c:	4a1d      	ldr	r2, [pc, #116]	@ (8005ea4 <prvHeapInit+0xb0>)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005e32:	4b1c      	ldr	r3, [pc, #112]	@ (8005ea4 <prvHeapInit+0xb0>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005e40:	2208      	movs	r2, #8
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	1a9b      	subs	r3, r3, r2
 8005e46:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0307 	bic.w	r3, r3, #7
 8005e4e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4a15      	ldr	r2, [pc, #84]	@ (8005ea8 <prvHeapInit+0xb4>)
 8005e54:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005e56:	4b14      	ldr	r3, [pc, #80]	@ (8005ea8 <prvHeapInit+0xb4>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005e5e:	4b12      	ldr	r3, [pc, #72]	@ (8005ea8 <prvHeapInit+0xb4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2200      	movs	r2, #0
 8005e64:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	1ad2      	subs	r2, r2, r3
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005e74:	4b0c      	ldr	r3, [pc, #48]	@ (8005ea8 <prvHeapInit+0xb4>)
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	4a0a      	ldr	r2, [pc, #40]	@ (8005eac <prvHeapInit+0xb8>)
 8005e82:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	4a09      	ldr	r2, [pc, #36]	@ (8005eb0 <prvHeapInit+0xbc>)
 8005e8a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005e8c:	4b09      	ldr	r3, [pc, #36]	@ (8005eb4 <prvHeapInit+0xc0>)
 8005e8e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005e92:	601a      	str	r2, [r3, #0]
}
 8005e94:	bf00      	nop
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	2400082c 	.word	0x2400082c
 8005ea4:	2400442c 	.word	0x2400442c
 8005ea8:	24004434 	.word	0x24004434
 8005eac:	2400443c 	.word	0x2400443c
 8005eb0:	24004438 	.word	0x24004438
 8005eb4:	24004448 	.word	0x24004448

08005eb8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ec0:	4b28      	ldr	r3, [pc, #160]	@ (8005f64 <prvInsertBlockIntoFreeList+0xac>)
 8005ec2:	60fb      	str	r3, [r7, #12]
 8005ec4:	e002      	b.n	8005ecc <prvInsertBlockIntoFreeList+0x14>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d8f7      	bhi.n	8005ec6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d108      	bne.n	8005efa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	441a      	add	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	441a      	add	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	429a      	cmp	r2, r3
 8005f0c:	d118      	bne.n	8005f40 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	4b15      	ldr	r3, [pc, #84]	@ (8005f68 <prvInsertBlockIntoFreeList+0xb0>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d00d      	beq.n	8005f36 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	441a      	add	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	e008      	b.n	8005f48 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005f36:	4b0c      	ldr	r3, [pc, #48]	@ (8005f68 <prvInsertBlockIntoFreeList+0xb0>)
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	e003      	b.n	8005f48 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005f48:	68fa      	ldr	r2, [r7, #12]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d002      	beq.n	8005f56 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f56:	bf00      	nop
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	2400442c 	.word	0x2400442c
 8005f68:	24004434 	.word	0x24004434

08005f6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f103 0208 	add.w	r2, r3, #8
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f04f 32ff 	mov.w	r2, #4294967295
 8005f84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f103 0208 	add.w	r2, r3, #8
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f103 0208 	add.w	r2, r3, #8
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005fac:	b480      	push	{r7}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b085      	sub	sp, #20
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
 8005fce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	689a      	ldr	r2, [r3, #8]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	1c5a      	adds	r2, r3, #1
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	601a      	str	r2, [r3, #0]
}
 8006002:	bf00      	nop
 8006004:	3714      	adds	r7, #20
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800600e:	b480      	push	{r7}
 8006010:	b085      	sub	sp, #20
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006024:	d103      	bne.n	800602e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	60fb      	str	r3, [r7, #12]
 800602c:	e00c      	b.n	8006048 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	3308      	adds	r3, #8
 8006032:	60fb      	str	r3, [r7, #12]
 8006034:	e002      	b.n	800603c <vListInsert+0x2e>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	60fb      	str	r3, [r7, #12]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	429a      	cmp	r2, r3
 8006046:	d2f6      	bcs.n	8006036 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	685a      	ldr	r2, [r3, #4]
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	683a      	ldr	r2, [r7, #0]
 8006062:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	601a      	str	r2, [r3, #0]
}
 8006074:	bf00      	nop
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	685b      	ldr	r3, [r3, #4]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	6892      	ldr	r2, [r2, #8]
 8006096:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6852      	ldr	r2, [r2, #4]
 80060a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d103      	bne.n	80060b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	689a      	ldr	r2, [r3, #8]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	1e5a      	subs	r2, r3, #1
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	3714      	adds	r7, #20
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	3b04      	subs	r3, #4
 80060e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80060ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	3b04      	subs	r3, #4
 80060f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	f023 0201 	bic.w	r2, r3, #1
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	3b04      	subs	r3, #4
 8006102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006104:	4a0c      	ldr	r2, [pc, #48]	@ (8006138 <pxPortInitialiseStack+0x64>)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3b14      	subs	r3, #20
 800610e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006110:	687a      	ldr	r2, [r7, #4]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3b04      	subs	r3, #4
 800611a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f06f 0202 	mvn.w	r2, #2
 8006122:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	3b20      	subs	r3, #32
 8006128:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800612a:	68fb      	ldr	r3, [r7, #12]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3714      	adds	r7, #20
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	0800613d 	.word	0x0800613d

0800613c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006146:	4b13      	ldr	r3, [pc, #76]	@ (8006194 <prvTaskExitError+0x58>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614e:	d00b      	beq.n	8006168 <prvTaskExitError+0x2c>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	60fb      	str	r3, [r7, #12]
}
 8006162:	bf00      	nop
 8006164:	bf00      	nop
 8006166:	e7fd      	b.n	8006164 <prvTaskExitError+0x28>
	__asm volatile
 8006168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	60bb      	str	r3, [r7, #8]
}
 800617a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800617c:	bf00      	nop
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0fc      	beq.n	800617e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006184:	bf00      	nop
 8006186:	bf00      	nop
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	24000010 	.word	0x24000010
	...

080061a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061a0:	4b07      	ldr	r3, [pc, #28]	@ (80061c0 <pxCurrentTCBConst2>)
 80061a2:	6819      	ldr	r1, [r3, #0]
 80061a4:	6808      	ldr	r0, [r1, #0]
 80061a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061aa:	f380 8809 	msr	PSP, r0
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f04f 0000 	mov.w	r0, #0
 80061b6:	f380 8811 	msr	BASEPRI, r0
 80061ba:	4770      	bx	lr
 80061bc:	f3af 8000 	nop.w

080061c0 <pxCurrentTCBConst2>:
 80061c0:	24004494 	.word	0x24004494
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop

080061c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80061c8:	4808      	ldr	r0, [pc, #32]	@ (80061ec <prvPortStartFirstTask+0x24>)
 80061ca:	6800      	ldr	r0, [r0, #0]
 80061cc:	6800      	ldr	r0, [r0, #0]
 80061ce:	f380 8808 	msr	MSP, r0
 80061d2:	f04f 0000 	mov.w	r0, #0
 80061d6:	f380 8814 	msr	CONTROL, r0
 80061da:	b662      	cpsie	i
 80061dc:	b661      	cpsie	f
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	f3bf 8f6f 	isb	sy
 80061e6:	df00      	svc	0
 80061e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061ea:	bf00      	nop
 80061ec:	e000ed08 	.word	0xe000ed08

080061f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b086      	sub	sp, #24
 80061f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80061f6:	4b47      	ldr	r3, [pc, #284]	@ (8006314 <xPortStartScheduler+0x124>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a47      	ldr	r2, [pc, #284]	@ (8006318 <xPortStartScheduler+0x128>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d10b      	bne.n	8006218 <xPortStartScheduler+0x28>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006204:	f383 8811 	msr	BASEPRI, r3
 8006208:	f3bf 8f6f 	isb	sy
 800620c:	f3bf 8f4f 	dsb	sy
 8006210:	60fb      	str	r3, [r7, #12]
}
 8006212:	bf00      	nop
 8006214:	bf00      	nop
 8006216:	e7fd      	b.n	8006214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006218:	4b3e      	ldr	r3, [pc, #248]	@ (8006314 <xPortStartScheduler+0x124>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a3f      	ldr	r2, [pc, #252]	@ (800631c <xPortStartScheduler+0x12c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d10b      	bne.n	800623a <xPortStartScheduler+0x4a>
	__asm volatile
 8006222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006226:	f383 8811 	msr	BASEPRI, r3
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	f3bf 8f4f 	dsb	sy
 8006232:	613b      	str	r3, [r7, #16]
}
 8006234:	bf00      	nop
 8006236:	bf00      	nop
 8006238:	e7fd      	b.n	8006236 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800623a:	4b39      	ldr	r3, [pc, #228]	@ (8006320 <xPortStartScheduler+0x130>)
 800623c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800623e:	697b      	ldr	r3, [r7, #20]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	b2db      	uxtb	r3, r3
 8006244:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	22ff      	movs	r2, #255	@ 0xff
 800624a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	b2db      	uxtb	r3, r3
 8006252:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006254:	78fb      	ldrb	r3, [r7, #3]
 8006256:	b2db      	uxtb	r3, r3
 8006258:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800625c:	b2da      	uxtb	r2, r3
 800625e:	4b31      	ldr	r3, [pc, #196]	@ (8006324 <xPortStartScheduler+0x134>)
 8006260:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006262:	4b31      	ldr	r3, [pc, #196]	@ (8006328 <xPortStartScheduler+0x138>)
 8006264:	2207      	movs	r2, #7
 8006266:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006268:	e009      	b.n	800627e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800626a:	4b2f      	ldr	r3, [pc, #188]	@ (8006328 <xPortStartScheduler+0x138>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	3b01      	subs	r3, #1
 8006270:	4a2d      	ldr	r2, [pc, #180]	@ (8006328 <xPortStartScheduler+0x138>)
 8006272:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006274:	78fb      	ldrb	r3, [r7, #3]
 8006276:	b2db      	uxtb	r3, r3
 8006278:	005b      	lsls	r3, r3, #1
 800627a:	b2db      	uxtb	r3, r3
 800627c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	b2db      	uxtb	r3, r3
 8006282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006286:	2b80      	cmp	r3, #128	@ 0x80
 8006288:	d0ef      	beq.n	800626a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800628a:	4b27      	ldr	r3, [pc, #156]	@ (8006328 <xPortStartScheduler+0x138>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f1c3 0307 	rsb	r3, r3, #7
 8006292:	2b04      	cmp	r3, #4
 8006294:	d00b      	beq.n	80062ae <xPortStartScheduler+0xbe>
	__asm volatile
 8006296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800629a:	f383 8811 	msr	BASEPRI, r3
 800629e:	f3bf 8f6f 	isb	sy
 80062a2:	f3bf 8f4f 	dsb	sy
 80062a6:	60bb      	str	r3, [r7, #8]
}
 80062a8:	bf00      	nop
 80062aa:	bf00      	nop
 80062ac:	e7fd      	b.n	80062aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006328 <xPortStartScheduler+0x138>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	021b      	lsls	r3, r3, #8
 80062b4:	4a1c      	ldr	r2, [pc, #112]	@ (8006328 <xPortStartScheduler+0x138>)
 80062b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006328 <xPortStartScheduler+0x138>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80062c0:	4a19      	ldr	r2, [pc, #100]	@ (8006328 <xPortStartScheduler+0x138>)
 80062c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	b2da      	uxtb	r2, r3
 80062c8:	697b      	ldr	r3, [r7, #20]
 80062ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062cc:	4b17      	ldr	r3, [pc, #92]	@ (800632c <xPortStartScheduler+0x13c>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a16      	ldr	r2, [pc, #88]	@ (800632c <xPortStartScheduler+0x13c>)
 80062d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80062d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062d8:	4b14      	ldr	r3, [pc, #80]	@ (800632c <xPortStartScheduler+0x13c>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a13      	ldr	r2, [pc, #76]	@ (800632c <xPortStartScheduler+0x13c>)
 80062de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80062e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062e4:	f000 f8da 	bl	800649c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062e8:	4b11      	ldr	r3, [pc, #68]	@ (8006330 <xPortStartScheduler+0x140>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80062ee:	f000 f8f9 	bl	80064e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80062f2:	4b10      	ldr	r3, [pc, #64]	@ (8006334 <xPortStartScheduler+0x144>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a0f      	ldr	r2, [pc, #60]	@ (8006334 <xPortStartScheduler+0x144>)
 80062f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80062fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062fe:	f7ff ff63 	bl	80061c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006302:	f001 fa2b 	bl	800775c <vTaskSwitchContext>
	prvTaskExitError();
 8006306:	f7ff ff19 	bl	800613c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	e000ed00 	.word	0xe000ed00
 8006318:	410fc271 	.word	0x410fc271
 800631c:	410fc270 	.word	0x410fc270
 8006320:	e000e400 	.word	0xe000e400
 8006324:	2400444c 	.word	0x2400444c
 8006328:	24004450 	.word	0x24004450
 800632c:	e000ed20 	.word	0xe000ed20
 8006330:	24000010 	.word	0x24000010
 8006334:	e000ef34 	.word	0xe000ef34

08006338 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
	__asm volatile
 800633e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006342:	f383 8811 	msr	BASEPRI, r3
 8006346:	f3bf 8f6f 	isb	sy
 800634a:	f3bf 8f4f 	dsb	sy
 800634e:	607b      	str	r3, [r7, #4]
}
 8006350:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006352:	4b10      	ldr	r3, [pc, #64]	@ (8006394 <vPortEnterCritical+0x5c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3301      	adds	r3, #1
 8006358:	4a0e      	ldr	r2, [pc, #56]	@ (8006394 <vPortEnterCritical+0x5c>)
 800635a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800635c:	4b0d      	ldr	r3, [pc, #52]	@ (8006394 <vPortEnterCritical+0x5c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d110      	bne.n	8006386 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006364:	4b0c      	ldr	r3, [pc, #48]	@ (8006398 <vPortEnterCritical+0x60>)
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00b      	beq.n	8006386 <vPortEnterCritical+0x4e>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	603b      	str	r3, [r7, #0]
}
 8006380:	bf00      	nop
 8006382:	bf00      	nop
 8006384:	e7fd      	b.n	8006382 <vPortEnterCritical+0x4a>
	}
}
 8006386:	bf00      	nop
 8006388:	370c      	adds	r7, #12
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	24000010 	.word	0x24000010
 8006398:	e000ed04 	.word	0xe000ed04

0800639c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80063a2:	4b12      	ldr	r3, [pc, #72]	@ (80063ec <vPortExitCritical+0x50>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10b      	bne.n	80063c2 <vPortExitCritical+0x26>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ae:	f383 8811 	msr	BASEPRI, r3
 80063b2:	f3bf 8f6f 	isb	sy
 80063b6:	f3bf 8f4f 	dsb	sy
 80063ba:	607b      	str	r3, [r7, #4]
}
 80063bc:	bf00      	nop
 80063be:	bf00      	nop
 80063c0:	e7fd      	b.n	80063be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80063c2:	4b0a      	ldr	r3, [pc, #40]	@ (80063ec <vPortExitCritical+0x50>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3b01      	subs	r3, #1
 80063c8:	4a08      	ldr	r2, [pc, #32]	@ (80063ec <vPortExitCritical+0x50>)
 80063ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80063cc:	4b07      	ldr	r3, [pc, #28]	@ (80063ec <vPortExitCritical+0x50>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d105      	bne.n	80063e0 <vPortExitCritical+0x44>
 80063d4:	2300      	movs	r3, #0
 80063d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063e0:	bf00      	nop
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr
 80063ec:	24000010 	.word	0x24000010

080063f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063f0:	f3ef 8009 	mrs	r0, PSP
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	4b15      	ldr	r3, [pc, #84]	@ (8006450 <pxCurrentTCBConst>)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	f01e 0f10 	tst.w	lr, #16
 8006400:	bf08      	it	eq
 8006402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640a:	6010      	str	r0, [r2, #0]
 800640c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006410:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006414:	f380 8811 	msr	BASEPRI, r0
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f001 f99c 	bl	800775c <vTaskSwitchContext>
 8006424:	f04f 0000 	mov.w	r0, #0
 8006428:	f380 8811 	msr	BASEPRI, r0
 800642c:	bc09      	pop	{r0, r3}
 800642e:	6819      	ldr	r1, [r3, #0]
 8006430:	6808      	ldr	r0, [r1, #0]
 8006432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006436:	f01e 0f10 	tst.w	lr, #16
 800643a:	bf08      	it	eq
 800643c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006440:	f380 8809 	msr	PSP, r0
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	f3af 8000 	nop.w

08006450 <pxCurrentTCBConst>:
 8006450:	24004494 	.word	0x24004494
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop

08006458 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
	__asm volatile
 800645e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	607b      	str	r3, [r7, #4]
}
 8006470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006472:	f001 f8b9 	bl	80075e8 <xTaskIncrementTick>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d003      	beq.n	8006484 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800647c:	4b06      	ldr	r3, [pc, #24]	@ (8006498 <xPortSysTickHandler+0x40>)
 800647e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006482:	601a      	str	r2, [r3, #0]
 8006484:	2300      	movs	r3, #0
 8006486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	f383 8811 	msr	BASEPRI, r3
}
 800648e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006490:	bf00      	nop
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	e000ed04 	.word	0xe000ed04

0800649c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800649c:	b480      	push	{r7}
 800649e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80064a0:	4b0b      	ldr	r3, [pc, #44]	@ (80064d0 <vPortSetupTimerInterrupt+0x34>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80064a6:	4b0b      	ldr	r3, [pc, #44]	@ (80064d4 <vPortSetupTimerInterrupt+0x38>)
 80064a8:	2200      	movs	r2, #0
 80064aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80064ac:	4b0a      	ldr	r3, [pc, #40]	@ (80064d8 <vPortSetupTimerInterrupt+0x3c>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4a0a      	ldr	r2, [pc, #40]	@ (80064dc <vPortSetupTimerInterrupt+0x40>)
 80064b2:	fba2 2303 	umull	r2, r3, r2, r3
 80064b6:	099b      	lsrs	r3, r3, #6
 80064b8:	4a09      	ldr	r2, [pc, #36]	@ (80064e0 <vPortSetupTimerInterrupt+0x44>)
 80064ba:	3b01      	subs	r3, #1
 80064bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80064be:	4b04      	ldr	r3, [pc, #16]	@ (80064d0 <vPortSetupTimerInterrupt+0x34>)
 80064c0:	2207      	movs	r2, #7
 80064c2:	601a      	str	r2, [r3, #0]
}
 80064c4:	bf00      	nop
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
 80064ce:	bf00      	nop
 80064d0:	e000e010 	.word	0xe000e010
 80064d4:	e000e018 	.word	0xe000e018
 80064d8:	24000000 	.word	0x24000000
 80064dc:	10624dd3 	.word	0x10624dd3
 80064e0:	e000e014 	.word	0xe000e014

080064e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80064e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80064f4 <vPortEnableVFP+0x10>
 80064e8:	6801      	ldr	r1, [r0, #0]
 80064ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80064ee:	6001      	str	r1, [r0, #0]
 80064f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80064f2:	bf00      	nop
 80064f4:	e000ed88 	.word	0xe000ed88

080064f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80064f8:	b480      	push	{r7}
 80064fa:	b085      	sub	sp, #20
 80064fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80064fe:	f3ef 8305 	mrs	r3, IPSR
 8006502:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2b0f      	cmp	r3, #15
 8006508:	d915      	bls.n	8006536 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800650a:	4a18      	ldr	r2, [pc, #96]	@ (800656c <vPortValidateInterruptPriority+0x74>)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4413      	add	r3, r2
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006514:	4b16      	ldr	r3, [pc, #88]	@ (8006570 <vPortValidateInterruptPriority+0x78>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	7afa      	ldrb	r2, [r7, #11]
 800651a:	429a      	cmp	r2, r3
 800651c:	d20b      	bcs.n	8006536 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	607b      	str	r3, [r7, #4]
}
 8006530:	bf00      	nop
 8006532:	bf00      	nop
 8006534:	e7fd      	b.n	8006532 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006536:	4b0f      	ldr	r3, [pc, #60]	@ (8006574 <vPortValidateInterruptPriority+0x7c>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800653e:	4b0e      	ldr	r3, [pc, #56]	@ (8006578 <vPortValidateInterruptPriority+0x80>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	429a      	cmp	r2, r3
 8006544:	d90b      	bls.n	800655e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8006546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654a:	f383 8811 	msr	BASEPRI, r3
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	603b      	str	r3, [r7, #0]
}
 8006558:	bf00      	nop
 800655a:	bf00      	nop
 800655c:	e7fd      	b.n	800655a <vPortValidateInterruptPriority+0x62>
	}
 800655e:	bf00      	nop
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr
 800656a:	bf00      	nop
 800656c:	e000e3f0 	.word	0xe000e3f0
 8006570:	2400444c 	.word	0x2400444c
 8006574:	e000ed0c 	.word	0xe000ed0c
 8006578:	24004450 	.word	0x24004450

0800657c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b084      	sub	sp, #16
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10b      	bne.n	80065a8 <xQueueGenericReset+0x2c>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	60bb      	str	r3, [r7, #8]
}
 80065a2:	bf00      	nop
 80065a4:	bf00      	nop
 80065a6:	e7fd      	b.n	80065a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80065a8:	f7ff fec6 	bl	8006338 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065b4:	68f9      	ldr	r1, [r7, #12]
 80065b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80065b8:	fb01 f303 	mul.w	r3, r1, r3
 80065bc:	441a      	add	r2, r3
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2200      	movs	r2, #0
 80065c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065d8:	3b01      	subs	r3, #1
 80065da:	68f9      	ldr	r1, [r7, #12]
 80065dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80065de:	fb01 f303 	mul.w	r3, r1, r3
 80065e2:	441a      	add	r2, r3
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	22ff      	movs	r2, #255	@ 0xff
 80065ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	22ff      	movs	r2, #255	@ 0xff
 80065f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d114      	bne.n	8006628 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d01a      	beq.n	800663c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	3310      	adds	r3, #16
 800660a:	4618      	mov	r0, r3
 800660c:	f001 f956 	bl	80078bc <xTaskRemoveFromEventList>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d012      	beq.n	800663c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006616:	4b0d      	ldr	r3, [pc, #52]	@ (800664c <xQueueGenericReset+0xd0>)
 8006618:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800661c:	601a      	str	r2, [r3, #0]
 800661e:	f3bf 8f4f 	dsb	sy
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	e009      	b.n	800663c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	3310      	adds	r3, #16
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff fc9d 	bl	8005f6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3324      	adds	r3, #36	@ 0x24
 8006636:	4618      	mov	r0, r3
 8006638:	f7ff fc98 	bl	8005f6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800663c:	f7ff feae 	bl	800639c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006640:	2301      	movs	r3, #1
}
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	e000ed04 	.word	0xe000ed04

08006650 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08e      	sub	sp, #56	@ 0x38
 8006654:	af02      	add	r7, sp, #8
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10b      	bne.n	800667c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006676:	bf00      	nop
 8006678:	bf00      	nop
 800667a:	e7fd      	b.n	8006678 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10b      	bne.n	800669a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	e7fd      	b.n	8006696 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <xQueueGenericCreateStatic+0x56>
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d001      	beq.n	80066aa <xQueueGenericCreateStatic+0x5a>
 80066a6:	2301      	movs	r3, #1
 80066a8:	e000      	b.n	80066ac <xQueueGenericCreateStatic+0x5c>
 80066aa:	2300      	movs	r3, #0
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d10b      	bne.n	80066c8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80066b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b4:	f383 8811 	msr	BASEPRI, r3
 80066b8:	f3bf 8f6f 	isb	sy
 80066bc:	f3bf 8f4f 	dsb	sy
 80066c0:	623b      	str	r3, [r7, #32]
}
 80066c2:	bf00      	nop
 80066c4:	bf00      	nop
 80066c6:	e7fd      	b.n	80066c4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d102      	bne.n	80066d4 <xQueueGenericCreateStatic+0x84>
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <xQueueGenericCreateStatic+0x88>
 80066d4:	2301      	movs	r3, #1
 80066d6:	e000      	b.n	80066da <xQueueGenericCreateStatic+0x8a>
 80066d8:	2300      	movs	r3, #0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10b      	bne.n	80066f6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	61fb      	str	r3, [r7, #28]
}
 80066f0:	bf00      	nop
 80066f2:	bf00      	nop
 80066f4:	e7fd      	b.n	80066f2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80066f6:	2350      	movs	r3, #80	@ 0x50
 80066f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	2b50      	cmp	r3, #80	@ 0x50
 80066fe:	d00b      	beq.n	8006718 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	61bb      	str	r3, [r7, #24]
}
 8006712:	bf00      	nop
 8006714:	bf00      	nop
 8006716:	e7fd      	b.n	8006714 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006718:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800671e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00d      	beq.n	8006740 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006726:	2201      	movs	r2, #1
 8006728:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800672c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	4613      	mov	r3, r2
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	68b9      	ldr	r1, [r7, #8]
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f000 f840 	bl	80067c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006742:	4618      	mov	r0, r3
 8006744:	3730      	adds	r7, #48	@ 0x30
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800674a:	b580      	push	{r7, lr}
 800674c:	b08a      	sub	sp, #40	@ 0x28
 800674e:	af02      	add	r7, sp, #8
 8006750:	60f8      	str	r0, [r7, #12]
 8006752:	60b9      	str	r1, [r7, #8]
 8006754:	4613      	mov	r3, r2
 8006756:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10b      	bne.n	8006776 <xQueueGenericCreate+0x2c>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	613b      	str	r3, [r7, #16]
}
 8006770:	bf00      	nop
 8006772:	bf00      	nop
 8006774:	e7fd      	b.n	8006772 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	68ba      	ldr	r2, [r7, #8]
 800677a:	fb02 f303 	mul.w	r3, r2, r3
 800677e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	3350      	adds	r3, #80	@ 0x50
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fa03 	bl	8005b90 <pvPortMalloc>
 800678a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d011      	beq.n	80067b6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	3350      	adds	r3, #80	@ 0x50
 800679a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067a4:	79fa      	ldrb	r2, [r7, #7]
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	4613      	mov	r3, r2
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	68b9      	ldr	r1, [r7, #8]
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f000 f805 	bl	80067c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067b6:	69bb      	ldr	r3, [r7, #24]
	}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3720      	adds	r7, #32
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
 80067cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d103      	bne.n	80067dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	601a      	str	r2, [r3, #0]
 80067da:	e002      	b.n	80067e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067ee:	2101      	movs	r1, #1
 80067f0:	69b8      	ldr	r0, [r7, #24]
 80067f2:	f7ff fec3 	bl	800657c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	78fa      	ldrb	r2, [r7, #3]
 80067fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80067fe:	bf00      	nop
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
	...

08006808 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b08e      	sub	sp, #56	@ 0x38
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
 8006814:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006816:	2300      	movs	r3, #0
 8006818:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800681e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10b      	bne.n	800683c <xQueueGenericSend+0x34>
	__asm volatile
 8006824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006828:	f383 8811 	msr	BASEPRI, r3
 800682c:	f3bf 8f6f 	isb	sy
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006836:	bf00      	nop
 8006838:	bf00      	nop
 800683a:	e7fd      	b.n	8006838 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d103      	bne.n	800684a <xQueueGenericSend+0x42>
 8006842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	d101      	bne.n	800684e <xQueueGenericSend+0x46>
 800684a:	2301      	movs	r3, #1
 800684c:	e000      	b.n	8006850 <xQueueGenericSend+0x48>
 800684e:	2300      	movs	r3, #0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10b      	bne.n	800686c <xQueueGenericSend+0x64>
	__asm volatile
 8006854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006858:	f383 8811 	msr	BASEPRI, r3
 800685c:	f3bf 8f6f 	isb	sy
 8006860:	f3bf 8f4f 	dsb	sy
 8006864:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006866:	bf00      	nop
 8006868:	bf00      	nop
 800686a:	e7fd      	b.n	8006868 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	2b02      	cmp	r3, #2
 8006870:	d103      	bne.n	800687a <xQueueGenericSend+0x72>
 8006872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006876:	2b01      	cmp	r3, #1
 8006878:	d101      	bne.n	800687e <xQueueGenericSend+0x76>
 800687a:	2301      	movs	r3, #1
 800687c:	e000      	b.n	8006880 <xQueueGenericSend+0x78>
 800687e:	2300      	movs	r3, #0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d10b      	bne.n	800689c <xQueueGenericSend+0x94>
	__asm volatile
 8006884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006888:	f383 8811 	msr	BASEPRI, r3
 800688c:	f3bf 8f6f 	isb	sy
 8006890:	f3bf 8f4f 	dsb	sy
 8006894:	623b      	str	r3, [r7, #32]
}
 8006896:	bf00      	nop
 8006898:	bf00      	nop
 800689a:	e7fd      	b.n	8006898 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800689c:	f001 f9ce 	bl	8007c3c <xTaskGetSchedulerState>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d102      	bne.n	80068ac <xQueueGenericSend+0xa4>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <xQueueGenericSend+0xa8>
 80068ac:	2301      	movs	r3, #1
 80068ae:	e000      	b.n	80068b2 <xQueueGenericSend+0xaa>
 80068b0:	2300      	movs	r3, #0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d10b      	bne.n	80068ce <xQueueGenericSend+0xc6>
	__asm volatile
 80068b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ba:	f383 8811 	msr	BASEPRI, r3
 80068be:	f3bf 8f6f 	isb	sy
 80068c2:	f3bf 8f4f 	dsb	sy
 80068c6:	61fb      	str	r3, [r7, #28]
}
 80068c8:	bf00      	nop
 80068ca:	bf00      	nop
 80068cc:	e7fd      	b.n	80068ca <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068ce:	f7ff fd33 	bl	8006338 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068da:	429a      	cmp	r2, r3
 80068dc:	d302      	bcc.n	80068e4 <xQueueGenericSend+0xdc>
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d129      	bne.n	8006938 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	68b9      	ldr	r1, [r7, #8]
 80068e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068ea:	f000 fa0f 	bl	8006d0c <prvCopyDataToQueue>
 80068ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d010      	beq.n	800691a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fa:	3324      	adds	r3, #36	@ 0x24
 80068fc:	4618      	mov	r0, r3
 80068fe:	f000 ffdd 	bl	80078bc <xTaskRemoveFromEventList>
 8006902:	4603      	mov	r3, r0
 8006904:	2b00      	cmp	r3, #0
 8006906:	d013      	beq.n	8006930 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006908:	4b3f      	ldr	r3, [pc, #252]	@ (8006a08 <xQueueGenericSend+0x200>)
 800690a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800690e:	601a      	str	r2, [r3, #0]
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	e00a      	b.n	8006930 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800691a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d007      	beq.n	8006930 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006920:	4b39      	ldr	r3, [pc, #228]	@ (8006a08 <xQueueGenericSend+0x200>)
 8006922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	f3bf 8f4f 	dsb	sy
 800692c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006930:	f7ff fd34 	bl	800639c <vPortExitCritical>
				return pdPASS;
 8006934:	2301      	movs	r3, #1
 8006936:	e063      	b.n	8006a00 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d103      	bne.n	8006946 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800693e:	f7ff fd2d 	bl	800639c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006942:	2300      	movs	r3, #0
 8006944:	e05c      	b.n	8006a00 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006948:	2b00      	cmp	r3, #0
 800694a:	d106      	bne.n	800695a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800694c:	f107 0314 	add.w	r3, r7, #20
 8006950:	4618      	mov	r0, r3
 8006952:	f001 f817 	bl	8007984 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006956:	2301      	movs	r3, #1
 8006958:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800695a:	f7ff fd1f 	bl	800639c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800695e:	f000 fd87 	bl	8007470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006962:	f7ff fce9 	bl	8006338 <vPortEnterCritical>
 8006966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006968:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800696c:	b25b      	sxtb	r3, r3
 800696e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006972:	d103      	bne.n	800697c <xQueueGenericSend+0x174>
 8006974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800697c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006982:	b25b      	sxtb	r3, r3
 8006984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006988:	d103      	bne.n	8006992 <xQueueGenericSend+0x18a>
 800698a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006992:	f7ff fd03 	bl	800639c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006996:	1d3a      	adds	r2, r7, #4
 8006998:	f107 0314 	add.w	r3, r7, #20
 800699c:	4611      	mov	r1, r2
 800699e:	4618      	mov	r0, r3
 80069a0:	f001 f806 	bl	80079b0 <xTaskCheckForTimeOut>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d124      	bne.n	80069f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80069aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069ac:	f000 faa6 	bl	8006efc <prvIsQueueFull>
 80069b0:	4603      	mov	r3, r0
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d018      	beq.n	80069e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80069b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b8:	3310      	adds	r3, #16
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	4611      	mov	r1, r2
 80069be:	4618      	mov	r0, r3
 80069c0:	f000 ff2a 	bl	8007818 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80069c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069c6:	f000 fa31 	bl	8006e2c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80069ca:	f000 fd5f 	bl	800748c <xTaskResumeAll>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	f47f af7c 	bne.w	80068ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80069d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006a08 <xQueueGenericSend+0x200>)
 80069d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	f3bf 8f6f 	isb	sy
 80069e6:	e772      	b.n	80068ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069ea:	f000 fa1f 	bl	8006e2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069ee:	f000 fd4d 	bl	800748c <xTaskResumeAll>
 80069f2:	e76c      	b.n	80068ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80069f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069f6:	f000 fa19 	bl	8006e2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069fa:	f000 fd47 	bl	800748c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80069fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3738      	adds	r7, #56	@ 0x38
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	e000ed04 	.word	0xe000ed04

08006a0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b090      	sub	sp, #64	@ 0x40
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d10b      	bne.n	8006a3c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a36:	bf00      	nop
 8006a38:	bf00      	nop
 8006a3a:	e7fd      	b.n	8006a38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d103      	bne.n	8006a4a <xQueueGenericSendFromISR+0x3e>
 8006a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d101      	bne.n	8006a4e <xQueueGenericSendFromISR+0x42>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e000      	b.n	8006a50 <xQueueGenericSendFromISR+0x44>
 8006a4e:	2300      	movs	r3, #0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10b      	bne.n	8006a6c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a66:	bf00      	nop
 8006a68:	bf00      	nop
 8006a6a:	e7fd      	b.n	8006a68 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	2b02      	cmp	r3, #2
 8006a70:	d103      	bne.n	8006a7a <xQueueGenericSendFromISR+0x6e>
 8006a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d101      	bne.n	8006a7e <xQueueGenericSendFromISR+0x72>
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e000      	b.n	8006a80 <xQueueGenericSendFromISR+0x74>
 8006a7e:	2300      	movs	r3, #0
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10b      	bne.n	8006a9c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a88:	f383 8811 	msr	BASEPRI, r3
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f3bf 8f4f 	dsb	sy
 8006a94:	623b      	str	r3, [r7, #32]
}
 8006a96:	bf00      	nop
 8006a98:	bf00      	nop
 8006a9a:	e7fd      	b.n	8006a98 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a9c:	f7ff fd2c 	bl	80064f8 <vPortValidateInterruptPriority>
	__asm volatile
 8006aa0:	f3ef 8211 	mrs	r2, BASEPRI
 8006aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa8:	f383 8811 	msr	BASEPRI, r3
 8006aac:	f3bf 8f6f 	isb	sy
 8006ab0:	f3bf 8f4f 	dsb	sy
 8006ab4:	61fa      	str	r2, [r7, #28]
 8006ab6:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8006ab8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006aba:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006abe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d302      	bcc.n	8006ace <xQueueGenericSendFromISR+0xc2>
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d12f      	bne.n	8006b2e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ad4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ade:	683a      	ldr	r2, [r7, #0]
 8006ae0:	68b9      	ldr	r1, [r7, #8]
 8006ae2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006ae4:	f000 f912 	bl	8006d0c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ae8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006af0:	d112      	bne.n	8006b18 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d016      	beq.n	8006b28 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afc:	3324      	adds	r3, #36	@ 0x24
 8006afe:	4618      	mov	r0, r3
 8006b00:	f000 fedc 	bl	80078bc <xTaskRemoveFromEventList>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00e      	beq.n	8006b28 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d00b      	beq.n	8006b28 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	601a      	str	r2, [r3, #0]
 8006b16:	e007      	b.n	8006b28 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b18:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	b25a      	sxtb	r2, r3
 8006b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006b2c:	e001      	b.n	8006b32 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b34:	617b      	str	r3, [r7, #20]
	__asm volatile
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	f383 8811 	msr	BASEPRI, r3
}
 8006b3c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3740      	adds	r7, #64	@ 0x40
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08c      	sub	sp, #48	@ 0x30
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b54:	2300      	movs	r3, #0
 8006b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10b      	bne.n	8006b7a <xQueueReceive+0x32>
	__asm volatile
 8006b62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b66:	f383 8811 	msr	BASEPRI, r3
 8006b6a:	f3bf 8f6f 	isb	sy
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	623b      	str	r3, [r7, #32]
}
 8006b74:	bf00      	nop
 8006b76:	bf00      	nop
 8006b78:	e7fd      	b.n	8006b76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d103      	bne.n	8006b88 <xQueueReceive+0x40>
 8006b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <xQueueReceive+0x44>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e000      	b.n	8006b8e <xQueueReceive+0x46>
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10b      	bne.n	8006baa <xQueueReceive+0x62>
	__asm volatile
 8006b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b96:	f383 8811 	msr	BASEPRI, r3
 8006b9a:	f3bf 8f6f 	isb	sy
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	61fb      	str	r3, [r7, #28]
}
 8006ba4:	bf00      	nop
 8006ba6:	bf00      	nop
 8006ba8:	e7fd      	b.n	8006ba6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006baa:	f001 f847 	bl	8007c3c <xTaskGetSchedulerState>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d102      	bne.n	8006bba <xQueueReceive+0x72>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <xQueueReceive+0x76>
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e000      	b.n	8006bc0 <xQueueReceive+0x78>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d10b      	bne.n	8006bdc <xQueueReceive+0x94>
	__asm volatile
 8006bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc8:	f383 8811 	msr	BASEPRI, r3
 8006bcc:	f3bf 8f6f 	isb	sy
 8006bd0:	f3bf 8f4f 	dsb	sy
 8006bd4:	61bb      	str	r3, [r7, #24]
}
 8006bd6:	bf00      	nop
 8006bd8:	bf00      	nop
 8006bda:	e7fd      	b.n	8006bd8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bdc:	f7ff fbac 	bl	8006338 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d01f      	beq.n	8006c2c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006bec:	68b9      	ldr	r1, [r7, #8]
 8006bee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bf0:	f000 f8f6 	bl	8006de0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf6:	1e5a      	subs	r2, r3, #1
 8006bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d00f      	beq.n	8006c24 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c06:	3310      	adds	r3, #16
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 fe57 	bl	80078bc <xTaskRemoveFromEventList>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d007      	beq.n	8006c24 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c14:	4b3c      	ldr	r3, [pc, #240]	@ (8006d08 <xQueueReceive+0x1c0>)
 8006c16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c24:	f7ff fbba 	bl	800639c <vPortExitCritical>
				return pdPASS;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e069      	b.n	8006d00 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d103      	bne.n	8006c3a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c32:	f7ff fbb3 	bl	800639c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c36:	2300      	movs	r3, #0
 8006c38:	e062      	b.n	8006d00 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d106      	bne.n	8006c4e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c40:	f107 0310 	add.w	r3, r7, #16
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 fe9d 	bl	8007984 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c4e:	f7ff fba5 	bl	800639c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c52:	f000 fc0d 	bl	8007470 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c56:	f7ff fb6f 	bl	8006338 <vPortEnterCritical>
 8006c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c60:	b25b      	sxtb	r3, r3
 8006c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c66:	d103      	bne.n	8006c70 <xQueueReceive+0x128>
 8006c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c76:	b25b      	sxtb	r3, r3
 8006c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7c:	d103      	bne.n	8006c86 <xQueueReceive+0x13e>
 8006c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c86:	f7ff fb89 	bl	800639c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c8a:	1d3a      	adds	r2, r7, #4
 8006c8c:	f107 0310 	add.w	r3, r7, #16
 8006c90:	4611      	mov	r1, r2
 8006c92:	4618      	mov	r0, r3
 8006c94:	f000 fe8c 	bl	80079b0 <xTaskCheckForTimeOut>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d123      	bne.n	8006ce6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ca0:	f000 f916 	bl	8006ed0 <prvIsQueueEmpty>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d017      	beq.n	8006cda <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cac:	3324      	adds	r3, #36	@ 0x24
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	4611      	mov	r1, r2
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	f000 fdb0 	bl	8007818 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cba:	f000 f8b7 	bl	8006e2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cbe:	f000 fbe5 	bl	800748c <xTaskResumeAll>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d189      	bne.n	8006bdc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8006d08 <xQueueReceive+0x1c0>)
 8006cca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	e780      	b.n	8006bdc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006cda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cdc:	f000 f8a6 	bl	8006e2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ce0:	f000 fbd4 	bl	800748c <xTaskResumeAll>
 8006ce4:	e77a      	b.n	8006bdc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ce6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ce8:	f000 f8a0 	bl	8006e2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cec:	f000 fbce 	bl	800748c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cf2:	f000 f8ed 	bl	8006ed0 <prvIsQueueEmpty>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f43f af6f 	beq.w	8006bdc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006cfe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3730      	adds	r7, #48	@ 0x30
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	e000ed04 	.word	0xe000ed04

08006d0c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d20:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d10d      	bne.n	8006d46 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d14d      	bne.n	8006dce <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	4618      	mov	r0, r3
 8006d38:	f000 ff9e 	bl	8007c78 <xTaskPriorityDisinherit>
 8006d3c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	609a      	str	r2, [r3, #8]
 8006d44:	e043      	b.n	8006dce <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d119      	bne.n	8006d80 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6858      	ldr	r0, [r3, #4]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d54:	461a      	mov	r2, r3
 8006d56:	68b9      	ldr	r1, [r7, #8]
 8006d58:	f001 fbd8 	bl	800850c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	685a      	ldr	r2, [r3, #4]
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d64:	441a      	add	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	685a      	ldr	r2, [r3, #4]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	429a      	cmp	r2, r3
 8006d74:	d32b      	bcc.n	8006dce <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	605a      	str	r2, [r3, #4]
 8006d7e:	e026      	b.n	8006dce <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	68d8      	ldr	r0, [r3, #12]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d88:	461a      	mov	r2, r3
 8006d8a:	68b9      	ldr	r1, [r7, #8]
 8006d8c:	f001 fbbe 	bl	800850c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d98:	425b      	negs	r3, r3
 8006d9a:	441a      	add	r2, r3
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	68da      	ldr	r2, [r3, #12]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d207      	bcs.n	8006dbc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db4:	425b      	negs	r3, r3
 8006db6:	441a      	add	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d105      	bne.n	8006dce <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d002      	beq.n	8006dce <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	3b01      	subs	r3, #1
 8006dcc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006dd6:	697b      	ldr	r3, [r7, #20]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3718      	adds	r7, #24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d018      	beq.n	8006e24 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dfa:	441a      	add	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d303      	bcc.n	8006e14 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	68d9      	ldr	r1, [r3, #12]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	6838      	ldr	r0, [r7, #0]
 8006e20:	f001 fb74 	bl	800850c <memcpy>
	}
}
 8006e24:	bf00      	nop
 8006e26:	3708      	adds	r7, #8
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e34:	f7ff fa80 	bl	8006338 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e3e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e40:	e011      	b.n	8006e66 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d012      	beq.n	8006e70 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	3324      	adds	r3, #36	@ 0x24
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 fd34 	bl	80078bc <xTaskRemoveFromEventList>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e5a:	f000 fe0d 	bl	8007a78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	dce9      	bgt.n	8006e42 <prvUnlockQueue+0x16>
 8006e6e:	e000      	b.n	8006e72 <prvUnlockQueue+0x46>
					break;
 8006e70:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	22ff      	movs	r2, #255	@ 0xff
 8006e76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006e7a:	f7ff fa8f 	bl	800639c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e7e:	f7ff fa5b 	bl	8006338 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e88:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e8a:	e011      	b.n	8006eb0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d012      	beq.n	8006eba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3310      	adds	r3, #16
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 fd0f 	bl	80078bc <xTaskRemoveFromEventList>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ea4:	f000 fde8 	bl	8007a78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ea8:	7bbb      	ldrb	r3, [r7, #14]
 8006eaa:	3b01      	subs	r3, #1
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006eb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	dce9      	bgt.n	8006e8c <prvUnlockQueue+0x60>
 8006eb8:	e000      	b.n	8006ebc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006eba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	22ff      	movs	r2, #255	@ 0xff
 8006ec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006ec4:	f7ff fa6a 	bl	800639c <vPortExitCritical>
}
 8006ec8:	bf00      	nop
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ed8:	f7ff fa2e 	bl	8006338 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d102      	bne.n	8006eea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	60fb      	str	r3, [r7, #12]
 8006ee8:	e001      	b.n	8006eee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006eea:	2300      	movs	r3, #0
 8006eec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006eee:	f7ff fa55 	bl	800639c <vPortExitCritical>

	return xReturn;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f04:	f7ff fa18 	bl	8006338 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d102      	bne.n	8006f1a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f14:	2301      	movs	r3, #1
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	e001      	b.n	8006f1e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f1e:	f7ff fa3d 	bl	800639c <vPortExitCritical>

	return xReturn;
 8006f22:	68fb      	ldr	r3, [r7, #12]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
 8006f34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f36:	2300      	movs	r3, #0
 8006f38:	60fb      	str	r3, [r7, #12]
 8006f3a:	e014      	b.n	8006f66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f3c:	4a0f      	ldr	r2, [pc, #60]	@ (8006f7c <vQueueAddToRegistry+0x50>)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10b      	bne.n	8006f60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f48:	490c      	ldr	r1, [pc, #48]	@ (8006f7c <vQueueAddToRegistry+0x50>)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f52:	4a0a      	ldr	r2, [pc, #40]	@ (8006f7c <vQueueAddToRegistry+0x50>)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	00db      	lsls	r3, r3, #3
 8006f58:	4413      	add	r3, r2
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f5e:	e006      	b.n	8006f6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3301      	adds	r3, #1
 8006f64:	60fb      	str	r3, [r7, #12]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2b07      	cmp	r3, #7
 8006f6a:	d9e7      	bls.n	8006f3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f6c:	bf00      	nop
 8006f6e:	bf00      	nop
 8006f70:	3714      	adds	r7, #20
 8006f72:	46bd      	mov	sp, r7
 8006f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f78:	4770      	bx	lr
 8006f7a:	bf00      	nop
 8006f7c:	24004454 	.word	0x24004454

08006f80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b086      	sub	sp, #24
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	60f8      	str	r0, [r7, #12]
 8006f88:	60b9      	str	r1, [r7, #8]
 8006f8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f90:	f7ff f9d2 	bl	8006338 <vPortEnterCritical>
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f9a:	b25b      	sxtb	r3, r3
 8006f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fa0:	d103      	bne.n	8006faa <vQueueWaitForMessageRestricted+0x2a>
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fb0:	b25b      	sxtb	r3, r3
 8006fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb6:	d103      	bne.n	8006fc0 <vQueueWaitForMessageRestricted+0x40>
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fc0:	f7ff f9ec 	bl	800639c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d106      	bne.n	8006fda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	3324      	adds	r3, #36	@ 0x24
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	68b9      	ldr	r1, [r7, #8]
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 fc45 	bl	8007864 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006fda:	6978      	ldr	r0, [r7, #20]
 8006fdc:	f7ff ff26 	bl	8006e2c <prvUnlockQueue>
	}
 8006fe0:	bf00      	nop
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08e      	sub	sp, #56	@ 0x38
 8006fec:	af04      	add	r7, sp, #16
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10b      	bne.n	8007014 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007000:	f383 8811 	msr	BASEPRI, r3
 8007004:	f3bf 8f6f 	isb	sy
 8007008:	f3bf 8f4f 	dsb	sy
 800700c:	623b      	str	r3, [r7, #32]
}
 800700e:	bf00      	nop
 8007010:	bf00      	nop
 8007012:	e7fd      	b.n	8007010 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007016:	2b00      	cmp	r3, #0
 8007018:	d10b      	bne.n	8007032 <xTaskCreateStatic+0x4a>
	__asm volatile
 800701a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	61fb      	str	r3, [r7, #28]
}
 800702c:	bf00      	nop
 800702e:	bf00      	nop
 8007030:	e7fd      	b.n	800702e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007032:	235c      	movs	r3, #92	@ 0x5c
 8007034:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007036:	693b      	ldr	r3, [r7, #16]
 8007038:	2b5c      	cmp	r3, #92	@ 0x5c
 800703a:	d00b      	beq.n	8007054 <xTaskCreateStatic+0x6c>
	__asm volatile
 800703c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	61bb      	str	r3, [r7, #24]
}
 800704e:	bf00      	nop
 8007050:	bf00      	nop
 8007052:	e7fd      	b.n	8007050 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007054:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007058:	2b00      	cmp	r3, #0
 800705a:	d01e      	beq.n	800709a <xTaskCreateStatic+0xb2>
 800705c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800705e:	2b00      	cmp	r3, #0
 8007060:	d01b      	beq.n	800709a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007064:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007068:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800706a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800706c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706e:	2202      	movs	r2, #2
 8007070:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007074:	2300      	movs	r3, #0
 8007076:	9303      	str	r3, [sp, #12]
 8007078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707a:	9302      	str	r3, [sp, #8]
 800707c:	f107 0314 	add.w	r3, r7, #20
 8007080:	9301      	str	r3, [sp, #4]
 8007082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007084:	9300      	str	r3, [sp, #0]
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	68b9      	ldr	r1, [r7, #8]
 800708c:	68f8      	ldr	r0, [r7, #12]
 800708e:	f000 f850 	bl	8007132 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007092:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007094:	f000 f8de 	bl	8007254 <prvAddNewTaskToReadyList>
 8007098:	e001      	b.n	800709e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800709a:	2300      	movs	r3, #0
 800709c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800709e:	697b      	ldr	r3, [r7, #20]
	}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3728      	adds	r7, #40	@ 0x28
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08c      	sub	sp, #48	@ 0x30
 80070ac:	af04      	add	r7, sp, #16
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	603b      	str	r3, [r7, #0]
 80070b4:	4613      	mov	r3, r2
 80070b6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80070b8:	88fb      	ldrh	r3, [r7, #6]
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4618      	mov	r0, r3
 80070be:	f7fe fd67 	bl	8005b90 <pvPortMalloc>
 80070c2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d00e      	beq.n	80070e8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80070ca:	205c      	movs	r0, #92	@ 0x5c
 80070cc:	f7fe fd60 	bl	8005b90 <pvPortMalloc>
 80070d0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d003      	beq.n	80070e0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	697a      	ldr	r2, [r7, #20]
 80070dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80070de:	e005      	b.n	80070ec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070e0:	6978      	ldr	r0, [r7, #20]
 80070e2:	f7fe fe23 	bl	8005d2c <vPortFree>
 80070e6:	e001      	b.n	80070ec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070e8:	2300      	movs	r3, #0
 80070ea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d017      	beq.n	8007122 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070fa:	88fa      	ldrh	r2, [r7, #6]
 80070fc:	2300      	movs	r3, #0
 80070fe:	9303      	str	r3, [sp, #12]
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	9302      	str	r3, [sp, #8]
 8007104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007106:	9301      	str	r3, [sp, #4]
 8007108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710a:	9300      	str	r3, [sp, #0]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	68b9      	ldr	r1, [r7, #8]
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 f80e 	bl	8007132 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007116:	69f8      	ldr	r0, [r7, #28]
 8007118:	f000 f89c 	bl	8007254 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800711c:	2301      	movs	r3, #1
 800711e:	61bb      	str	r3, [r7, #24]
 8007120:	e002      	b.n	8007128 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007122:	f04f 33ff 	mov.w	r3, #4294967295
 8007126:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007128:	69bb      	ldr	r3, [r7, #24]
	}
 800712a:	4618      	mov	r0, r3
 800712c:	3720      	adds	r7, #32
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b088      	sub	sp, #32
 8007136:	af00      	add	r7, sp, #0
 8007138:	60f8      	str	r0, [r7, #12]
 800713a:	60b9      	str	r1, [r7, #8]
 800713c:	607a      	str	r2, [r7, #4]
 800713e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007142:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	461a      	mov	r2, r3
 800714a:	21a5      	movs	r1, #165	@ 0xa5
 800714c:	f001 f9b2 	bl	80084b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007152:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800715a:	440b      	add	r3, r1
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4413      	add	r3, r2
 8007160:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	f023 0307 	bic.w	r3, r3, #7
 8007168:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	f003 0307 	and.w	r3, r3, #7
 8007170:	2b00      	cmp	r3, #0
 8007172:	d00b      	beq.n	800718c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	617b      	str	r3, [r7, #20]
}
 8007186:	bf00      	nop
 8007188:	bf00      	nop
 800718a:	e7fd      	b.n	8007188 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d01f      	beq.n	80071d2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007192:	2300      	movs	r3, #0
 8007194:	61fb      	str	r3, [r7, #28]
 8007196:	e012      	b.n	80071be <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007198:	68ba      	ldr	r2, [r7, #8]
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	4413      	add	r3, r2
 800719e:	7819      	ldrb	r1, [r3, #0]
 80071a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	4413      	add	r3, r2
 80071a6:	3334      	adds	r3, #52	@ 0x34
 80071a8:	460a      	mov	r2, r1
 80071aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80071ac:	68ba      	ldr	r2, [r7, #8]
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	4413      	add	r3, r2
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d006      	beq.n	80071c6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	3301      	adds	r3, #1
 80071bc:	61fb      	str	r3, [r7, #28]
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	2b0f      	cmp	r3, #15
 80071c2:	d9e9      	bls.n	8007198 <prvInitialiseNewTask+0x66>
 80071c4:	e000      	b.n	80071c8 <prvInitialiseNewTask+0x96>
			{
				break;
 80071c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071d0:	e003      	b.n	80071da <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80071d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071dc:	2b37      	cmp	r3, #55	@ 0x37
 80071de:	d901      	bls.n	80071e4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071e0:	2337      	movs	r3, #55	@ 0x37
 80071e2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071e8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071ee:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80071f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f2:	2200      	movs	r2, #0
 80071f4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f8:	3304      	adds	r3, #4
 80071fa:	4618      	mov	r0, r3
 80071fc:	f7fe fed6 	bl	8005fac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007200:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007202:	3318      	adds	r3, #24
 8007204:	4618      	mov	r0, r3
 8007206:	f7fe fed1 	bl	8005fac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800720a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800720e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007212:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800721a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800721e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007222:	2200      	movs	r2, #0
 8007224:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800722e:	683a      	ldr	r2, [r7, #0]
 8007230:	68f9      	ldr	r1, [r7, #12]
 8007232:	69b8      	ldr	r0, [r7, #24]
 8007234:	f7fe ff4e 	bl	80060d4 <pxPortInitialiseStack>
 8007238:	4602      	mov	r2, r0
 800723a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800723c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800723e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007240:	2b00      	cmp	r3, #0
 8007242:	d002      	beq.n	800724a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007248:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800724a:	bf00      	nop
 800724c:	3720      	adds	r7, #32
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
	...

08007254 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800725c:	f7ff f86c 	bl	8006338 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007260:	4b2d      	ldr	r3, [pc, #180]	@ (8007318 <prvAddNewTaskToReadyList+0xc4>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3301      	adds	r3, #1
 8007266:	4a2c      	ldr	r2, [pc, #176]	@ (8007318 <prvAddNewTaskToReadyList+0xc4>)
 8007268:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800726a:	4b2c      	ldr	r3, [pc, #176]	@ (800731c <prvAddNewTaskToReadyList+0xc8>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d109      	bne.n	8007286 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007272:	4a2a      	ldr	r2, [pc, #168]	@ (800731c <prvAddNewTaskToReadyList+0xc8>)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007278:	4b27      	ldr	r3, [pc, #156]	@ (8007318 <prvAddNewTaskToReadyList+0xc4>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b01      	cmp	r3, #1
 800727e:	d110      	bne.n	80072a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007280:	f000 fc1e 	bl	8007ac0 <prvInitialiseTaskLists>
 8007284:	e00d      	b.n	80072a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007286:	4b26      	ldr	r3, [pc, #152]	@ (8007320 <prvAddNewTaskToReadyList+0xcc>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d109      	bne.n	80072a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800728e:	4b23      	ldr	r3, [pc, #140]	@ (800731c <prvAddNewTaskToReadyList+0xc8>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007298:	429a      	cmp	r2, r3
 800729a:	d802      	bhi.n	80072a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800729c:	4a1f      	ldr	r2, [pc, #124]	@ (800731c <prvAddNewTaskToReadyList+0xc8>)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80072a2:	4b20      	ldr	r3, [pc, #128]	@ (8007324 <prvAddNewTaskToReadyList+0xd0>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3301      	adds	r3, #1
 80072a8:	4a1e      	ldr	r2, [pc, #120]	@ (8007324 <prvAddNewTaskToReadyList+0xd0>)
 80072aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80072ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007324 <prvAddNewTaskToReadyList+0xd0>)
 80072ae:	681a      	ldr	r2, [r3, #0]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007328 <prvAddNewTaskToReadyList+0xd4>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d903      	bls.n	80072c8 <prvAddNewTaskToReadyList+0x74>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c4:	4a18      	ldr	r2, [pc, #96]	@ (8007328 <prvAddNewTaskToReadyList+0xd4>)
 80072c6:	6013      	str	r3, [r2, #0]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072cc:	4613      	mov	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4413      	add	r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	4a15      	ldr	r2, [pc, #84]	@ (800732c <prvAddNewTaskToReadyList+0xd8>)
 80072d6:	441a      	add	r2, r3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	3304      	adds	r3, #4
 80072dc:	4619      	mov	r1, r3
 80072de:	4610      	mov	r0, r2
 80072e0:	f7fe fe71 	bl	8005fc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072e4:	f7ff f85a 	bl	800639c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072e8:	4b0d      	ldr	r3, [pc, #52]	@ (8007320 <prvAddNewTaskToReadyList+0xcc>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00e      	beq.n	800730e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072f0:	4b0a      	ldr	r3, [pc, #40]	@ (800731c <prvAddNewTaskToReadyList+0xc8>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d207      	bcs.n	800730e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072fe:	4b0c      	ldr	r3, [pc, #48]	@ (8007330 <prvAddNewTaskToReadyList+0xdc>)
 8007300:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007304:	601a      	str	r2, [r3, #0]
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800730e:	bf00      	nop
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	24004968 	.word	0x24004968
 800731c:	24004494 	.word	0x24004494
 8007320:	24004974 	.word	0x24004974
 8007324:	24004984 	.word	0x24004984
 8007328:	24004970 	.word	0x24004970
 800732c:	24004498 	.word	0x24004498
 8007330:	e000ed04 	.word	0xe000ed04

08007334 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800733c:	2300      	movs	r3, #0
 800733e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d018      	beq.n	8007378 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007346:	4b14      	ldr	r3, [pc, #80]	@ (8007398 <vTaskDelay+0x64>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d00b      	beq.n	8007366 <vTaskDelay+0x32>
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	60bb      	str	r3, [r7, #8]
}
 8007360:	bf00      	nop
 8007362:	bf00      	nop
 8007364:	e7fd      	b.n	8007362 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007366:	f000 f883 	bl	8007470 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800736a:	2100      	movs	r1, #0
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 fcf3 	bl	8007d58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007372:	f000 f88b 	bl	800748c <xTaskResumeAll>
 8007376:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d107      	bne.n	800738e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800737e:	4b07      	ldr	r3, [pc, #28]	@ (800739c <vTaskDelay+0x68>)
 8007380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007384:	601a      	str	r2, [r3, #0]
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800738e:	bf00      	nop
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop
 8007398:	24004990 	.word	0x24004990
 800739c:	e000ed04 	.word	0xe000ed04

080073a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b08a      	sub	sp, #40	@ 0x28
 80073a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073aa:	2300      	movs	r3, #0
 80073ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073ae:	463a      	mov	r2, r7
 80073b0:	1d39      	adds	r1, r7, #4
 80073b2:	f107 0308 	add.w	r3, r7, #8
 80073b6:	4618      	mov	r0, r3
 80073b8:	f7fe fbb6 	bl	8005b28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	9202      	str	r2, [sp, #8]
 80073c4:	9301      	str	r3, [sp, #4]
 80073c6:	2300      	movs	r3, #0
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	2300      	movs	r3, #0
 80073cc:	460a      	mov	r2, r1
 80073ce:	4922      	ldr	r1, [pc, #136]	@ (8007458 <vTaskStartScheduler+0xb8>)
 80073d0:	4822      	ldr	r0, [pc, #136]	@ (800745c <vTaskStartScheduler+0xbc>)
 80073d2:	f7ff fe09 	bl	8006fe8 <xTaskCreateStatic>
 80073d6:	4603      	mov	r3, r0
 80073d8:	4a21      	ldr	r2, [pc, #132]	@ (8007460 <vTaskStartScheduler+0xc0>)
 80073da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073dc:	4b20      	ldr	r3, [pc, #128]	@ (8007460 <vTaskStartScheduler+0xc0>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073e4:	2301      	movs	r3, #1
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	e001      	b.n	80073ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073ea:	2300      	movs	r3, #0
 80073ec:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d102      	bne.n	80073fa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80073f4:	f000 fd04 	bl	8007e00 <xTimerCreateTimerTask>
 80073f8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d116      	bne.n	800742e <vTaskStartScheduler+0x8e>
	__asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	613b      	str	r3, [r7, #16]
}
 8007412:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007414:	4b13      	ldr	r3, [pc, #76]	@ (8007464 <vTaskStartScheduler+0xc4>)
 8007416:	f04f 32ff 	mov.w	r2, #4294967295
 800741a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800741c:	4b12      	ldr	r3, [pc, #72]	@ (8007468 <vTaskStartScheduler+0xc8>)
 800741e:	2201      	movs	r2, #1
 8007420:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007422:	4b12      	ldr	r3, [pc, #72]	@ (800746c <vTaskStartScheduler+0xcc>)
 8007424:	2200      	movs	r2, #0
 8007426:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007428:	f7fe fee2 	bl	80061f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800742c:	e00f      	b.n	800744e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007434:	d10b      	bne.n	800744e <vTaskStartScheduler+0xae>
	__asm volatile
 8007436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	60fb      	str	r3, [r7, #12]
}
 8007448:	bf00      	nop
 800744a:	bf00      	nop
 800744c:	e7fd      	b.n	800744a <vTaskStartScheduler+0xaa>
}
 800744e:	bf00      	nop
 8007450:	3718      	adds	r7, #24
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	0800858c 	.word	0x0800858c
 800745c:	08007a91 	.word	0x08007a91
 8007460:	2400498c 	.word	0x2400498c
 8007464:	24004988 	.word	0x24004988
 8007468:	24004974 	.word	0x24004974
 800746c:	2400496c 	.word	0x2400496c

08007470 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007470:	b480      	push	{r7}
 8007472:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007474:	4b04      	ldr	r3, [pc, #16]	@ (8007488 <vTaskSuspendAll+0x18>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	3301      	adds	r3, #1
 800747a:	4a03      	ldr	r2, [pc, #12]	@ (8007488 <vTaskSuspendAll+0x18>)
 800747c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800747e:	bf00      	nop
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr
 8007488:	24004990 	.word	0x24004990

0800748c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007492:	2300      	movs	r3, #0
 8007494:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007496:	2300      	movs	r3, #0
 8007498:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800749a:	4b42      	ldr	r3, [pc, #264]	@ (80075a4 <xTaskResumeAll+0x118>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d10b      	bne.n	80074ba <xTaskResumeAll+0x2e>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	603b      	str	r3, [r7, #0]
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop
 80074b8:	e7fd      	b.n	80074b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80074ba:	f7fe ff3d 	bl	8006338 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80074be:	4b39      	ldr	r3, [pc, #228]	@ (80075a4 <xTaskResumeAll+0x118>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	3b01      	subs	r3, #1
 80074c4:	4a37      	ldr	r2, [pc, #220]	@ (80075a4 <xTaskResumeAll+0x118>)
 80074c6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074c8:	4b36      	ldr	r3, [pc, #216]	@ (80075a4 <xTaskResumeAll+0x118>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d162      	bne.n	8007596 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074d0:	4b35      	ldr	r3, [pc, #212]	@ (80075a8 <xTaskResumeAll+0x11c>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d05e      	beq.n	8007596 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074d8:	e02f      	b.n	800753a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074da:	4b34      	ldr	r3, [pc, #208]	@ (80075ac <xTaskResumeAll+0x120>)
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3318      	adds	r3, #24
 80074e6:	4618      	mov	r0, r3
 80074e8:	f7fe fdca 	bl	8006080 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	3304      	adds	r3, #4
 80074f0:	4618      	mov	r0, r3
 80074f2:	f7fe fdc5 	bl	8006080 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074fa:	4b2d      	ldr	r3, [pc, #180]	@ (80075b0 <xTaskResumeAll+0x124>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d903      	bls.n	800750a <xTaskResumeAll+0x7e>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007506:	4a2a      	ldr	r2, [pc, #168]	@ (80075b0 <xTaskResumeAll+0x124>)
 8007508:	6013      	str	r3, [r2, #0]
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800750e:	4613      	mov	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4413      	add	r3, r2
 8007514:	009b      	lsls	r3, r3, #2
 8007516:	4a27      	ldr	r2, [pc, #156]	@ (80075b4 <xTaskResumeAll+0x128>)
 8007518:	441a      	add	r2, r3
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	3304      	adds	r3, #4
 800751e:	4619      	mov	r1, r3
 8007520:	4610      	mov	r0, r2
 8007522:	f7fe fd50 	bl	8005fc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800752a:	4b23      	ldr	r3, [pc, #140]	@ (80075b8 <xTaskResumeAll+0x12c>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007530:	429a      	cmp	r2, r3
 8007532:	d302      	bcc.n	800753a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007534:	4b21      	ldr	r3, [pc, #132]	@ (80075bc <xTaskResumeAll+0x130>)
 8007536:	2201      	movs	r2, #1
 8007538:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800753a:	4b1c      	ldr	r3, [pc, #112]	@ (80075ac <xTaskResumeAll+0x120>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1cb      	bne.n	80074da <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d001      	beq.n	800754c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007548:	f000 fb58 	bl	8007bfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800754c:	4b1c      	ldr	r3, [pc, #112]	@ (80075c0 <xTaskResumeAll+0x134>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d010      	beq.n	800757a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007558:	f000 f846 	bl	80075e8 <xTaskIncrementTick>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d002      	beq.n	8007568 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007562:	4b16      	ldr	r3, [pc, #88]	@ (80075bc <xTaskResumeAll+0x130>)
 8007564:	2201      	movs	r2, #1
 8007566:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3b01      	subs	r3, #1
 800756c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d1f1      	bne.n	8007558 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007574:	4b12      	ldr	r3, [pc, #72]	@ (80075c0 <xTaskResumeAll+0x134>)
 8007576:	2200      	movs	r2, #0
 8007578:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800757a:	4b10      	ldr	r3, [pc, #64]	@ (80075bc <xTaskResumeAll+0x130>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d009      	beq.n	8007596 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007582:	2301      	movs	r3, #1
 8007584:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007586:	4b0f      	ldr	r3, [pc, #60]	@ (80075c4 <xTaskResumeAll+0x138>)
 8007588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800758c:	601a      	str	r2, [r3, #0]
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007596:	f7fe ff01 	bl	800639c <vPortExitCritical>

	return xAlreadyYielded;
 800759a:	68bb      	ldr	r3, [r7, #8]
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	24004990 	.word	0x24004990
 80075a8:	24004968 	.word	0x24004968
 80075ac:	24004928 	.word	0x24004928
 80075b0:	24004970 	.word	0x24004970
 80075b4:	24004498 	.word	0x24004498
 80075b8:	24004494 	.word	0x24004494
 80075bc:	2400497c 	.word	0x2400497c
 80075c0:	24004978 	.word	0x24004978
 80075c4:	e000ed04 	.word	0xe000ed04

080075c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80075ce:	4b05      	ldr	r3, [pc, #20]	@ (80075e4 <xTaskGetTickCount+0x1c>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80075d4:	687b      	ldr	r3, [r7, #4]
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	370c      	adds	r7, #12
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	2400496c 	.word	0x2400496c

080075e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075ee:	2300      	movs	r3, #0
 80075f0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075f2:	4b4f      	ldr	r3, [pc, #316]	@ (8007730 <xTaskIncrementTick+0x148>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	f040 8090 	bne.w	800771c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075fc:	4b4d      	ldr	r3, [pc, #308]	@ (8007734 <xTaskIncrementTick+0x14c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3301      	adds	r3, #1
 8007602:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007604:	4a4b      	ldr	r2, [pc, #300]	@ (8007734 <xTaskIncrementTick+0x14c>)
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d121      	bne.n	8007654 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007610:	4b49      	ldr	r3, [pc, #292]	@ (8007738 <xTaskIncrementTick+0x150>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00b      	beq.n	8007632 <xTaskIncrementTick+0x4a>
	__asm volatile
 800761a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761e:	f383 8811 	msr	BASEPRI, r3
 8007622:	f3bf 8f6f 	isb	sy
 8007626:	f3bf 8f4f 	dsb	sy
 800762a:	603b      	str	r3, [r7, #0]
}
 800762c:	bf00      	nop
 800762e:	bf00      	nop
 8007630:	e7fd      	b.n	800762e <xTaskIncrementTick+0x46>
 8007632:	4b41      	ldr	r3, [pc, #260]	@ (8007738 <xTaskIncrementTick+0x150>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	60fb      	str	r3, [r7, #12]
 8007638:	4b40      	ldr	r3, [pc, #256]	@ (800773c <xTaskIncrementTick+0x154>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a3e      	ldr	r2, [pc, #248]	@ (8007738 <xTaskIncrementTick+0x150>)
 800763e:	6013      	str	r3, [r2, #0]
 8007640:	4a3e      	ldr	r2, [pc, #248]	@ (800773c <xTaskIncrementTick+0x154>)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6013      	str	r3, [r2, #0]
 8007646:	4b3e      	ldr	r3, [pc, #248]	@ (8007740 <xTaskIncrementTick+0x158>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	3301      	adds	r3, #1
 800764c:	4a3c      	ldr	r2, [pc, #240]	@ (8007740 <xTaskIncrementTick+0x158>)
 800764e:	6013      	str	r3, [r2, #0]
 8007650:	f000 fad4 	bl	8007bfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007654:	4b3b      	ldr	r3, [pc, #236]	@ (8007744 <xTaskIncrementTick+0x15c>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	429a      	cmp	r2, r3
 800765c:	d349      	bcc.n	80076f2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800765e:	4b36      	ldr	r3, [pc, #216]	@ (8007738 <xTaskIncrementTick+0x150>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d104      	bne.n	8007672 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007668:	4b36      	ldr	r3, [pc, #216]	@ (8007744 <xTaskIncrementTick+0x15c>)
 800766a:	f04f 32ff 	mov.w	r2, #4294967295
 800766e:	601a      	str	r2, [r3, #0]
					break;
 8007670:	e03f      	b.n	80076f2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007672:	4b31      	ldr	r3, [pc, #196]	@ (8007738 <xTaskIncrementTick+0x150>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	68db      	ldr	r3, [r3, #12]
 8007678:	68db      	ldr	r3, [r3, #12]
 800767a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007682:	693a      	ldr	r2, [r7, #16]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	429a      	cmp	r2, r3
 8007688:	d203      	bcs.n	8007692 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800768a:	4a2e      	ldr	r2, [pc, #184]	@ (8007744 <xTaskIncrementTick+0x15c>)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007690:	e02f      	b.n	80076f2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	3304      	adds	r3, #4
 8007696:	4618      	mov	r0, r3
 8007698:	f7fe fcf2 	bl	8006080 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d004      	beq.n	80076ae <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	3318      	adds	r3, #24
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fe fce9 	bl	8006080 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076b2:	4b25      	ldr	r3, [pc, #148]	@ (8007748 <xTaskIncrementTick+0x160>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d903      	bls.n	80076c2 <xTaskIncrementTick+0xda>
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076be:	4a22      	ldr	r2, [pc, #136]	@ (8007748 <xTaskIncrementTick+0x160>)
 80076c0:	6013      	str	r3, [r2, #0]
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076c6:	4613      	mov	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4a1f      	ldr	r2, [pc, #124]	@ (800774c <xTaskIncrementTick+0x164>)
 80076d0:	441a      	add	r2, r3
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	3304      	adds	r3, #4
 80076d6:	4619      	mov	r1, r3
 80076d8:	4610      	mov	r0, r2
 80076da:	f7fe fc74 	bl	8005fc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076e2:	4b1b      	ldr	r3, [pc, #108]	@ (8007750 <xTaskIncrementTick+0x168>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d3b8      	bcc.n	800765e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80076ec:	2301      	movs	r3, #1
 80076ee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076f0:	e7b5      	b.n	800765e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076f2:	4b17      	ldr	r3, [pc, #92]	@ (8007750 <xTaskIncrementTick+0x168>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076f8:	4914      	ldr	r1, [pc, #80]	@ (800774c <xTaskIncrementTick+0x164>)
 80076fa:	4613      	mov	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	440b      	add	r3, r1
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d901      	bls.n	800770e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800770a:	2301      	movs	r3, #1
 800770c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800770e:	4b11      	ldr	r3, [pc, #68]	@ (8007754 <xTaskIncrementTick+0x16c>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d007      	beq.n	8007726 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007716:	2301      	movs	r3, #1
 8007718:	617b      	str	r3, [r7, #20]
 800771a:	e004      	b.n	8007726 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800771c:	4b0e      	ldr	r3, [pc, #56]	@ (8007758 <xTaskIncrementTick+0x170>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3301      	adds	r3, #1
 8007722:	4a0d      	ldr	r2, [pc, #52]	@ (8007758 <xTaskIncrementTick+0x170>)
 8007724:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007726:	697b      	ldr	r3, [r7, #20]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3718      	adds	r7, #24
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	24004990 	.word	0x24004990
 8007734:	2400496c 	.word	0x2400496c
 8007738:	24004920 	.word	0x24004920
 800773c:	24004924 	.word	0x24004924
 8007740:	24004980 	.word	0x24004980
 8007744:	24004988 	.word	0x24004988
 8007748:	24004970 	.word	0x24004970
 800774c:	24004498 	.word	0x24004498
 8007750:	24004494 	.word	0x24004494
 8007754:	2400497c 	.word	0x2400497c
 8007758:	24004978 	.word	0x24004978

0800775c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007762:	4b28      	ldr	r3, [pc, #160]	@ (8007804 <vTaskSwitchContext+0xa8>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800776a:	4b27      	ldr	r3, [pc, #156]	@ (8007808 <vTaskSwitchContext+0xac>)
 800776c:	2201      	movs	r2, #1
 800776e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007770:	e042      	b.n	80077f8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007772:	4b25      	ldr	r3, [pc, #148]	@ (8007808 <vTaskSwitchContext+0xac>)
 8007774:	2200      	movs	r2, #0
 8007776:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007778:	4b24      	ldr	r3, [pc, #144]	@ (800780c <vTaskSwitchContext+0xb0>)
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	60fb      	str	r3, [r7, #12]
 800777e:	e011      	b.n	80077a4 <vTaskSwitchContext+0x48>
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d10b      	bne.n	800779e <vTaskSwitchContext+0x42>
	__asm volatile
 8007786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800778a:	f383 8811 	msr	BASEPRI, r3
 800778e:	f3bf 8f6f 	isb	sy
 8007792:	f3bf 8f4f 	dsb	sy
 8007796:	607b      	str	r3, [r7, #4]
}
 8007798:	bf00      	nop
 800779a:	bf00      	nop
 800779c:	e7fd      	b.n	800779a <vTaskSwitchContext+0x3e>
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	3b01      	subs	r3, #1
 80077a2:	60fb      	str	r3, [r7, #12]
 80077a4:	491a      	ldr	r1, [pc, #104]	@ (8007810 <vTaskSwitchContext+0xb4>)
 80077a6:	68fa      	ldr	r2, [r7, #12]
 80077a8:	4613      	mov	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	009b      	lsls	r3, r3, #2
 80077b0:	440b      	add	r3, r1
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0e3      	beq.n	8007780 <vTaskSwitchContext+0x24>
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	4613      	mov	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4a13      	ldr	r2, [pc, #76]	@ (8007810 <vTaskSwitchContext+0xb4>)
 80077c4:	4413      	add	r3, r2
 80077c6:	60bb      	str	r3, [r7, #8]
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	685a      	ldr	r2, [r3, #4]
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	605a      	str	r2, [r3, #4]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	685a      	ldr	r2, [r3, #4]
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	3308      	adds	r3, #8
 80077da:	429a      	cmp	r2, r3
 80077dc:	d104      	bne.n	80077e8 <vTaskSwitchContext+0x8c>
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	605a      	str	r2, [r3, #4]
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	68db      	ldr	r3, [r3, #12]
 80077ee:	4a09      	ldr	r2, [pc, #36]	@ (8007814 <vTaskSwitchContext+0xb8>)
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	4a06      	ldr	r2, [pc, #24]	@ (800780c <vTaskSwitchContext+0xb0>)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6013      	str	r3, [r2, #0]
}
 80077f8:	bf00      	nop
 80077fa:	3714      	adds	r7, #20
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	24004990 	.word	0x24004990
 8007808:	2400497c 	.word	0x2400497c
 800780c:	24004970 	.word	0x24004970
 8007810:	24004498 	.word	0x24004498
 8007814:	24004494 	.word	0x24004494

08007818 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
 8007820:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10b      	bne.n	8007840 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	60fb      	str	r3, [r7, #12]
}
 800783a:	bf00      	nop
 800783c:	bf00      	nop
 800783e:	e7fd      	b.n	800783c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007840:	4b07      	ldr	r3, [pc, #28]	@ (8007860 <vTaskPlaceOnEventList+0x48>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	3318      	adds	r3, #24
 8007846:	4619      	mov	r1, r3
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f7fe fbe0 	bl	800600e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800784e:	2101      	movs	r1, #1
 8007850:	6838      	ldr	r0, [r7, #0]
 8007852:	f000 fa81 	bl	8007d58 <prvAddCurrentTaskToDelayedList>
}
 8007856:	bf00      	nop
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	24004494 	.word	0x24004494

08007864 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007864:	b580      	push	{r7, lr}
 8007866:	b086      	sub	sp, #24
 8007868:	af00      	add	r7, sp, #0
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	60b9      	str	r1, [r7, #8]
 800786e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d10b      	bne.n	800788e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	617b      	str	r3, [r7, #20]
}
 8007888:	bf00      	nop
 800788a:	bf00      	nop
 800788c:	e7fd      	b.n	800788a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800788e:	4b0a      	ldr	r3, [pc, #40]	@ (80078b8 <vTaskPlaceOnEventListRestricted+0x54>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	3318      	adds	r3, #24
 8007894:	4619      	mov	r1, r3
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f7fe fb95 	bl	8005fc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d002      	beq.n	80078a8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80078a2:	f04f 33ff 	mov.w	r3, #4294967295
 80078a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80078a8:	6879      	ldr	r1, [r7, #4]
 80078aa:	68b8      	ldr	r0, [r7, #8]
 80078ac:	f000 fa54 	bl	8007d58 <prvAddCurrentTaskToDelayedList>
	}
 80078b0:	bf00      	nop
 80078b2:	3718      	adds	r7, #24
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	24004494 	.word	0x24004494

080078bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	68db      	ldr	r3, [r3, #12]
 80078ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d10b      	bne.n	80078ea <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	60fb      	str	r3, [r7, #12]
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop
 80078e8:	e7fd      	b.n	80078e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078ea:	693b      	ldr	r3, [r7, #16]
 80078ec:	3318      	adds	r3, #24
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7fe fbc6 	bl	8006080 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078f4:	4b1d      	ldr	r3, [pc, #116]	@ (800796c <xTaskRemoveFromEventList+0xb0>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d11d      	bne.n	8007938 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	3304      	adds	r3, #4
 8007900:	4618      	mov	r0, r3
 8007902:	f7fe fbbd 	bl	8006080 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007906:	693b      	ldr	r3, [r7, #16]
 8007908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800790a:	4b19      	ldr	r3, [pc, #100]	@ (8007970 <xTaskRemoveFromEventList+0xb4>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	429a      	cmp	r2, r3
 8007910:	d903      	bls.n	800791a <xTaskRemoveFromEventList+0x5e>
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007916:	4a16      	ldr	r2, [pc, #88]	@ (8007970 <xTaskRemoveFromEventList+0xb4>)
 8007918:	6013      	str	r3, [r2, #0]
 800791a:	693b      	ldr	r3, [r7, #16]
 800791c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800791e:	4613      	mov	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	4a13      	ldr	r2, [pc, #76]	@ (8007974 <xTaskRemoveFromEventList+0xb8>)
 8007928:	441a      	add	r2, r3
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	3304      	adds	r3, #4
 800792e:	4619      	mov	r1, r3
 8007930:	4610      	mov	r0, r2
 8007932:	f7fe fb48 	bl	8005fc6 <vListInsertEnd>
 8007936:	e005      	b.n	8007944 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	3318      	adds	r3, #24
 800793c:	4619      	mov	r1, r3
 800793e:	480e      	ldr	r0, [pc, #56]	@ (8007978 <xTaskRemoveFromEventList+0xbc>)
 8007940:	f7fe fb41 	bl	8005fc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007944:	693b      	ldr	r3, [r7, #16]
 8007946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007948:	4b0c      	ldr	r3, [pc, #48]	@ (800797c <xTaskRemoveFromEventList+0xc0>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800794e:	429a      	cmp	r2, r3
 8007950:	d905      	bls.n	800795e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007952:	2301      	movs	r3, #1
 8007954:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007956:	4b0a      	ldr	r3, [pc, #40]	@ (8007980 <xTaskRemoveFromEventList+0xc4>)
 8007958:	2201      	movs	r2, #1
 800795a:	601a      	str	r2, [r3, #0]
 800795c:	e001      	b.n	8007962 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800795e:	2300      	movs	r3, #0
 8007960:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007962:	697b      	ldr	r3, [r7, #20]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3718      	adds	r7, #24
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}
 800796c:	24004990 	.word	0x24004990
 8007970:	24004970 	.word	0x24004970
 8007974:	24004498 	.word	0x24004498
 8007978:	24004928 	.word	0x24004928
 800797c:	24004494 	.word	0x24004494
 8007980:	2400497c 	.word	0x2400497c

08007984 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007984:	b480      	push	{r7}
 8007986:	b083      	sub	sp, #12
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800798c:	4b06      	ldr	r3, [pc, #24]	@ (80079a8 <vTaskInternalSetTimeOutState+0x24>)
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007994:	4b05      	ldr	r3, [pc, #20]	@ (80079ac <vTaskInternalSetTimeOutState+0x28>)
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	605a      	str	r2, [r3, #4]
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr
 80079a8:	24004980 	.word	0x24004980
 80079ac:	2400496c 	.word	0x2400496c

080079b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b088      	sub	sp, #32
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10b      	bne.n	80079d8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80079c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	613b      	str	r3, [r7, #16]
}
 80079d2:	bf00      	nop
 80079d4:	bf00      	nop
 80079d6:	e7fd      	b.n	80079d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10b      	bne.n	80079f6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	60fb      	str	r3, [r7, #12]
}
 80079f0:	bf00      	nop
 80079f2:	bf00      	nop
 80079f4:	e7fd      	b.n	80079f2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80079f6:	f7fe fc9f 	bl	8006338 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007a70 <xTaskCheckForTimeOut+0xc0>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	685b      	ldr	r3, [r3, #4]
 8007a04:	69ba      	ldr	r2, [r7, #24]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a12:	d102      	bne.n	8007a1a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a14:	2300      	movs	r3, #0
 8007a16:	61fb      	str	r3, [r7, #28]
 8007a18:	e023      	b.n	8007a62 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	4b15      	ldr	r3, [pc, #84]	@ (8007a74 <xTaskCheckForTimeOut+0xc4>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d007      	beq.n	8007a36 <xTaskCheckForTimeOut+0x86>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d302      	bcc.n	8007a36 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a30:	2301      	movs	r3, #1
 8007a32:	61fb      	str	r3, [r7, #28]
 8007a34:	e015      	b.n	8007a62 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	697a      	ldr	r2, [r7, #20]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d20b      	bcs.n	8007a58 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	1ad2      	subs	r2, r2, r3
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7ff ff99 	bl	8007984 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a52:	2300      	movs	r3, #0
 8007a54:	61fb      	str	r3, [r7, #28]
 8007a56:	e004      	b.n	8007a62 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a62:	f7fe fc9b 	bl	800639c <vPortExitCritical>

	return xReturn;
 8007a66:	69fb      	ldr	r3, [r7, #28]
}
 8007a68:	4618      	mov	r0, r3
 8007a6a:	3720      	adds	r7, #32
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	2400496c 	.word	0x2400496c
 8007a74:	24004980 	.word	0x24004980

08007a78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a78:	b480      	push	{r7}
 8007a7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a7c:	4b03      	ldr	r3, [pc, #12]	@ (8007a8c <vTaskMissedYield+0x14>)
 8007a7e:	2201      	movs	r2, #1
 8007a80:	601a      	str	r2, [r3, #0]
}
 8007a82:	bf00      	nop
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	2400497c 	.word	0x2400497c

08007a90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a98:	f000 f852 	bl	8007b40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a9c:	4b06      	ldr	r3, [pc, #24]	@ (8007ab8 <prvIdleTask+0x28>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d9f9      	bls.n	8007a98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007aa4:	4b05      	ldr	r3, [pc, #20]	@ (8007abc <prvIdleTask+0x2c>)
 8007aa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aaa:	601a      	str	r2, [r3, #0]
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ab4:	e7f0      	b.n	8007a98 <prvIdleTask+0x8>
 8007ab6:	bf00      	nop
 8007ab8:	24004498 	.word	0x24004498
 8007abc:	e000ed04 	.word	0xe000ed04

08007ac0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	607b      	str	r3, [r7, #4]
 8007aca:	e00c      	b.n	8007ae6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	4613      	mov	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	009b      	lsls	r3, r3, #2
 8007ad6:	4a12      	ldr	r2, [pc, #72]	@ (8007b20 <prvInitialiseTaskLists+0x60>)
 8007ad8:	4413      	add	r3, r2
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7fe fa46 	bl	8005f6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	3301      	adds	r3, #1
 8007ae4:	607b      	str	r3, [r7, #4]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b37      	cmp	r3, #55	@ 0x37
 8007aea:	d9ef      	bls.n	8007acc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007aec:	480d      	ldr	r0, [pc, #52]	@ (8007b24 <prvInitialiseTaskLists+0x64>)
 8007aee:	f7fe fa3d 	bl	8005f6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007af2:	480d      	ldr	r0, [pc, #52]	@ (8007b28 <prvInitialiseTaskLists+0x68>)
 8007af4:	f7fe fa3a 	bl	8005f6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007af8:	480c      	ldr	r0, [pc, #48]	@ (8007b2c <prvInitialiseTaskLists+0x6c>)
 8007afa:	f7fe fa37 	bl	8005f6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007afe:	480c      	ldr	r0, [pc, #48]	@ (8007b30 <prvInitialiseTaskLists+0x70>)
 8007b00:	f7fe fa34 	bl	8005f6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b04:	480b      	ldr	r0, [pc, #44]	@ (8007b34 <prvInitialiseTaskLists+0x74>)
 8007b06:	f7fe fa31 	bl	8005f6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8007b38 <prvInitialiseTaskLists+0x78>)
 8007b0c:	4a05      	ldr	r2, [pc, #20]	@ (8007b24 <prvInitialiseTaskLists+0x64>)
 8007b0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b10:	4b0a      	ldr	r3, [pc, #40]	@ (8007b3c <prvInitialiseTaskLists+0x7c>)
 8007b12:	4a05      	ldr	r2, [pc, #20]	@ (8007b28 <prvInitialiseTaskLists+0x68>)
 8007b14:	601a      	str	r2, [r3, #0]
}
 8007b16:	bf00      	nop
 8007b18:	3708      	adds	r7, #8
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	24004498 	.word	0x24004498
 8007b24:	240048f8 	.word	0x240048f8
 8007b28:	2400490c 	.word	0x2400490c
 8007b2c:	24004928 	.word	0x24004928
 8007b30:	2400493c 	.word	0x2400493c
 8007b34:	24004954 	.word	0x24004954
 8007b38:	24004920 	.word	0x24004920
 8007b3c:	24004924 	.word	0x24004924

08007b40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b46:	e019      	b.n	8007b7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b48:	f7fe fbf6 	bl	8006338 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b4c:	4b10      	ldr	r3, [pc, #64]	@ (8007b90 <prvCheckTasksWaitingTermination+0x50>)
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	3304      	adds	r3, #4
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f7fe fa91 	bl	8006080 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007b94 <prvCheckTasksWaitingTermination+0x54>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	4a0b      	ldr	r2, [pc, #44]	@ (8007b94 <prvCheckTasksWaitingTermination+0x54>)
 8007b66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b68:	4b0b      	ldr	r3, [pc, #44]	@ (8007b98 <prvCheckTasksWaitingTermination+0x58>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	3b01      	subs	r3, #1
 8007b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8007b98 <prvCheckTasksWaitingTermination+0x58>)
 8007b70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b72:	f7fe fc13 	bl	800639c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 f810 	bl	8007b9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b7c:	4b06      	ldr	r3, [pc, #24]	@ (8007b98 <prvCheckTasksWaitingTermination+0x58>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d1e1      	bne.n	8007b48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b84:	bf00      	nop
 8007b86:	bf00      	nop
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	2400493c 	.word	0x2400493c
 8007b94:	24004968 	.word	0x24004968
 8007b98:	24004950 	.word	0x24004950

08007b9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d108      	bne.n	8007bc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fe f8ba 	bl	8005d2c <vPortFree>
				vPortFree( pxTCB );
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f7fe f8b7 	bl	8005d2c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007bbe:	e019      	b.n	8007bf4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d103      	bne.n	8007bd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7fe f8ae 	bl	8005d2c <vPortFree>
	}
 8007bd0:	e010      	b.n	8007bf4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d00b      	beq.n	8007bf4 <prvDeleteTCB+0x58>
	__asm volatile
 8007bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be0:	f383 8811 	msr	BASEPRI, r3
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	60fb      	str	r3, [r7, #12]
}
 8007bee:	bf00      	nop
 8007bf0:	bf00      	nop
 8007bf2:	e7fd      	b.n	8007bf0 <prvDeleteTCB+0x54>
	}
 8007bf4:	bf00      	nop
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}

08007bfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c02:	4b0c      	ldr	r3, [pc, #48]	@ (8007c34 <prvResetNextTaskUnblockTime+0x38>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d104      	bne.n	8007c16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007c38 <prvResetNextTaskUnblockTime+0x3c>)
 8007c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c14:	e008      	b.n	8007c28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c16:	4b07      	ldr	r3, [pc, #28]	@ (8007c34 <prvResetNextTaskUnblockTime+0x38>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	4a04      	ldr	r2, [pc, #16]	@ (8007c38 <prvResetNextTaskUnblockTime+0x3c>)
 8007c26:	6013      	str	r3, [r2, #0]
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr
 8007c34:	24004920 	.word	0x24004920
 8007c38:	24004988 	.word	0x24004988

08007c3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c42:	4b0b      	ldr	r3, [pc, #44]	@ (8007c70 <xTaskGetSchedulerState+0x34>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d102      	bne.n	8007c50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	607b      	str	r3, [r7, #4]
 8007c4e:	e008      	b.n	8007c62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c50:	4b08      	ldr	r3, [pc, #32]	@ (8007c74 <xTaskGetSchedulerState+0x38>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d102      	bne.n	8007c5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c58:	2302      	movs	r3, #2
 8007c5a:	607b      	str	r3, [r7, #4]
 8007c5c:	e001      	b.n	8007c62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c62:	687b      	ldr	r3, [r7, #4]
	}
 8007c64:	4618      	mov	r0, r3
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr
 8007c70:	24004974 	.word	0x24004974
 8007c74:	24004990 	.word	0x24004990

08007c78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b086      	sub	sp, #24
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c84:	2300      	movs	r3, #0
 8007c86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d058      	beq.n	8007d40 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c8e:	4b2f      	ldr	r3, [pc, #188]	@ (8007d4c <xTaskPriorityDisinherit+0xd4>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	693a      	ldr	r2, [r7, #16]
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d00b      	beq.n	8007cb0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	60fb      	str	r3, [r7, #12]
}
 8007caa:	bf00      	nop
 8007cac:	bf00      	nop
 8007cae:	e7fd      	b.n	8007cac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d10b      	bne.n	8007cd0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cbc:	f383 8811 	msr	BASEPRI, r3
 8007cc0:	f3bf 8f6f 	isb	sy
 8007cc4:	f3bf 8f4f 	dsb	sy
 8007cc8:	60bb      	str	r3, [r7, #8]
}
 8007cca:	bf00      	nop
 8007ccc:	bf00      	nop
 8007cce:	e7fd      	b.n	8007ccc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cd4:	1e5a      	subs	r2, r3, #1
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d02c      	beq.n	8007d40 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d128      	bne.n	8007d40 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	3304      	adds	r3, #4
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fe f9c4 	bl	8006080 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d10:	4b0f      	ldr	r3, [pc, #60]	@ (8007d50 <xTaskPriorityDisinherit+0xd8>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d903      	bls.n	8007d20 <xTaskPriorityDisinherit+0xa8>
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1c:	4a0c      	ldr	r2, [pc, #48]	@ (8007d50 <xTaskPriorityDisinherit+0xd8>)
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d24:	4613      	mov	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4a09      	ldr	r2, [pc, #36]	@ (8007d54 <xTaskPriorityDisinherit+0xdc>)
 8007d2e:	441a      	add	r2, r3
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	3304      	adds	r3, #4
 8007d34:	4619      	mov	r1, r3
 8007d36:	4610      	mov	r0, r2
 8007d38:	f7fe f945 	bl	8005fc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d3c:	2301      	movs	r3, #1
 8007d3e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d40:	697b      	ldr	r3, [r7, #20]
	}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3718      	adds	r7, #24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	24004494 	.word	0x24004494
 8007d50:	24004970 	.word	0x24004970
 8007d54:	24004498 	.word	0x24004498

08007d58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d62:	4b21      	ldr	r3, [pc, #132]	@ (8007de8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d68:	4b20      	ldr	r3, [pc, #128]	@ (8007dec <prvAddCurrentTaskToDelayedList+0x94>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fe f986 	bl	8006080 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d7a:	d10a      	bne.n	8007d92 <prvAddCurrentTaskToDelayedList+0x3a>
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d007      	beq.n	8007d92 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d82:	4b1a      	ldr	r3, [pc, #104]	@ (8007dec <prvAddCurrentTaskToDelayedList+0x94>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3304      	adds	r3, #4
 8007d88:	4619      	mov	r1, r3
 8007d8a:	4819      	ldr	r0, [pc, #100]	@ (8007df0 <prvAddCurrentTaskToDelayedList+0x98>)
 8007d8c:	f7fe f91b 	bl	8005fc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d90:	e026      	b.n	8007de0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	4413      	add	r3, r2
 8007d98:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d9a:	4b14      	ldr	r3, [pc, #80]	@ (8007dec <prvAddCurrentTaskToDelayedList+0x94>)
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d209      	bcs.n	8007dbe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007daa:	4b12      	ldr	r3, [pc, #72]	@ (8007df4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	4b0f      	ldr	r3, [pc, #60]	@ (8007dec <prvAddCurrentTaskToDelayedList+0x94>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3304      	adds	r3, #4
 8007db4:	4619      	mov	r1, r3
 8007db6:	4610      	mov	r0, r2
 8007db8:	f7fe f929 	bl	800600e <vListInsert>
}
 8007dbc:	e010      	b.n	8007de0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8007df8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8007dec <prvAddCurrentTaskToDelayedList+0x94>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	4619      	mov	r1, r3
 8007dca:	4610      	mov	r0, r2
 8007dcc:	f7fe f91f 	bl	800600e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8007dfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	429a      	cmp	r2, r3
 8007dd8:	d202      	bcs.n	8007de0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007dda:	4a08      	ldr	r2, [pc, #32]	@ (8007dfc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	6013      	str	r3, [r2, #0]
}
 8007de0:	bf00      	nop
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	2400496c 	.word	0x2400496c
 8007dec:	24004494 	.word	0x24004494
 8007df0:	24004954 	.word	0x24004954
 8007df4:	24004924 	.word	0x24004924
 8007df8:	24004920 	.word	0x24004920
 8007dfc:	24004988 	.word	0x24004988

08007e00 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b08a      	sub	sp, #40	@ 0x28
 8007e04:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e06:	2300      	movs	r3, #0
 8007e08:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e0a:	f000 fb13 	bl	8008434 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e0e:	4b1d      	ldr	r3, [pc, #116]	@ (8007e84 <xTimerCreateTimerTask+0x84>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d021      	beq.n	8007e5a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e16:	2300      	movs	r3, #0
 8007e18:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e1e:	1d3a      	adds	r2, r7, #4
 8007e20:	f107 0108 	add.w	r1, r7, #8
 8007e24:	f107 030c 	add.w	r3, r7, #12
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7fd fe97 	bl	8005b5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	68fa      	ldr	r2, [r7, #12]
 8007e34:	9202      	str	r2, [sp, #8]
 8007e36:	9301      	str	r3, [sp, #4]
 8007e38:	2302      	movs	r3, #2
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	460a      	mov	r2, r1
 8007e40:	4911      	ldr	r1, [pc, #68]	@ (8007e88 <xTimerCreateTimerTask+0x88>)
 8007e42:	4812      	ldr	r0, [pc, #72]	@ (8007e8c <xTimerCreateTimerTask+0x8c>)
 8007e44:	f7ff f8d0 	bl	8006fe8 <xTaskCreateStatic>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	4a11      	ldr	r2, [pc, #68]	@ (8007e90 <xTimerCreateTimerTask+0x90>)
 8007e4c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e4e:	4b10      	ldr	r3, [pc, #64]	@ (8007e90 <xTimerCreateTimerTask+0x90>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e56:	2301      	movs	r3, #1
 8007e58:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10b      	bne.n	8007e78 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e64:	f383 8811 	msr	BASEPRI, r3
 8007e68:	f3bf 8f6f 	isb	sy
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	613b      	str	r3, [r7, #16]
}
 8007e72:	bf00      	nop
 8007e74:	bf00      	nop
 8007e76:	e7fd      	b.n	8007e74 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e78:	697b      	ldr	r3, [r7, #20]
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3718      	adds	r7, #24
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}
 8007e82:	bf00      	nop
 8007e84:	240049c4 	.word	0x240049c4
 8007e88:	08008594 	.word	0x08008594
 8007e8c:	08007fcd 	.word	0x08007fcd
 8007e90:	240049c8 	.word	0x240049c8

08007e94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b08a      	sub	sp, #40	@ 0x28
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	60f8      	str	r0, [r7, #12]
 8007e9c:	60b9      	str	r1, [r7, #8]
 8007e9e:	607a      	str	r2, [r7, #4]
 8007ea0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10b      	bne.n	8007ec4 <xTimerGenericCommand+0x30>
	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	623b      	str	r3, [r7, #32]
}
 8007ebe:	bf00      	nop
 8007ec0:	bf00      	nop
 8007ec2:	e7fd      	b.n	8007ec0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007ec4:	4b19      	ldr	r3, [pc, #100]	@ (8007f2c <xTimerGenericCommand+0x98>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d02a      	beq.n	8007f22 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	2b05      	cmp	r3, #5
 8007edc:	dc18      	bgt.n	8007f10 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ede:	f7ff fead 	bl	8007c3c <xTaskGetSchedulerState>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d109      	bne.n	8007efc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ee8:	4b10      	ldr	r3, [pc, #64]	@ (8007f2c <xTimerGenericCommand+0x98>)
 8007eea:	6818      	ldr	r0, [r3, #0]
 8007eec:	f107 0110 	add.w	r1, r7, #16
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ef4:	f7fe fc88 	bl	8006808 <xQueueGenericSend>
 8007ef8:	6278      	str	r0, [r7, #36]	@ 0x24
 8007efa:	e012      	b.n	8007f22 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007efc:	4b0b      	ldr	r3, [pc, #44]	@ (8007f2c <xTimerGenericCommand+0x98>)
 8007efe:	6818      	ldr	r0, [r3, #0]
 8007f00:	f107 0110 	add.w	r1, r7, #16
 8007f04:	2300      	movs	r3, #0
 8007f06:	2200      	movs	r2, #0
 8007f08:	f7fe fc7e 	bl	8006808 <xQueueGenericSend>
 8007f0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007f0e:	e008      	b.n	8007f22 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007f10:	4b06      	ldr	r3, [pc, #24]	@ (8007f2c <xTimerGenericCommand+0x98>)
 8007f12:	6818      	ldr	r0, [r3, #0]
 8007f14:	f107 0110 	add.w	r1, r7, #16
 8007f18:	2300      	movs	r3, #0
 8007f1a:	683a      	ldr	r2, [r7, #0]
 8007f1c:	f7fe fd76 	bl	8006a0c <xQueueGenericSendFromISR>
 8007f20:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3728      	adds	r7, #40	@ 0x28
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	240049c4 	.word	0x240049c4

08007f30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b088      	sub	sp, #32
 8007f34:	af02      	add	r7, sp, #8
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f3a:	4b23      	ldr	r3, [pc, #140]	@ (8007fc8 <prvProcessExpiredTimer+0x98>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	3304      	adds	r3, #4
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fe f899 	bl	8006080 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f54:	f003 0304 	and.w	r3, r3, #4
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d023      	beq.n	8007fa4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	699a      	ldr	r2, [r3, #24]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	18d1      	adds	r1, r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	683a      	ldr	r2, [r7, #0]
 8007f68:	6978      	ldr	r0, [r7, #20]
 8007f6a:	f000 f8d5 	bl	8008118 <prvInsertTimerInActiveList>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d020      	beq.n	8007fb6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f74:	2300      	movs	r3, #0
 8007f76:	9300      	str	r3, [sp, #0]
 8007f78:	2300      	movs	r3, #0
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	2100      	movs	r1, #0
 8007f7e:	6978      	ldr	r0, [r7, #20]
 8007f80:	f7ff ff88 	bl	8007e94 <xTimerGenericCommand>
 8007f84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d114      	bne.n	8007fb6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f90:	f383 8811 	msr	BASEPRI, r3
 8007f94:	f3bf 8f6f 	isb	sy
 8007f98:	f3bf 8f4f 	dsb	sy
 8007f9c:	60fb      	str	r3, [r7, #12]
}
 8007f9e:	bf00      	nop
 8007fa0:	bf00      	nop
 8007fa2:	e7fd      	b.n	8007fa0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007faa:	f023 0301 	bic.w	r3, r3, #1
 8007fae:	b2da      	uxtb	r2, r3
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	6a1b      	ldr	r3, [r3, #32]
 8007fba:	6978      	ldr	r0, [r7, #20]
 8007fbc:	4798      	blx	r3
}
 8007fbe:	bf00      	nop
 8007fc0:	3718      	adds	r7, #24
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	240049bc 	.word	0x240049bc

08007fcc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fd4:	f107 0308 	add.w	r3, r7, #8
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f000 f859 	bl	8008090 <prvGetNextExpireTime>
 8007fde:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	68f8      	ldr	r0, [r7, #12]
 8007fe6:	f000 f805 	bl	8007ff4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007fea:	f000 f8d7 	bl	800819c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007fee:	bf00      	nop
 8007ff0:	e7f0      	b.n	8007fd4 <prvTimerTask+0x8>
	...

08007ff4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007ffe:	f7ff fa37 	bl	8007470 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008002:	f107 0308 	add.w	r3, r7, #8
 8008006:	4618      	mov	r0, r3
 8008008:	f000 f866 	bl	80080d8 <prvSampleTimeNow>
 800800c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d130      	bne.n	8008076 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10a      	bne.n	8008030 <prvProcessTimerOrBlockTask+0x3c>
 800801a:	687a      	ldr	r2, [r7, #4]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	429a      	cmp	r2, r3
 8008020:	d806      	bhi.n	8008030 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008022:	f7ff fa33 	bl	800748c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008026:	68f9      	ldr	r1, [r7, #12]
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7ff ff81 	bl	8007f30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800802e:	e024      	b.n	800807a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d008      	beq.n	8008048 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008036:	4b13      	ldr	r3, [pc, #76]	@ (8008084 <prvProcessTimerOrBlockTask+0x90>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d101      	bne.n	8008044 <prvProcessTimerOrBlockTask+0x50>
 8008040:	2301      	movs	r3, #1
 8008042:	e000      	b.n	8008046 <prvProcessTimerOrBlockTask+0x52>
 8008044:	2300      	movs	r3, #0
 8008046:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008048:	4b0f      	ldr	r3, [pc, #60]	@ (8008088 <prvProcessTimerOrBlockTask+0x94>)
 800804a:	6818      	ldr	r0, [r3, #0]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	4619      	mov	r1, r3
 8008056:	f7fe ff93 	bl	8006f80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800805a:	f7ff fa17 	bl	800748c <xTaskResumeAll>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10a      	bne.n	800807a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008064:	4b09      	ldr	r3, [pc, #36]	@ (800808c <prvProcessTimerOrBlockTask+0x98>)
 8008066:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	f3bf 8f4f 	dsb	sy
 8008070:	f3bf 8f6f 	isb	sy
}
 8008074:	e001      	b.n	800807a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008076:	f7ff fa09 	bl	800748c <xTaskResumeAll>
}
 800807a:	bf00      	nop
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	240049c0 	.word	0x240049c0
 8008088:	240049c4 	.word	0x240049c4
 800808c:	e000ed04 	.word	0xe000ed04

08008090 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008098:	4b0e      	ldr	r3, [pc, #56]	@ (80080d4 <prvGetNextExpireTime+0x44>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <prvGetNextExpireTime+0x16>
 80080a2:	2201      	movs	r2, #1
 80080a4:	e000      	b.n	80080a8 <prvGetNextExpireTime+0x18>
 80080a6:	2200      	movs	r2, #0
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d105      	bne.n	80080c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080b4:	4b07      	ldr	r3, [pc, #28]	@ (80080d4 <prvGetNextExpireTime+0x44>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68db      	ldr	r3, [r3, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	60fb      	str	r3, [r7, #12]
 80080be:	e001      	b.n	80080c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80080c0:	2300      	movs	r3, #0
 80080c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80080c4:	68fb      	ldr	r3, [r7, #12]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3714      	adds	r7, #20
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr
 80080d2:	bf00      	nop
 80080d4:	240049bc 	.word	0x240049bc

080080d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80080e0:	f7ff fa72 	bl	80075c8 <xTaskGetTickCount>
 80080e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80080e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008114 <prvSampleTimeNow+0x3c>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	68fa      	ldr	r2, [r7, #12]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d205      	bcs.n	80080fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80080f0:	f000 f93a 	bl	8008368 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	601a      	str	r2, [r3, #0]
 80080fa:	e002      	b.n	8008102 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2200      	movs	r2, #0
 8008100:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008102:	4a04      	ldr	r2, [pc, #16]	@ (8008114 <prvSampleTimeNow+0x3c>)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008108:	68fb      	ldr	r3, [r7, #12]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop
 8008114:	240049cc 	.word	0x240049cc

08008118 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008118:	b580      	push	{r7, lr}
 800811a:	b086      	sub	sp, #24
 800811c:	af00      	add	r7, sp, #0
 800811e:	60f8      	str	r0, [r7, #12]
 8008120:	60b9      	str	r1, [r7, #8]
 8008122:	607a      	str	r2, [r7, #4]
 8008124:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008126:	2300      	movs	r3, #0
 8008128:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008136:	68ba      	ldr	r2, [r7, #8]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	429a      	cmp	r2, r3
 800813c:	d812      	bhi.n	8008164 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	1ad2      	subs	r2, r2, r3
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	429a      	cmp	r2, r3
 800814a:	d302      	bcc.n	8008152 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800814c:	2301      	movs	r3, #1
 800814e:	617b      	str	r3, [r7, #20]
 8008150:	e01b      	b.n	800818a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008152:	4b10      	ldr	r3, [pc, #64]	@ (8008194 <prvInsertTimerInActiveList+0x7c>)
 8008154:	681a      	ldr	r2, [r3, #0]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	3304      	adds	r3, #4
 800815a:	4619      	mov	r1, r3
 800815c:	4610      	mov	r0, r2
 800815e:	f7fd ff56 	bl	800600e <vListInsert>
 8008162:	e012      	b.n	800818a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	429a      	cmp	r2, r3
 800816a:	d206      	bcs.n	800817a <prvInsertTimerInActiveList+0x62>
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	429a      	cmp	r2, r3
 8008172:	d302      	bcc.n	800817a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008174:	2301      	movs	r3, #1
 8008176:	617b      	str	r3, [r7, #20]
 8008178:	e007      	b.n	800818a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800817a:	4b07      	ldr	r3, [pc, #28]	@ (8008198 <prvInsertTimerInActiveList+0x80>)
 800817c:	681a      	ldr	r2, [r3, #0]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3304      	adds	r3, #4
 8008182:	4619      	mov	r1, r3
 8008184:	4610      	mov	r0, r2
 8008186:	f7fd ff42 	bl	800600e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800818a:	697b      	ldr	r3, [r7, #20]
}
 800818c:	4618      	mov	r0, r3
 800818e:	3718      	adds	r7, #24
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	240049c0 	.word	0x240049c0
 8008198:	240049bc 	.word	0x240049bc

0800819c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b08e      	sub	sp, #56	@ 0x38
 80081a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80081a2:	e0ce      	b.n	8008342 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	da19      	bge.n	80081de <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80081aa:	1d3b      	adds	r3, r7, #4
 80081ac:	3304      	adds	r3, #4
 80081ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80081b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d10b      	bne.n	80081ce <prvProcessReceivedCommands+0x32>
	__asm volatile
 80081b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ba:	f383 8811 	msr	BASEPRI, r3
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	61fb      	str	r3, [r7, #28]
}
 80081c8:	bf00      	nop
 80081ca:	bf00      	nop
 80081cc:	e7fd      	b.n	80081ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80081ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081d4:	6850      	ldr	r0, [r2, #4]
 80081d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081d8:	6892      	ldr	r2, [r2, #8]
 80081da:	4611      	mov	r1, r2
 80081dc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f2c0 80ae 	blt.w	8008342 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80081ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d004      	beq.n	80081fc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80081f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081f4:	3304      	adds	r3, #4
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fd ff42 	bl	8006080 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081fc:	463b      	mov	r3, r7
 80081fe:	4618      	mov	r0, r3
 8008200:	f7ff ff6a 	bl	80080d8 <prvSampleTimeNow>
 8008204:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2b09      	cmp	r3, #9
 800820a:	f200 8097 	bhi.w	800833c <prvProcessReceivedCommands+0x1a0>
 800820e:	a201      	add	r2, pc, #4	@ (adr r2, 8008214 <prvProcessReceivedCommands+0x78>)
 8008210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008214:	0800823d 	.word	0x0800823d
 8008218:	0800823d 	.word	0x0800823d
 800821c:	0800823d 	.word	0x0800823d
 8008220:	080082b3 	.word	0x080082b3
 8008224:	080082c7 	.word	0x080082c7
 8008228:	08008313 	.word	0x08008313
 800822c:	0800823d 	.word	0x0800823d
 8008230:	0800823d 	.word	0x0800823d
 8008234:	080082b3 	.word	0x080082b3
 8008238:	080082c7 	.word	0x080082c7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800823c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008242:	f043 0301 	orr.w	r3, r3, #1
 8008246:	b2da      	uxtb	r2, r3
 8008248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800824a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800824e:	68ba      	ldr	r2, [r7, #8]
 8008250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008252:	699b      	ldr	r3, [r3, #24]
 8008254:	18d1      	adds	r1, r2, r3
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800825a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800825c:	f7ff ff5c 	bl	8008118 <prvInsertTimerInActiveList>
 8008260:	4603      	mov	r3, r0
 8008262:	2b00      	cmp	r3, #0
 8008264:	d06c      	beq.n	8008340 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800826c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800826e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008270:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008274:	f003 0304 	and.w	r3, r3, #4
 8008278:	2b00      	cmp	r3, #0
 800827a:	d061      	beq.n	8008340 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800827c:	68ba      	ldr	r2, [r7, #8]
 800827e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	441a      	add	r2, r3
 8008284:	2300      	movs	r3, #0
 8008286:	9300      	str	r3, [sp, #0]
 8008288:	2300      	movs	r3, #0
 800828a:	2100      	movs	r1, #0
 800828c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800828e:	f7ff fe01 	bl	8007e94 <xTimerGenericCommand>
 8008292:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008294:	6a3b      	ldr	r3, [r7, #32]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d152      	bne.n	8008340 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	61bb      	str	r3, [r7, #24]
}
 80082ac:	bf00      	nop
 80082ae:	bf00      	nop
 80082b0:	e7fd      	b.n	80082ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80082b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082b8:	f023 0301 	bic.w	r3, r3, #1
 80082bc:	b2da      	uxtb	r2, r3
 80082be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80082c4:	e03d      	b.n	8008342 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80082c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80082cc:	f043 0301 	orr.w	r3, r3, #1
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80082d8:	68ba      	ldr	r2, [r7, #8]
 80082da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082dc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80082de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082e0:	699b      	ldr	r3, [r3, #24]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d10b      	bne.n	80082fe <prvProcessReceivedCommands+0x162>
	__asm volatile
 80082e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	617b      	str	r3, [r7, #20]
}
 80082f8:	bf00      	nop
 80082fa:	bf00      	nop
 80082fc:	e7fd      	b.n	80082fa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80082fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008300:	699a      	ldr	r2, [r3, #24]
 8008302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008304:	18d1      	adds	r1, r2, r3
 8008306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008308:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800830a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800830c:	f7ff ff04 	bl	8008118 <prvInsertTimerInActiveList>
					break;
 8008310:	e017      	b.n	8008342 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008314:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008318:	f003 0302 	and.w	r3, r3, #2
 800831c:	2b00      	cmp	r3, #0
 800831e:	d103      	bne.n	8008328 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008320:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008322:	f7fd fd03 	bl	8005d2c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008326:	e00c      	b.n	8008342 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800832e:	f023 0301 	bic.w	r3, r3, #1
 8008332:	b2da      	uxtb	r2, r3
 8008334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008336:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800833a:	e002      	b.n	8008342 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800833c:	bf00      	nop
 800833e:	e000      	b.n	8008342 <prvProcessReceivedCommands+0x1a6>
					break;
 8008340:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008342:	4b08      	ldr	r3, [pc, #32]	@ (8008364 <prvProcessReceivedCommands+0x1c8>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	1d39      	adds	r1, r7, #4
 8008348:	2200      	movs	r2, #0
 800834a:	4618      	mov	r0, r3
 800834c:	f7fe fbfc 	bl	8006b48 <xQueueReceive>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	f47f af26 	bne.w	80081a4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008358:	bf00      	nop
 800835a:	bf00      	nop
 800835c:	3730      	adds	r7, #48	@ 0x30
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	240049c4 	.word	0x240049c4

08008368 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b088      	sub	sp, #32
 800836c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800836e:	e049      	b.n	8008404 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008370:	4b2e      	ldr	r3, [pc, #184]	@ (800842c <prvSwitchTimerLists+0xc4>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	68db      	ldr	r3, [r3, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800837a:	4b2c      	ldr	r3, [pc, #176]	@ (800842c <prvSwitchTimerLists+0xc4>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	68db      	ldr	r3, [r3, #12]
 8008382:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	3304      	adds	r3, #4
 8008388:	4618      	mov	r0, r3
 800838a:	f7fd fe79 	bl	8006080 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800839c:	f003 0304 	and.w	r3, r3, #4
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d02f      	beq.n	8008404 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	699b      	ldr	r3, [r3, #24]
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	4413      	add	r3, r2
 80083ac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	693b      	ldr	r3, [r7, #16]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d90e      	bls.n	80083d4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	68ba      	ldr	r2, [r7, #8]
 80083ba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083c2:	4b1a      	ldr	r3, [pc, #104]	@ (800842c <prvSwitchTimerLists+0xc4>)
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	3304      	adds	r3, #4
 80083ca:	4619      	mov	r1, r3
 80083cc:	4610      	mov	r0, r2
 80083ce:	f7fd fe1e 	bl	800600e <vListInsert>
 80083d2:	e017      	b.n	8008404 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083d4:	2300      	movs	r3, #0
 80083d6:	9300      	str	r3, [sp, #0]
 80083d8:	2300      	movs	r3, #0
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	2100      	movs	r1, #0
 80083de:	68f8      	ldr	r0, [r7, #12]
 80083e0:	f7ff fd58 	bl	8007e94 <xTimerGenericCommand>
 80083e4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10b      	bne.n	8008404 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80083ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	603b      	str	r3, [r7, #0]
}
 80083fe:	bf00      	nop
 8008400:	bf00      	nop
 8008402:	e7fd      	b.n	8008400 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008404:	4b09      	ldr	r3, [pc, #36]	@ (800842c <prvSwitchTimerLists+0xc4>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1b0      	bne.n	8008370 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800840e:	4b07      	ldr	r3, [pc, #28]	@ (800842c <prvSwitchTimerLists+0xc4>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008414:	4b06      	ldr	r3, [pc, #24]	@ (8008430 <prvSwitchTimerLists+0xc8>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a04      	ldr	r2, [pc, #16]	@ (800842c <prvSwitchTimerLists+0xc4>)
 800841a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800841c:	4a04      	ldr	r2, [pc, #16]	@ (8008430 <prvSwitchTimerLists+0xc8>)
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	6013      	str	r3, [r2, #0]
}
 8008422:	bf00      	nop
 8008424:	3718      	adds	r7, #24
 8008426:	46bd      	mov	sp, r7
 8008428:	bd80      	pop	{r7, pc}
 800842a:	bf00      	nop
 800842c:	240049bc 	.word	0x240049bc
 8008430:	240049c0 	.word	0x240049c0

08008434 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b082      	sub	sp, #8
 8008438:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800843a:	f7fd ff7d 	bl	8006338 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800843e:	4b15      	ldr	r3, [pc, #84]	@ (8008494 <prvCheckForValidListAndQueue+0x60>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d120      	bne.n	8008488 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008446:	4814      	ldr	r0, [pc, #80]	@ (8008498 <prvCheckForValidListAndQueue+0x64>)
 8008448:	f7fd fd90 	bl	8005f6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800844c:	4813      	ldr	r0, [pc, #76]	@ (800849c <prvCheckForValidListAndQueue+0x68>)
 800844e:	f7fd fd8d 	bl	8005f6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008452:	4b13      	ldr	r3, [pc, #76]	@ (80084a0 <prvCheckForValidListAndQueue+0x6c>)
 8008454:	4a10      	ldr	r2, [pc, #64]	@ (8008498 <prvCheckForValidListAndQueue+0x64>)
 8008456:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008458:	4b12      	ldr	r3, [pc, #72]	@ (80084a4 <prvCheckForValidListAndQueue+0x70>)
 800845a:	4a10      	ldr	r2, [pc, #64]	@ (800849c <prvCheckForValidListAndQueue+0x68>)
 800845c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800845e:	2300      	movs	r3, #0
 8008460:	9300      	str	r3, [sp, #0]
 8008462:	4b11      	ldr	r3, [pc, #68]	@ (80084a8 <prvCheckForValidListAndQueue+0x74>)
 8008464:	4a11      	ldr	r2, [pc, #68]	@ (80084ac <prvCheckForValidListAndQueue+0x78>)
 8008466:	2110      	movs	r1, #16
 8008468:	200a      	movs	r0, #10
 800846a:	f7fe f8f1 	bl	8006650 <xQueueGenericCreateStatic>
 800846e:	4603      	mov	r3, r0
 8008470:	4a08      	ldr	r2, [pc, #32]	@ (8008494 <prvCheckForValidListAndQueue+0x60>)
 8008472:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008474:	4b07      	ldr	r3, [pc, #28]	@ (8008494 <prvCheckForValidListAndQueue+0x60>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d005      	beq.n	8008488 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800847c:	4b05      	ldr	r3, [pc, #20]	@ (8008494 <prvCheckForValidListAndQueue+0x60>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	490b      	ldr	r1, [pc, #44]	@ (80084b0 <prvCheckForValidListAndQueue+0x7c>)
 8008482:	4618      	mov	r0, r3
 8008484:	f7fe fd52 	bl	8006f2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008488:	f7fd ff88 	bl	800639c <vPortExitCritical>
}
 800848c:	bf00      	nop
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	240049c4 	.word	0x240049c4
 8008498:	24004994 	.word	0x24004994
 800849c:	240049a8 	.word	0x240049a8
 80084a0:	240049bc 	.word	0x240049bc
 80084a4:	240049c0 	.word	0x240049c0
 80084a8:	24004a70 	.word	0x24004a70
 80084ac:	240049d0 	.word	0x240049d0
 80084b0:	0800859c 	.word	0x0800859c

080084b4 <memset>:
 80084b4:	4402      	add	r2, r0
 80084b6:	4603      	mov	r3, r0
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d100      	bne.n	80084be <memset+0xa>
 80084bc:	4770      	bx	lr
 80084be:	f803 1b01 	strb.w	r1, [r3], #1
 80084c2:	e7f9      	b.n	80084b8 <memset+0x4>

080084c4 <__libc_init_array>:
 80084c4:	b570      	push	{r4, r5, r6, lr}
 80084c6:	4d0d      	ldr	r5, [pc, #52]	@ (80084fc <__libc_init_array+0x38>)
 80084c8:	4c0d      	ldr	r4, [pc, #52]	@ (8008500 <__libc_init_array+0x3c>)
 80084ca:	1b64      	subs	r4, r4, r5
 80084cc:	10a4      	asrs	r4, r4, #2
 80084ce:	2600      	movs	r6, #0
 80084d0:	42a6      	cmp	r6, r4
 80084d2:	d109      	bne.n	80084e8 <__libc_init_array+0x24>
 80084d4:	4d0b      	ldr	r5, [pc, #44]	@ (8008504 <__libc_init_array+0x40>)
 80084d6:	4c0c      	ldr	r4, [pc, #48]	@ (8008508 <__libc_init_array+0x44>)
 80084d8:	f000 f826 	bl	8008528 <_init>
 80084dc:	1b64      	subs	r4, r4, r5
 80084de:	10a4      	asrs	r4, r4, #2
 80084e0:	2600      	movs	r6, #0
 80084e2:	42a6      	cmp	r6, r4
 80084e4:	d105      	bne.n	80084f2 <__libc_init_array+0x2e>
 80084e6:	bd70      	pop	{r4, r5, r6, pc}
 80084e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ec:	4798      	blx	r3
 80084ee:	3601      	adds	r6, #1
 80084f0:	e7ee      	b.n	80084d0 <__libc_init_array+0xc>
 80084f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f6:	4798      	blx	r3
 80084f8:	3601      	adds	r6, #1
 80084fa:	e7f2      	b.n	80084e2 <__libc_init_array+0x1e>
 80084fc:	08008680 	.word	0x08008680
 8008500:	08008680 	.word	0x08008680
 8008504:	08008680 	.word	0x08008680
 8008508:	08008684 	.word	0x08008684

0800850c <memcpy>:
 800850c:	440a      	add	r2, r1
 800850e:	4291      	cmp	r1, r2
 8008510:	f100 33ff 	add.w	r3, r0, #4294967295
 8008514:	d100      	bne.n	8008518 <memcpy+0xc>
 8008516:	4770      	bx	lr
 8008518:	b510      	push	{r4, lr}
 800851a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800851e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008522:	4291      	cmp	r1, r2
 8008524:	d1f9      	bne.n	800851a <memcpy+0xe>
 8008526:	bd10      	pop	{r4, pc}

08008528 <_init>:
 8008528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800852a:	bf00      	nop
 800852c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852e:	bc08      	pop	{r3}
 8008530:	469e      	mov	lr, r3
 8008532:	4770      	bx	lr

08008534 <_fini>:
 8008534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008536:	bf00      	nop
 8008538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800853a:	bc08      	pop	{r3}
 800853c:	469e      	mov	lr, r3
 800853e:	4770      	bx	lr
